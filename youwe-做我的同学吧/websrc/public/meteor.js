
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Package-scope variables */
  var global, meteorEnv, Meteor;

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/meteor/global.js                                                                                           //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Export a reliable global object for all Meteor code.
    global = this;

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/meteor/client_environment.js                                                                               //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    var config = __meteor_runtime_config__;
    meteorEnv = config.meteorEnv;

    /**
     * @summary The Meteor namespace
     * @namespace Meteor
     */
    Meteor = {
      /**
       * @summary Boolean variable.  True if running in production environment.
       * @locus Anywhere
       * @static
       * @type {Boolean}
       */
      isProduction: meteorEnv.NODE_ENV === "production",

      /**
       * @summary Boolean variable.  True if running in development environment.
       * @locus Anywhere
       * @static
       * @type {Boolean}
       */
      isDevelopment: meteorEnv.NODE_ENV !== "production",

      /**
       * @summary Boolean variable.  True if running in client environment.
       * @locus Anywhere
       * @static
       * @type {Boolean}
       */
      isClient: true,

      /**
       * @summary Boolean variable.  True if running in server environment.
       * @locus Anywhere
       * @static
       * @type {Boolean}
       */
      isServer: false,

      /**
       * @summary Boolean variable.  True if running in Cordova environment.
       * @locus Anywhere
       * @static
       * @type {Boolean}
       */
      isCordova: false,

      /**
       * @summary Boolean variable. True if running in a "modern" JS
       *          environment, as determined by the `modern` package.
       * @locus Anywhere
       * @static
       * @type {Boolean}
       */
      isModern: config.isModern
    };

    if (config.gitCommitHash) {
      /**
       * @summary Hexadecimal Git commit hash, if the application is using Git
       *          for version control. Undefined otherwise.
       * @locus Anywhere
       * @static
       * @type {String}
       */
      Meteor.gitCommitHash = config.gitCommitHash;
    }

    if (config.PUBLIC_SETTINGS) {
      /**
       * @summary `Meteor.settings` contains deployment-specific configuration options. You can initialize settings by passing the `--settings` option (which takes the name of a file containing JSON data) to `meteor run` or `meteor deploy`. When running your server directly (e.g. from a bundle), you instead specify settings by putting the JSON directly into the `METEOR_SETTINGS` environment variable. If the settings object contains a key named `public`, then `Meteor.settings.public` will be available on the client as well as the server.  All other properties of `Meteor.settings` are only defined on the server.  You can rely on `Meteor.settings` and `Meteor.settings.public` being defined objects (not undefined) on both client and server even if there are no settings specified.  Changes to `Meteor.settings.public` at runtime will be picked up by new client connections.
       * @locus Anywhere
       * @type {Object}
       */
      Meteor.settings = {
        "public": config.PUBLIC_SETTINGS
      };
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/meteor/define-package.js                                                                                   //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    function PackageRegistry() {
      this._promiseInfoMap = Object.create(null);
    }

    var PRp = PackageRegistry.prototype;

    // Set global.Package[name] = pkg || {}. If additional arguments are
    // supplied, their keys will be copied into pkg if not already present.
    // This method is defined on the prototype of global.Package so that it
    // will not be included in Object.keys(Package).
    PRp._define = function definePackage(name, pkg) {
      pkg = pkg || {};

      var argc = arguments.length;
      for (var i = 2; i < argc; ++i) {
        var arg = arguments[i];
        for (var s in arg) {
          if (!(s in pkg)) {
            pkg[s] = arg[s];
          }
        }
      }

      this[name] = pkg;

      var info = this._promiseInfoMap[name];
      if (info) {
        info.resolve(pkg);
      }

      return pkg;
    };

    PRp._has = function has(name) {
      return Object.prototype.hasOwnProperty.call(this, name);
    };

    // Returns a Promise that will resolve to the exports of the named
    // package, or be rejected if the package is not installed.
    PRp._promise = function promise(name) {
      var self = this;
      var info = self._promiseInfoMap[name];

      if (!info) {
        info = self._promiseInfoMap[name] = {};
        info.promise = new Promise(function (resolve, reject) {
          info.resolve = resolve;
          if (self._has(name)) {
            resolve(self[name]);
          } else {
            Meteor.startup(function () {
              if (!self._has(name)) {
                reject(new Error("Package " + name + " not installed"));
              }
            });
          }
        });
      }

      return info.promise;
    };

    // Initialize the Package namespace used by all Meteor packages.
    global.Package = new PackageRegistry();

    if (typeof exports === "object") {
      // This code is also used by meteor/tools/isobuild/bundler.js.
      exports.PackageRegistry = PackageRegistry;
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/meteor/helpers.js                                                                                          //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    if (Meteor.isServer) var Future = Npm.require('fibers/future');

    if (typeof __meteor_runtime_config__ === 'object' && __meteor_runtime_config__.meteorRelease) {
      /**
       * @summary `Meteor.release` is a string containing the name of the [release](#meteorupdate) with which the project was built (for example, `"1.2.3"`). It is `undefined` if the project was built using a git checkout of Meteor.
       * @locus Anywhere
       * @type {String}
       */
      Meteor.release = __meteor_runtime_config__.meteorRelease;
    }

    // XXX find a better home for these? Ideally they would be _.get,
    // _.ensure, _.delete..

    // _get(a,b,c,d) returns a[b][c][d], or else undefined if a[b] or
    // a[b][c] doesn't exist.
    //
    Meteor._get = function (obj /*, arguments */) {
      for (var i = 1; i < arguments.length; i++) {
        if (!(arguments[i] in obj)) return undefined;
        obj = obj[arguments[i]];
      }
      return obj;
    };

    // _ensure(a,b,c,d) ensures that a[b][c][d] exists. If it does not,
    // it is created and set to {}. Either way, it is returned.
    //
    Meteor._ensure = function (obj /*, arguments */) {
      for (var i = 1; i < arguments.length; i++) {
        var key = arguments[i];
        if (!(key in obj)) obj[key] = {};
        obj = obj[key];
      }

      return obj;
    };

    // _delete(a, b, c, d) deletes a[b][c][d], then a[b][c] unless it
    // isn't empty, then a[b] unless it isn't empty.
    //
    Meteor._delete = function (obj /*, arguments */) {
      var stack = [obj];
      var leaf = true;
      for (var i = 1; i < arguments.length - 1; i++) {
        var key = arguments[i];
        if (!(key in obj)) {
          leaf = false;
          break;
        }
        obj = obj[key];
        if (typeof obj !== "object") break;
        stack.push(obj);
      }

      for (var i = stack.length - 1; i >= 0; i--) {
        var key = arguments[i + 1];

        if (leaf) leaf = false;else for (var other in stack[i][key]) return; // not empty -- we're done

        delete stack[i][key];
      }
    };

    // wrapAsync can wrap any function that takes some number of arguments that
    // can't be undefined, followed by some optional arguments, where the callback
    // is the last optional argument.
    // e.g. fs.readFile(pathname, [callback]),
    // fs.open(pathname, flags, [mode], [callback])
    // For maximum effectiveness and least confusion, wrapAsync should be used on
    // functions where the callback is the only argument of type Function.

    /**
     * @memberOf Meteor
     * @summary Wrap a function that takes a callback function as its final parameter.
     * The signature of the callback of the wrapped function should be `function(error, result){}`.
     * On the server, the wrapped function can be used either synchronously (without passing a callback) or asynchronously
     * (when a callback is passed). On the client, a callback is always required; errors will be logged if there is no callback.
     * If a callback is provided, the environment captured when the original function was called will be restored in the callback.
     * The parameters of the wrapped function must not contain any optional parameters or be undefined, as the callback function is expected to be the final, non-undefined parameter.
     * @locus Anywhere
     * @param {Function} func A function that takes a callback as its final parameter
     * @param {Object} [context] Optional `this` object against which the original function will be invoked
     */
    Meteor.wrapAsync = function (fn, context) {
      return function () /* arguments */{
        var self = context || this;
        var newArgs = Array.prototype.slice.call(arguments);
        var callback;

        for (var i = newArgs.length - 1; i >= 0; --i) {
          var arg = newArgs[i];
          var type = typeof arg;
          if (type !== "undefined") {
            if (type === "function") {
              callback = arg;
            }
            break;
          }
        }

        if (!callback) {
          if (Meteor.isClient) {
            callback = logErr;
          } else {
            var fut = new Future();
            callback = fut.resolver();
          }
          ++i; // Insert the callback just after arg.
        }

        newArgs[i] = Meteor.bindEnvironment(callback);
        var result = fn.apply(self, newArgs);
        return fut ? fut.wait() : result;
      };
    };

    // Sets child's prototype to a new object whose prototype is parent's
    // prototype. Used as:
    //   Meteor._inherits(ClassB, ClassA).
    //   _.extend(ClassB.prototype, { ... })
    // Inspired by CoffeeScript's `extend` and Google Closure's `goog.inherits`.
    var hasOwn = Object.prototype.hasOwnProperty;
    Meteor._inherits = function (Child, Parent) {
      // copy Parent static properties
      for (var key in Parent) {
        // make sure we only copy hasOwnProperty properties vs. prototype
        // properties
        if (hasOwn.call(Parent, key)) {
          Child[key] = Parent[key];
        }
      }

      // a middle member of prototype chain: takes the prototype from the Parent
      var Middle = function () {
        this.constructor = Child;
      };
      Middle.prototype = Parent.prototype;
      Child.prototype = new Middle();
      Child.__super__ = Parent.prototype;
      return Child;
    };

    var warnedAboutWrapAsync = false;

    /**
     * @deprecated in 0.9.3
     */
    Meteor._wrapAsync = function (fn, context) {
      if (!warnedAboutWrapAsync) {
        Meteor._debug("Meteor._wrapAsync has been renamed to Meteor.wrapAsync");
        warnedAboutWrapAsync = true;
      }
      return Meteor.wrapAsync.apply(Meteor, arguments);
    };

    function logErr(err) {
      if (err) {
        return Meteor._debug("Exception in callback of async function", err);
      }
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    var global = this;

    // IE 10, Node >= 9.1

    function useSetImmediate() {
      if (!global.setImmediate) return null;else {
        var setImmediate = function (fn) {
          global.setImmediate(fn);
        };
        setImmediate.implementation = 'setImmediate';
        return setImmediate;
      }
    }

    // Android 2.3.6, Chrome 26, Firefox 20, IE 8-9, iOS 5.1.1 Safari

    function usePostMessage() {
      // The test against `importScripts` prevents this implementation
      // from being installed inside a web worker, where
      // `global.postMessage` means something completely different and
      // can't be used for this purpose.

      if (!global.postMessage || global.importScripts) {
        return null;
      }

      // Avoid synchronous post message implementations.

      var postMessageIsAsynchronous = true;
      var oldOnMessage = global.onmessage;
      global.onmessage = function () {
        postMessageIsAsynchronous = false;
      };
      global.postMessage("", "*");
      global.onmessage = oldOnMessage;

      if (!postMessageIsAsynchronous) return null;

      var funcIndex = 0;
      var funcs = {};

      // Installs an event handler on `global` for the `message` event: see
      // * https://developer.mozilla.org/en/DOM/window.postMessage
      // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

      // XXX use Random.id() here?
      var MESSAGE_PREFIX = "Meteor._setImmediate." + Math.random() + '.';

      function isStringAndStartsWith(string, putativeStart) {
        return typeof string === "string" && string.substring(0, putativeStart.length) === putativeStart;
      }

      function onGlobalMessage(event) {
        // This will catch all incoming messages (even from other
        // windows!), so we need to try reasonably hard to avoid letting
        // anyone else trick us into firing off. We test the origin is
        // still this window, and that a (randomly generated)
        // unpredictable identifying prefix is present.
        if (event.source === global && isStringAndStartsWith(event.data, MESSAGE_PREFIX)) {
          var index = event.data.substring(MESSAGE_PREFIX.length);
          try {
            if (funcs[index]) funcs[index]();
          } finally {
            delete funcs[index];
          }
        }
      }

      if (global.addEventListener) {
        global.addEventListener("message", onGlobalMessage, false);
      } else {
        global.attachEvent("onmessage", onGlobalMessage);
      }

      var setImmediate = function (fn) {
        // Make `global` post a message to itself with the handle and
        // identifying prefix, thus asynchronously invoking our
        // onGlobalMessage listener above.
        ++funcIndex;
        funcs[funcIndex] = fn;
        global.postMessage(MESSAGE_PREFIX + funcIndex, "*");
      };
      setImmediate.implementation = 'postMessage';
      return setImmediate;
    }

    function useTimeout() {
      var setImmediate = function (fn) {
        global.setTimeout(fn, 0);
      };
      setImmediate.implementation = 'setTimeout';
      return setImmediate;
    }

    Meteor._setImmediate = useSetImmediate() || usePostMessage() || useTimeout();

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/meteor/timers.js                                                                                           //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    function withoutInvocation(f) {
      if (Package.ddp) {
        var DDP = Package.ddp.DDP;
        var CurrentInvocation = DDP._CurrentMethodInvocation ||
        // For backwards compatibility, as explained in this issue:
        // https://github.com/meteor/meteor/issues/8947
        DDP._CurrentInvocation;

        var invocation = CurrentInvocation.get();
        if (invocation && invocation.isSimulation) {
          throw new Error("Can't set timers inside simulations");
        }

        return function () {
          CurrentInvocation.withValue(null, f);
        };
      } else {
        return f;
      }
    }

    function bindAndCatch(context, f) {
      return Meteor.bindEnvironment(withoutInvocation(f), context);
    }

    // Meteor.setTimeout and Meteor.setInterval callbacks scheduled
    // inside a server method are not part of the method invocation and
    // should clear out the CurrentMethodInvocation environment variable.

    /**
     * @memberOf Meteor
     * @summary Call a function in the future after waiting for a specified delay.
     * @locus Anywhere
     * @param {Function} func The function to run
     * @param {Number} delay Number of milliseconds to wait before calling function
     */
    Meteor.setTimeout = function (f, duration) {
      return setTimeout(bindAndCatch("setTimeout callback", f), duration);
    };

    /**
     * @memberOf Meteor
     * @summary Call a function repeatedly, with a time delay between calls.
     * @locus Anywhere
     * @param {Function} func The function to run
     * @param {Number} delay Number of milliseconds to wait between each function call.
     */
    Meteor.setInterval = function (f, duration) {
      return setInterval(bindAndCatch("setInterval callback", f), duration);
    };

    /**
     * @memberOf Meteor
     * @summary Cancel a repeating function call scheduled by `Meteor.setInterval`.
     * @locus Anywhere
     * @param {Object} id The handle returned by `Meteor.setInterval`
     */
    Meteor.clearInterval = function (x) {
      return clearInterval(x);
    };

    /**
     * @memberOf Meteor
     * @summary Cancel a function call scheduled by `Meteor.setTimeout`.
     * @locus Anywhere
     * @param {Object} id The handle returned by `Meteor.setTimeout`
     */
    Meteor.clearTimeout = function (x) {
      return clearTimeout(x);
    };

    // XXX consider making this guarantee ordering of defer'd callbacks, like
    // Tracker.afterFlush or Node's nextTick (in practice). Then tests can do:
    //    callSomethingThatDefersSomeWork();
    //    Meteor.defer(expect(somethingThatValidatesThatTheWorkHappened));

    /**
     * @memberOf Meteor
     * @summary Defer execution of a function to run asynchronously in the background (similar to `Meteor.setTimeout(func, 0)`.
     * @locus Anywhere
     * @param {Function} func The function to run
     */
    Meteor.defer = function (f) {
      Meteor._setImmediate(bindAndCatch("defer callback", f));
    };

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/meteor/errors.js                                                                                           //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Makes an error subclass which properly contains a stack trace in most
    // environments. constructor can set fields on `this` (and should probably set
    // `message`, which is what gets displayed at the top of a stack trace).
    //
    Meteor.makeErrorType = function (name, constructor) {
      var errorClass = function () /*arguments*/{
        // Ensure we get a proper stack trace in most Javascript environments
        if (Error.captureStackTrace) {
          // V8 environments (Chrome and Node.js)
          Error.captureStackTrace(this, errorClass);
        } else {
          // Borrow the .stack property of a native Error object.
          this.stack = new Error().stack;
        }
        // Safari magically works.

        constructor.apply(this, arguments);

        this.errorType = name;
      };

      Meteor._inherits(errorClass, Error);

      return errorClass;
    };

    // This should probably be in the livedata package, but we don't want
    // to require you to use the livedata package to get it. Eventually we
    // should probably rename it to DDP.Error and put it back in the
    // 'livedata' package (which we should rename to 'ddp' also.)
    //
    // Note: The DDP server assumes that Meteor.Error EJSON-serializes as an object
    // containing 'error' and optionally 'reason' and 'details'.
    // The DDP client manually puts these into Meteor.Error objects. (We don't use
    // EJSON.addType here because the type is determined by location in the
    // protocol, not text on the wire.)

    /**
     * @summary This class represents a symbolic error thrown by a method.
     * @locus Anywhere
     * @class
     * @param {String} error A string code uniquely identifying this kind of error.
     * This string should be used by callers of the method to determine the
     * appropriate action to take, instead of attempting to parse the reason
     * or details fields. For example:
     *
     * ```
     * // on the server, pick a code unique to this error
     * // the reason field should be a useful debug message
     * throw new Meteor.Error("logged-out",
     *   "The user must be logged in to post a comment.");
     *
     * // on the client
     * Meteor.call("methodName", function (error) {
     *   // identify the error
     *   if (error && error.error === "logged-out") {
     *     // show a nice error message
     *     Session.set("errorMessage", "Please log in to post a comment.");
     *   }
     * });
     * ```
     *
     * For legacy reasons, some built-in Meteor functions such as `check` throw
     * errors with a number in this field.
     *
     * @param {String} [reason] Optional.  A short human-readable summary of the
     * error, like 'Not Found'.
     * @param {String} [details] Optional.  Additional information about the error,
     * like a textual stack trace.
     */
    Meteor.Error = Meteor.makeErrorType("Meteor.Error", function (error, reason, details) {
      var self = this;

      // Newer versions of DDP use this property to signify that an error
      // can be sent back and reconstructed on the calling client.
      self.isClientSafe = true;

      // String code uniquely identifying this kind of error.
      self.error = error;

      // Optional: A short human-readable summary of the error. Not
      // intended to be shown to end users, just developers. ("Not Found",
      // "Internal Server Error")
      self.reason = reason;

      // Optional: Additional information about the error, say for
      // debugging. It might be a (textual) stack trace if the server is
      // willing to provide one. The corresponding thing in HTTP would be
      // the body of a 404 or 500 response. (The difference is that we
      // never expect this to be shown to end users, only developers, so
      // it doesn't need to be pretty.)
      self.details = details;

      // This is what gets displayed at the top of a stack trace. Current
      // format is "[404]" (if no reason is set) or "File not found [404]"
      if (self.reason) self.message = self.reason + ' [' + self.error + ']';else self.message = '[' + self.error + ']';
    });

    // Meteor.Error is basically data and is sent over DDP, so you should be able to
    // properly EJSON-clone it. This is especially important because if a
    // Meteor.Error is thrown through a Future, the error, reason, and details
    // properties become non-enumerable so a standard Object clone won't preserve
    // them and they will be lost from DDP.
    Meteor.Error.prototype.clone = function () {
      var self = this;
      return new Meteor.Error(self.error, self.reason, self.details);
    };

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/meteor/fiber_stubs_client.js                                                                               //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // This file is a partial analogue to fiber_helpers.js, which allows the client
    // to use a queue too, and also to call noYieldsAllowed.

    // The client has no ability to yield, so noYieldsAllowed is a noop.
    //
    Meteor._noYieldsAllowed = function (f) {
      return f();
    };

    // An even simpler queue of tasks than the fiber-enabled one.  This one just
    // runs all the tasks when you call runTask or flush, synchronously.
    //
    Meteor._SynchronousQueue = function () {
      var self = this;
      self._tasks = [];
      self._running = false;
      self._runTimeout = null;
    };

    var SQp = Meteor._SynchronousQueue.prototype;

    SQp.runTask = function (task) {
      var self = this;
      if (!self.safeToRunTask()) throw new Error("Could not synchronously run a task from a running task");
      self._tasks.push(task);
      var tasks = self._tasks;
      self._tasks = [];
      self._running = true;

      if (self._runTimeout) {
        // Since we're going to drain the queue, we can forget about the timeout
        // which tries to run it.  (But if one of our tasks queues something else,
        // the timeout will be correctly re-created.)
        clearTimeout(self._runTimeout);
        self._runTimeout = null;
      }

      try {
        while (tasks.length > 0) {
          var t = tasks.shift();
          try {
            t();
          } catch (e) {
            if (tasks.length === 0) {
              // this was the last task, that is, the one we're calling runTask
              // for.
              throw e;
            }
            Meteor._debug("Exception in queued task", e);
          }
        }
      } finally {
        self._running = false;
      }
    };

    SQp.queueTask = function (task) {
      var self = this;
      self._tasks.push(task);
      // Intentionally not using Meteor.setTimeout, because it doesn't like runing
      // in stubs for now.
      if (!self._runTimeout) {
        self._runTimeout = setTimeout(function () {
          return self.flush.apply(self, arguments);
        }, 0);
      }
    };

    SQp.flush = function () {
      var self = this;
      self.runTask(function () {});
    };

    SQp.drain = function () {
      var self = this;
      if (!self.safeToRunTask()) {
        return;
      }
      while (self._tasks.length > 0) {
        self.flush();
      }
    };

    SQp.safeToRunTask = function () {
      var self = this;
      return !self._running;
    };

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/meteor/startup_client.js                                                                                   //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    var callbackQueue = [];
    var isLoadingCompleted = false;
    var isReady = false;

    // Keeps track of how many events to wait for in addition to loading completing,
    // before we're considered ready.
    var readyHoldsCount = 0;

    var holdReady = function () {
      readyHoldsCount++;
    };

    var releaseReadyHold = function () {
      readyHoldsCount--;
      maybeReady();
    };

    var maybeReady = function () {
      if (isReady || !isLoadingCompleted || readyHoldsCount > 0) return;

      isReady = true;

      // Run startup callbacks
      while (callbackQueue.length) callbackQueue.shift()();

      if (Meteor.isCordova) {
        // Notify the WebAppLocalServer plugin that startup was completed successfully,
        // so we can roll back faulty versions if this doesn't happen
        WebAppLocalServer.startupDidComplete();
      }
    };

    var loadingCompleted = function () {
      if (!isLoadingCompleted) {
        isLoadingCompleted = true;
        maybeReady();
      }
    };

    if (Meteor.isCordova) {
      holdReady();
      document.addEventListener('deviceready', releaseReadyHold, false);
    }

    if (document.readyState === 'complete' || document.readyState === 'loaded') {
      // Loading has completed,
      // but allow other scripts the opportunity to hold ready
      window.setTimeout(loadingCompleted);
    } else {
      // Attach event listeners to wait for loading to complete
      if (document.addEventListener) {
        document.addEventListener('DOMContentLoaded', loadingCompleted, false);
        window.addEventListener('load', loadingCompleted, false);
      } else {
        // Use IE event model for < IE9
        document.attachEvent('onreadystatechange', function () {
          if (document.readyState === "complete") {
            loadingCompleted();
          }
        });
        window.attachEvent('load', loadingCompleted);
      }
    }

    /**
     * @summary Run code when a client or a server starts.
     * @locus Anywhere
     * @param {Function} func A function to run on startup.
     */
    Meteor.startup = function (callback) {
      // Fix for < IE9, see http://javascript.nwbox.com/IEContentLoaded/
      var doScroll = !document.addEventListener && document.documentElement.doScroll;

      if (!doScroll || window !== top) {
        if (isReady) callback();else callbackQueue.push(callback);
      } else {
        try {
          doScroll('left');
        } catch (error) {
          setTimeout(function () {
            Meteor.startup(callback);
          }, 50);
          return;
        };
        callback();
      }
    };

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/meteor/debug.js                                                                                            //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    var suppress = 0;

    // replacement for console.log. This is a temporary API. We should
    // provide a real logging API soon (possibly just a polyfill for
    // console?)
    //
    // NOTE: this is used on the server to print the warning about
    // having autopublish enabled when you probably meant to turn it
    // off. it's not really the proper use of something called
    // _debug. the intent is for this message to go to the terminal and
    // be very visible. if you change _debug to go someplace else, etc,
    // please fix the autopublish code to do something reasonable.
    //
    Meteor._debug = function () /* arguments */{
      if (suppress) {
        suppress--;
        return;
      }
      if (typeof console !== 'undefined' && typeof console.log !== 'undefined') {
        if (arguments.length == 0) {
          // IE Companion breaks otherwise
          // IE10 PP4 requires at least one argument
          console.log('');
        } else {
          // IE doesn't have console.log.apply, it's not a real Object.
          // http://stackoverflow.com/questions/5538972/console-log-apply-not-working-in-ie9
          // http://patik.com/blog/complete-cross-browser-console-log/
          if (typeof console.log.apply === "function") {
            // Most browsers

            // Chrome and Safari only hyperlink URLs to source files in first argument of
            // console.log, so try to call it with one argument if possible.
            // Approach taken here: If all arguments are strings, join them on space.
            // See https://github.com/meteor/meteor/pull/732#issuecomment-13975991
            var allArgumentsOfTypeString = true;
            for (var i = 0; i < arguments.length; i++) if (typeof arguments[i] !== "string") allArgumentsOfTypeString = false;

            if (allArgumentsOfTypeString) console.log.apply(console, [Array.prototype.join.call(arguments, " ")]);else console.log.apply(console, arguments);
          } else if (typeof Function.prototype.bind === "function") {
            // IE9
            var log = Function.prototype.bind.call(console.log, console);
            log.apply(console, arguments);
          }
        }
      }
    };

    // Suppress the next 'count' Meteor._debug messsages. Use this to
    // stop tests from spamming the console.
    //
    Meteor._suppress_log = function (count) {
      suppress += count;
    };

    Meteor._suppressed_log_expected = function () {
      return suppress !== 0;
    };

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/meteor/string_utils.js                                                                                     //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Like Perl's quotemeta: quotes all regexp metacharacters.
    // Code taken from
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
    Meteor._escapeRegExp = function (string) {
      return String(string).replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    };

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/meteor/test_environment.js                                                                                 //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    var TEST_METADATA_STR;
    if (Meteor.isClient) {
      TEST_METADATA_STR = meteorEnv.TEST_METADATA;
    } else {
      TEST_METADATA_STR = process.env.TEST_METADATA;
    }

    var TEST_METADATA = JSON.parse(TEST_METADATA_STR || "{}");
    var testDriverPackageName = TEST_METADATA.driverPackage;

    // Note that if we are in test-packages mode neither of these will be set,
    // but we will have a test driver package
    Meteor.isTest = !!TEST_METADATA.isTest;
    Meteor.isAppTest = !!TEST_METADATA.isAppTest;
    Meteor.isPackageTest = !!testDriverPackageName && !Meteor.isTest && !Meteor.isAppTest;

    if (typeof testDriverPackageName === "string") {
      Meteor.startup(function () {
        var testDriverPackage = Package[testDriverPackageName];
        if (!testDriverPackage) {
          throw new Error("Can't find test driver package: " + testDriverPackageName);
        }

        // On the client, the test driver *must* define `runTests`
        if (Meteor.isClient) {
          if (typeof testDriverPackage.runTests !== "function") {
            throw new Error("Test driver package " + testDriverPackageName + " missing `runTests` export");
          }
          testDriverPackage.runTests();
        } else {
          // The server can optionally define `start`
          if (typeof testDriverPackage.start === "function") {
            testDriverPackage.start();
          }
        }
      });
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/meteor/dynamics_browser.js                                                                                 //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Simple implementation of dynamic scoping, for use in browsers

    var nextSlot = 0;
    var currentValues = [];

    Meteor.EnvironmentVariable = function () {
      this.slot = nextSlot++;
    };

    var EVp = Meteor.EnvironmentVariable.prototype;

    EVp.get = function () {
      return currentValues[this.slot];
    };

    EVp.getOrNullIfOutsideFiber = function () {
      return this.get();
    };

    EVp.withValue = function (value, func) {
      var saved = currentValues[this.slot];
      try {
        currentValues[this.slot] = value;
        var ret = func();
      } finally {
        currentValues[this.slot] = saved;
      }
      return ret;
    };

    Meteor.bindEnvironment = function (func, onException, _this) {
      // needed in order to be able to create closures inside func and
      // have the closed variables not change back to their original
      // values
      var boundValues = currentValues.slice();

      if (!onException || typeof onException === 'string') {
        var description = onException || "callback of async function";
        onException = function (error) {
          Meteor._debug("Exception in " + description + ":", error);
        };
      }

      return function () /* arguments */{
        var savedValues = currentValues;
        try {
          currentValues = boundValues;
          var ret = func.apply(_this, arguments);
        } catch (e) {
          // note: callback-hook currently relies on the fact that if onException
          // throws in the browser, the wrapped call throws.
          onException(e);
        } finally {
          currentValues = savedValues;
        }
        return ret;
      };
    };

    Meteor._nodeCodeMustBeInFiber = function () {
      // no-op on browser
    };

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/meteor/url_common.js                                                                                       //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    /**
     * @summary Generate an absolute URL pointing to the application. The server reads from the `ROOT_URL` environment variable to determine where it is running. This is taken care of automatically for apps deployed to Galaxy, but must be provided when using `meteor build`.
     * @locus Anywhere
     * @param {String} [path] A path to append to the root URL. Do not include a leading "`/`".
     * @param {Object} [options]
     * @param {Boolean} options.secure Create an HTTPS URL.
     * @param {Boolean} options.replaceLocalhost Replace localhost with 127.0.0.1. Useful for services that don't recognize localhost as a domain name.
     * @param {String} options.rootUrl Override the default ROOT_URL from the server environment. For example: "`http://foo.example.com`"
     */
    Meteor.absoluteUrl = function (path, options) {
      // path is optional
      if (!options && typeof path === 'object') {
        options = path;
        path = undefined;
      }
      // merge options with defaults
      options = Object.assign({}, Meteor.absoluteUrl.defaultOptions, options || {});

      var url = options.rootUrl;
      if (!url) throw new Error("Must pass options.rootUrl or set ROOT_URL in the server environment");

      if (!/^http[s]?:\/\//i.test(url)) // url starts with 'http://' or 'https://'
        url = 'http://' + url; // we will later fix to https if options.secure is set

      if (!url.endsWith("/")) {
        url += "/";
      }

      if (path) {
        // join url and path with a / separator
        while (path.startsWith("/")) {
          path = path.slice(1);
        }
        url += path;
      }

      // turn http to https if secure option is set, and we're not talking
      // to localhost.
      if (options.secure && /^http:/.test(url) && // url starts with 'http:'
      !/http:\/\/localhost[:\/]/.test(url) && // doesn't match localhost
      !/http:\/\/127\.0\.0\.1[:\/]/.test(url)) // or 127.0.0.1
        url = url.replace(/^http:/, 'https:');

      if (options.replaceLocalhost) url = url.replace(/^http:\/\/localhost([:\/].*)/, 'http://127.0.0.1$1');

      return url;
    };

    // allow later packages to override default options
    var defaultOptions = Meteor.absoluteUrl.defaultOptions = {};

    // available only in a browser environment
    var location = typeof window === "object" && window.location;

    if (typeof __meteor_runtime_config__ === "object" && __meteor_runtime_config__.ROOT_URL) {
      defaultOptions.rootUrl = __meteor_runtime_config__.ROOT_URL;
    } else if (location && location.protocol && location.host) {
      defaultOptions.rootUrl = location.protocol + "//" + location.host;
    }

    // Make absolute URLs use HTTPS by default if the current window.location
    // uses HTTPS. Since this is just a default, it can be overridden by
    // passing { secure: false } if necessary.
    if (location && location.protocol === "https:") {
      defaultOptions.secure = true;
    }

    Meteor._relativeToSiteRootUrl = function (link) {
      if (typeof __meteor_runtime_config__ === "object" && link.substr(0, 1) === "/") link = (__meteor_runtime_config__.ROOT_URL_PATH_PREFIX || "") + link;
      return link;
    };

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("meteor", {
    Meteor: Meteor,
    global: global,
    meteorEnv: meteorEnv
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("standard-minifier-js");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;

  /* Package-scope variables */
  var makeInstaller, meteorInstall;

  ///////////////////////////////////////////////////////////////////////////////
  //                                                                           //
  // packages/modules-runtime/.npm/package/node_modules/install/install.js     //
  // This file is in bare mode and is not in its own closure.                  //
  //                                                                           //
  ///////////////////////////////////////////////////////////////////////////////
  //
  makeInstaller = function (options) {

    options = options || {};

    // These file extensions will be appended to required module identifiers
    // if they do not exactly match an installed module.
    var defaultExtensions = options.extensions || [".js", ".json"];

    // If defined, the options.fallback function will be called when no
    // installed module is found for a required module identifier. Often
    // options.fallback will be implemented in terms of the native Node
    // require function, which has the ability to load binary modules.
    var fallback = options.fallback;

    // List of fields to look for in package.json files to determine the
    // main entry module of the package. The first field listed here whose
    // value is a string will be used to resolve the entry module.
    var mainFields = options.mainFields || (
    // If options.mainFields is absent and options.browser is truthy,
    // package resolution will prefer the "browser" field of package.json
    // files to the "main" field. Note that this only supports
    // string-valued "browser" fields for now, though in the future it
    // might make sense to support the object version, a la browserify.
    options.browser ? ["browser", "main"] : ["main"]);

    var hasOwn = {}.hasOwnProperty;
    function strictHasOwn(obj, key) {
      return isObject(obj) && isString(key) && hasOwn.call(obj, key);
    }

    // Cache for looking up File objects given absolute module identifiers.
    // Invariants:
    //   filesByModuleId[module.id] === fileAppendId(root, module.id)
    //   filesByModuleId[module.id].module === module
    var filesByModuleId = {};

    // The file object representing the root directory of the installed
    // module tree.
    var root = new File("/", new File("/.."));
    var rootRequire = makeRequire(root);

    // Merges the given tree of directories and module factory functions
    // into the tree of installed modules and returns a require function
    // that behaves as if called from a module in the root directory.
    function install(tree, options) {
      if (isObject(tree)) {
        fileMergeContents(root, tree, options);
      }
      return rootRequire;
    }

    // Replace this function to enable Module.prototype.prefetch.
    install.fetch = function (ids) {
      throw new Error("fetch not implemented");
    };

    // This constructor will be used to instantiate the module objects
    // passed to module factory functions (i.e. the third argument after
    // require and exports), and is exposed as install.Module in case the
    // caller of makeInstaller wishes to modify Module.prototype.
    function Module(id) {
      this.id = id;

      // The Node implementation of module.children unfortunately includes
      // only those child modules that were imported for the first time by
      // this parent module (i.e., child.parent === this).
      this.children = [];

      // This object is an install.js extension that includes all child
      // modules imported by this module, even if this module is not the
      // first to import them.
      this.childrenById = {};
    }

    // Used to keep module.prefetch promise resolutions well-ordered.
    var lastPrefetchPromise;

    // May be shared by multiple sequential calls to module.prefetch.
    // Initialized to {} only when necessary.
    var missing;

    Module.prototype.prefetch = function (id) {
      var _module = this;
      var parentFile = getOwn(filesByModuleId, _module.id);

      lastPrefetchPromise = lastPrefetchPromise || Promise.resolve();
      var previousPromise = lastPrefetchPromise;

      function walk(_module2) {
        var file = getOwn(filesByModuleId, _module2.id);
        if (fileIsDynamic(file) && !file.pending) {
          file.pending = true;
          missing = missing || {};

          // These are the data that will be exposed to the install.fetch
          // callback, so it's worth documenting each item with a comment.
          missing[_module2.id] = {
            // The CommonJS module object that will be exposed to this
            // dynamic module when it is evaluated. Note that install.fetch
            // could decide to populate module.exports directly, instead of
            // fetching anything. In that case, install.fetch should omit
            // this module from the tree that it produces.
            module: file.module,
            // List of module identifier strings imported by this module.
            // Note that the missing object already contains all available
            // dependencies (including transitive dependencies), so
            // install.fetch should not need to traverse these dependencies
            // in most cases; however, they may be useful for other reasons.
            // Though the strings are unique, note that two different
            // strings could resolve to the same module.
            deps: Object.keys(file.deps),
            // The options (if any) that were passed as the second argument
            // to the install(tree, options) function when this stub was
            // first registered. Typically contains options.extensions, but
            // could contain any information appropriate for the entire tree
            // as originally installed. These options will be automatically
            // inherited by the newly fetched modules, so install.fetch
            // should not need to modify them.
            options: file.options,
            // Any stub data included in the array notation from the
            // original entry for this dynamic module. Typically contains
            // "main" and/or "browser" fields for package.json files, and is
            // otherwise undefined.
            stub: file.stub
          };

          each(file.deps, function (parentId, id) {
            fileResolve(file, id);
          });

          each(_module2.childrenById, walk);
        }
      }

      return lastPrefetchPromise = new Promise(function (resolve) {
        var absChildId = _module.resolve(id);
        each(_module.childrenById, walk);
        resolve(absChildId);
      }).then(function (absChildId) {
        // Grab the current missing object and fetch its contents.
        var toBeFetched = missing;
        missing = null;

        function clearPending() {
          if (toBeFetched) {
            Object.keys(toBeFetched).forEach(function (id) {
              getOwn(filesByModuleId, id).pending = false;
            });
          }
        }

        return new Promise(function (resolve) {
          // The install.fetch function takes an object mapping missing
          // dynamic module identifiers to options objects, and should
          // return a Promise that resolves to a module tree that can be
          // installed. As an optimization, if there were no missing dynamic
          // modules, then we can skip calling install.fetch entirely.
          resolve(toBeFetched && install.fetch(toBeFetched));
        }).then(function (tree) {
          function both() {
            install(tree);
            clearPending();
            return absChildId;
          }

          // Although we want multiple install.fetch calls to run in
          // parallel, it is important that the promises returned by
          // module.prefetch are resolved in the same order as the original
          // calls to module.prefetch, because previous fetches may include
          // modules assumed to exist by more recent module.prefetch calls.
          // Whether previousPromise was resolved or rejected, carry on with
          // the installation regardless.
          return previousPromise.then(both, both);
        }, function (error) {
          // Fixes https://github.com/meteor/meteor/issues/10182.
          clearPending();
          throw error;
        });
      });
    };

    install.Module = Module;

    function getOwn(obj, key) {
      return strictHasOwn(obj, key) && obj[key];
    }

    function isObject(value) {
      return value !== null && typeof value === "object";
    }

    function isFunction(value) {
      return typeof value === "function";
    }

    function isString(value) {
      return typeof value === "string";
    }

    function makeMissingError(id) {
      return new Error("Cannot find module '" + id + "'");
    }

    Module.prototype.resolve = function (id) {
      var file = fileResolve(filesByModuleId[this.id], id);
      if (file) return file.module.id;
      var error = makeMissingError(id);
      if (fallback && isFunction(fallback.resolve)) {
        return fallback.resolve(id, this.id, error);
      }
      throw error;
    };

    Module.prototype.require = function require(id) {
      var result = fileResolve(filesByModuleId[this.id], id);
      if (result) {
        return fileEvaluate(result, this);
      }

      var error = makeMissingError(id);

      if (isFunction(fallback)) {
        return fallback(id, // The missing module identifier.
        this.id, // ID of the parent module.
        error // The error we would have thrown.
        );
      }

      throw error;
    };

    function makeRequire(file) {
      var _module3 = file.module;

      function _require(id) {
        return _module3.require(id);
      }

      _require.extensions = fileGetExtensions(file).slice(0);

      _require.resolve = function resolve(id) {
        return _module3.resolve(id);
      };

      return _require;
    }

    // File objects represent either directories or modules that have been
    // installed. When a `File` respresents a directory, its `.contents`
    // property is an object containing the names of the files (or
    // directories) that it contains. When a `File` represents a module, its
    // `.contents` property is a function that can be invoked with the
    // appropriate `(require, exports, module)` arguments to evaluate the
    // module. If the `.contents` property is a string, that string will be
    // resolved as a module identifier, and the exports of the resulting
    // module will provide the exports of the original file. The `.parent`
    // property of a File is either a directory `File` or `null`. Note that
    // a child may claim another `File` as its parent even if the parent
    // does not have an entry for that child in its `.contents` object.
    // This is important for implementing anonymous files, and preventing
    // child modules from using `../relative/identifier` syntax to examine
    // unrelated modules.
    function File(moduleId, parent) {
      var file = this;

      // Link to the parent file.
      file.parent = parent = parent || null;

      // The module object for this File, which will eventually boast an
      // .exports property when/if the file is evaluated.
      file.module = new Module(moduleId);
      filesByModuleId[moduleId] = file;

      // The .contents of the file can be either (1) an object, if the file
      // represents a directory containing other files; (2) a factory
      // function, if the file represents a module that can be imported; (3)
      // a string, if the file is an alias for another file; or (4) null, if
      // the file's contents are not (yet) available.
      file.contents = null;

      // Set of module identifiers imported by this module. Note that this
      // set is not necessarily complete, so don't rely on it unless you
      // know what you're doing.
      file.deps = {};
    }

    function fileEvaluate(file, parentModule) {
      var _module4 = file.module;
      if (!strictHasOwn(_module4, "exports")) {
        var contents = file.contents;
        if (!contents) {
          // If this file was installed with array notation, and the array
          // contained one or more objects but no functions, then the combined
          // properties of the objects are treated as a temporary stub for
          // file.module.exports. This is particularly important for partial
          // package.json modules, so that the resolution logic can know the
          // value of the "main" and/or "browser" fields, at least, even if
          // the rest of the package.json file is not (yet) available.
          if (file.stub) {
            return file.stub;
          }

          throw makeMissingError(_module4.id);
        }

        if (parentModule) {
          _module4.parent = parentModule;
          var children = parentModule.children;
          if (Array.isArray(children)) {
            children.push(_module4);
          }
        }

        contents(makeRequire(file),
        // If the file had a .stub, reuse the same object for exports.
        _module4.exports = file.stub || {}, _module4, file.module.id, file.parent.module.id);

        _module4.loaded = true;
      }

      // The module.runModuleSetters method will be deprecated in favor of
      // just module.runSetters: https://github.com/benjamn/reify/pull/160
      var runSetters = _module4.runSetters || _module4.runModuleSetters;
      if (isFunction(runSetters)) {
        runSetters.call(_module4);
      }

      return _module4.exports;
    }

    function fileIsDirectory(file) {
      return file && isObject(file.contents);
    }

    function fileIsDynamic(file) {
      return file && file.contents === null;
    }

    function fileMergeContents(file, contents, options) {
      if (Array.isArray(contents)) {
        contents.forEach(function (item) {
          if (isString(item)) {
            file.deps[item] = file.module.id;
          } else if (isFunction(item)) {
            contents = item;
          } else if (isObject(item)) {
            file.stub = file.stub || {};
            each(item, function (value, key) {
              file.stub[key] = value;
            });
          }
        });

        if (!isFunction(contents)) {
          // If the array did not contain a function, merge nothing.
          contents = null;
        }
      } else if (!isFunction(contents) && !isString(contents) && !isObject(contents)) {
        // If contents is neither an array nor a function nor a string nor
        // an object, just give up and merge nothing.
        contents = null;
      }

      if (contents) {
        file.contents = file.contents || (isObject(contents) ? {} : contents);
        if (isObject(contents) && fileIsDirectory(file)) {
          each(contents, function (value, key) {
            if (key === "..") {
              child = file.parent;
            } else {
              var child = getOwn(file.contents, key);

              if (!child) {
                child = file.contents[key] = new File(file.module.id.replace(/\/*$/, "/") + key, file);

                child.options = options;
              }
            }

            fileMergeContents(child, value, options);
          });
        }
      }
    }

    function each(obj, callback, context) {
      Object.keys(obj).forEach(function (key) {
        callback.call(this, obj[key], key);
      }, context);
    }

    function fileGetExtensions(file) {
      return file.options && file.options.extensions || defaultExtensions;
    }

    function fileAppendIdPart(file, part, extensions) {
      // Always append relative to a directory.
      while (file && !fileIsDirectory(file)) {
        file = file.parent;
      }

      if (!file || !part || part === ".") {
        return file;
      }

      if (part === "..") {
        return file.parent;
      }

      var exactChild = getOwn(file.contents, part);

      // Only consider multiple file extensions if this part is the last
      // part of a module identifier and not equal to `.` or `..`, and there
      // was no exact match or the exact match was a directory.
      if (extensions && (!exactChild || fileIsDirectory(exactChild))) {
        for (var e = 0; e < extensions.length; ++e) {
          var child = getOwn(file.contents, part + extensions[e]);
          if (child && !fileIsDirectory(child)) {
            return child;
          }
        }
      }

      return exactChild;
    }

    function fileAppendId(file, id, extensions) {
      var parts = id.split("/");

      // Use `Array.prototype.every` to terminate iteration early if
      // `fileAppendIdPart` returns a falsy value.
      parts.every(function (part, i) {
        return file = i < parts.length - 1 ? fileAppendIdPart(file, part) : fileAppendIdPart(file, part, extensions);
      });

      return file;
    }

    function recordChild(parentModule, childFile) {
      var childModule = childFile && childFile.module;
      if (parentModule && childModule) {
        parentModule.childrenById[childModule.id] = childModule;
      }
    }

    function fileResolve(file, id, parentModule, seenDirFiles) {
      var parentModule = parentModule || file.module;
      var extensions = fileGetExtensions(file);

      file =
      // Absolute module identifiers (i.e. those that begin with a `/`
      // character) are interpreted relative to the root directory, which
      // is a slight deviation from Node, which has access to the entire
      // file system.
      id.charAt(0) === "/" ? fileAppendId(root, id, extensions) :
      // Relative module identifiers are interpreted relative to the
      // current file, naturally.
      id.charAt(0) === "." ? fileAppendId(file, id, extensions) :
      // Top-level module identifiers are interpreted as referring to
      // packages in `node_modules` directories.
      nodeModulesLookup(file, id, extensions);

      // If the identifier resolves to a directory, we use the same logic as
      // Node to find an `index.js` or `package.json` file to evaluate.
      while (fileIsDirectory(file)) {
        seenDirFiles = seenDirFiles || [];

        // If the "main" field of a `package.json` file resolves to a
        // directory we've already considered, then we should not attempt to
        // read the same `package.json` file again. Using an array as a set
        // is acceptable here because the number of directories to consider
        // is rarely greater than 1 or 2. Also, using indexOf allows us to
        // store File objects instead of strings.
        if (seenDirFiles.indexOf(file) < 0) {
          seenDirFiles.push(file);

          var pkgJsonFile = fileAppendIdPart(file, "package.json");
          var pkg = pkgJsonFile && fileEvaluate(pkgJsonFile, parentModule);
          var mainFile,
              resolved = pkg && mainFields.some(function (name) {
            var main = pkg[name];
            if (isString(main)) {
              // The "main" field of package.json does not have to begin
              // with ./ to be considered relative, so first we try
              // simply appending it to the directory path before
              // falling back to a full fileResolve, which might return
              // a package from a node_modules directory.
              return mainFile = fileAppendId(file, main, extensions) || fileResolve(file, main, parentModule, seenDirFiles);
            }
          });

          if (resolved && mainFile) {
            file = mainFile;
            recordChild(parentModule, pkgJsonFile);
            // The fileAppendId call above may have returned a directory,
            // so continue the loop to make sure we resolve it to a
            // non-directory file.
            continue;
          }
        }

        // If we didn't find a `package.json` file, or it didn't have a
        // resolvable `.main` property, the only possibility left to
        // consider is that this directory contains an `index.js` module.
        // This assignment almost always terminates the while loop, because
        // there's very little chance `fileIsDirectory(file)` will be true
        // for `fileAppendIdPart(file, "index", extensions)`. However, in
        // principle it is remotely possible that a file called `index.js`
        // could be a directory instead of a file.
        file = fileAppendIdPart(file, "index", extensions);
      }

      if (file && isString(file.contents)) {
        file = fileResolve(file, file.contents, parentModule, seenDirFiles);
      }

      recordChild(parentModule, file);

      return file;
    };

    function nodeModulesLookup(file, id, extensions) {
      for (var resolved; file && !resolved; file = file.parent) {
        resolved = fileIsDirectory(file) && fileAppendId(file, "node_modules/" + id, extensions);
      }
      return resolved;
    }

    return install;
  };

  if (typeof exports === "object") {
    exports.makeInstaller = makeInstaller;
  }

  ///////////////////////////////////////////////////////////////////////////////


  (function () {

    ///////////////////////////////////////////////////////////////////////////////
    //                                                                           //
    // packages/modules-runtime/modern.js                                        //
    //                                                                           //
    ///////////////////////////////////////////////////////////////////////////////
    //
    meteorInstall = makeInstaller({
      // On the client, make package resolution prefer the "browser" field of
      // package.json over the "module" field over the "main" field.
      browser: true,
      mainFields: ["browser", "module", "main"],

      fallback: function (id, parentId, error) {
        if (id && id.startsWith('meteor/')) {
          var packageName = id.split('/', 2)[1];
          throw new Error('Cannot find package "' + packageName + '". ' + 'Try "meteor add ' + packageName + '".');
        }

        throw error;
      }
    });

    ///////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ///////////////////////////////////////////////////////////////////////////////
    //                                                                           //
    // packages/modules-runtime/profile.js                                       //
    //                                                                           //
    ///////////////////////////////////////////////////////////////////////////////
    //
    if (typeof Profile === "function" && process.env.METEOR_PROFILE) {
      var Mp = meteorInstall.Module.prototype;
      Mp.require = Profile(function (id) {
        return "require(" + JSON.stringify(id) + ")";
      }, Mp.require);
    }

    ///////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("modules-runtime", {
    meteorInstall: meteorInstall
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package['modules-runtime'].meteorInstall;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "modules": { "client.js": function _module(_require, _exports) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/modules/client.js                                                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require("./install-packages.js");
            _require("./stubs.js");
            _require("./process.js");
            _require("./reify.js");

            _exports.addStyles = _require("./css").addStyles;

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "css.js": function _module2(_require3, _exports3) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/modules/css.js                                                                                             //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var doc = document;
            var head = doc.getElementsByTagName("head").item(0);

            _exports3.addStyles = function (css) {
              var style = doc.createElement("style");

              style.setAttribute("type", "text/css");

              // https://msdn.microsoft.com/en-us/library/ms535871(v=vs.85).aspx
              var internetExplorerSheetObject = style.sheet || // Edge/IE11.
              style.styleSheet; // Older IEs.

              if (internetExplorerSheetObject) {
                internetExplorerSheetObject.cssText = css;
              } else {
                style.appendChild(doc.createTextNode(css));
              }

              return head.appendChild(style);
            };

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "install-packages.js": function module(_require4, _exports4, _module3) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/modules/install-packages.js                                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            function install(name, mainModule) {
              var meteorDir = {};

              // Given a package name <name>, install a stub module in the
              // /node_modules/meteor directory called <name>.js, so that
              // require.resolve("meteor/<name>") will always return
              // /node_modules/meteor/<name>.js instead of something like
              // /node_modules/meteor/<name>/index.js, in the rare but possible event
              // that the package contains a file called index.js (#6590).

              if (typeof mainModule === "string") {
                // Set up an alias from /node_modules/meteor/<package>.js to the main
                // module, e.g. meteor/<package>/index.js.
                meteorDir[name + ".js"] = mainModule;
              } else {
                // back compat with old Meteor packages
                meteorDir[name + ".js"] = function (r, e, _module4) {
                  _module4.exports = Package[name];
                };
              }

              meteorInstall({
                node_modules: {
                  meteor: meteorDir
                }
              });
            }

            // This file will be modified during computeJsOutputFilesMap to include
            // install(<name>) calls for every Meteor package.

            install("meteor");
            install("standard-minifier-js");
            install("modules-runtime");
            install("modules", "meteor/modules/client.js");
            install("es5-shim");
            install("modern-browsers");
            install("babel-compiler");
            install("react-fast-refresh");
            install("ecmascript");
            install("typescript");
            install("shell-server");
            install("ecmascript-runtime");
            install("babel-runtime", "meteor/babel-runtime/babel-runtime.js");
            install("promise", "meteor/promise/client.js");
            install("fetch", "meteor/fetch/modern.js");
            install("dynamic-import", "meteor/dynamic-import/client.js");
            install("ecmascript-runtime-client", "meteor/ecmascript-runtime-client/modern.js");
            install("webapp", "meteor/webapp/webapp_client.js");
            install("base64", "meteor/base64/base64.js");
            install("ejson", "meteor/ejson/ejson.js");
            install("diff-sequence", "meteor/diff-sequence/diff.js");
            install("geojson-utils", "meteor/geojson-utils/main.js");
            install("id-map", "meteor/id-map/id-map.js");
            install("random", "meteor/random/main_client.js");
            install("mongo-id", "meteor/mongo-id/id.js");
            install("ordered-dict", "meteor/ordered-dict/ordered_dict.js");
            install("tracker");
            install("minimongo", "meteor/minimongo/minimongo_client.js");
            install("check", "meteor/check/match.js");
            install("retry", "meteor/retry/retry.js");
            install("callback-hook", "meteor/callback-hook/hook.js");
            install("ddp-common");
            install("reload", "meteor/reload/reload.js");
            install("socket-stream-client", "meteor/socket-stream-client/browser.js");
            install("ddp-client", "meteor/ddp-client/client/client.js");
            install("ddp");
            install("ddp-server");
            install("allow-deny");
            install("mongo-dev-server");
            install("logging", "meteor/logging/logging.js");
            install("mongo");
            install("reactive-var");
            install("reywood:publish-composite");
            install("underscore");
            install("hacknlove:persistent-minimongo2");
            install("ddp-rate-limiter");
            install("localstorage");
            install("url", "meteor/url/modern.js");
            install("accounts-base", "meteor/accounts-base/client_main.js");
            install("sha");
            install("accounts-password");
            install("matb33:collection-hooks", "meteor/matb33:collection-hooks/client.js");
            install("reactive-dict", "meteor/reactive-dict/migration.js");
            install("session", "meteor/session/session.js");
            install("service-configuration");

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "process.js": function module(_require5, _exports5, _module5) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/modules/process.js                                                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            if (!global.process) {
              try {
                // The application can run `npm install process` to provide its own
                // process stub; otherwise this module will provide a partial stub.
                global.process = _require5("process");
              } catch (missing) {
                global.process = {};
              }
            }

            var proc = global.process;

            if (Meteor.isServer) {
              // Make require("process") work on the server in all versions of Node.
              meteorInstall({
                node_modules: {
                  "process.js": function (r, e, _module6) {
                    _module6.exports = proc;
                  }
                }
              });
            } else {
              proc.platform = "browser";
              proc.nextTick = proc.nextTick || Meteor._setImmediate;
            }

            if (typeof proc.env !== "object") {
              proc.env = {};
            }

            var hasOwn = Object.prototype.hasOwnProperty;
            for (var key in meteorEnv) {
              if (hasOwn.call(meteorEnv, key)) {
                proc.env[key] = meteorEnv[key];
              }
            }

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "reify.js": function module(_require6, _exports6, _module7) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/modules/reify.js                                                                                           //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require6("reify/lib/runtime").enable(_module7.constructor.prototype);

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "stubs.js": function _module8(_require7) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/modules/stubs.js                                                                                           //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var haveStubs = false;
            try {
              _require7.resolve("meteor-node-stubs");
              haveStubs = true;
            } catch (noStubs) {}

            if (haveStubs) {
              // When meteor-node-stubs is installed in the application's root
              // node_modules directory, requiring it here installs aliases for stubs
              // for all Node built-in modules, such as fs, util, and http.
              _require7("meteor-node-stubs");
            }

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "node_modules": { "reify": { "lib": { "runtime": { "index.js": function module(_require8, _exports7, _module9) {

                    // This module should be compatible with PhantomJS v1, just like the other files
                    // in reify/lib/runtime. Node 4+ features like const/let and arrow functions are
                    // not acceptable here, and importing any npm packages should be contemplated
                    // with extreme skepticism.

                    var utils = _require8("./utils.js");
                    var Entry = _require8("./entry.js");

                    // The exports.enable method can be used to enable the Reify runtime for
                    // specific module objects, or for Module.prototype (where implemented),
                    // to make the runtime available throughout the entire module system.
                    _exports7.enable = function (mod) {
                      if (mod.link !== moduleLink) {
                        mod.link = moduleLink;
                        mod["export"] = moduleExport;
                        mod.exportDefault = moduleExportDefault;
                        mod.exportAs = moduleExportAs;
                        mod.runSetters = runSetters;

                        // Legacy shorthand for mod.exportAs("*").
                        mod.makeNsSetter = moduleMakeNsSetter;

                        return true;
                      }

                      return false;
                    };

                    // Calling module.link(id, setters) resolves the given ID using
                    // module.resolve(id), which should return a canonical absolute module
                    // identifier string (like require.resolve); then creates an Entry object
                    // for the child module and evaluates its code (if this is the first time
                    // it has been imported) by calling module.require(id). Finally, the
                    // provided setter functions will be called with values exported by the
                    // module, possibly multiple times when/if those exported values change.
                    // The module.link name is intended to evoke the "liveness" of the
                    // exported bindings, since we are subscribing to all future exports of
                    // the child module, not just taking a snapshot of its current exports.
                    function moduleLink(id, setters, key) {
                      utils.setESModule(this.exports);
                      Entry.getOrCreate(this.id, this);

                      var absChildId = this.resolve(id);
                      var childEntry = Entry.getOrCreate(absChildId);

                      if (utils.isObject(setters)) {
                        childEntry.addSetters(this, setters, key);
                      }

                      var _exports8 = this.require(absChildId);

                      if (childEntry.module === null) {
                        childEntry.module = {
                          id: absChildId,
                          exports: _exports8
                        };
                      }

                      childEntry.runSetters();
                    }

                    // Register getter functions for local variables in the scope of an export
                    // statement. Pass true as the second argument to indicate that the getter
                    // functions always return the same values.
                    function moduleExport(getters, constant) {
                      utils.setESModule(this.exports);
                      var entry = Entry.getOrCreate(this.id, this);
                      entry.addGetters(getters, constant);
                      if (this.loaded) {
                        // If the module has already been evaluated, then we need to trigger
                        // another round of entry.runSetters calls, which begins by calling
                        // entry.runModuleGetters(module).
                        entry.runSetters();
                      }
                    }

                    // Register a getter function that always returns the given value.
                    function moduleExportDefault(value) {
                      return this["export"]({
                        "default": function () {
                          return value;
                        }
                      }, true);
                    }

                    // Returns a function suitable for passing as a setter callback to
                    // module.link. If name is an identifier, calling the function will set
                    // the export of that name to the given value. If the name is "*", all
                    // properties of the value object will be exported by name, except for
                    // "default" (use "*+" instead of "*" to include it). Why the "default"
                    // property is skipped: https://github.com/tc39/ecma262/issues/948
                    function moduleExportAs(name) {
                      var entry = this;
                      var includeDefault = name === "*+";
                      var setter = function (value) {
                        if (name === "*" || name === "*+") {
                          Object.keys(value).forEach(function (key) {
                            if (includeDefault || key !== "default") {
                              utils.copyKey(key, entry.exports, value);
                            }
                          });
                        } else {
                          entry.exports[name] = value;
                        }
                      };

                      if (name !== '*+' && name !== "*") {
                        setter.exportAs = name;
                      }

                      return setter;
                    }

                    // Platform-specific code should find a way to call this method whenever
                    // the module system is about to return module.exports from require. This
                    // might happen more than once per module, in case of dependency cycles,
                    // so we want Module.prototype.runSetters to run each time.
                    function runSetters(valueToPassThrough) {
                      Entry.getOrCreate(this.id, this).runSetters();

                      // Assignments to exported local variables get wrapped with calls to
                      // module.runSetters, so module.runSetters returns the
                      // valueToPassThrough parameter to allow the value of the original
                      // expression to pass through. For example,
                      //
                      //   export var a = 1;
                      //   console.log(a += 3);
                      //
                      // becomes
                      //
                      //   module.export("a", () => a);
                      //   var a = 1;
                      //   console.log(module.runSetters(a += 3));
                      //
                      // This ensures module.runSetters runs immediately after the assignment,
                      // and does not interfere with the larger computation.
                      return valueToPassThrough;
                    }

                    // Legacy helper that returns a function that takes a namespace object and
                    // copies the properties of the namespace to module.exports, excluding any
                    // "default" property (unless includeDefault is true), which is useful for
                    // implementing `export * from "module"`.
                    //
                    // Instead of using this helper like so:
                    //
                    //   module.link(id, { "*": module.makeNsSetter() });
                    //
                    // non-legacy code should simply use a string-valued setter:
                    //
                    //   module.link(id, { "*": "*" });
                    //
                    // or, to include the "default" property:
                    //
                    //   module.link(id, { "*": "*+" });
                    //
                    // This helper may be removed in a future version of Reify.
                    function moduleMakeNsSetter(includeDefault) {
                      return this.exportAs(includeDefault ? "*+" : "*");
                    }

                    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  }, "utils.js": function module(_require9, _exports9, _module10) {

                    // This module should be compatible with PhantomJS v1, just like the other files
                    // in reify/lib/runtime. Node 4+ features like const/let and arrow functions are
                    // not acceptable here, and importing any npm packages should be contemplated
                    // with extreme skepticism.

                    var useSetPrototypeOf = typeof Object.setPrototypeOf === "function";
                    var useSymbol = typeof Symbol === "function";

                    var esStrKey = "__esModule";
                    var esSymKey = useSymbol ? Symbol.for(esStrKey) : null;
                    var useToStringTag = useSymbol && typeof Symbol.toStringTag === "symbol";
                    var useGetOwnPropDesc = typeof Object.getOwnPropertyDescriptor === "function";
                    var hasOwn = Object.prototype.hasOwnProperty;

                    function copyKey(key, target, source) {
                      if (useGetOwnPropDesc) {
                        var desc = Object.getOwnPropertyDescriptor(source, key);
                        desc.configurable = true; // Allow redefinition.
                        Object.defineProperty(target, key, desc);
                      } else {
                        target[key] = source[key];
                      }
                    }

                    _exports9.copyKey = copyKey;

                    // Returns obj[key] unless that property is defined by a getter function,
                    // in which case the getter function is returned.
                    _exports9.valueOrGetter = function (obj, key) {
                      if (useGetOwnPropDesc && hasOwn.call(obj, key)) {
                        var desc = Object.getOwnPropertyDescriptor(obj, key);
                        if (typeof desc.get === "function") {
                          return desc.get;
                        }
                      }

                      return obj[key];
                    };

                    function getESModule(exported) {
                      if (isObjectLike(exported)) {
                        if (useSymbol && hasOwn.call(exported, esSymKey)) {
                          return !!exported[esSymKey];
                        }

                        if (hasOwn.call(exported, esStrKey)) {
                          return !!exported[esStrKey];
                        }
                      }

                      return false;
                    }

                    _exports9.getESModule = getESModule;

                    function setESModule(exported) {
                      if (isObjectLike(exported)) {
                        if (useSymbol) {
                          exported[esSymKey] = true;
                        }

                        if (!exported[esStrKey]) {
                          // Other module runtime systems may set exported.__esModule such
                          // that it can't be redefined, so we call Object.defineProperty only
                          // when exported.__esModule is not already true.
                          Object.defineProperty(exported, esStrKey, {
                            configurable: true,
                            enumerable: false,
                            value: true,
                            writable: false
                          });
                        }
                      }
                    }

                    _exports9.setESModule = setESModule;

                    function isObject(value) {
                      return typeof value === "object" && value !== null;
                    }

                    _exports9.isObject = isObject;

                    function isObjectLike(value) {
                      var type = typeof value;
                      return type === "function" || type === "object" && value !== null;
                    }

                    _exports9.isObjectLike = isObjectLike;

                    _exports9.ensureObjectProperty = function (object, propertyName) {
                      return hasOwn.call(object, propertyName) ? object[propertyName] : object[propertyName] = Object.create(null);
                    };

                    function createNamespace() {
                      var namespace = Object.create(null);

                      if (useToStringTag) {
                        Object.defineProperty(namespace, Symbol.toStringTag, {
                          value: "Module",
                          configurable: false,
                          enumerable: false,
                          writable: false
                        });
                      }

                      setESModule(namespace);

                      return namespace;
                    }

                    _exports9.createNamespace = createNamespace;

                    function setPrototypeOf(object, proto) {
                      if (useSetPrototypeOf) {
                        Object.setPrototypeOf(object, proto);
                      } else {
                        object.__proto__ = proto;
                      }
                      return object;
                    }

                    _exports9.setPrototypeOf = setPrototypeOf;

                    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  }, "entry.js": function module(_require10, _exports10, _module11) {

                    // This module should be compatible with PhantomJS v1, just like the other files
                    // in reify/lib/runtime. Node 4+ features like const/let and arrow functions are
                    // not acceptable here, and importing any npm packages should be contemplated
                    // with extreme skepticism.

                    var utils = _require10("./utils.js");

                    var GETTER_ERROR = {};
                    var NAN = {};
                    var UNDEFINED = {};
                    var hasOwn = Object.prototype.hasOwnProperty;
                    var keySalt = 0;

                    function Entry(id) {
                      // The canonical absolute module ID of the module this Entry manages.
                      this.id = id;

                      // The Module object this Entry manages, unknown until module.export or
                      // module.link is called for the first time.
                      this.module = null;

                      // The normalized namespace object that importers receive when they use
                      // `import * as namespace from "..."` syntax.
                      this.namespace = utils.createNamespace();

                      // Getters for local variables exported from the managed module.
                      this.getters = Object.create(null);

                      // Setters for assigning to local variables in parent modules.
                      this.setters = Object.create(null);

                      // Map of setters added since the last broadcast (in the same shape as
                      // entry.setters[name][key]), which should receive a broadcast the next time
                      // entry.runSetters() is called, regardless of whether entry.snapshots[name]
                      // has changed or not. Once called, setters are removed from this.newSetters,
                      // but remain in this.setters.
                      this.newSetters = Object.create(null);

                      // Map from local names to snapshots of the corresponding local values, used
                      // to determine when local values have changed and need to be re-broadcast.
                      this.snapshots = Object.create(null);
                    }

                    var Ep = utils.setPrototypeOf(Entry.prototype, null);
                    var entryMap = Object.create(null);

                    Entry.getOrCreate = function (id, mod) {
                      var entry = hasOwn.call(entryMap, id) ? entryMap[id] : entryMap[id] = new Entry(id);

                      if (utils.isObject(mod) && mod.id === entry.id) {
                        entry.module = mod;
                      }

                      return entry;
                    };

                    function safeKeys(obj) {
                      var keys = Object.keys(obj);
                      var esModuleIndex = keys.indexOf("__esModule");
                      if (esModuleIndex >= 0) {
                        keys.splice(esModuleIndex, 1);
                      }
                      return keys;
                    }

                    Ep.addGetters = function (getters, constant) {
                      var names = safeKeys(getters);
                      var nameCount = names.length;
                      constant = !!constant;

                      for (var i = 0; i < nameCount; ++i) {
                        var name = names[i];
                        var getter = getters[name];

                        if (typeof getter === "function" &&
                        // Should this throw if this.getters[name] exists?
                        !(name in this.getters)) {
                          this.getters[name] = getter;
                          getter.constant = constant;
                          getter.runCount = 0;
                        }
                      }
                    };

                    Ep.addSetters = function (parent, setters, key) {
                      var names = safeKeys(setters);
                      var nameCount = names.length;

                      if (!nameCount) {
                        return;
                      }

                      // If no key is provided, make a unique key. Otherwise, make sure the key is
                      // distinct from keys provided by other parent modules.
                      key = key === void 0 ? makeUniqueKey() : parent.id + ":" + key;

                      var entry = this;

                      for (var i = 0; i < nameCount; ++i) {
                        var name = names[i];
                        var setter = normalizeSetterValue(parent, setters[name]);

                        if (typeof setter === "function") {
                          setter.parent = parent;
                          // Store the setter as entry.setters[name][key], and also record it
                          // temporarily in entry.newSetters, so we can be sure to run it when we
                          // call entry.runSetters(names) below, even though entry.snapshots[name]
                          // likely will not have changed for this name.
                          utils.ensureObjectProperty(entry.setters, name)[key] = setter;
                          utils.ensureObjectProperty(entry.newSetters, name)[key] = setter;
                        }
                      }

                      entry.runSetters(names);
                    };

                    function normalizeSetterValue(_module12, setter) {
                      if (typeof setter === "function") {
                        return setter;
                      }

                      if (typeof setter === "string") {
                        // If the value of the setter property is a string, the setter will
                        // re-export the imported value using that string as the name of the
                        // exported value. If the string is "*", all properties of the value
                        // object will be re-exported as individual exports, except for the
                        // "default" property (use "*+" instead of "*" to include it).
                        return _module12.exportAs(setter);
                      }

                      if (Array.isArray(setter)) {
                        switch (setter.length) {
                          case 0:
                            return null;
                          case 1:
                            return normalizeSetterValue(_module12, setter[0]);
                          default:
                            var setterFns = setter.map(function (elem) {
                              return normalizeSetterValue(_module12, elem);
                            });

                            // Return a combined function that calls all of the nested setter
                            // functions with the same value.
                            return function (value) {
                              setterFns.forEach(function (fn) {
                                fn(value);
                              });
                            };
                        }
                      }

                      return null;
                    }

                    Ep.runGetters = function (names) {
                      // Before running getters, copy anything added to the exports object
                      // over to the namespace. Values returned by getters take precedence
                      // over these values, but we don't want to miss anything.
                      syncExportsToNamespace(this, names);

                      if (names === void 0 || names.indexOf("*") >= 0) {
                        names = Object.keys(this.getters);
                      }

                      var nameCount = names.length;

                      for (var i = 0; i < nameCount; ++i) {
                        var name = names[i];
                        var value = runGetter(this, name);

                        // If the getter is run without error, update both entry.namespace and
                        // module.exports with the current value so that CommonJS require
                        // calls remain consistent with module.watch.
                        if (value !== GETTER_ERROR) {
                          this.namespace[name] = value;
                          this.module.exports[name] = value;
                        }
                      }
                    };

                    function syncExportsToNamespace(entry, names) {
                      var setDefault = false;

                      if (entry.module === null) return;
                      var _exports11 = entry.module.exports;

                      if (!utils.getESModule(_exports11)) {
                        // If the module entry is managing overrides module.exports, that
                        // value should be exposed as the .default property of the namespace,
                        // unless module.exports is marked as an ECMASCript module.
                        entry.namespace.default = _exports11;
                        setDefault = true;
                      }

                      if (!utils.isObjectLike(_exports11)) {
                        return;
                      }

                      if (names === void 0 || names.indexOf("*") >= 0) {
                        names = Object.keys(_exports11);
                      }

                      names.forEach(function (key) {
                        // Don't set any properties for which a getter function exists in
                        // entry.getters, don't accidentally override entry.namespace.default,
                        // and only copy own properties from entry.module.exports.
                        if (!hasOwn.call(entry.getters, key) && !(setDefault && key === "default") && hasOwn.call(_exports11, key)) {
                          utils.copyKey(key, entry.namespace, _exports11);
                        }
                      });
                    }

                    // Called whenever module.exports might have changed, to trigger any
                    // setters associated with the newly exported values. The names parameter
                    // is optional; without it, all getters and setters will run.
                    // If the '*' setter needs to be run, but not the '*' getter (names includes
                    // all exports/getters that changed), the runNsSetter option can be enabled.
                    Ep.runSetters = function (names, runNsSetter) {
                      // Make sure entry.namespace and module.exports are up to date before we
                      // call getExportByName(entry, name).
                      this.runGetters(names);

                      if (runNsSetter && names !== void 0) {
                        names.push('*');
                      }

                      // Lazily-initialized object mapping parent module identifiers to parent
                      // module objects whose setters we might need to run.
                      var parents;
                      var parentNames;

                      forEachSetter(this, names, function (setter, name, value) {
                        if (parents === void 0) {
                          parents = Object.create(null);
                        }

                        if (parentNames === void 0) {
                          parentNames = Object.create(null);
                        }

                        var parentId = setter.parent.id;

                        // When setters use the shorthand for re-exporting values, we know
                        // which exports in the parent module were modified, and can do less work
                        // when running the parent setters.
                        // parentNames[parentId] is set to false if there are any setters that we do
                        // not know which exports they modify
                        if (setter.exportAs !== void 0 && parentNames[parentId] !== false) {
                          parentNames[parentId] = parentNames[parentId] || [];
                          parentNames[parentId].push(setter.exportAs);
                        } else if (parentNames[parentId] !== false) {
                          parentNames[parentId] = false;
                        }

                        parents[parentId] = setter.parent;

                        // The param order for setters is `value` then `name` because the `name`
                        // param is only used by namespace exports.
                        setter(value, name);
                      });

                      if (!parents) {
                        return;
                      }

                      // If any of the setters updated the module.exports of a parent module,
                      // or updated local variables that are exported by that parent module,
                      // then we must re-run any setters registered by that parent module.
                      var parentIDs = Object.keys(parents);
                      var parentIDCount = parentIDs.length;

                      for (var i = 0; i < parentIDCount; ++i) {
                        // What happens if parents[parentIDs[id]] === module, or if
                        // longer cycles exist in the parent chain? Thanks to our snapshot
                        // bookkeeping above, the runSetters broadcast will only proceed
                        // as far as there are any actual changes to report.
                        var parent = parents[parentIDs[i]];
                        var parentEntry = entryMap[parent.id];
                        if (parentEntry) {
                          parentEntry.runSetters(parentNames[parentIDs[i]] || void 0, !!parentNames[parentIDs[i]]);
                        }
                      }
                    };

                    function createSnapshot(entry, name, newValue) {
                      var newSnapshot = Object.create(null);
                      var newKeys = [];

                      if (name === "*") {
                        safeKeys(newValue).forEach(function (keyOfValue) {
                          // Evaluating value[key] is risky because the property might be
                          // defined by a getter function that logs a deprecation warning (or
                          // worse) when evaluated. For example, Node uses this trick to display
                          // a deprecation warning whenever crypto.createCredentials is
                          // accessed. Fortunately, when value[key] is defined by a getter
                          // function, it's enough to check whether the getter function itself
                          // has changed, since we are careful elsewhere to preserve getters
                          // rather than prematurely evaluating them.
                          newKeys.push(keyOfValue);
                          newSnapshot[keyOfValue] = normalizeSnapshotValue(utils.valueOrGetter(newValue, keyOfValue));
                        });
                      } else {
                        newKeys.push(name);
                        newSnapshot[name] = normalizeSnapshotValue(newValue);
                      }

                      var oldSnapshot = entry.snapshots[name];
                      if (oldSnapshot && newKeys.every(function (key) {
                        return oldSnapshot[key] === newSnapshot[key];
                      }) && newKeys.length === Object.keys(oldSnapshot).length) {
                        return oldSnapshot;
                      }

                      return newSnapshot;
                    }

                    function normalizeSnapshotValue(value) {
                      if (value === void 0) return UNDEFINED;
                      if (value !== value && isNaN(value)) return NAN;
                      return value;
                    }

                    // Obtain an array of keys in entry.setters[name] for which we need to run a
                    // setter function. If successful, entry.snapshot[name] will be updated and/or
                    // entry.newSetters[name] will be removed, so the returned keys will not be
                    // returned again until after the snapshot changes again. If the snapshot hasn't
                    // changed and there aren't any entry.newSetters[name] keys, this function
                    // returns undefined, to avoid allocating an empty array in the common case.
                    function consumeKeysGivenSnapshot(entry, name, snapshot) {
                      if (entry.snapshots[name] !== snapshot) {
                        entry.snapshots[name] = snapshot;
                        // Since the keys of entry.newSetters[name] are a subset of those of
                        // entry.setters[name], we can consume entry.newSetters[name] here too.
                        delete entry.newSetters[name];
                        return Object.keys(entry.setters[name]);
                      }

                      // If new setters have been added to entry.setters (and thus also to
                      // entry.newSetters) since we last recorded entry.snapshots[name], we need to
                      // run those setters (for the first time) in order to consider them up-to-date
                      // with respect to entry.snapshots[name].
                      var news = entry.newSetters[name];
                      var newKeys = news && Object.keys(news);
                      if (newKeys && newKeys.length) {
                        // Consume the new keys so we don't consider them again.
                        delete entry.newSetters[name];
                        return newKeys;
                      }
                    }

                    // Invoke the given callback once for every (setter, name, value) that needs to
                    // be called. Note that forEachSetter does not call any setters itself, only the
                    // given callback.
                    function forEachSetter(entry, names, callback) {
                      if (names === void 0) {
                        names = Object.keys(entry.setters);
                      }

                      names.forEach(function (name) {
                        // Ignore setters asking for module.exports.__esModule.
                        if (name === "__esModule") return;

                        var settersByKey = entry.setters[name];
                        if (!settersByKey) return;

                        var getter = entry.getters[name];
                        var alreadyCalledConstantGetter = typeof getter === "function" &&
                        // Sometimes a getter function will throw because it's called
                        // before the variable it's supposed to return has been
                        // initialized, so we need to know that the getter function has
                        // run to completion at least once.
                        getter.runCount > 0 && getter.constant;

                        var value = getExportByName(entry, name);

                        // Although we may have multiple setter functions with different keys in
                        // settersByKey, we can compute a snapshot of value and check it against
                        // entry.snapshots[name] before iterating over the individual setter
                        // functions
                        var snapshot = createSnapshot(entry, name, value);

                        var keys = consumeKeysGivenSnapshot(entry, name, snapshot);
                        if (keys === void 0) return;

                        keys.forEach(function (key) {
                          var setter = settersByKey[key];
                          if (!setter) {
                            return;
                          }

                          // Invoke the setter function with the updated value.
                          callback(setter, name, value);

                          if (alreadyCalledConstantGetter) {
                            // If we happen to know this getter function has run successfully
                            // (getter.runCount > 0), and will never return a different value
                            // (getter.constant), then we can forget the corresponding setter,
                            // because we've already reported that constant value. Note that we
                            // can't forget the getter, because we need to remember the original
                            // value in case anyone tampers with entry.module.exports[name].
                            delete settersByKey[key];
                          }
                        });
                      });
                    }

                    function getExportByName(entry, name) {
                      if (name === "*") {
                        return entry.namespace;
                      }

                      if (hasOwn.call(entry.namespace, name)) {
                        return entry.namespace[name];
                      }

                      if (entry.module === null) return;
                      var exports = entry.module.exports;

                      if (name === "default" && !(utils.getESModule(exports) && "default" in exports)) {
                        return exports;
                      }

                      if (exports == null) {
                        return;
                      }

                      return exports[name];
                    }

                    function makeUniqueKey() {
                      return Math.random().toString(36)
                      // Add an incrementing salt to help track key ordering and also
                      // absolutely guarantee we never return the same key twice.
                      .replace("0.", ++keySalt + "$");
                    }

                    function runGetter(entry, name) {
                      var getter = entry.getters[name];
                      if (!getter) return GETTER_ERROR;
                      try {
                        var result = getter();
                        ++getter.runCount;
                        return result;
                      } catch (e) {}
                      return GETTER_ERROR;
                    }

                    _module11.exports = Entry;

                    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  } } } } } } } } }, {
    "extensions": [".js", ".json"]
  });
  meteorInstall({ "node_modules": { "react": { "package.json": function module(_require11, _exports12, _module13) {

          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //                                                                                                                     //
          // node_modules/react/package.json                                                                                     //
          //                                                                                                                     //
          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //
          _module13.exports = {
            "name": "react",
            "version": "17.0.2",
            "main": "index.js"
          };

          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        }, "index.js": function module(_require12, _exports13, _module14) {

          if (process.env.NODE_ENV === 'production') {
            _module14.exports = _require12('./cjs/react.production.min.js');
          } else {
            _module14.exports = _require12('./cjs/react.development.js');
          }

          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        }, "cjs": { "react.production.min.js": function _module15(_require13, _exports14) {
            var l = _require13("object-assign"),
                n = 60103,
                p = 60106;_exports14.Fragment = 60107;_exports14.StrictMode = 60108;_exports14.Profiler = 60114;var q = 60109,
                r = 60110,
                t = 60112;_exports14.Suspense = 60113;var u = 60115,
                v = 60116;
            if ("function" === typeof Symbol && Symbol.for) {
              var w = Symbol.for;n = w("react.element");p = w("react.portal");_exports14.Fragment = w("react.fragment");_exports14.StrictMode = w("react.strict_mode");_exports14.Profiler = w("react.profiler");q = w("react.provider");r = w("react.context");t = w("react.forward_ref");_exports14.Suspense = w("react.suspense");u = w("react.memo");v = w("react.lazy");
            }var x = "function" === typeof Symbol && Symbol.iterator;
            function y(a) {
              if (null === a || "object" !== typeof a) return null;a = x && a[x] || a["@@iterator"];return "function" === typeof a ? a : null;
            }function z(a) {
              for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++) b += "&args[]=" + encodeURIComponent(arguments[c]);return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
            }
            var A = { isMounted: function () {
                return !1;
              }, enqueueForceUpdate: function () {}, enqueueReplaceState: function () {}, enqueueSetState: function () {} },
                B = {};function C(a, b, c) {
              this.props = a;this.context = b;this.refs = B;this.updater = c || A;
            }C.prototype.isReactComponent = {};C.prototype.setState = function (a, b) {
              if ("object" !== typeof a && "function" !== typeof a && null != a) throw Error(z(85));this.updater.enqueueSetState(this, a, b, "setState");
            };C.prototype.forceUpdate = function (a) {
              this.updater.enqueueForceUpdate(this, a, "forceUpdate");
            };
            function D() {}D.prototype = C.prototype;function E(a, b, c) {
              this.props = a;this.context = b;this.refs = B;this.updater = c || A;
            }var F = E.prototype = new D();F.constructor = E;l(F, C.prototype);F.isPureReactComponent = !0;var G = { current: null },
                H = Object.prototype.hasOwnProperty,
                I = { key: !0, ref: !0, __self: !0, __source: !0 };
            function J(a, b, c) {
              var e,
                  d = {},
                  k = null,
                  h = null;if (null != b) for (e in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (k = "" + b.key), b) H.call(b, e) && !I.hasOwnProperty(e) && (d[e] = b[e]);var g = arguments.length - 2;if (1 === g) d.children = c;else if (1 < g) {
                for (var f = Array(g), m = 0; m < g; m++) f[m] = arguments[m + 2];d.children = f;
              }if (a && a.defaultProps) for (e in g = a.defaultProps, g) void 0 === d[e] && (d[e] = g[e]);return { $$typeof: n, type: a, key: k, ref: h, props: d, _owner: G.current };
            }
            function K(a, b) {
              return { $$typeof: n, type: a.type, key: b, ref: a.ref, props: a.props, _owner: a._owner };
            }function L(a) {
              return "object" === typeof a && null !== a && a.$$typeof === n;
            }function escape(a) {
              var b = { "=": "=0", ":": "=2" };return "$" + a.replace(/[=:]/g, function (a) {
                return b[a];
              });
            }var M = /\/+/g;function N(a, b) {
              return "object" === typeof a && null !== a && null != a.key ? escape("" + a.key) : b.toString(36);
            }
            function O(a, b, c, e, d) {
              var k = typeof a;if ("undefined" === k || "boolean" === k) a = null;var h = !1;if (null === a) h = !0;else switch (k) {case "string":case "number":
                  h = !0;break;case "object":
                  switch (a.$$typeof) {case n:case p:
                      h = !0;}}if (h) return h = a, d = d(h), a = "" === e ? "." + N(h, 0) : e, Array.isArray(d) ? (c = "", null != a && (c = a.replace(M, "$&/") + "/"), O(d, b, c, "", function (a) {
                return a;
              })) : null != d && (L(d) && (d = K(d, c + (!d.key || h && h.key === d.key ? "" : ("" + d.key).replace(M, "$&/") + "/") + a)), b.push(d)), 1;h = 0;e = "" === e ? "." : e + ":";if (Array.isArray(a)) for (var g = 0; g < a.length; g++) {
                k = a[g];var f = e + N(k, g);h += O(k, b, c, f, d);
              } else if (f = y(a), "function" === typeof f) for (a = f.call(a), g = 0; !(k = a.next()).done;) k = k.value, f = e + N(k, g++), h += O(k, b, c, f, d);else if ("object" === k) throw b = "" + a, Error(z(31, "[object Object]" === b ? "object with keys {" + Object.keys(a).join(", ") + "}" : b));return h;
            }function P(a, b, c) {
              if (null == a) return a;var e = [],
                  d = 0;O(a, e, "", "", function (a) {
                return b.call(c, a, d++);
              });return e;
            }
            function Q(a) {
              if (-1 === a._status) {
                var b = a._result;b = b();a._status = 0;a._result = b;b.then(function (b) {
                  0 === a._status && (b = b.default, a._status = 1, a._result = b);
                }, function (b) {
                  0 === a._status && (a._status = 2, a._result = b);
                });
              }if (1 === a._status) return a._result;throw a._result;
            }var R = { current: null };function S() {
              var a = R.current;if (null === a) throw Error(z(321));return a;
            }var T = { ReactCurrentDispatcher: R, ReactCurrentBatchConfig: { transition: 0 }, ReactCurrentOwner: G, IsSomeRendererActing: { current: !1 }, assign: l };
            _exports14.Children = { map: P, forEach: function (a, b, c) {
                P(a, function () {
                  b.apply(this, arguments);
                }, c);
              }, count: function (a) {
                var b = 0;P(a, function () {
                  b++;
                });return b;
              }, toArray: function (a) {
                return P(a, function (a) {
                  return a;
                }) || [];
              }, only: function (a) {
                if (!L(a)) throw Error(z(143));return a;
              } };_exports14.Component = C;_exports14.PureComponent = E;_exports14.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = T;
            _exports14.cloneElement = function (a, b, c) {
              if (null === a || void 0 === a) throw Error(z(267, a));var e = l({}, a.props),
                  d = a.key,
                  k = a.ref,
                  h = a._owner;if (null != b) {
                void 0 !== b.ref && (k = b.ref, h = G.current);void 0 !== b.key && (d = "" + b.key);if (a.type && a.type.defaultProps) var g = a.type.defaultProps;for (f in b) H.call(b, f) && !I.hasOwnProperty(f) && (e[f] = void 0 === b[f] && void 0 !== g ? g[f] : b[f]);
              }var f = arguments.length - 2;if (1 === f) e.children = c;else if (1 < f) {
                g = Array(f);for (var m = 0; m < f; m++) g[m] = arguments[m + 2];e.children = g;
              }return { $$typeof: n, type: a.type,
                key: d, ref: k, props: e, _owner: h };
            };_exports14.createContext = function (a, b) {
              void 0 === b && (b = null);a = { $$typeof: r, _calculateChangedBits: b, _currentValue: a, _currentValue2: a, _threadCount: 0, Provider: null, Consumer: null };a.Provider = { $$typeof: q, _context: a };return a.Consumer = a;
            };_exports14.createElement = J;_exports14.createFactory = function (a) {
              var b = J.bind(null, a);b.type = a;return b;
            };_exports14.createRef = function () {
              return { current: null };
            };_exports14.forwardRef = function (a) {
              return { $$typeof: t, render: a };
            };_exports14.isValidElement = L;
            _exports14.lazy = function (a) {
              return { $$typeof: v, _payload: { _status: -1, _result: a }, _init: Q };
            };_exports14.memo = function (a, b) {
              return { $$typeof: u, type: a, compare: void 0 === b ? null : b };
            };_exports14.useCallback = function (a, b) {
              return S().useCallback(a, b);
            };_exports14.useContext = function (a, b) {
              return S().useContext(a, b);
            };_exports14.useDebugValue = function () {};_exports14.useEffect = function (a, b) {
              return S().useEffect(a, b);
            };_exports14.useImperativeHandle = function (a, b, c) {
              return S().useImperativeHandle(a, b, c);
            };
            _exports14.useLayoutEffect = function (a, b) {
              return S().useLayoutEffect(a, b);
            };_exports14.useMemo = function (a, b) {
              return S().useMemo(a, b);
            };_exports14.useReducer = function (a, b, c) {
              return S().useReducer(a, b, c);
            };_exports14.useRef = function (a) {
              return S().useRef(a);
            };_exports14.useState = function (a) {
              return S().useState(a);
            };_exports14.version = "17.0.2";

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "react.development.js": function _module16(_require14, _exports15) {

            if (process.env.NODE_ENV !== "production") {
              (function () {

                var _assign = _require14('object-assign');

                // TODO: this is special because it gets imported during build.
                var ReactVersion = '17.0.2';

                // ATTENTION
                // When adding new symbols to this file,
                // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
                // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
                // nor polyfill, then a plain number is used for performance.
                var REACT_ELEMENT_TYPE = 0xeac7;
                var REACT_PORTAL_TYPE = 0xeaca;
                _exports15.Fragment = 0xeacb;
                _exports15.StrictMode = 0xeacc;
                _exports15.Profiler = 0xead2;
                var REACT_PROVIDER_TYPE = 0xeacd;
                var REACT_CONTEXT_TYPE = 0xeace;
                var REACT_FORWARD_REF_TYPE = 0xead0;
                _exports15.Suspense = 0xead1;
                var REACT_SUSPENSE_LIST_TYPE = 0xead8;
                var REACT_MEMO_TYPE = 0xead3;
                var REACT_LAZY_TYPE = 0xead4;
                var REACT_BLOCK_TYPE = 0xead9;
                var REACT_SERVER_BLOCK_TYPE = 0xeada;
                var REACT_FUNDAMENTAL_TYPE = 0xead5;
                var REACT_SCOPE_TYPE = 0xead7;
                var REACT_OPAQUE_ID_TYPE = 0xeae0;
                var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
                var REACT_OFFSCREEN_TYPE = 0xeae2;
                var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

                if (typeof Symbol === 'function' && Symbol.for) {
                  var symbolFor = Symbol.for;
                  REACT_ELEMENT_TYPE = symbolFor('react.element');
                  REACT_PORTAL_TYPE = symbolFor('react.portal');
                  _exports15.Fragment = symbolFor('react.fragment');
                  _exports15.StrictMode = symbolFor('react.strict_mode');
                  _exports15.Profiler = symbolFor('react.profiler');
                  REACT_PROVIDER_TYPE = symbolFor('react.provider');
                  REACT_CONTEXT_TYPE = symbolFor('react.context');
                  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
                  _exports15.Suspense = symbolFor('react.suspense');
                  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
                  REACT_MEMO_TYPE = symbolFor('react.memo');
                  REACT_LAZY_TYPE = symbolFor('react.lazy');
                  REACT_BLOCK_TYPE = symbolFor('react.block');
                  REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
                  REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
                  REACT_SCOPE_TYPE = symbolFor('react.scope');
                  REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
                  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
                  REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
                  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
                }

                var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
                var FAUX_ITERATOR_SYMBOL = '@@iterator';
                function getIteratorFn(maybeIterable) {
                  if (maybeIterable === null || typeof maybeIterable !== 'object') {
                    return null;
                  }

                  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

                  if (typeof maybeIterator === 'function') {
                    return maybeIterator;
                  }

                  return null;
                }

                /**
                 * Keeps track of the current dispatcher.
                 */
                var ReactCurrentDispatcher = {
                  /**
                   * @internal
                   * @type {ReactComponent}
                   */
                  current: null
                };

                /**
                 * Keeps track of the current batch's configuration such as how long an update
                 * should suspend for if it needs to.
                 */
                var ReactCurrentBatchConfig = {
                  transition: 0
                };

                /**
                 * Keeps track of the current owner.
                 *
                 * The current owner is the component who should own any components that are
                 * currently being constructed.
                 */
                var ReactCurrentOwner = {
                  /**
                   * @internal
                   * @type {ReactComponent}
                   */
                  current: null
                };

                var ReactDebugCurrentFrame = {};
                var currentExtraStackFrame = null;
                function setExtraStackFrame(stack) {
                  {
                    currentExtraStackFrame = stack;
                  }
                }

                {
                  ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {
                    {
                      currentExtraStackFrame = stack;
                    }
                  }; // Stack implementation injected by the current renderer.


                  ReactDebugCurrentFrame.getCurrentStack = null;

                  ReactDebugCurrentFrame.getStackAddendum = function () {
                    var stack = ''; // Add an extra top frame while an element is being validated

                    if (currentExtraStackFrame) {
                      stack += currentExtraStackFrame;
                    } // Delegate to the injected renderer-specific implementation


                    var impl = ReactDebugCurrentFrame.getCurrentStack;

                    if (impl) {
                      stack += impl() || '';
                    }

                    return stack;
                  };
                }

                /**
                 * Used by act() to track whether you're inside an act() scope.
                 */
                var IsSomeRendererActing = {
                  current: false
                };

                var ReactSharedInternals = {
                  ReactCurrentDispatcher: ReactCurrentDispatcher,
                  ReactCurrentBatchConfig: ReactCurrentBatchConfig,
                  ReactCurrentOwner: ReactCurrentOwner,
                  IsSomeRendererActing: IsSomeRendererActing,
                  // Used by renderers to avoid bundling object-assign twice in UMD bundles:
                  assign: _assign
                };

                {
                  ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
                }

                // by calls to these methods by a Babel plugin.
                //
                // In PROD (or in packages without access to React internals),
                // they are left as they are instead.

                function warn(format) {
                  {
                    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                      args[_key - 1] = arguments[_key];
                    }

                    printWarning('warn', format, args);
                  }
                }
                function error(format) {
                  {
                    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                      args[_key2 - 1] = arguments[_key2];
                    }

                    printWarning('error', format, args);
                  }
                }

                function printWarning(level, format, args) {
                  // When changing this logic, you might want to also
                  // update consoleWithStackDev.www.js as well.
                  {
                    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
                    var stack = ReactDebugCurrentFrame.getStackAddendum();

                    if (stack !== '') {
                      format += '%s';
                      args = args.concat([stack]);
                    }

                    var argsWithFormat = args.map(function (item) {
                      return '' + item;
                    }); // Careful: RN currently depends on this prefix

                    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
                    // breaks IE9: https://github.com/facebook/react/issues/13610
                    // eslint-disable-next-line react-internal/no-production-logging

                    Function.prototype.apply.call(console[level], console, argsWithFormat);
                  }
                }

                var didWarnStateUpdateForUnmountedComponent = {};

                function warnNoop(publicInstance, callerName) {
                  {
                    var _constructor = publicInstance.constructor;
                    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
                    var warningKey = componentName + "." + callerName;

                    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                      return;
                    }

                    error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);

                    didWarnStateUpdateForUnmountedComponent[warningKey] = true;
                  }
                }
                /**
                 * This is the abstract API for an update queue.
                 */

                var ReactNoopUpdateQueue = {
                  /**
                   * Checks whether or not this composite component is mounted.
                   * @param {ReactClass} publicInstance The instance we want to test.
                   * @return {boolean} True if mounted, false otherwise.
                   * @protected
                   * @final
                   */
                  isMounted: function (publicInstance) {
                    return false;
                  },

                  /**
                   * Forces an update. This should only be invoked when it is known with
                   * certainty that we are **not** in a DOM transaction.
                   *
                   * You may want to call this when you know that some deeper aspect of the
                   * component's state has changed but `setState` was not called.
                   *
                   * This will not invoke `shouldComponentUpdate`, but it will invoke
                   * `componentWillUpdate` and `componentDidUpdate`.
                   *
                   * @param {ReactClass} publicInstance The instance that should rerender.
                   * @param {?function} callback Called after component is updated.
                   * @param {?string} callerName name of the calling function in the public API.
                   * @internal
                   */
                  enqueueForceUpdate: function (publicInstance, callback, callerName) {
                    warnNoop(publicInstance, 'forceUpdate');
                  },

                  /**
                   * Replaces all of the state. Always use this or `setState` to mutate state.
                   * You should treat `this.state` as immutable.
                   *
                   * There is no guarantee that `this.state` will be immediately updated, so
                   * accessing `this.state` after calling this method may return the old value.
                   *
                   * @param {ReactClass} publicInstance The instance that should rerender.
                   * @param {object} completeState Next state.
                   * @param {?function} callback Called after component is updated.
                   * @param {?string} callerName name of the calling function in the public API.
                   * @internal
                   */
                  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
                    warnNoop(publicInstance, 'replaceState');
                  },

                  /**
                   * Sets a subset of the state. This only exists because _pendingState is
                   * internal. This provides a merging strategy that is not available to deep
                   * properties which is confusing. TODO: Expose pendingState or don't use it
                   * during the merge.
                   *
                   * @param {ReactClass} publicInstance The instance that should rerender.
                   * @param {object} partialState Next partial state to be merged with state.
                   * @param {?function} callback Called after component is updated.
                   * @param {?string} Name of the calling function in the public API.
                   * @internal
                   */
                  enqueueSetState: function (publicInstance, partialState, callback, callerName) {
                    warnNoop(publicInstance, 'setState');
                  }
                };

                var emptyObject = {};

                {
                  Object.freeze(emptyObject);
                }
                /**
                 * Base class helpers for the updating state of a component.
                 */

                function Component(props, context, updater) {
                  this.props = props;
                  this.context = context; // If a component has string refs, we will assign a different object later.

                  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
                  // renderer.

                  this.updater = updater || ReactNoopUpdateQueue;
                }

                Component.prototype.isReactComponent = {};
                /**
                 * Sets a subset of the state. Always use this to mutate
                 * state. You should treat `this.state` as immutable.
                 *
                 * There is no guarantee that `this.state` will be immediately updated, so
                 * accessing `this.state` after calling this method may return the old value.
                 *
                 * There is no guarantee that calls to `setState` will run synchronously,
                 * as they may eventually be batched together.  You can provide an optional
                 * callback that will be executed when the call to setState is actually
                 * completed.
                 *
                 * When a function is provided to setState, it will be called at some point in
                 * the future (not synchronously). It will be called with the up to date
                 * component arguments (state, props, context). These values can be different
                 * from this.* because your function may be called after receiveProps but before
                 * shouldComponentUpdate, and this new state, props, and context will not yet be
                 * assigned to this.
                 *
                 * @param {object|function} partialState Next partial state or function to
                 *        produce next partial state to be merged with current state.
                 * @param {?function} callback Called after state is updated.
                 * @final
                 * @protected
                 */

                Component.prototype.setState = function (partialState, callback) {
                  if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {
                    {
                      throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
                    }
                  }

                  this.updater.enqueueSetState(this, partialState, callback, 'setState');
                };
                /**
                 * Forces an update. This should only be invoked when it is known with
                 * certainty that we are **not** in a DOM transaction.
                 *
                 * You may want to call this when you know that some deeper aspect of the
                 * component's state has changed but `setState` was not called.
                 *
                 * This will not invoke `shouldComponentUpdate`, but it will invoke
                 * `componentWillUpdate` and `componentDidUpdate`.
                 *
                 * @param {?function} callback Called after update is complete.
                 * @final
                 * @protected
                 */

                Component.prototype.forceUpdate = function (callback) {
                  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
                };
                /**
                 * Deprecated APIs. These APIs used to exist on classic React classes but since
                 * we would like to deprecate them, we're not going to move them over to this
                 * modern base class. Instead, we define a getter that warns if it's accessed.
                 */

                {
                  var deprecatedAPIs = {
                    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
                    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
                  };

                  var defineDeprecationWarning = function (methodName, info) {
                    Object.defineProperty(Component.prototype, methodName, {
                      get: function () {
                        warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);

                        return undefined;
                      }
                    });
                  };

                  for (var fnName in deprecatedAPIs) {
                    if (deprecatedAPIs.hasOwnProperty(fnName)) {
                      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
                    }
                  }
                }

                function ComponentDummy() {}

                ComponentDummy.prototype = Component.prototype;
                /**
                 * Convenience component with default shallow equality check for sCU.
                 */

                function PureComponent(props, context, updater) {
                  this.props = props;
                  this.context = context; // If a component has string refs, we will assign a different object later.

                  this.refs = emptyObject;
                  this.updater = updater || ReactNoopUpdateQueue;
                }

                var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
                pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

                _assign(pureComponentPrototype, Component.prototype);

                pureComponentPrototype.isPureReactComponent = true;

                // an immutable object with a single mutable value
                function createRef() {
                  var refObject = {
                    current: null
                  };

                  {
                    Object.seal(refObject);
                  }

                  return refObject;
                }

                function getWrappedName(outerType, innerType, wrapperName) {
                  var functionName = innerType.displayName || innerType.name || '';
                  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
                }

                function getContextName(type) {
                  return type.displayName || 'Context';
                }

                function getComponentName(type) {
                  if (type == null) {
                    // Host root, text node or just invalid type.
                    return null;
                  }

                  {
                    if (typeof type.tag === 'number') {
                      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
                    }
                  }

                  if (typeof type === 'function') {
                    return type.displayName || type.name || null;
                  }

                  if (typeof type === 'string') {
                    return type;
                  }

                  switch (type) {
                    case _exports15.Fragment:
                      return 'Fragment';

                    case REACT_PORTAL_TYPE:
                      return 'Portal';

                    case _exports15.Profiler:
                      return 'Profiler';

                    case _exports15.StrictMode:
                      return 'StrictMode';

                    case _exports15.Suspense:
                      return 'Suspense';

                    case REACT_SUSPENSE_LIST_TYPE:
                      return 'SuspenseList';
                  }

                  if (typeof type === 'object') {
                    switch (type.$$typeof) {
                      case REACT_CONTEXT_TYPE:
                        var context = type;
                        return getContextName(context) + '.Consumer';

                      case REACT_PROVIDER_TYPE:
                        var provider = type;
                        return getContextName(provider._context) + '.Provider';

                      case REACT_FORWARD_REF_TYPE:
                        return getWrappedName(type, type.render, 'ForwardRef');

                      case REACT_MEMO_TYPE:
                        return getComponentName(type.type);

                      case REACT_BLOCK_TYPE:
                        return getComponentName(type._render);

                      case REACT_LAZY_TYPE:
                        {
                          var lazyComponent = type;
                          var payload = lazyComponent._payload;
                          var init = lazyComponent._init;

                          try {
                            return getComponentName(init(payload));
                          } catch (x) {
                            return null;
                          }
                        }
                    }
                  }

                  return null;
                }

                var hasOwnProperty = Object.prototype.hasOwnProperty;
                var RESERVED_PROPS = {
                  key: true,
                  ref: true,
                  __self: true,
                  __source: true
                };
                var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;

                {
                  didWarnAboutStringRefs = {};
                }

                function hasValidRef(config) {
                  {
                    if (hasOwnProperty.call(config, 'ref')) {
                      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

                      if (getter && getter.isReactWarning) {
                        return false;
                      }
                    }
                  }

                  return config.ref !== undefined;
                }

                function hasValidKey(config) {
                  {
                    if (hasOwnProperty.call(config, 'key')) {
                      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

                      if (getter && getter.isReactWarning) {
                        return false;
                      }
                    }
                  }

                  return config.key !== undefined;
                }

                function defineKeyPropWarningGetter(props, displayName) {
                  var warnAboutAccessingKey = function () {
                    {
                      if (!specialPropKeyWarningShown) {
                        specialPropKeyWarningShown = true;

                        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
                      }
                    }
                  };

                  warnAboutAccessingKey.isReactWarning = true;
                  Object.defineProperty(props, 'key', {
                    get: warnAboutAccessingKey,
                    configurable: true
                  });
                }

                function defineRefPropWarningGetter(props, displayName) {
                  var warnAboutAccessingRef = function () {
                    {
                      if (!specialPropRefWarningShown) {
                        specialPropRefWarningShown = true;

                        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
                      }
                    }
                  };

                  warnAboutAccessingRef.isReactWarning = true;
                  Object.defineProperty(props, 'ref', {
                    get: warnAboutAccessingRef,
                    configurable: true
                  });
                }

                function warnIfStringRefCannotBeAutoConverted(config) {
                  {
                    if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                      var componentName = getComponentName(ReactCurrentOwner.current.type);

                      if (!didWarnAboutStringRefs[componentName]) {
                        error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);

                        didWarnAboutStringRefs[componentName] = true;
                      }
                    }
                  }
                }
                /**
                 * Factory method to create a new React element. This no longer adheres to
                 * the class pattern, so do not use new to call it. Also, instanceof check
                 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
                 * if something is a React Element.
                 *
                 * @param {*} type
                 * @param {*} props
                 * @param {*} key
                 * @param {string|object} ref
                 * @param {*} owner
                 * @param {*} self A *temporary* helper to detect places where `this` is
                 * different from the `owner` when React.createElement is called, so that we
                 * can warn. We want to get rid of owner and replace string `ref`s with arrow
                 * functions, and as long as `this` and owner are the same, there will be no
                 * change in behavior.
                 * @param {*} source An annotation object (added by a transpiler or otherwise)
                 * indicating filename, line number, and/or other information.
                 * @internal
                 */

                var ReactElement = function (type, key, ref, self, source, owner, props) {
                  var element = {
                    // This tag allows us to uniquely identify this as a React Element
                    $$typeof: REACT_ELEMENT_TYPE,
                    // Built-in properties that belong on the element
                    type: type,
                    key: key,
                    ref: ref,
                    props: props,
                    // Record the component responsible for creating this element.
                    _owner: owner
                  };

                  {
                    // The validation flag is currently mutative. We put it on
                    // an external backing store so that we can freeze the whole object.
                    // This can be replaced with a WeakMap once they are implemented in
                    // commonly used development environments.
                    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
                    // the validation flag non-enumerable (where possible, which should
                    // include every environment we run tests in), so the test framework
                    // ignores it.

                    Object.defineProperty(element._store, 'validated', {
                      configurable: false,
                      enumerable: false,
                      writable: true,
                      value: false
                    }); // self and source are DEV only properties.

                    Object.defineProperty(element, '_self', {
                      configurable: false,
                      enumerable: false,
                      writable: false,
                      value: self
                    }); // Two elements created in two different places should be considered
                    // equal for testing purposes and therefore we hide it from enumeration.

                    Object.defineProperty(element, '_source', {
                      configurable: false,
                      enumerable: false,
                      writable: false,
                      value: source
                    });

                    if (Object.freeze) {
                      Object.freeze(element.props);
                      Object.freeze(element);
                    }
                  }

                  return element;
                };
                /**
                 * Create and return a new ReactElement of the given type.
                 * See https://reactjs.org/docs/react-api.html#createelement
                 */

                function createElement(type, config, children) {
                  var propName; // Reserved names are extracted

                  var props = {};
                  var key = null;
                  var ref = null;
                  var self = null;
                  var source = null;

                  if (config != null) {
                    if (hasValidRef(config)) {
                      ref = config.ref;

                      {
                        warnIfStringRefCannotBeAutoConverted(config);
                      }
                    }

                    if (hasValidKey(config)) {
                      key = '' + config.key;
                    }

                    self = config.__self === undefined ? null : config.__self;
                    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

                    for (propName in config) {
                      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                        props[propName] = config[propName];
                      }
                    }
                  } // Children can be more than one argument, and those are transferred onto
                  // the newly allocated props object.


                  var childrenLength = arguments.length - 2;

                  if (childrenLength === 1) {
                    props.children = children;
                  } else if (childrenLength > 1) {
                    var childArray = Array(childrenLength);

                    for (var i = 0; i < childrenLength; i++) {
                      childArray[i] = arguments[i + 2];
                    }

                    {
                      if (Object.freeze) {
                        Object.freeze(childArray);
                      }
                    }

                    props.children = childArray;
                  } // Resolve default props


                  if (type && type.defaultProps) {
                    var defaultProps = type.defaultProps;

                    for (propName in defaultProps) {
                      if (props[propName] === undefined) {
                        props[propName] = defaultProps[propName];
                      }
                    }
                  }

                  {
                    if (key || ref) {
                      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

                      if (key) {
                        defineKeyPropWarningGetter(props, displayName);
                      }

                      if (ref) {
                        defineRefPropWarningGetter(props, displayName);
                      }
                    }
                  }

                  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
                }
                function cloneAndReplaceKey(oldElement, newKey) {
                  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
                  return newElement;
                }
                /**
                 * Clone and return a new ReactElement using element as the starting point.
                 * See https://reactjs.org/docs/react-api.html#cloneelement
                 */

                function cloneElement(element, config, children) {
                  if (!!(element === null || element === undefined)) {
                    {
                      throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
                    }
                  }

                  var propName; // Original props are copied

                  var props = _assign({}, element.props); // Reserved names are extracted


                  var key = element.key;
                  var ref = element.ref; // Self is preserved since the owner is preserved.

                  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
                  // transpiler, and the original source is probably a better indicator of the
                  // true owner.

                  var source = element._source; // Owner will be preserved, unless ref is overridden

                  var owner = element._owner;

                  if (config != null) {
                    if (hasValidRef(config)) {
                      // Silently steal the ref from the parent.
                      ref = config.ref;
                      owner = ReactCurrentOwner.current;
                    }

                    if (hasValidKey(config)) {
                      key = '' + config.key;
                    } // Remaining properties override existing props


                    var defaultProps;

                    if (element.type && element.type.defaultProps) {
                      defaultProps = element.type.defaultProps;
                    }

                    for (propName in config) {
                      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                        if (config[propName] === undefined && defaultProps !== undefined) {
                          // Resolve default props
                          props[propName] = defaultProps[propName];
                        } else {
                          props[propName] = config[propName];
                        }
                      }
                    }
                  } // Children can be more than one argument, and those are transferred onto
                  // the newly allocated props object.


                  var childrenLength = arguments.length - 2;

                  if (childrenLength === 1) {
                    props.children = children;
                  } else if (childrenLength > 1) {
                    var childArray = Array(childrenLength);

                    for (var i = 0; i < childrenLength; i++) {
                      childArray[i] = arguments[i + 2];
                    }

                    props.children = childArray;
                  }

                  return ReactElement(element.type, key, ref, self, source, owner, props);
                }
                /**
                 * Verifies the object is a ReactElement.
                 * See https://reactjs.org/docs/react-api.html#isvalidelement
                 * @param {?object} object
                 * @return {boolean} True if `object` is a ReactElement.
                 * @final
                 */

                function isValidElement(object) {
                  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
                }

                var SEPARATOR = '.';
                var SUBSEPARATOR = ':';
                /**
                 * Escape and wrap key so it is safe to use as a reactid
                 *
                 * @param {string} key to be escaped.
                 * @return {string} the escaped key.
                 */

                function escape(key) {
                  var escapeRegex = /[=:]/g;
                  var escaperLookup = {
                    '=': '=0',
                    ':': '=2'
                  };
                  var escapedString = key.replace(escapeRegex, function (match) {
                    return escaperLookup[match];
                  });
                  return '$' + escapedString;
                }
                /**
                 * TODO: Test that a single child and an array with one item have the same key
                 * pattern.
                 */

                var didWarnAboutMaps = false;
                var userProvidedKeyEscapeRegex = /\/+/g;

                function escapeUserProvidedKey(text) {
                  return text.replace(userProvidedKeyEscapeRegex, '$&/');
                }
                /**
                 * Generate a key string that identifies a element within a set.
                 *
                 * @param {*} element A element that could contain a manual key.
                 * @param {number} index Index that is used if a manual key is not provided.
                 * @return {string}
                 */

                function getElementKey(element, index) {
                  // Do some typechecking here since we call this blindly. We want to ensure
                  // that we don't block potential future ES APIs.
                  if (typeof element === 'object' && element !== null && element.key != null) {
                    // Explicit key
                    return escape('' + element.key);
                  } // Implicit key determined by the index in the set


                  return index.toString(36);
                }

                function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
                  var type = typeof children;

                  if (type === 'undefined' || type === 'boolean') {
                    // All of the above are perceived as null.
                    children = null;
                  }

                  var invokeCallback = false;

                  if (children === null) {
                    invokeCallback = true;
                  } else {
                    switch (type) {
                      case 'string':
                      case 'number':
                        invokeCallback = true;
                        break;

                      case 'object':
                        switch (children.$$typeof) {
                          case REACT_ELEMENT_TYPE:
                          case REACT_PORTAL_TYPE:
                            invokeCallback = true;
                        }

                    }
                  }

                  if (invokeCallback) {
                    var _child = children;
                    var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
                    // so that it's consistent if the number of children grows:

                    var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;

                    if (Array.isArray(mappedChild)) {
                      var escapedChildKey = '';

                      if (childKey != null) {
                        escapedChildKey = escapeUserProvidedKey(childKey) + '/';
                      }

                      mapIntoArray(mappedChild, array, escapedChildKey, '', function (c) {
                        return c;
                      });
                    } else if (mappedChild != null) {
                      if (isValidElement(mappedChild)) {
                        mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
                        // traverseAllChildren used to do for objects as children
                        escapedPrefix + ( // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                        mappedChild.key && (!_child || _child.key !== mappedChild.key) ? // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                        escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
                      }

                      array.push(mappedChild);
                    }

                    return 1;
                  }

                  var child;
                  var nextName;
                  var subtreeCount = 0; // Count of children found in the current subtree.

                  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

                  if (Array.isArray(children)) {
                    for (var i = 0; i < children.length; i++) {
                      child = children[i];
                      nextName = nextNamePrefix + getElementKey(child, i);
                      subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                    }
                  } else {
                    var iteratorFn = getIteratorFn(children);

                    if (typeof iteratorFn === 'function') {
                      var iterableChildren = children;

                      {
                        // Warn about using Maps as children
                        if (iteratorFn === iterableChildren.entries) {
                          if (!didWarnAboutMaps) {
                            warn('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
                          }

                          didWarnAboutMaps = true;
                        }
                      }

                      var iterator = iteratorFn.call(iterableChildren);
                      var step;
                      var ii = 0;

                      while (!(step = iterator.next()).done) {
                        child = step.value;
                        nextName = nextNamePrefix + getElementKey(child, ii++);
                        subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                      }
                    } else if (type === 'object') {
                      var childrenString = '' + children;

                      {
                        {
                          throw Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). If you meant to render a collection of children, use an array instead.");
                        }
                      }
                    }
                  }

                  return subtreeCount;
                }

                /**
                 * Maps children that are typically specified as `props.children`.
                 *
                 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
                 *
                 * The provided mapFunction(child, index) will be called for each
                 * leaf child.
                 *
                 * @param {?*} children Children tree container.
                 * @param {function(*, int)} func The map function.
                 * @param {*} context Context for mapFunction.
                 * @return {object} Object containing the ordered map of results.
                 */
                function mapChildren(children, func, context) {
                  if (children == null) {
                    return children;
                  }

                  var result = [];
                  var count = 0;
                  mapIntoArray(children, result, '', '', function (child) {
                    return func.call(context, child, count++);
                  });
                  return result;
                }
                /**
                 * Count the number of children that are typically specified as
                 * `props.children`.
                 *
                 * See https://reactjs.org/docs/react-api.html#reactchildrencount
                 *
                 * @param {?*} children Children tree container.
                 * @return {number} The number of children.
                 */

                function countChildren(children) {
                  var n = 0;
                  mapChildren(children, function () {
                    n++; // Don't return anything
                  });
                  return n;
                }

                /**
                 * Iterates through children that are typically specified as `props.children`.
                 *
                 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
                 *
                 * The provided forEachFunc(child, index) will be called for each
                 * leaf child.
                 *
                 * @param {?*} children Children tree container.
                 * @param {function(*, int)} forEachFunc
                 * @param {*} forEachContext Context for forEachContext.
                 */
                function forEachChildren(children, forEachFunc, forEachContext) {
                  mapChildren(children, function () {
                    forEachFunc.apply(this, arguments); // Don't return anything.
                  }, forEachContext);
                }
                /**
                 * Flatten a children object (typically specified as `props.children`) and
                 * return an array with appropriately re-keyed children.
                 *
                 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
                 */

                function toArray(children) {
                  return mapChildren(children, function (child) {
                    return child;
                  }) || [];
                }
                /**
                 * Returns the first child in a collection of children and verifies that there
                 * is only one child in the collection.
                 *
                 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
                 *
                 * The current implementation of this function assumes that a single child gets
                 * passed without a wrapper, but the purpose of this helper function is to
                 * abstract away the particular structure of children.
                 *
                 * @param {?object} children Child collection structure.
                 * @return {ReactElement} The first and only `ReactElement` contained in the
                 * structure.
                 */

                function onlyChild(children) {
                  if (!isValidElement(children)) {
                    {
                      throw Error("React.Children.only expected to receive a single React element child.");
                    }
                  }

                  return children;
                }

                function createContext(defaultValue, calculateChangedBits) {
                  if (calculateChangedBits === undefined) {
                    calculateChangedBits = null;
                  } else {
                    {
                      if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') {
                        error('createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits);
                      }
                    }
                  }

                  var context = {
                    $$typeof: REACT_CONTEXT_TYPE,
                    _calculateChangedBits: calculateChangedBits,
                    // As a workaround to support multiple concurrent renderers, we categorize
                    // some renderers as primary and others as secondary. We only expect
                    // there to be two concurrent renderers at most: React Native (primary) and
                    // Fabric (secondary); React DOM (primary) and React ART (secondary).
                    // Secondary renderers store their context values on separate fields.
                    _currentValue: defaultValue,
                    _currentValue2: defaultValue,
                    // Used to track how many concurrent renderers this context currently
                    // supports within in a single renderer. Such as parallel server rendering.
                    _threadCount: 0,
                    // These are circular
                    Provider: null,
                    Consumer: null
                  };
                  context.Provider = {
                    $$typeof: REACT_PROVIDER_TYPE,
                    _context: context
                  };
                  var hasWarnedAboutUsingNestedContextConsumers = false;
                  var hasWarnedAboutUsingConsumerProvider = false;
                  var hasWarnedAboutDisplayNameOnConsumer = false;

                  {
                    // A separate object, but proxies back to the original context object for
                    // backwards compatibility. It has a different $$typeof, so we can properly
                    // warn for the incorrect usage of Context as a Consumer.
                    var Consumer = {
                      $$typeof: REACT_CONTEXT_TYPE,
                      _context: context,
                      _calculateChangedBits: context._calculateChangedBits
                    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

                    Object.defineProperties(Consumer, {
                      Provider: {
                        get: function () {
                          if (!hasWarnedAboutUsingConsumerProvider) {
                            hasWarnedAboutUsingConsumerProvider = true;

                            error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
                          }

                          return context.Provider;
                        },
                        set: function (_Provider) {
                          context.Provider = _Provider;
                        }
                      },
                      _currentValue: {
                        get: function () {
                          return context._currentValue;
                        },
                        set: function (_currentValue) {
                          context._currentValue = _currentValue;
                        }
                      },
                      _currentValue2: {
                        get: function () {
                          return context._currentValue2;
                        },
                        set: function (_currentValue2) {
                          context._currentValue2 = _currentValue2;
                        }
                      },
                      _threadCount: {
                        get: function () {
                          return context._threadCount;
                        },
                        set: function (_threadCount) {
                          context._threadCount = _threadCount;
                        }
                      },
                      Consumer: {
                        get: function () {
                          if (!hasWarnedAboutUsingNestedContextConsumers) {
                            hasWarnedAboutUsingNestedContextConsumers = true;

                            error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
                          }

                          return context.Consumer;
                        }
                      },
                      displayName: {
                        get: function () {
                          return context.displayName;
                        },
                        set: function (displayName) {
                          if (!hasWarnedAboutDisplayNameOnConsumer) {
                            warn('Setting `displayName` on Context.Consumer has no effect. ' + "You should set it directly on the context with Context.displayName = '%s'.", displayName);

                            hasWarnedAboutDisplayNameOnConsumer = true;
                          }
                        }
                      }
                    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

                    context.Consumer = Consumer;
                  }

                  {
                    context._currentRenderer = null;
                    context._currentRenderer2 = null;
                  }

                  return context;
                }

                var Uninitialized = -1;
                var Pending = 0;
                var Resolved = 1;
                var Rejected = 2;

                function lazyInitializer(payload) {
                  if (payload._status === Uninitialized) {
                    var ctor = payload._result;
                    var thenable = ctor(); // Transition to the next state.

                    var pending = payload;
                    pending._status = Pending;
                    pending._result = thenable;
                    thenable.then(function (moduleObject) {
                      if (payload._status === Pending) {
                        var defaultExport = moduleObject.default;

                        {
                          if (defaultExport === undefined) {
                            error('lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + // Break up imports to avoid accidentally parsing them as dependencies.
                            'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))", moduleObject);
                          }
                        } // Transition to the next state.


                        var resolved = payload;
                        resolved._status = Resolved;
                        resolved._result = defaultExport;
                      }
                    }, function (error) {
                      if (payload._status === Pending) {
                        // Transition to the next state.
                        var rejected = payload;
                        rejected._status = Rejected;
                        rejected._result = error;
                      }
                    });
                  }

                  if (payload._status === Resolved) {
                    return payload._result;
                  } else {
                    throw payload._result;
                  }
                }

                function lazy(ctor) {
                  var payload = {
                    // We use these fields to store the result.
                    _status: -1,
                    _result: ctor
                  };
                  var lazyType = {
                    $$typeof: REACT_LAZY_TYPE,
                    _payload: payload,
                    _init: lazyInitializer
                  };

                  {
                    // In production, this would just set it on the object.
                    var defaultProps;
                    var propTypes; // $FlowFixMe

                    Object.defineProperties(lazyType, {
                      defaultProps: {
                        configurable: true,
                        get: function () {
                          return defaultProps;
                        },
                        set: function (newDefaultProps) {
                          error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

                          defaultProps = newDefaultProps; // Match production behavior more closely:
                          // $FlowFixMe

                          Object.defineProperty(lazyType, 'defaultProps', {
                            enumerable: true
                          });
                        }
                      },
                      propTypes: {
                        configurable: true,
                        get: function () {
                          return propTypes;
                        },
                        set: function (newPropTypes) {
                          error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

                          propTypes = newPropTypes; // Match production behavior more closely:
                          // $FlowFixMe

                          Object.defineProperty(lazyType, 'propTypes', {
                            enumerable: true
                          });
                        }
                      }
                    });
                  }

                  return lazyType;
                }

                function forwardRef(render) {
                  {
                    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                      error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
                    } else if (typeof render !== 'function') {
                      error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
                    } else {
                      if (render.length !== 0 && render.length !== 2) {
                        error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
                      }
                    }

                    if (render != null) {
                      if (render.defaultProps != null || render.propTypes != null) {
                        error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
                      }
                    }
                  }

                  var elementType = {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: render
                  };

                  {
                    var ownName;
                    Object.defineProperty(elementType, 'displayName', {
                      enumerable: false,
                      configurable: true,
                      get: function () {
                        return ownName;
                      },
                      set: function (name) {
                        ownName = name;

                        if (render.displayName == null) {
                          render.displayName = name;
                        }
                      }
                    });
                  }

                  return elementType;
                }

                // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

                var enableScopeAPI = false; // Experimental Create Event Handle API.

                function isValidElementType(type) {
                  if (typeof type === 'string' || typeof type === 'function') {
                    return true;
                  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


                  if (type === _exports15.Fragment || type === _exports15.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === _exports15.StrictMode || type === _exports15.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
                    return true;
                  }

                  if (typeof type === 'object' && type !== null) {
                    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
                      return true;
                    }
                  }

                  return false;
                }

                function memo(type, compare) {
                  {
                    if (!isValidElementType(type)) {
                      error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
                    }
                  }

                  var elementType = {
                    $$typeof: REACT_MEMO_TYPE,
                    type: type,
                    compare: compare === undefined ? null : compare
                  };

                  {
                    var ownName;
                    Object.defineProperty(elementType, 'displayName', {
                      enumerable: false,
                      configurable: true,
                      get: function () {
                        return ownName;
                      },
                      set: function (name) {
                        ownName = name;

                        if (type.displayName == null) {
                          type.displayName = name;
                        }
                      }
                    });
                  }

                  return elementType;
                }

                function resolveDispatcher() {
                  var dispatcher = ReactCurrentDispatcher.current;

                  if (!(dispatcher !== null)) {
                    {
                      throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
                    }
                  }

                  return dispatcher;
                }

                function useContext(Context, unstable_observedBits) {
                  var dispatcher = resolveDispatcher();

                  {
                    if (unstable_observedBits !== undefined) {
                      error('useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\n\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://reactjs.org/link/rules-of-hooks' : '');
                    } // TODO: add a more generic warning for invalid values.


                    if (Context._context !== undefined) {
                      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
                      // and nobody should be using this in existing code.

                      if (realContext.Consumer === Context) {
                        error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
                      } else if (realContext.Provider === Context) {
                        error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
                      }
                    }
                  }

                  return dispatcher.useContext(Context, unstable_observedBits);
                }
                function useState(initialState) {
                  var dispatcher = resolveDispatcher();
                  return dispatcher.useState(initialState);
                }
                function useReducer(reducer, initialArg, init) {
                  var dispatcher = resolveDispatcher();
                  return dispatcher.useReducer(reducer, initialArg, init);
                }
                function useRef(initialValue) {
                  var dispatcher = resolveDispatcher();
                  return dispatcher.useRef(initialValue);
                }
                function useEffect(create, deps) {
                  var dispatcher = resolveDispatcher();
                  return dispatcher.useEffect(create, deps);
                }
                function useLayoutEffect(create, deps) {
                  var dispatcher = resolveDispatcher();
                  return dispatcher.useLayoutEffect(create, deps);
                }
                function useCallback(callback, deps) {
                  var dispatcher = resolveDispatcher();
                  return dispatcher.useCallback(callback, deps);
                }
                function useMemo(create, deps) {
                  var dispatcher = resolveDispatcher();
                  return dispatcher.useMemo(create, deps);
                }
                function useImperativeHandle(ref, create, deps) {
                  var dispatcher = resolveDispatcher();
                  return dispatcher.useImperativeHandle(ref, create, deps);
                }
                function useDebugValue(value, formatterFn) {
                  {
                    var dispatcher = resolveDispatcher();
                    return dispatcher.useDebugValue(value, formatterFn);
                  }
                }

                // Helpers to patch console.logs to avoid logging during side-effect free
                // replaying on render function. This currently only patches the object
                // lazily which won't cover if the log function was extracted eagerly.
                // We could also eagerly patch the method.
                var disabledDepth = 0;
                var prevLog;
                var prevInfo;
                var prevWarn;
                var prevError;
                var prevGroup;
                var prevGroupCollapsed;
                var prevGroupEnd;

                function disabledLog() {}

                disabledLog.__reactDisabledLog = true;
                function disableLogs() {
                  {
                    if (disabledDepth === 0) {
                      /* eslint-disable react-internal/no-production-logging */
                      prevLog = console.log;
                      prevInfo = console.info;
                      prevWarn = console.warn;
                      prevError = console.error;
                      prevGroup = console.group;
                      prevGroupCollapsed = console.groupCollapsed;
                      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

                      var props = {
                        configurable: true,
                        enumerable: true,
                        value: disabledLog,
                        writable: true
                      }; // $FlowFixMe Flow thinks console is immutable.

                      Object.defineProperties(console, {
                        info: props,
                        log: props,
                        warn: props,
                        error: props,
                        group: props,
                        groupCollapsed: props,
                        groupEnd: props
                      });
                      /* eslint-enable react-internal/no-production-logging */
                    }

                    disabledDepth++;
                  }
                }
                function reenableLogs() {
                  {
                    disabledDepth--;

                    if (disabledDepth === 0) {
                      /* eslint-disable react-internal/no-production-logging */
                      var props = {
                        configurable: true,
                        enumerable: true,
                        writable: true
                      }; // $FlowFixMe Flow thinks console is immutable.

                      Object.defineProperties(console, {
                        log: _assign({}, props, {
                          value: prevLog
                        }),
                        info: _assign({}, props, {
                          value: prevInfo
                        }),
                        warn: _assign({}, props, {
                          value: prevWarn
                        }),
                        error: _assign({}, props, {
                          value: prevError
                        }),
                        group: _assign({}, props, {
                          value: prevGroup
                        }),
                        groupCollapsed: _assign({}, props, {
                          value: prevGroupCollapsed
                        }),
                        groupEnd: _assign({}, props, {
                          value: prevGroupEnd
                        })
                      });
                      /* eslint-enable react-internal/no-production-logging */
                    }

                    if (disabledDepth < 0) {
                      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
                    }
                  }
                }

                var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
                var prefix;
                function describeBuiltInComponentFrame(name, source, ownerFn) {
                  {
                    if (prefix === undefined) {
                      // Extract the VM specific prefix used by each line.
                      try {
                        throw Error();
                      } catch (x) {
                        var match = x.stack.trim().match(/\n( *(at )?)/);
                        prefix = match && match[1] || '';
                      }
                    } // We use the prefix to ensure our stacks line up with native stack frames.


                    return '\n' + prefix + name;
                  }
                }
                var reentry = false;
                var componentFrameCache;

                {
                  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
                  componentFrameCache = new PossiblyWeakMap();
                }

                function describeNativeComponentFrame(fn, construct) {
                  // If something asked for a stack inside a fake render, it should get ignored.
                  if (!fn || reentry) {
                    return '';
                  }

                  {
                    var frame = componentFrameCache.get(fn);

                    if (frame !== undefined) {
                      return frame;
                    }
                  }

                  var control;
                  reentry = true;
                  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

                  Error.prepareStackTrace = undefined;
                  var previousDispatcher;

                  {
                    previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
                    // for warnings.

                    ReactCurrentDispatcher$1.current = null;
                    disableLogs();
                  }

                  try {
                    // This should throw.
                    if (construct) {
                      // Something should be setting the props in the constructor.
                      var Fake = function () {
                        throw Error();
                      }; // $FlowFixMe


                      Object.defineProperty(Fake.prototype, 'props', {
                        set: function () {
                          // We use a throwing setter instead of frozen or non-writable props
                          // because that won't throw in a non-strict mode function.
                          throw Error();
                        }
                      });

                      if (typeof Reflect === 'object' && Reflect.construct) {
                        // We construct a different control for this case to include any extra
                        // frames added by the construct call.
                        try {
                          Reflect.construct(Fake, []);
                        } catch (x) {
                          control = x;
                        }

                        Reflect.construct(fn, [], Fake);
                      } else {
                        try {
                          Fake.call();
                        } catch (x) {
                          control = x;
                        }

                        fn.call(Fake.prototype);
                      }
                    } else {
                      try {
                        throw Error();
                      } catch (x) {
                        control = x;
                      }

                      fn();
                    }
                  } catch (sample) {
                    // This is inlined manually because closure doesn't do it for us.
                    if (sample && control && typeof sample.stack === 'string') {
                      // This extracts the first frame from the sample that isn't also in the control.
                      // Skipping one frame that we assume is the frame that calls the two.
                      var sampleLines = sample.stack.split('\n');
                      var controlLines = control.stack.split('\n');
                      var s = sampleLines.length - 1;
                      var c = controlLines.length - 1;

                      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                        // We expect at least one stack frame to be shared.
                        // Typically this will be the root most one. However, stack frames may be
                        // cut off due to maximum stack limits. In this case, one maybe cut off
                        // earlier than the other. We assume that the sample is longer or the same
                        // and there for cut off earlier. So we should find the root most frame in
                        // the sample somewhere in the control.
                        c--;
                      }

                      for (; s >= 1 && c >= 0; s--, c--) {
                        // Next we find the first one that isn't the same which should be the
                        // frame that called our sample function and the control.
                        if (sampleLines[s] !== controlLines[c]) {
                          // In V8, the first line is describing the message but other VMs don't.
                          // If we're about to return the first line, and the control is also on the same
                          // line, that's a pretty good indicator that our sample threw at same line as
                          // the control. I.e. before we entered the sample frame. So we ignore this result.
                          // This can happen if you passed a class to function component, or non-function.
                          if (s !== 1 || c !== 1) {
                            do {
                              s--;
                              c--; // We may still have similar intermediate frames from the construct call.
                              // The next one that isn't the same should be our match though.

                              if (c < 0 || sampleLines[s] !== controlLines[c]) {
                                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');

                                {
                                  if (typeof fn === 'function') {
                                    componentFrameCache.set(fn, _frame);
                                  }
                                } // Return the line we found.


                                return _frame;
                              }
                            } while (s >= 1 && c >= 0);
                          }

                          break;
                        }
                      }
                    }
                  } finally {
                    reentry = false;

                    {
                      ReactCurrentDispatcher$1.current = previousDispatcher;
                      reenableLogs();
                    }

                    Error.prepareStackTrace = previousPrepareStackTrace;
                  } // Fallback to just using the name if we couldn't make it throw.


                  var name = fn ? fn.displayName || fn.name : '';
                  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

                  {
                    if (typeof fn === 'function') {
                      componentFrameCache.set(fn, syntheticFrame);
                    }
                  }

                  return syntheticFrame;
                }
                function describeFunctionComponentFrame(fn, source, ownerFn) {
                  {
                    return describeNativeComponentFrame(fn, false);
                  }
                }

                function shouldConstruct(Component) {
                  var prototype = Component.prototype;
                  return !!(prototype && prototype.isReactComponent);
                }

                function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

                  if (type == null) {
                    return '';
                  }

                  if (typeof type === 'function') {
                    {
                      return describeNativeComponentFrame(type, shouldConstruct(type));
                    }
                  }

                  if (typeof type === 'string') {
                    return describeBuiltInComponentFrame(type);
                  }

                  switch (type) {
                    case _exports15.Suspense:
                      return describeBuiltInComponentFrame('Suspense');

                    case REACT_SUSPENSE_LIST_TYPE:
                      return describeBuiltInComponentFrame('SuspenseList');
                  }

                  if (typeof type === 'object') {
                    switch (type.$$typeof) {
                      case REACT_FORWARD_REF_TYPE:
                        return describeFunctionComponentFrame(type.render);

                      case REACT_MEMO_TYPE:
                        // Memo may contain any component type so we recursively resolve it.
                        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

                      case REACT_BLOCK_TYPE:
                        return describeFunctionComponentFrame(type._render);

                      case REACT_LAZY_TYPE:
                        {
                          var lazyComponent = type;
                          var payload = lazyComponent._payload;
                          var init = lazyComponent._init;

                          try {
                            // Lazy may contain any component type so we recursively resolve it.
                            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                          } catch (x) {}
                        }
                    }
                  }

                  return '';
                }

                var loggedTypeFailures = {};
                var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

                function setCurrentlyValidatingElement(element) {
                  {
                    if (element) {
                      var owner = element._owner;
                      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
                    } else {
                      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
                    }
                  }
                }

                function checkPropTypes(typeSpecs, values, location, componentName, element) {
                  {
                    // $FlowFixMe This is okay but Flow doesn't know it.
                    var has = Function.call.bind(Object.prototype.hasOwnProperty);

                    for (var typeSpecName in typeSpecs) {
                      if (has(typeSpecs, typeSpecName)) {
                        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
                        // fail the render phase where it didn't fail before. So we log it.
                        // After these have been cleaned up, we'll let them throw.

                        try {
                          // This is intentionally an invariant that gets caught. It's the same
                          // behavior as without this statement except with a better message.
                          if (typeof typeSpecs[typeSpecName] !== 'function') {
                            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                            err.name = 'Invariant Violation';
                            throw err;
                          }

                          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
                        } catch (ex) {
                          error$1 = ex;
                        }

                        if (error$1 && !(error$1 instanceof Error)) {
                          setCurrentlyValidatingElement(element);

                          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

                          setCurrentlyValidatingElement(null);
                        }

                        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                          // Only monitor this failure once because there tends to be a lot of the
                          // same error.
                          loggedTypeFailures[error$1.message] = true;
                          setCurrentlyValidatingElement(element);

                          error('Failed %s type: %s', location, error$1.message);

                          setCurrentlyValidatingElement(null);
                        }
                      }
                    }
                  }
                }

                function setCurrentlyValidatingElement$1(element) {
                  {
                    if (element) {
                      var owner = element._owner;
                      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                      setExtraStackFrame(stack);
                    } else {
                      setExtraStackFrame(null);
                    }
                  }
                }

                var propTypesMisspellWarningShown;

                {
                  propTypesMisspellWarningShown = false;
                }

                function getDeclarationErrorAddendum() {
                  if (ReactCurrentOwner.current) {
                    var name = getComponentName(ReactCurrentOwner.current.type);

                    if (name) {
                      return '\n\nCheck the render method of `' + name + '`.';
                    }
                  }

                  return '';
                }

                function getSourceInfoErrorAddendum(source) {
                  if (source !== undefined) {
                    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
                    var lineNumber = source.lineNumber;
                    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
                  }

                  return '';
                }

                function getSourceInfoErrorAddendumForProps(elementProps) {
                  if (elementProps !== null && elementProps !== undefined) {
                    return getSourceInfoErrorAddendum(elementProps.__source);
                  }

                  return '';
                }
                /**
                 * Warn if there's no key explicitly set on dynamic arrays of children or
                 * object keys are not valid. This allows us to keep track of children between
                 * updates.
                 */

                var ownerHasKeyUseWarning = {};

                function getCurrentComponentErrorInfo(parentType) {
                  var info = getDeclarationErrorAddendum();

                  if (!info) {
                    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

                    if (parentName) {
                      info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                    }
                  }

                  return info;
                }
                /**
                 * Warn if the element doesn't have an explicit key assigned to it.
                 * This element is in an array. The array could grow and shrink or be
                 * reordered. All children that haven't already been validated are required to
                 * have a "key" property assigned to it. Error statuses are cached so a warning
                 * will only be shown once.
                 *
                 * @internal
                 * @param {ReactElement} element Element that requires a key.
                 * @param {*} parentType element's parent's type.
                 */

                function validateExplicitKey(element, parentType) {
                  if (!element._store || element._store.validated || element.key != null) {
                    return;
                  }

                  element._store.validated = true;
                  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

                  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                    return;
                  }

                  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
                  // property, it may be the creator of the child that's responsible for
                  // assigning it a key.

                  var childOwner = '';

                  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
                    // Give the component that originally created this child.
                    childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
                  }

                  {
                    setCurrentlyValidatingElement$1(element);

                    error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);

                    setCurrentlyValidatingElement$1(null);
                  }
                }
                /**
                 * Ensure that every element either is passed in a static location, in an
                 * array with an explicit keys property defined, or in an object literal
                 * with valid key property.
                 *
                 * @internal
                 * @param {ReactNode} node Statically passed child of any type.
                 * @param {*} parentType node's parent's type.
                 */

                function validateChildKeys(node, parentType) {
                  if (typeof node !== 'object') {
                    return;
                  }

                  if (Array.isArray(node)) {
                    for (var i = 0; i < node.length; i++) {
                      var child = node[i];

                      if (isValidElement(child)) {
                        validateExplicitKey(child, parentType);
                      }
                    }
                  } else if (isValidElement(node)) {
                    // This element was passed in a valid location.
                    if (node._store) {
                      node._store.validated = true;
                    }
                  } else if (node) {
                    var iteratorFn = getIteratorFn(node);

                    if (typeof iteratorFn === 'function') {
                      // Entry iterators used to provide implicit keys,
                      // but now we print a separate warning for them later.
                      if (iteratorFn !== node.entries) {
                        var iterator = iteratorFn.call(node);
                        var step;

                        while (!(step = iterator.next()).done) {
                          if (isValidElement(step.value)) {
                            validateExplicitKey(step.value, parentType);
                          }
                        }
                      }
                    }
                  }
                }
                /**
                 * Given an element, validate that its props follow the propTypes definition,
                 * provided by the type.
                 *
                 * @param {ReactElement} element
                 */

                function validatePropTypes(element) {
                  {
                    var type = element.type;

                    if (type === null || type === undefined || typeof type === 'string') {
                      return;
                    }

                    var propTypes;

                    if (typeof type === 'function') {
                      propTypes = type.propTypes;
                    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
                    // Inner props are checked in the reconciler.
                    type.$$typeof === REACT_MEMO_TYPE)) {
                      propTypes = type.propTypes;
                    } else {
                      return;
                    }

                    if (propTypes) {
                      // Intentionally inside to avoid triggering lazy initializers:
                      var name = getComponentName(type);
                      checkPropTypes(propTypes, element.props, 'prop', name, element);
                    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
                      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

                      var _name = getComponentName(type);

                      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
                    }

                    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
                      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
                    }
                  }
                }
                /**
                 * Given a fragment, validate that it can only be provided with fragment props
                 * @param {ReactElement} fragment
                 */

                function validateFragmentProps(fragment) {
                  {
                    var keys = Object.keys(fragment.props);

                    for (var i = 0; i < keys.length; i++) {
                      var key = keys[i];

                      if (key !== 'children' && key !== 'key') {
                        setCurrentlyValidatingElement$1(fragment);

                        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

                        setCurrentlyValidatingElement$1(null);
                        break;
                      }
                    }

                    if (fragment.ref !== null) {
                      setCurrentlyValidatingElement$1(fragment);

                      error('Invalid attribute `ref` supplied to `React.Fragment`.');

                      setCurrentlyValidatingElement$1(null);
                    }
                  }
                }
                function createElementWithValidation(type, props, children) {
                  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
                  // succeed and there will likely be errors in render.

                  if (!validType) {
                    var info = '';

                    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
                      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
                    }

                    var sourceInfo = getSourceInfoErrorAddendumForProps(props);

                    if (sourceInfo) {
                      info += sourceInfo;
                    } else {
                      info += getDeclarationErrorAddendum();
                    }

                    var typeString;

                    if (type === null) {
                      typeString = 'null';
                    } else if (Array.isArray(type)) {
                      typeString = 'array';
                    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                      typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
                      info = ' Did you accidentally export a JSX literal instead of a component?';
                    } else {
                      typeString = typeof type;
                    }

                    {
                      error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
                    }
                  }

                  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
                  // TODO: Drop this when these are no longer allowed as the type argument.

                  if (element == null) {
                    return element;
                  } // Skip key warning if the type isn't valid since our key validation logic
                  // doesn't expect a non-string/function type and can throw confusing errors.
                  // We don't want exception behavior to differ between dev and prod.
                  // (Rendering will throw with a helpful message and as soon as the type is
                  // fixed, the key warnings will appear.)


                  if (validType) {
                    for (var i = 2; i < arguments.length; i++) {
                      validateChildKeys(arguments[i], type);
                    }
                  }

                  if (type === _exports15.Fragment) {
                    validateFragmentProps(element);
                  } else {
                    validatePropTypes(element);
                  }

                  return element;
                }
                var didWarnAboutDeprecatedCreateFactory = false;
                function createFactoryWithValidation(type) {
                  var validatedFactory = createElementWithValidation.bind(null, type);
                  validatedFactory.type = type;

                  {
                    if (!didWarnAboutDeprecatedCreateFactory) {
                      didWarnAboutDeprecatedCreateFactory = true;

                      warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
                    } // Legacy hook: remove it


                    Object.defineProperty(validatedFactory, 'type', {
                      enumerable: false,
                      get: function () {
                        warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');

                        Object.defineProperty(this, 'type', {
                          value: type
                        });
                        return type;
                      }
                    });
                  }

                  return validatedFactory;
                }
                function cloneElementWithValidation(element, props, children) {
                  var newElement = cloneElement.apply(this, arguments);

                  for (var i = 2; i < arguments.length; i++) {
                    validateChildKeys(arguments[i], newElement.type);
                  }

                  validatePropTypes(newElement);
                  return newElement;
                }

                {

                  try {
                    var frozenObject = Object.freeze({});
                    /* eslint-disable no-new */

                    new Map([[frozenObject, null]]);
                    new Set([frozenObject]);
                    /* eslint-enable no-new */
                  } catch (e) {}
                }

                var createElement$1 = createElementWithValidation;
                var cloneElement$1 = cloneElementWithValidation;
                var createFactory = createFactoryWithValidation;
                var Children = {
                  map: mapChildren,
                  forEach: forEachChildren,
                  count: countChildren,
                  toArray: toArray,
                  only: onlyChild
                };

                _exports15.Children = Children;
                _exports15.Component = Component;
                _exports15.PureComponent = PureComponent;
                _exports15.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
                _exports15.cloneElement = cloneElement$1;
                _exports15.createContext = createContext;
                _exports15.createElement = createElement$1;
                _exports15.createFactory = createFactory;
                _exports15.createRef = createRef;
                _exports15.forwardRef = forwardRef;
                _exports15.isValidElement = isValidElement;
                _exports15.lazy = lazy;
                _exports15.memo = memo;
                _exports15.useCallback = useCallback;
                _exports15.useContext = useContext;
                _exports15.useDebugValue = useDebugValue;
                _exports15.useEffect = useEffect;
                _exports15.useImperativeHandle = useImperativeHandle;
                _exports15.useLayoutEffect = useLayoutEffect;
                _exports15.useMemo = useMemo;
                _exports15.useReducer = useReducer;
                _exports15.useRef = useRef;
                _exports15.useState = useState;
                _exports15.version = ReactVersion;
              })();
            }

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } }, "object-assign": { "package.json": function module(_require15, _exports16, _module17) {

          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //                                                                                                                     //
          // node_modules/object-assign/package.json                                                                             //
          //                                                                                                                     //
          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //
          _module17.exports = {
            "name": "object-assign",
            "version": "4.1.1"
          };

          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        }, "index.js": function module(_require16, _exports17, _module18) {
          /* eslint-disable no-unused-vars */
          var getOwnPropertySymbols = Object.getOwnPropertySymbols;
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var propIsEnumerable = Object.prototype.propertyIsEnumerable;

          function toObject(val) {
            if (val === null || val === undefined) {
              throw new TypeError('Object.assign cannot be called with null or undefined');
            }

            return Object(val);
          }

          function shouldUseNative() {
            try {
              if (!Object.assign) {
                return false;
              }

              // Detect buggy property enumeration order in older V8 versions.

              // https://bugs.chromium.org/p/v8/issues/detail?id=4118
              var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
              test1[5] = 'de';
              if (Object.getOwnPropertyNames(test1)[0] === '5') {
                return false;
              }

              // https://bugs.chromium.org/p/v8/issues/detail?id=3056
              var test2 = {};
              for (var i = 0; i < 10; i++) {
                test2['_' + String.fromCharCode(i)] = i;
              }
              var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
                return test2[n];
              });
              if (order2.join('') !== '0123456789') {
                return false;
              }

              // https://bugs.chromium.org/p/v8/issues/detail?id=3056
              var test3 = {};
              'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
                test3[letter] = letter;
              });
              if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
                return false;
              }

              return true;
            } catch (err) {
              // We don't expect any of the above to throw, but better to be safe.
              return false;
            }
          }

          _module18.exports = shouldUseNative() ? Object.assign : function (target, source) {
            var from;
            var to = toObject(target);
            var symbols;

            for (var s = 1; s < arguments.length; s++) {
              from = Object(arguments[s]);

              for (var key in from) {
                if (hasOwnProperty.call(from, key)) {
                  to[key] = from[key];
                }
              }

              if (getOwnPropertySymbols) {
                symbols = getOwnPropertySymbols(from);
                for (var i = 0; i < symbols.length; i++) {
                  if (propIsEnumerable.call(from, symbols[i])) {
                    to[symbols[i]] = from[symbols[i]];
                  }
                }
              }
            }

            return to;
          };

          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        } }, "react-dom": { "package.json": function module(_require17, _exports18, _module19) {

          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //                                                                                                                     //
          // node_modules/react-dom/package.json                                                                                 //
          //                                                                                                                     //
          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //
          _module19.exports = {
            "name": "react-dom",
            "version": "17.0.2",
            "browser": {
              "./server.js": "./server.browser.js",
              "./unstable-fizz.js": "./unstable-fizz.browser.js"
            },
            "main": "index.js"
          };

          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        }, "index.js": function module(_require18, _exports19, _module20) {

          function checkDCE() {
            /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') {
              return;
            }
            if (process.env.NODE_ENV !== 'production') {
              // This branch is unreachable because this function is only called
              // in production, but the condition is true only in development.
              // Therefore if the branch is still here, dead code elimination wasn't
              // properly applied.
              // Don't change the message. React DevTools relies on it. Also make sure
              // this message doesn't occur elsewhere in this function, or it will cause
              // a false positive.
              throw new Error('^_^');
            }
            try {
              // Verify that the code above has been dead code eliminated (DCE'd).
              __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
            } catch (err) {
              // DevTools shouldn't crash React, no matter what.
              // We should still report in case we break this code.
              console.error(err);
            }
          }

          if (process.env.NODE_ENV === 'production') {
            // DCE check should happen before ReactDOM bundle executes so that
            // DevTools can report bad minification during injection.
            checkDCE();
            _module20.exports = _require18('./cjs/react-dom.production.min.js');
          } else {
            _module20.exports = _require18('./cjs/react-dom.development.js');
          }

          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        }, "cjs": { "react-dom.production.min.js": function _module21(_require19, _exports20) {
            var aa = _require19("react"),
                m = _require19("object-assign"),
                r = _require19("scheduler");function y(a) {
              for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++) b += "&args[]=" + encodeURIComponent(arguments[c]);return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
            }if (!aa) throw Error(y(227));var ba = new Set(),
                ca = {};function da(a, b) {
              ea(a, b);ea(a + "Capture", b);
            }
            function ea(a, b) {
              ca[a] = b;for (a = 0; a < b.length; a++) ba.add(b[a]);
            }
            var fa = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement),
                ha = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,
                ia = Object.prototype.hasOwnProperty,
                ja = {},
                ka = {};function la(a) {
              if (ia.call(ka, a)) return !0;if (ia.call(ja, a)) return !1;if (ha.test(a)) return ka[a] = !0;ja[a] = !0;return !1;
            }function ma(a, b, c, d) {
              if (null !== c && 0 === c.type) return !1;switch (typeof b) {case "function":case "symbol":
                  return !0;case "boolean":
                  if (d) return !1;if (null !== c) return !c.acceptsBooleans;a = a.toLowerCase().slice(0, 5);return "data-" !== a && "aria-" !== a;default:
                  return !1;}
            }
            function na(a, b, c, d) {
              if (null === b || "undefined" === typeof b || ma(a, b, c, d)) return !0;if (d) return !1;if (null !== c) switch (c.type) {case 3:
                  return !b;case 4:
                  return !1 === b;case 5:
                  return isNaN(b);case 6:
                  return isNaN(b) || 1 > b;}return !1;
            }function B(a, b, c, d, e, f, g) {
              this.acceptsBooleans = 2 === b || 3 === b || 4 === b;this.attributeName = d;this.attributeNamespace = e;this.mustUseProperty = c;this.propertyName = a;this.type = b;this.sanitizeURL = f;this.removeEmptyString = g;
            }var D = {};
            "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function (a) {
              D[a] = new B(a, 0, !1, a, null, !1, !1);
            });[["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function (a) {
              var b = a[0];D[b] = new B(b, 1, !1, a[1], null, !1, !1);
            });["contentEditable", "draggable", "spellCheck", "value"].forEach(function (a) {
              D[a] = new B(a, 2, !1, a.toLowerCase(), null, !1, !1);
            });
            ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function (a) {
              D[a] = new B(a, 2, !1, a, null, !1, !1);
            });"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function (a) {
              D[a] = new B(a, 3, !1, a.toLowerCase(), null, !1, !1);
            });
            ["checked", "multiple", "muted", "selected"].forEach(function (a) {
              D[a] = new B(a, 3, !0, a, null, !1, !1);
            });["capture", "download"].forEach(function (a) {
              D[a] = new B(a, 4, !1, a, null, !1, !1);
            });["cols", "rows", "size", "span"].forEach(function (a) {
              D[a] = new B(a, 6, !1, a, null, !1, !1);
            });["rowSpan", "start"].forEach(function (a) {
              D[a] = new B(a, 5, !1, a.toLowerCase(), null, !1, !1);
            });var oa = /[\-:]([a-z])/g;function pa(a) {
              return a[1].toUpperCase();
            }
            "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function (a) {
              var b = a.replace(oa, pa);D[b] = new B(b, 1, !1, a, null, !1, !1);
            });"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function (a) {
              var b = a.replace(oa, pa);D[b] = new B(b, 1, !1, a, "http://www.w3.org/1999/xlink", !1, !1);
            });["xml:base", "xml:lang", "xml:space"].forEach(function (a) {
              var b = a.replace(oa, pa);D[b] = new B(b, 1, !1, a, "http://www.w3.org/XML/1998/namespace", !1, !1);
            });["tabIndex", "crossOrigin"].forEach(function (a) {
              D[a] = new B(a, 1, !1, a.toLowerCase(), null, !1, !1);
            });
            D.xlinkHref = new B("xlinkHref", 1, !1, "xlink:href", "http://www.w3.org/1999/xlink", !0, !1);["src", "href", "action", "formAction"].forEach(function (a) {
              D[a] = new B(a, 1, !1, a.toLowerCase(), null, !0, !0);
            });
            function qa(a, b, c, d) {
              var e = D.hasOwnProperty(b) ? D[b] : null;var f = null !== e ? 0 === e.type : d ? !1 : !(2 < b.length) || "o" !== b[0] && "O" !== b[0] || "n" !== b[1] && "N" !== b[1] ? !1 : !0;f || (na(b, c, e, d) && (c = null), d || null === e ? la(b) && (null === c ? a.removeAttribute(b) : a.setAttribute(b, "" + c)) : e.mustUseProperty ? a[e.propertyName] = null === c ? 3 === e.type ? !1 : "" : c : (b = e.attributeName, d = e.attributeNamespace, null === c ? a.removeAttribute(b) : (e = e.type, c = 3 === e || 4 === e && !0 === c ? "" : "" + c, d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c))));
            }
            var ra = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
                sa = 60103,
                ta = 60106,
                ua = 60107,
                wa = 60108,
                xa = 60114,
                ya = 60109,
                za = 60110,
                Aa = 60112,
                Ba = 60113,
                Ca = 60120,
                Da = 60115,
                Ea = 60116,
                Fa = 60121,
                Ga = 60128,
                Ha = 60129,
                Ia = 60130,
                Ja = 60131;
            if ("function" === typeof Symbol && Symbol.for) {
              var E = Symbol.for;sa = E("react.element");ta = E("react.portal");ua = E("react.fragment");wa = E("react.strict_mode");xa = E("react.profiler");ya = E("react.provider");za = E("react.context");Aa = E("react.forward_ref");Ba = E("react.suspense");Ca = E("react.suspense_list");Da = E("react.memo");Ea = E("react.lazy");Fa = E("react.block");E("react.scope");Ga = E("react.opaque.id");Ha = E("react.debug_trace_mode");Ia = E("react.offscreen");Ja = E("react.legacy_hidden");
            }
            var Ka = "function" === typeof Symbol && Symbol.iterator;function La(a) {
              if (null === a || "object" !== typeof a) return null;a = Ka && a[Ka] || a["@@iterator"];return "function" === typeof a ? a : null;
            }var Ma;function Na(a) {
              if (void 0 === Ma) try {
                throw Error();
              } catch (c) {
                var b = c.stack.trim().match(/\n( *(at )?)/);Ma = b && b[1] || "";
              }return "\n" + Ma + a;
            }var Oa = !1;
            function Pa(a, b) {
              if (!a || Oa) return "";Oa = !0;var c = Error.prepareStackTrace;Error.prepareStackTrace = void 0;try {
                if (b) {
                  if (b = function () {
                    throw Error();
                  }, Object.defineProperty(b.prototype, "props", { set: function () {
                      throw Error();
                    } }), "object" === typeof Reflect && Reflect.construct) {
                    try {
                      Reflect.construct(b, []);
                    } catch (k) {
                      var d = k;
                    }Reflect.construct(a, [], b);
                  } else {
                    try {
                      b.call();
                    } catch (k) {
                      d = k;
                    }a.call(b.prototype);
                  }
                } else {
                  try {
                    throw Error();
                  } catch (k) {
                    d = k;
                  }a();
                }
              } catch (k) {
                if (k && d && "string" === typeof k.stack) {
                  for (var e = k.stack.split("\n"), f = d.stack.split("\n"), g = e.length - 1, h = f.length - 1; 1 <= g && 0 <= h && e[g] !== f[h];) h--;for (; 1 <= g && 0 <= h; g--, h--) if (e[g] !== f[h]) {
                    if (1 !== g || 1 !== h) {
                      do if (g--, h--, 0 > h || e[g] !== f[h]) return "\n" + e[g].replace(" at new ", " at "); while (1 <= g && 0 <= h);
                    }break;
                  }
                }
              } finally {
                Oa = !1, Error.prepareStackTrace = c;
              }return (a = a ? a.displayName || a.name : "") ? Na(a) : "";
            }
            function Qa(a) {
              switch (a.tag) {case 5:
                  return Na(a.type);case 16:
                  return Na("Lazy");case 13:
                  return Na("Suspense");case 19:
                  return Na("SuspenseList");case 0:case 2:case 15:
                  return a = Pa(a.type, !1), a;case 11:
                  return a = Pa(a.type.render, !1), a;case 22:
                  return a = Pa(a.type._render, !1), a;case 1:
                  return a = Pa(a.type, !0), a;default:
                  return "";}
            }
            function Ra(a) {
              if (null == a) return null;if ("function" === typeof a) return a.displayName || a.name || null;if ("string" === typeof a) return a;switch (a) {case ua:
                  return "Fragment";case ta:
                  return "Portal";case xa:
                  return "Profiler";case wa:
                  return "StrictMode";case Ba:
                  return "Suspense";case Ca:
                  return "SuspenseList";}if ("object" === typeof a) switch (a.$$typeof) {case za:
                  return (a.displayName || "Context") + ".Consumer";case ya:
                  return (a._context.displayName || "Context") + ".Provider";case Aa:
                  var b = a.render;b = b.displayName || b.name || "";
                  return a.displayName || ("" !== b ? "ForwardRef(" + b + ")" : "ForwardRef");case Da:
                  return Ra(a.type);case Fa:
                  return Ra(a._render);case Ea:
                  b = a._payload;a = a._init;try {
                    return Ra(a(b));
                  } catch (c) {}}return null;
            }function Sa(a) {
              switch (typeof a) {case "boolean":case "number":case "object":case "string":case "undefined":
                  return a;default:
                  return "";}
            }function Ta(a) {
              var b = a.type;return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b || "radio" === b);
            }
            function Ua(a) {
              var b = Ta(a) ? "checked" : "value",
                  c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b),
                  d = "" + a[b];if (!a.hasOwnProperty(b) && "undefined" !== typeof c && "function" === typeof c.get && "function" === typeof c.set) {
                var e = c.get,
                    f = c.set;Object.defineProperty(a, b, { configurable: !0, get: function () {
                    return e.call(this);
                  }, set: function (a) {
                    d = "" + a;f.call(this, a);
                  } });Object.defineProperty(a, b, { enumerable: c.enumerable });return { getValue: function () {
                    return d;
                  }, setValue: function (a) {
                    d = "" + a;
                  }, stopTracking: function () {
                    a._valueTracker = null;delete a[b];
                  } };
              }
            }function Va(a) {
              a._valueTracker || (a._valueTracker = Ua(a));
            }function Wa(a) {
              if (!a) return !1;var b = a._valueTracker;if (!b) return !0;var c = b.getValue();var d = "";a && (d = Ta(a) ? a.checked ? "true" : "false" : a.value);a = d;return a !== c ? (b.setValue(a), !0) : !1;
            }function Xa(a) {
              a = a || ("undefined" !== typeof document ? document : void 0);if ("undefined" === typeof a) return null;try {
                return a.activeElement || a.body;
              } catch (b) {
                return a.body;
              }
            }
            function Ya(a, b) {
              var c = b.checked;return m({}, b, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: null != c ? c : a._wrapperState.initialChecked });
            }function Za(a, b) {
              var c = null == b.defaultValue ? "" : b.defaultValue,
                  d = null != b.checked ? b.checked : b.defaultChecked;c = Sa(null != b.value ? b.value : c);a._wrapperState = { initialChecked: d, initialValue: c, controlled: "checkbox" === b.type || "radio" === b.type ? null != b.checked : null != b.value };
            }function $a(a, b) {
              b = b.checked;null != b && qa(a, "checked", b, !1);
            }
            function ab(a, b) {
              $a(a, b);var c = Sa(b.value),
                  d = b.type;if (null != c) {
                if ("number" === d) {
                  if (0 === c && "" === a.value || a.value != c) a.value = "" + c;
                } else a.value !== "" + c && (a.value = "" + c);
              } else if ("submit" === d || "reset" === d) {
                a.removeAttribute("value");return;
              }b.hasOwnProperty("value") ? bb(a, b.type, c) : b.hasOwnProperty("defaultValue") && bb(a, b.type, Sa(b.defaultValue));null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);
            }
            function cb(a, b, c) {
              if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {
                var d = b.type;if (!("submit" !== d && "reset" !== d || void 0 !== b.value && null !== b.value)) return;b = "" + a._wrapperState.initialValue;c || b === a.value || (a.value = b);a.defaultValue = b;
              }c = a.name;"" !== c && (a.name = "");a.defaultChecked = !!a._wrapperState.initialChecked;"" !== c && (a.name = c);
            }
            function bb(a, b, c) {
              if ("number" !== b || Xa(a.ownerDocument) !== a) null == c ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c && (a.defaultValue = "" + c);
            }function db(a) {
              var b = "";aa.Children.forEach(a, function (a) {
                null != a && (b += a);
              });return b;
            }function eb(a, b) {
              a = m({ children: void 0 }, b);if (b = db(b.children)) a.children = b;return a;
            }
            function fb(a, b, c, d) {
              a = a.options;if (b) {
                b = {};for (var e = 0; e < c.length; e++) b["$" + c[e]] = !0;for (c = 0; c < a.length; c++) e = b.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = !0);
              } else {
                c = "" + Sa(c);b = null;for (e = 0; e < a.length; e++) {
                  if (a[e].value === c) {
                    a[e].selected = !0;d && (a[e].defaultSelected = !0);return;
                  }null !== b || a[e].disabled || (b = a[e]);
                }null !== b && (b.selected = !0);
              }
            }
            function gb(a, b) {
              if (null != b.dangerouslySetInnerHTML) throw Error(y(91));return m({}, b, { value: void 0, defaultValue: void 0, children: "" + a._wrapperState.initialValue });
            }function hb(a, b) {
              var c = b.value;if (null == c) {
                c = b.children;b = b.defaultValue;if (null != c) {
                  if (null != b) throw Error(y(92));if (Array.isArray(c)) {
                    if (!(1 >= c.length)) throw Error(y(93));c = c[0];
                  }b = c;
                }null == b && (b = "");c = b;
              }a._wrapperState = { initialValue: Sa(c) };
            }
            function ib(a, b) {
              var c = Sa(b.value),
                  d = Sa(b.defaultValue);null != c && (c = "" + c, c !== a.value && (a.value = c), null == b.defaultValue && a.defaultValue !== c && (a.defaultValue = c));null != d && (a.defaultValue = "" + d);
            }function jb(a) {
              var b = a.textContent;b === a._wrapperState.initialValue && "" !== b && null !== b && (a.value = b);
            }var kb = { html: "http://www.w3.org/1999/xhtml", mathml: "http://www.w3.org/1998/Math/MathML", svg: "http://www.w3.org/2000/svg" };
            function lb(a) {
              switch (a) {case "svg":
                  return "http://www.w3.org/2000/svg";case "math":
                  return "http://www.w3.org/1998/Math/MathML";default:
                  return "http://www.w3.org/1999/xhtml";}
            }function mb(a, b) {
              return null == a || "http://www.w3.org/1999/xhtml" === a ? lb(b) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b ? "http://www.w3.org/1999/xhtml" : a;
            }
            var nb,
                ob = function (a) {
              return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function (b, c, d, e) {
                MSApp.execUnsafeLocalFunction(function () {
                  return a(b, c, d, e);
                });
              } : a;
            }(function (a, b) {
              if (a.namespaceURI !== kb.svg || "innerHTML" in a) a.innerHTML = b;else {
                nb = nb || document.createElement("div");nb.innerHTML = "<svg>" + b.valueOf().toString() + "</svg>";for (b = nb.firstChild; a.firstChild;) a.removeChild(a.firstChild);for (; b.firstChild;) a.appendChild(b.firstChild);
              }
            });
            function pb(a, b) {
              if (b) {
                var c = a.firstChild;if (c && c === a.lastChild && 3 === c.nodeType) {
                  c.nodeValue = b;return;
                }
              }a.textContent = b;
            }
            var qb = { animationIterationCount: !0, borderImageOutset: !0, borderImageSlice: !0, borderImageWidth: !0, boxFlex: !0, boxFlexGroup: !0, boxOrdinalGroup: !0, columnCount: !0, columns: !0, flex: !0, flexGrow: !0, flexPositive: !0, flexShrink: !0, flexNegative: !0, flexOrder: !0, gridArea: !0, gridRow: !0, gridRowEnd: !0, gridRowSpan: !0, gridRowStart: !0, gridColumn: !0, gridColumnEnd: !0, gridColumnSpan: !0, gridColumnStart: !0, fontWeight: !0, lineClamp: !0, lineHeight: !0, opacity: !0, order: !0, orphans: !0, tabSize: !0, widows: !0, zIndex: !0, zoom: !0, fillOpacity: !0,
              floodOpacity: !0, stopOpacity: !0, strokeDasharray: !0, strokeDashoffset: !0, strokeMiterlimit: !0, strokeOpacity: !0, strokeWidth: !0 },
                rb = ["Webkit", "ms", "Moz", "O"];Object.keys(qb).forEach(function (a) {
              rb.forEach(function (b) {
                b = b + a.charAt(0).toUpperCase() + a.substring(1);qb[b] = qb[a];
              });
            });function sb(a, b, c) {
              return null == b || "boolean" === typeof b || "" === b ? "" : c || "number" !== typeof b || 0 === b || qb.hasOwnProperty(a) && qb[a] ? ("" + b).trim() : b + "px";
            }
            function tb(a, b) {
              a = a.style;for (var c in b) if (b.hasOwnProperty(c)) {
                var d = 0 === c.indexOf("--"),
                    e = sb(c, b[c], d);"float" === c && (c = "cssFloat");d ? a.setProperty(c, e) : a[c] = e;
              }
            }var ub = m({ menuitem: !0 }, { area: !0, base: !0, br: !0, col: !0, embed: !0, hr: !0, img: !0, input: !0, keygen: !0, link: !0, meta: !0, param: !0, source: !0, track: !0, wbr: !0 });
            function vb(a, b) {
              if (b) {
                if (ub[a] && (null != b.children || null != b.dangerouslySetInnerHTML)) throw Error(y(137, a));if (null != b.dangerouslySetInnerHTML) {
                  if (null != b.children) throw Error(y(60));if (!("object" === typeof b.dangerouslySetInnerHTML && "__html" in b.dangerouslySetInnerHTML)) throw Error(y(61));
                }if (null != b.style && "object" !== typeof b.style) throw Error(y(62));
              }
            }
            function wb(a, b) {
              if (-1 === a.indexOf("-")) return "string" === typeof b.is;switch (a) {case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":
                  return !1;default:
                  return !0;}
            }function xb(a) {
              a = a.target || a.srcElement || window;a.correspondingUseElement && (a = a.correspondingUseElement);return 3 === a.nodeType ? a.parentNode : a;
            }var yb = null,
                zb = null,
                Ab = null;
            function Bb(a) {
              if (a = Cb(a)) {
                if ("function" !== typeof yb) throw Error(y(280));var b = a.stateNode;b && (b = Db(b), yb(a.stateNode, a.type, b));
              }
            }function Eb(a) {
              zb ? Ab ? Ab.push(a) : Ab = [a] : zb = a;
            }function Fb() {
              if (zb) {
                var a = zb,
                    b = Ab;Ab = zb = null;Bb(a);if (b) for (a = 0; a < b.length; a++) Bb(b[a]);
              }
            }function Gb(a, b) {
              return a(b);
            }function Hb(a, b, c, d, e) {
              return a(b, c, d, e);
            }function Ib() {}var Jb = Gb,
                Kb = !1,
                Lb = !1;function Mb() {
              if (null !== zb || null !== Ab) Ib(), Fb();
            }
            function Nb(a, b, c) {
              if (Lb) return a(b, c);Lb = !0;try {
                return Jb(a, b, c);
              } finally {
                Lb = !1, Mb();
              }
            }
            function Ob(a, b) {
              var c = a.stateNode;if (null === c) return null;var d = Db(c);if (null === d) return null;c = d[b];a: switch (b) {case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":case "onMouseEnter":
                  (d = !d.disabled) || (a = a.type, d = !("button" === a || "input" === a || "select" === a || "textarea" === a));a = !d;break a;default:
                  a = !1;}if (a) return null;if (c && "function" !== typeof c) throw Error(y(231, b, typeof c));return c;
            }var Pb = !1;if (fa) try {
              var Qb = {};Object.defineProperty(Qb, "passive", { get: function () {
                  Pb = !0;
                } });window.addEventListener("test", Qb, Qb);window.removeEventListener("test", Qb, Qb);
            } catch (a) {
              Pb = !1;
            }function Rb(a, b, c, d, e, f, g, h, k) {
              var l = Array.prototype.slice.call(arguments, 3);try {
                b.apply(c, l);
              } catch (n) {
                this.onError(n);
              }
            }var Sb = !1,
                Tb = null,
                Ub = !1,
                Vb = null,
                Wb = { onError: function (a) {
                Sb = !0;Tb = a;
              } };function Xb(a, b, c, d, e, f, g, h, k) {
              Sb = !1;Tb = null;Rb.apply(Wb, arguments);
            }
            function Yb(a, b, c, d, e, f, g, h, k) {
              Xb.apply(this, arguments);if (Sb) {
                if (Sb) {
                  var l = Tb;Sb = !1;Tb = null;
                } else throw Error(y(198));Ub || (Ub = !0, Vb = l);
              }
            }function Zb(a) {
              var b = a,
                  c = a;if (a.alternate) for (; b.return;) b = b.return;else {
                a = b;do b = a, 0 !== (b.flags & 1026) && (c = b.return), a = b.return; while (a);
              }return 3 === b.tag ? c : null;
            }function $b(a) {
              if (13 === a.tag) {
                var b = a.memoizedState;null === b && (a = a.alternate, null !== a && (b = a.memoizedState));if (null !== b) return b.dehydrated;
              }return null;
            }function ac(a) {
              if (Zb(a) !== a) throw Error(y(188));
            }
            function bc(a) {
              var b = a.alternate;if (!b) {
                b = Zb(a);if (null === b) throw Error(y(188));return b !== a ? null : a;
              }for (var c = a, d = b;;) {
                var e = c.return;if (null === e) break;var f = e.alternate;if (null === f) {
                  d = e.return;if (null !== d) {
                    c = d;continue;
                  }break;
                }if (e.child === f.child) {
                  for (f = e.child; f;) {
                    if (f === c) return ac(e), a;if (f === d) return ac(e), b;f = f.sibling;
                  }throw Error(y(188));
                }if (c.return !== d.return) c = e, d = f;else {
                  for (var g = !1, h = e.child; h;) {
                    if (h === c) {
                      g = !0;c = e;d = f;break;
                    }if (h === d) {
                      g = !0;d = e;c = f;break;
                    }h = h.sibling;
                  }if (!g) {
                    for (h = f.child; h;) {
                      if (h === c) {
                        g = !0;c = f;d = e;break;
                      }if (h === d) {
                        g = !0;d = f;c = e;break;
                      }h = h.sibling;
                    }if (!g) throw Error(y(189));
                  }
                }if (c.alternate !== d) throw Error(y(190));
              }if (3 !== c.tag) throw Error(y(188));return c.stateNode.current === c ? a : b;
            }function cc(a) {
              a = bc(a);if (!a) return null;for (var b = a;;) {
                if (5 === b.tag || 6 === b.tag) return b;if (b.child) b.child.return = b, b = b.child;else {
                  if (b === a) break;for (; !b.sibling;) {
                    if (!b.return || b.return === a) return null;b = b.return;
                  }b.sibling.return = b.return;b = b.sibling;
                }
              }return null;
            }
            function dc(a, b) {
              for (var c = a.alternate; null !== b;) {
                if (b === a || b === c) return !0;b = b.return;
              }return !1;
            }var ec,
                fc,
                gc,
                hc,
                ic = !1,
                jc = [],
                kc = null,
                lc = null,
                mc = null,
                nc = new Map(),
                oc = new Map(),
                pc = [],
                qc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
            function rc(a, b, c, d, e) {
              return { blockedOn: a, domEventName: b, eventSystemFlags: c | 16, nativeEvent: e, targetContainers: [d] };
            }function sc(a, b) {
              switch (a) {case "focusin":case "focusout":
                  kc = null;break;case "dragenter":case "dragleave":
                  lc = null;break;case "mouseover":case "mouseout":
                  mc = null;break;case "pointerover":case "pointerout":
                  nc.delete(b.pointerId);break;case "gotpointercapture":case "lostpointercapture":
                  oc.delete(b.pointerId);}
            }
            function tc(a, b, c, d, e, f) {
              if (null === a || a.nativeEvent !== f) return a = rc(b, c, d, e, f), null !== b && (b = Cb(b), null !== b && fc(b)), a;a.eventSystemFlags |= d;b = a.targetContainers;null !== e && -1 === b.indexOf(e) && b.push(e);return a;
            }
            function uc(a, b, c, d, e) {
              switch (b) {case "focusin":
                  return kc = tc(kc, a, b, c, d, e), !0;case "dragenter":
                  return lc = tc(lc, a, b, c, d, e), !0;case "mouseover":
                  return mc = tc(mc, a, b, c, d, e), !0;case "pointerover":
                  var f = e.pointerId;nc.set(f, tc(nc.get(f) || null, a, b, c, d, e));return !0;case "gotpointercapture":
                  return f = e.pointerId, oc.set(f, tc(oc.get(f) || null, a, b, c, d, e)), !0;}return !1;
            }
            function vc(a) {
              var b = wc(a.target);if (null !== b) {
                var c = Zb(b);if (null !== c) if (b = c.tag, 13 === b) {
                  if (b = $b(c), null !== b) {
                    a.blockedOn = b;hc(a.lanePriority, function () {
                      r.unstable_runWithPriority(a.priority, function () {
                        gc(c);
                      });
                    });return;
                  }
                } else if (3 === b && c.stateNode.hydrate) {
                  a.blockedOn = 3 === c.tag ? c.stateNode.containerInfo : null;return;
                }
              }a.blockedOn = null;
            }
            function xc(a) {
              if (null !== a.blockedOn) return !1;for (var b = a.targetContainers; 0 < b.length;) {
                var c = yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);if (null !== c) return b = Cb(c), null !== b && fc(b), a.blockedOn = c, !1;b.shift();
              }return !0;
            }function zc(a, b, c) {
              xc(a) && c.delete(b);
            }
            function Ac() {
              for (ic = !1; 0 < jc.length;) {
                var a = jc[0];if (null !== a.blockedOn) {
                  a = Cb(a.blockedOn);null !== a && ec(a);break;
                }for (var b = a.targetContainers; 0 < b.length;) {
                  var c = yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);if (null !== c) {
                    a.blockedOn = c;break;
                  }b.shift();
                }null === a.blockedOn && jc.shift();
              }null !== kc && xc(kc) && (kc = null);null !== lc && xc(lc) && (lc = null);null !== mc && xc(mc) && (mc = null);nc.forEach(zc);oc.forEach(zc);
            }
            function Bc(a, b) {
              a.blockedOn === b && (a.blockedOn = null, ic || (ic = !0, r.unstable_scheduleCallback(r.unstable_NormalPriority, Ac)));
            }
            function Cc(a) {
              function b(b) {
                return Bc(b, a);
              }if (0 < jc.length) {
                Bc(jc[0], a);for (var c = 1; c < jc.length; c++) {
                  var d = jc[c];d.blockedOn === a && (d.blockedOn = null);
                }
              }null !== kc && Bc(kc, a);null !== lc && Bc(lc, a);null !== mc && Bc(mc, a);nc.forEach(b);oc.forEach(b);for (c = 0; c < pc.length; c++) d = pc[c], d.blockedOn === a && (d.blockedOn = null);for (; 0 < pc.length && (c = pc[0], null === c.blockedOn);) vc(c), null === c.blockedOn && pc.shift();
            }
            function Dc(a, b) {
              var c = {};c[a.toLowerCase()] = b.toLowerCase();c["Webkit" + a] = "webkit" + b;c["Moz" + a] = "moz" + b;return c;
            }var Ec = { animationend: Dc("Animation", "AnimationEnd"), animationiteration: Dc("Animation", "AnimationIteration"), animationstart: Dc("Animation", "AnimationStart"), transitionend: Dc("Transition", "TransitionEnd") },
                Fc = {},
                Gc = {};
            fa && (Gc = document.createElement("div").style, "AnimationEvent" in window || (delete Ec.animationend.animation, delete Ec.animationiteration.animation, delete Ec.animationstart.animation), "TransitionEvent" in window || delete Ec.transitionend.transition);function Hc(a) {
              if (Fc[a]) return Fc[a];if (!Ec[a]) return a;var b = Ec[a],
                  c;for (c in b) if (b.hasOwnProperty(c) && c in Gc) return Fc[a] = b[c];return a;
            }
            var Ic = Hc("animationend"),
                Jc = Hc("animationiteration"),
                Kc = Hc("animationstart"),
                Lc = Hc("transitionend"),
                Mc = new Map(),
                Nc = new Map(),
                Oc = ["abort", "abort", Ic, "animationEnd", Jc, "animationIteration", Kc, "animationStart", "canplay", "canPlay", "canplaythrough", "canPlayThrough", "durationchange", "durationChange", "emptied", "emptied", "encrypted", "encrypted", "ended", "ended", "error", "error", "gotpointercapture", "gotPointerCapture", "load", "load", "loadeddata", "loadedData", "loadedmetadata", "loadedMetadata", "loadstart", "loadStart", "lostpointercapture", "lostPointerCapture", "playing", "playing", "progress", "progress", "seeking", "seeking", "stalled", "stalled", "suspend", "suspend", "timeupdate", "timeUpdate", Lc, "transitionEnd", "waiting", "waiting"];function Pc(a, b) {
              for (var c = 0; c < a.length; c += 2) {
                var d = a[c],
                    e = a[c + 1];e = "on" + (e[0].toUpperCase() + e.slice(1));Nc.set(d, b);Mc.set(d, e);da(e, [d]);
              }
            }var Qc = r.unstable_now;Qc();var F = 8;
            function Rc(a) {
              if (0 !== (1 & a)) return F = 15, 1;if (0 !== (2 & a)) return F = 14, 2;if (0 !== (4 & a)) return F = 13, 4;var b = 24 & a;if (0 !== b) return F = 12, b;if (0 !== (a & 32)) return F = 11, 32;b = 192 & a;if (0 !== b) return F = 10, b;if (0 !== (a & 256)) return F = 9, 256;b = 3584 & a;if (0 !== b) return F = 8, b;if (0 !== (a & 4096)) return F = 7, 4096;b = 4186112 & a;if (0 !== b) return F = 6, b;b = 62914560 & a;if (0 !== b) return F = 5, b;if (a & 67108864) return F = 4, 67108864;if (0 !== (a & 134217728)) return F = 3, 134217728;b = 805306368 & a;if (0 !== b) return F = 2, b;if (0 !== (1073741824 & a)) return F = 1, 1073741824;
              F = 8;return a;
            }function Sc(a) {
              switch (a) {case 99:
                  return 15;case 98:
                  return 10;case 97:case 96:
                  return 8;case 95:
                  return 2;default:
                  return 0;}
            }function Tc(a) {
              switch (a) {case 15:case 14:
                  return 99;case 13:case 12:case 11:case 10:
                  return 98;case 9:case 8:case 7:case 6:case 4:case 5:
                  return 97;case 3:case 2:case 1:
                  return 95;case 0:
                  return 90;default:
                  throw Error(y(358, a));}
            }
            function Uc(a, b) {
              var c = a.pendingLanes;if (0 === c) return F = 0;var d = 0,
                  e = 0,
                  f = a.expiredLanes,
                  g = a.suspendedLanes,
                  h = a.pingedLanes;if (0 !== f) d = f, e = F = 15;else if (f = c & 134217727, 0 !== f) {
                var k = f & ~g;0 !== k ? (d = Rc(k), e = F) : (h &= f, 0 !== h && (d = Rc(h), e = F));
              } else f = c & ~g, 0 !== f ? (d = Rc(f), e = F) : 0 !== h && (d = Rc(h), e = F);if (0 === d) return 0;d = 31 - Vc(d);d = c & ((0 > d ? 0 : 1 << d) << 1) - 1;if (0 !== b && b !== d && 0 === (b & g)) {
                Rc(b);if (e <= F) return b;F = e;
              }b = a.entangledLanes;if (0 !== b) for (a = a.entanglements, b &= d; 0 < b;) c = 31 - Vc(b), e = 1 << c, d |= a[c], b &= ~e;return d;
            }
            function Wc(a) {
              a = a.pendingLanes & -1073741825;return 0 !== a ? a : a & 1073741824 ? 1073741824 : 0;
            }function Xc(a, b) {
              switch (a) {case 15:
                  return 1;case 14:
                  return 2;case 12:
                  return a = Yc(24 & ~b), 0 === a ? Xc(10, b) : a;case 10:
                  return a = Yc(192 & ~b), 0 === a ? Xc(8, b) : a;case 8:
                  return a = Yc(3584 & ~b), 0 === a && (a = Yc(4186112 & ~b), 0 === a && (a = 512)), a;case 2:
                  return b = Yc(805306368 & ~b), 0 === b && (b = 268435456), b;}throw Error(y(358, a));
            }function Yc(a) {
              return a & -a;
            }function Zc(a) {
              for (var b = [], c = 0; 31 > c; c++) b.push(a);return b;
            }
            function $c(a, b, c) {
              a.pendingLanes |= b;var d = b - 1;a.suspendedLanes &= d;a.pingedLanes &= d;a = a.eventTimes;b = 31 - Vc(b);a[b] = c;
            }var Vc = Math.clz32 ? Math.clz32 : ad,
                bd = Math.log,
                cd = Math.LN2;function ad(a) {
              return 0 === a ? 32 : 31 - (bd(a) / cd | 0) | 0;
            }var dd = r.unstable_UserBlockingPriority,
                ed = r.unstable_runWithPriority,
                fd = !0;function gd(a, b, c, d) {
              Kb || Ib();var e = hd,
                  f = Kb;Kb = !0;try {
                Hb(e, a, b, c, d);
              } finally {
                (Kb = f) || Mb();
              }
            }function id(a, b, c, d) {
              ed(dd, hd.bind(null, a, b, c, d));
            }
            function hd(a, b, c, d) {
              if (fd) {
                var e;if ((e = 0 === (b & 4)) && 0 < jc.length && -1 < qc.indexOf(a)) a = rc(null, a, b, c, d), jc.push(a);else {
                  var f = yc(a, b, c, d);if (null === f) e && sc(a, d);else {
                    if (e) {
                      if (-1 < qc.indexOf(a)) {
                        a = rc(f, a, b, c, d);jc.push(a);return;
                      }if (uc(f, a, b, c, d)) return;sc(a, d);
                    }jd(a, b, d, null, c);
                  }
                }
              }
            }
            function yc(a, b, c, d) {
              var e = xb(d);e = wc(e);if (null !== e) {
                var f = Zb(e);if (null === f) e = null;else {
                  var g = f.tag;if (13 === g) {
                    e = $b(f);if (null !== e) return e;e = null;
                  } else if (3 === g) {
                    if (f.stateNode.hydrate) return 3 === f.tag ? f.stateNode.containerInfo : null;e = null;
                  } else f !== e && (e = null);
                }
              }jd(a, b, d, e, c);return null;
            }var kd = null,
                ld = null,
                md = null;
            function nd() {
              if (md) return md;var a,
                  b = ld,
                  c = b.length,
                  d,
                  e = "value" in kd ? kd.value : kd.textContent,
                  f = e.length;for (a = 0; a < c && b[a] === e[a]; a++);var g = c - a;for (d = 1; d <= g && b[c - d] === e[f - d]; d++);return md = e.slice(a, 1 < d ? 1 - d : void 0);
            }function od(a) {
              var b = a.keyCode;"charCode" in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b;10 === a && (a = 13);return 32 <= a || 13 === a ? a : 0;
            }function pd() {
              return !0;
            }function qd() {
              return !1;
            }
            function rd(a) {
              function b(b, d, e, f, g) {
                this._reactName = b;this._targetInst = e;this.type = d;this.nativeEvent = f;this.target = g;this.currentTarget = null;for (var c in a) a.hasOwnProperty(c) && (b = a[c], this[c] = b ? b(f) : f[c]);this.isDefaultPrevented = (null != f.defaultPrevented ? f.defaultPrevented : !1 === f.returnValue) ? pd : qd;this.isPropagationStopped = qd;return this;
              }m(b.prototype, { preventDefault: function () {
                  this.defaultPrevented = !0;var a = this.nativeEvent;a && (a.preventDefault ? a.preventDefault() : "unknown" !== typeof a.returnValue && (a.returnValue = !1), this.isDefaultPrevented = pd);
                }, stopPropagation: function () {
                  var a = this.nativeEvent;a && (a.stopPropagation ? a.stopPropagation() : "unknown" !== typeof a.cancelBubble && (a.cancelBubble = !0), this.isPropagationStopped = pd);
                }, persist: function () {}, isPersistent: pd });return b;
            }
            var sd = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function (a) {
                return a.timeStamp || Date.now();
              }, defaultPrevented: 0, isTrusted: 0 },
                td = rd(sd),
                ud = m({}, sd, { view: 0, detail: 0 }),
                vd = rd(ud),
                wd,
                xd,
                yd,
                Ad = m({}, ud, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: zd, button: 0, buttons: 0, relatedTarget: function (a) {
                return void 0 === a.relatedTarget ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;
              }, movementX: function (a) {
                if ("movementX" in a) return a.movementX;a !== yd && (yd && "mousemove" === a.type ? (wd = a.screenX - yd.screenX, xd = a.screenY - yd.screenY) : xd = wd = 0, yd = a);return wd;
              }, movementY: function (a) {
                return "movementY" in a ? a.movementY : xd;
              } }),
                Bd = rd(Ad),
                Cd = m({}, Ad, { dataTransfer: 0 }),
                Dd = rd(Cd),
                Ed = m({}, ud, { relatedTarget: 0 }),
                Fd = rd(Ed),
                Gd = m({}, sd, { animationName: 0, elapsedTime: 0, pseudoElement: 0 }),
                Hd = rd(Gd),
                Id = m({}, sd, { clipboardData: function (a) {
                return "clipboardData" in a ? a.clipboardData : window.clipboardData;
              } }),
                Jd = rd(Id),
                Kd = m({}, sd, { data: 0 }),
                Ld = rd(Kd),
                Md = { Esc: "Escape",
              Spacebar: " ", Left: "ArrowLeft", Up: "ArrowUp", Right: "ArrowRight", Down: "ArrowDown", Del: "Delete", Win: "OS", Menu: "ContextMenu", Apps: "ContextMenu", Scroll: "ScrollLock", MozPrintableKey: "Unidentified" },
                Nd = { 8: "Backspace", 9: "Tab", 12: "Clear", 13: "Enter", 16: "Shift", 17: "Control", 18: "Alt", 19: "Pause", 20: "CapsLock", 27: "Escape", 32: " ", 33: "PageUp", 34: "PageDown", 35: "End", 36: "Home", 37: "ArrowLeft", 38: "ArrowUp", 39: "ArrowRight", 40: "ArrowDown", 45: "Insert", 46: "Delete", 112: "F1", 113: "F2", 114: "F3", 115: "F4", 116: "F5", 117: "F6", 118: "F7",
              119: "F8", 120: "F9", 121: "F10", 122: "F11", 123: "F12", 144: "NumLock", 145: "ScrollLock", 224: "Meta" },
                Od = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };function Pd(a) {
              var b = this.nativeEvent;return b.getModifierState ? b.getModifierState(a) : (a = Od[a]) ? !!b[a] : !1;
            }function zd() {
              return Pd;
            }
            var Qd = m({}, ud, { key: function (a) {
                if (a.key) {
                  var b = Md[a.key] || a.key;if ("Unidentified" !== b) return b;
                }return "keypress" === a.type ? (a = od(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? Nd[a.keyCode] || "Unidentified" : "";
              }, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: zd, charCode: function (a) {
                return "keypress" === a.type ? od(a) : 0;
              }, keyCode: function (a) {
                return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
              }, which: function (a) {
                return "keypress" === a.type ? od(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
              } }),
                Rd = rd(Qd),
                Sd = m({}, Ad, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 }),
                Td = rd(Sd),
                Ud = m({}, ud, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: zd }),
                Vd = rd(Ud),
                Wd = m({}, sd, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 }),
                Xd = rd(Wd),
                Yd = m({}, Ad, { deltaX: function (a) {
                return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
              },
              deltaY: function (a) {
                return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
              }, deltaZ: 0, deltaMode: 0 }),
                Zd = rd(Yd),
                $d = [9, 13, 27, 32],
                ae = fa && "CompositionEvent" in window,
                be = null;fa && "documentMode" in document && (be = document.documentMode);var ce = fa && "TextEvent" in window && !be,
                de = fa && (!ae || be && 8 < be && 11 >= be),
                ee = String.fromCharCode(32),
                fe = !1;
            function ge(a, b) {
              switch (a) {case "keyup":
                  return -1 !== $d.indexOf(b.keyCode);case "keydown":
                  return 229 !== b.keyCode;case "keypress":case "mousedown":case "focusout":
                  return !0;default:
                  return !1;}
            }function he(a) {
              a = a.detail;return "object" === typeof a && "data" in a ? a.data : null;
            }var ie = !1;function je(a, b) {
              switch (a) {case "compositionend":
                  return he(b);case "keypress":
                  if (32 !== b.which) return null;fe = !0;return ee;case "textInput":
                  return a = b.data, a === ee && fe ? null : a;default:
                  return null;}
            }
            function ke(a, b) {
              if (ie) return "compositionend" === a || !ae && ge(a, b) ? (a = nd(), md = ld = kd = null, ie = !1, a) : null;switch (a) {case "paste":
                  return null;case "keypress":
                  if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {
                    if (b.char && 1 < b.char.length) return b.char;if (b.which) return String.fromCharCode(b.which);
                  }return null;case "compositionend":
                  return de && "ko" !== b.locale ? null : b.data;default:
                  return null;}
            }
            var le = { color: !0, date: !0, datetime: !0, "datetime-local": !0, email: !0, month: !0, number: !0, password: !0, range: !0, search: !0, tel: !0, text: !0, time: !0, url: !0, week: !0 };function me(a) {
              var b = a && a.nodeName && a.nodeName.toLowerCase();return "input" === b ? !!le[a.type] : "textarea" === b ? !0 : !1;
            }function ne(a, b, c, d) {
              Eb(d);b = oe(b, "onChange");0 < b.length && (c = new td("onChange", "change", null, c, d), a.push({ event: c, listeners: b }));
            }var pe = null,
                qe = null;function re(a) {
              se(a, 0);
            }function te(a) {
              var b = ue(a);if (Wa(b)) return a;
            }
            function ve(a, b) {
              if ("change" === a) return b;
            }var we = !1;if (fa) {
              var xe;if (fa) {
                var ye = "oninput" in document;if (!ye) {
                  var ze = document.createElement("div");ze.setAttribute("oninput", "return;");ye = "function" === typeof ze.oninput;
                }xe = ye;
              } else xe = !1;we = xe && (!document.documentMode || 9 < document.documentMode);
            }function Ae() {
              pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);
            }function Be(a) {
              if ("value" === a.propertyName && te(qe)) {
                var b = [];ne(b, qe, a, xb(a));a = re;if (Kb) a(b);else {
                  Kb = !0;try {
                    Gb(a, b);
                  } finally {
                    Kb = !1, Mb();
                  }
                }
              }
            }
            function Ce(a, b, c) {
              "focusin" === a ? (Ae(), pe = b, qe = c, pe.attachEvent("onpropertychange", Be)) : "focusout" === a && Ae();
            }function De(a) {
              if ("selectionchange" === a || "keyup" === a || "keydown" === a) return te(qe);
            }function Ee(a, b) {
              if ("click" === a) return te(b);
            }function Fe(a, b) {
              if ("input" === a || "change" === a) return te(b);
            }function Ge(a, b) {
              return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;
            }var He = "function" === typeof Object.is ? Object.is : Ge,
                Ie = Object.prototype.hasOwnProperty;
            function Je(a, b) {
              if (He(a, b)) return !0;if ("object" !== typeof a || null === a || "object" !== typeof b || null === b) return !1;var c = Object.keys(a),
                  d = Object.keys(b);if (c.length !== d.length) return !1;for (d = 0; d < c.length; d++) if (!Ie.call(b, c[d]) || !He(a[c[d]], b[c[d]])) return !1;return !0;
            }function Ke(a) {
              for (; a && a.firstChild;) a = a.firstChild;return a;
            }
            function Le(a, b) {
              var c = Ke(a);a = 0;for (var d; c;) {
                if (3 === c.nodeType) {
                  d = a + c.textContent.length;if (a <= b && d >= b) return { node: c, offset: b - a };a = d;
                }a: {
                  for (; c;) {
                    if (c.nextSibling) {
                      c = c.nextSibling;break a;
                    }c = c.parentNode;
                  }c = void 0;
                }c = Ke(c);
              }
            }function Me(a, b) {
              return a && b ? a === b ? !0 : a && 3 === a.nodeType ? !1 : b && 3 === b.nodeType ? Me(a, b.parentNode) : "contains" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : !1 : !1;
            }
            function Ne() {
              for (var a = window, b = Xa(); b instanceof a.HTMLIFrameElement;) {
                try {
                  var c = "string" === typeof b.contentWindow.location.href;
                } catch (d) {
                  c = !1;
                }if (c) a = b.contentWindow;else break;b = Xa(a.document);
              }return b;
            }function Oe(a) {
              var b = a && a.nodeName && a.nodeName.toLowerCase();return b && ("input" === b && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b || "true" === a.contentEditable);
            }
            var Pe = fa && "documentMode" in document && 11 >= document.documentMode,
                Qe = null,
                Re = null,
                Se = null,
                Te = !1;
            function Ue(a, b, c) {
              var d = c.window === c ? c.document : 9 === c.nodeType ? c : c.ownerDocument;Te || null == Qe || Qe !== Xa(d) || (d = Qe, "selectionStart" in d && Oe(d) ? d = { start: d.selectionStart, end: d.selectionEnd } : (d = (d.ownerDocument && d.ownerDocument.defaultView || window).getSelection(), d = { anchorNode: d.anchorNode, anchorOffset: d.anchorOffset, focusNode: d.focusNode, focusOffset: d.focusOffset }), Se && Je(Se, d) || (Se = d, d = oe(Re, "onSelect"), 0 < d.length && (b = new td("onSelect", "select", null, b, c), a.push({ event: b, listeners: d }), b.target = Qe)));
            }
            Pc("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "), 0);Pc("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "), 1);Pc(Oc, 2);for (var Ve = "change selectionchange textInput compositionstart compositionend compositionupdate".split(" "), We = 0; We < Ve.length; We++) Nc.set(Ve[We], 0);ea("onMouseEnter", ["mouseout", "mouseover"]);
            ea("onMouseLeave", ["mouseout", "mouseover"]);ea("onPointerEnter", ["pointerout", "pointerover"]);ea("onPointerLeave", ["pointerout", "pointerover"]);da("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));da("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));da("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);da("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
            da("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));da("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Xe = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),
                Ye = new Set("cancel close invalid load scroll toggle".split(" ").concat(Xe));
            function Ze(a, b, c) {
              var d = a.type || "unknown-event";a.currentTarget = c;Yb(d, b, void 0, a);a.currentTarget = null;
            }
            function se(a, b) {
              b = 0 !== (b & 4);for (var c = 0; c < a.length; c++) {
                var d = a[c],
                    e = d.event;d = d.listeners;a: {
                  var f = void 0;if (b) for (var g = d.length - 1; 0 <= g; g--) {
                    var h = d[g],
                        k = h.instance,
                        l = h.currentTarget;h = h.listener;if (k !== f && e.isPropagationStopped()) break a;Ze(e, h, l);f = k;
                  } else for (g = 0; g < d.length; g++) {
                    h = d[g];k = h.instance;l = h.currentTarget;h = h.listener;if (k !== f && e.isPropagationStopped()) break a;Ze(e, h, l);f = k;
                  }
                }
              }if (Ub) throw a = Vb, Ub = !1, Vb = null, a;
            }
            function G(a, b) {
              var c = $e(b),
                  d = a + "__bubble";c.has(d) || (af(b, a, 2, !1), c.add(d));
            }var bf = "_reactListening" + Math.random().toString(36).slice(2);function cf(a) {
              a[bf] || (a[bf] = !0, ba.forEach(function (b) {
                Ye.has(b) || df(b, !1, a, null);df(b, !0, a, null);
              }));
            }
            function df(a, b, c, d) {
              var e = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : 0,
                  f = c;"selectionchange" === a && 9 !== c.nodeType && (f = c.ownerDocument);if (null !== d && !b && Ye.has(a)) {
                if ("scroll" !== a) return;e |= 2;f = d;
              }var g = $e(f),
                  h = a + "__" + (b ? "capture" : "bubble");g.has(h) || (b && (e |= 4), af(f, a, e, b), g.add(h));
            }
            function af(a, b, c, d) {
              var e = Nc.get(b);switch (void 0 === e ? 2 : e) {case 0:
                  e = gd;break;case 1:
                  e = id;break;default:
                  e = hd;}c = e.bind(null, b, c, a);e = void 0;!Pb || "touchstart" !== b && "touchmove" !== b && "wheel" !== b || (e = !0);d ? void 0 !== e ? a.addEventListener(b, c, { capture: !0, passive: e }) : a.addEventListener(b, c, !0) : void 0 !== e ? a.addEventListener(b, c, { passive: e }) : a.addEventListener(b, c, !1);
            }
            function jd(a, b, c, d, e) {
              var f = d;if (0 === (b & 1) && 0 === (b & 2) && null !== d) a: for (;;) {
                if (null === d) return;var g = d.tag;if (3 === g || 4 === g) {
                  var h = d.stateNode.containerInfo;if (h === e || 8 === h.nodeType && h.parentNode === e) break;if (4 === g) for (g = d.return; null !== g;) {
                    var k = g.tag;if (3 === k || 4 === k) if (k = g.stateNode.containerInfo, k === e || 8 === k.nodeType && k.parentNode === e) return;g = g.return;
                  }for (; null !== h;) {
                    g = wc(h);if (null === g) return;k = g.tag;if (5 === k || 6 === k) {
                      d = f = g;continue a;
                    }h = h.parentNode;
                  }
                }d = d.return;
              }Nb(function () {
                var d = f,
                    e = xb(c),
                    g = [];
                a: {
                  var h = Mc.get(a);if (void 0 !== h) {
                    var k = td,
                        x = a;switch (a) {case "keypress":
                        if (0 === od(c)) break a;case "keydown":case "keyup":
                        k = Rd;break;case "focusin":
                        x = "focus";k = Fd;break;case "focusout":
                        x = "blur";k = Fd;break;case "beforeblur":case "afterblur":
                        k = Fd;break;case "click":
                        if (2 === c.button) break a;case "auxclick":case "dblclick":case "mousedown":case "mousemove":case "mouseup":case "mouseout":case "mouseover":case "contextmenu":
                        k = Bd;break;case "drag":case "dragend":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "dragstart":case "drop":
                        k = Dd;break;case "touchcancel":case "touchend":case "touchmove":case "touchstart":
                        k = Vd;break;case Ic:case Jc:case Kc:
                        k = Hd;break;case Lc:
                        k = Xd;break;case "scroll":
                        k = vd;break;case "wheel":
                        k = Zd;break;case "copy":case "cut":case "paste":
                        k = Jd;break;case "gotpointercapture":case "lostpointercapture":case "pointercancel":case "pointerdown":case "pointermove":case "pointerout":case "pointerover":case "pointerup":
                        k = Td;}var w = 0 !== (b & 4),
                        z = !w && "scroll" === a,
                        u = w ? null !== h ? h + "Capture" : null : h;w = [];for (var t = d, q; null !== t;) {
                      q = t;var v = q.stateNode;5 === q.tag && null !== v && (q = v, null !== u && (v = Ob(t, u), null != v && w.push(ef(t, v, q))));if (z) break;t = t.return;
                    }0 < w.length && (h = new k(h, x, null, c, e), g.push({ event: h, listeners: w }));
                  }
                }if (0 === (b & 7)) {
                  a: {
                    h = "mouseover" === a || "pointerover" === a;k = "mouseout" === a || "pointerout" === a;if (h && 0 === (b & 16) && (x = c.relatedTarget || c.fromElement) && (wc(x) || x[ff])) break a;if (k || h) {
                      h = e.window === e ? e : (h = e.ownerDocument) ? h.defaultView || h.parentWindow : window;if (k) {
                        if (x = c.relatedTarget || c.toElement, k = d, x = x ? wc(x) : null, null !== x && (z = Zb(x), x !== z || 5 !== x.tag && 6 !== x.tag)) x = null;
                      } else k = null, x = d;if (k !== x) {
                        w = Bd;v = "onMouseLeave";u = "onMouseEnter";t = "mouse";if ("pointerout" === a || "pointerover" === a) w = Td, v = "onPointerLeave", u = "onPointerEnter", t = "pointer";z = null == k ? h : ue(k);q = null == x ? h : ue(x);h = new w(v, t + "leave", k, c, e);h.target = z;h.relatedTarget = q;v = null;wc(e) === d && (w = new w(u, t + "enter", x, c, e), w.target = q, w.relatedTarget = z, v = w);z = v;if (k && x) b: {
                          w = k;u = x;t = 0;for (q = w; q; q = gf(q)) t++;q = 0;for (v = u; v; v = gf(v)) q++;for (; 0 < t - q;) w = gf(w), t--;for (; 0 < q - t;) u = gf(u), q--;for (; t--;) {
                            if (w === u || null !== u && w === u.alternate) break b;w = gf(w);u = gf(u);
                          }w = null;
                        } else w = null;null !== k && hf(g, h, k, w, !1);null !== x && null !== z && hf(g, z, x, w, !0);
                      }
                    }
                  }a: {
                    h = d ? ue(d) : window;k = h.nodeName && h.nodeName.toLowerCase();if ("select" === k || "input" === k && "file" === h.type) var J = ve;else if (me(h)) {
                      if (we) J = Fe;else {
                        J = De;var K = Ce;
                      }
                    } else (k = h.nodeName) && "input" === k.toLowerCase() && ("checkbox" === h.type || "radio" === h.type) && (J = Ee);if (J && (J = J(a, d))) {
                      ne(g, J, c, e);break a;
                    }K && K(a, h, d);"focusout" === a && (K = h._wrapperState) && K.controlled && "number" === h.type && bb(h, "number", h.value);
                  }K = d ? ue(d) : window;switch (a) {case "focusin":
                      if (me(K) || "true" === K.contentEditable) Qe = K, Re = d, Se = null;break;case "focusout":
                      Se = Re = Qe = null;break;case "mousedown":
                      Te = !0;break;case "contextmenu":case "mouseup":case "dragend":
                      Te = !1;Ue(g, c, e);break;case "selectionchange":
                      if (Pe) break;case "keydown":case "keyup":
                      Ue(g, c, e);}var Q;if (ae) b: {
                    switch (a) {case "compositionstart":
                        var L = "onCompositionStart";break b;case "compositionend":
                        L = "onCompositionEnd";break b;
                      case "compositionupdate":
                        L = "onCompositionUpdate";break b;}L = void 0;
                  } else ie ? ge(a, c) && (L = "onCompositionEnd") : "keydown" === a && 229 === c.keyCode && (L = "onCompositionStart");L && (de && "ko" !== c.locale && (ie || "onCompositionStart" !== L ? "onCompositionEnd" === L && ie && (Q = nd()) : (kd = e, ld = "value" in kd ? kd.value : kd.textContent, ie = !0)), K = oe(d, L), 0 < K.length && (L = new Ld(L, a, null, c, e), g.push({ event: L, listeners: K }), Q ? L.data = Q : (Q = he(c), null !== Q && (L.data = Q))));if (Q = ce ? je(a, c) : ke(a, c)) d = oe(d, "onBeforeInput"), 0 < d.length && (e = new Ld("onBeforeInput", "beforeinput", null, c, e), g.push({ event: e, listeners: d }), e.data = Q);
                }se(g, b);
              });
            }function ef(a, b, c) {
              return { instance: a, listener: b, currentTarget: c };
            }function oe(a, b) {
              for (var c = b + "Capture", d = []; null !== a;) {
                var e = a,
                    f = e.stateNode;5 === e.tag && null !== f && (e = f, f = Ob(a, c), null != f && d.unshift(ef(a, f, e)), f = Ob(a, b), null != f && d.push(ef(a, f, e)));a = a.return;
              }return d;
            }function gf(a) {
              if (null === a) return null;do a = a.return; while (a && 5 !== a.tag);return a ? a : null;
            }
            function hf(a, b, c, d, e) {
              for (var f = b._reactName, g = []; null !== c && c !== d;) {
                var h = c,
                    k = h.alternate,
                    l = h.stateNode;if (null !== k && k === d) break;5 === h.tag && null !== l && (h = l, e ? (k = Ob(c, f), null != k && g.unshift(ef(c, k, h))) : e || (k = Ob(c, f), null != k && g.push(ef(c, k, h))));c = c.return;
              }0 !== g.length && a.push({ event: b, listeners: g });
            }function jf() {}var kf = null,
                lf = null;function mf(a, b) {
              switch (a) {case "button":case "input":case "select":case "textarea":
                  return !!b.autoFocus;}return !1;
            }
            function nf(a, b) {
              return "textarea" === a || "option" === a || "noscript" === a || "string" === typeof b.children || "number" === typeof b.children || "object" === typeof b.dangerouslySetInnerHTML && null !== b.dangerouslySetInnerHTML && null != b.dangerouslySetInnerHTML.__html;
            }var of = "function" === typeof setTimeout ? setTimeout : void 0,
                pf = "function" === typeof clearTimeout ? clearTimeout : void 0;function qf(a) {
              1 === a.nodeType ? a.textContent = "" : 9 === a.nodeType && (a = a.body, null != a && (a.textContent = ""));
            }
            function rf(a) {
              for (; null != a; a = a.nextSibling) {
                var b = a.nodeType;if (1 === b || 3 === b) break;
              }return a;
            }function sf(a) {
              a = a.previousSibling;for (var b = 0; a;) {
                if (8 === a.nodeType) {
                  var c = a.data;if ("$" === c || "$!" === c || "$?" === c) {
                    if (0 === b) return a;b--;
                  } else "/$" === c && b++;
                }a = a.previousSibling;
              }return null;
            }var tf = 0;function uf(a) {
              return { $$typeof: Ga, toString: a, valueOf: a };
            }var vf = Math.random().toString(36).slice(2),
                wf = "__reactFiber$" + vf,
                xf = "__reactProps$" + vf,
                ff = "__reactContainer$" + vf,
                yf = "__reactEvents$" + vf;
            function wc(a) {
              var b = a[wf];if (b) return b;for (var c = a.parentNode; c;) {
                if (b = c[ff] || c[wf]) {
                  c = b.alternate;if (null !== b.child || null !== c && null !== c.child) for (a = sf(a); null !== a;) {
                    if (c = a[wf]) return c;a = sf(a);
                  }return b;
                }a = c;c = a.parentNode;
              }return null;
            }function Cb(a) {
              a = a[wf] || a[ff];return !a || 5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag ? null : a;
            }function ue(a) {
              if (5 === a.tag || 6 === a.tag) return a.stateNode;throw Error(y(33));
            }function Db(a) {
              return a[xf] || null;
            }
            function $e(a) {
              var b = a[yf];void 0 === b && (b = a[yf] = new Set());return b;
            }var zf = [],
                Af = -1;function Bf(a) {
              return { current: a };
            }function H(a) {
              0 > Af || (a.current = zf[Af], zf[Af] = null, Af--);
            }function I(a, b) {
              Af++;zf[Af] = a.current;a.current = b;
            }var Cf = {},
                M = Bf(Cf),
                N = Bf(!1),
                Df = Cf;
            function Ef(a, b) {
              var c = a.type.contextTypes;if (!c) return Cf;var d = a.stateNode;if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;var e = {},
                  f;for (f in c) e[f] = b[f];d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);return e;
            }function Ff(a) {
              a = a.childContextTypes;return null !== a && void 0 !== a;
            }function Gf() {
              H(N);H(M);
            }function Hf(a, b, c) {
              if (M.current !== Cf) throw Error(y(168));I(M, b);I(N, c);
            }
            function If(a, b, c) {
              var d = a.stateNode;a = b.childContextTypes;if ("function" !== typeof d.getChildContext) return c;d = d.getChildContext();for (var e in d) if (!(e in a)) throw Error(y(108, Ra(b) || "Unknown", e));return m({}, c, d);
            }function Jf(a) {
              a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Cf;Df = M.current;I(M, a);I(N, N.current);return !0;
            }function Kf(a, b, c) {
              var d = a.stateNode;if (!d) throw Error(y(169));c ? (a = If(a, b, Df), d.__reactInternalMemoizedMergedChildContext = a, H(N), H(M), I(M, a)) : H(N);I(N, c);
            }
            var Lf = null,
                Mf = null,
                Nf = r.unstable_runWithPriority,
                Of = r.unstable_scheduleCallback,
                Pf = r.unstable_cancelCallback,
                Qf = r.unstable_shouldYield,
                Rf = r.unstable_requestPaint,
                Sf = r.unstable_now,
                Tf = r.unstable_getCurrentPriorityLevel,
                Uf = r.unstable_ImmediatePriority,
                Vf = r.unstable_UserBlockingPriority,
                Wf = r.unstable_NormalPriority,
                Xf = r.unstable_LowPriority,
                Yf = r.unstable_IdlePriority,
                Zf = {},
                $f = void 0 !== Rf ? Rf : function () {},
                ag = null,
                bg = null,
                cg = !1,
                dg = Sf(),
                O = 1E4 > dg ? Sf : function () {
              return Sf() - dg;
            };
            function eg() {
              switch (Tf()) {case Uf:
                  return 99;case Vf:
                  return 98;case Wf:
                  return 97;case Xf:
                  return 96;case Yf:
                  return 95;default:
                  throw Error(y(332));}
            }function fg(a) {
              switch (a) {case 99:
                  return Uf;case 98:
                  return Vf;case 97:
                  return Wf;case 96:
                  return Xf;case 95:
                  return Yf;default:
                  throw Error(y(332));}
            }function gg(a, b) {
              a = fg(a);return Nf(a, b);
            }function hg(a, b, c) {
              a = fg(a);return Of(a, b, c);
            }function ig() {
              if (null !== bg) {
                var a = bg;bg = null;Pf(a);
              }jg();
            }
            function jg() {
              if (!cg && null !== ag) {
                cg = !0;var a = 0;try {
                  var b = ag;gg(99, function () {
                    for (; a < b.length; a++) {
                      var c = b[a];do c = c(!0); while (null !== c);
                    }
                  });ag = null;
                } catch (c) {
                  throw null !== ag && (ag = ag.slice(a + 1)), Of(Uf, ig), c;
                } finally {
                  cg = !1;
                }
              }
            }var kg = ra.ReactCurrentBatchConfig;function lg(a, b) {
              if (a && a.defaultProps) {
                b = m({}, b);a = a.defaultProps;for (var c in a) void 0 === b[c] && (b[c] = a[c]);return b;
              }return b;
            }var mg = Bf(null),
                ng = null,
                og = null,
                pg = null;function qg() {
              pg = og = ng = null;
            }
            function rg(a) {
              var b = mg.current;H(mg);a.type._context._currentValue = b;
            }function sg(a, b) {
              for (; null !== a;) {
                var c = a.alternate;if ((a.childLanes & b) === b) {
                  if (null === c || (c.childLanes & b) === b) break;else c.childLanes |= b;
                } else a.childLanes |= b, null !== c && (c.childLanes |= b);a = a.return;
              }
            }function tg(a, b) {
              ng = a;pg = og = null;a = a.dependencies;null !== a && null !== a.firstContext && (0 !== (a.lanes & b) && (ug = !0), a.firstContext = null);
            }
            function vg(a, b) {
              if (pg !== a && !1 !== b && 0 !== b) {
                if ("number" !== typeof b || 1073741823 === b) pg = a, b = 1073741823;b = { context: a, observedBits: b, next: null };if (null === og) {
                  if (null === ng) throw Error(y(308));og = b;ng.dependencies = { lanes: 0, firstContext: b, responders: null };
                } else og = og.next = b;
              }return a._currentValue;
            }var wg = !1;function xg(a) {
              a.updateQueue = { baseState: a.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null }, effects: null };
            }
            function yg(a, b) {
              a = a.updateQueue;b.updateQueue === a && (b.updateQueue = { baseState: a.baseState, firstBaseUpdate: a.firstBaseUpdate, lastBaseUpdate: a.lastBaseUpdate, shared: a.shared, effects: a.effects });
            }function zg(a, b) {
              return { eventTime: a, lane: b, tag: 0, payload: null, callback: null, next: null };
            }function Ag(a, b) {
              a = a.updateQueue;if (null !== a) {
                a = a.shared;var c = a.pending;null === c ? b.next = b : (b.next = c.next, c.next = b);a.pending = b;
              }
            }
            function Bg(a, b) {
              var c = a.updateQueue,
                  d = a.alternate;if (null !== d && (d = d.updateQueue, c === d)) {
                var e = null,
                    f = null;c = c.firstBaseUpdate;if (null !== c) {
                  do {
                    var g = { eventTime: c.eventTime, lane: c.lane, tag: c.tag, payload: c.payload, callback: c.callback, next: null };null === f ? e = f = g : f = f.next = g;c = c.next;
                  } while (null !== c);null === f ? e = f = b : f = f.next = b;
                } else e = f = b;c = { baseState: d.baseState, firstBaseUpdate: e, lastBaseUpdate: f, shared: d.shared, effects: d.effects };a.updateQueue = c;return;
              }a = c.lastBaseUpdate;null === a ? c.firstBaseUpdate = b : a.next = b;c.lastBaseUpdate = b;
            }
            function Cg(a, b, c, d) {
              var e = a.updateQueue;wg = !1;var f = e.firstBaseUpdate,
                  g = e.lastBaseUpdate,
                  h = e.shared.pending;if (null !== h) {
                e.shared.pending = null;var k = h,
                    l = k.next;k.next = null;null === g ? f = l : g.next = l;g = k;var n = a.alternate;if (null !== n) {
                  n = n.updateQueue;var A = n.lastBaseUpdate;A !== g && (null === A ? n.firstBaseUpdate = l : A.next = l, n.lastBaseUpdate = k);
                }
              }if (null !== f) {
                A = e.baseState;g = 0;n = l = k = null;do {
                  h = f.lane;var p = f.eventTime;if ((d & h) === h) {
                    null !== n && (n = n.next = { eventTime: p, lane: 0, tag: f.tag, payload: f.payload, callback: f.callback,
                      next: null });a: {
                      var C = a,
                          x = f;h = b;p = c;switch (x.tag) {case 1:
                          C = x.payload;if ("function" === typeof C) {
                            A = C.call(p, A, h);break a;
                          }A = C;break a;case 3:
                          C.flags = C.flags & -4097 | 64;case 0:
                          C = x.payload;h = "function" === typeof C ? C.call(p, A, h) : C;if (null === h || void 0 === h) break a;A = m({}, A, h);break a;case 2:
                          wg = !0;}
                    }null !== f.callback && (a.flags |= 32, h = e.effects, null === h ? e.effects = [f] : h.push(f));
                  } else p = { eventTime: p, lane: h, tag: f.tag, payload: f.payload, callback: f.callback, next: null }, null === n ? (l = n = p, k = A) : n = n.next = p, g |= h;f = f.next;if (null === f) if (h = e.shared.pending, null === h) break;else f = h.next, h.next = null, e.lastBaseUpdate = h, e.shared.pending = null;
                } while (1);null === n && (k = A);e.baseState = k;e.firstBaseUpdate = l;e.lastBaseUpdate = n;Dg |= g;a.lanes = g;a.memoizedState = A;
              }
            }function Eg(a, b, c) {
              a = b.effects;b.effects = null;if (null !== a) for (b = 0; b < a.length; b++) {
                var d = a[b],
                    e = d.callback;if (null !== e) {
                  d.callback = null;d = c;if ("function" !== typeof e) throw Error(y(191, e));e.call(d);
                }
              }
            }var Fg = new aa.Component().refs;
            function Gg(a, b, c, d) {
              b = a.memoizedState;c = c(d, b);c = null === c || void 0 === c ? b : m({}, b, c);a.memoizedState = c;0 === a.lanes && (a.updateQueue.baseState = c);
            }
            var Kg = { isMounted: function (a) {
                return (a = a._reactInternals) ? Zb(a) === a : !1;
              }, enqueueSetState: function (a, b, c) {
                a = a._reactInternals;var d = Hg(),
                    e = Ig(a),
                    f = zg(d, e);f.payload = b;void 0 !== c && null !== c && (f.callback = c);Ag(a, f);Jg(a, e, d);
              }, enqueueReplaceState: function (a, b, c) {
                a = a._reactInternals;var d = Hg(),
                    e = Ig(a),
                    f = zg(d, e);f.tag = 1;f.payload = b;void 0 !== c && null !== c && (f.callback = c);Ag(a, f);Jg(a, e, d);
              }, enqueueForceUpdate: function (a, b) {
                a = a._reactInternals;var c = Hg(),
                    d = Ig(a),
                    e = zg(c, d);e.tag = 2;void 0 !== b && null !== b && (e.callback = b);Ag(a, e);Jg(a, d, c);
              } };function Lg(a, b, c, d, e, f, g) {
              a = a.stateNode;return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !Je(c, d) || !Je(e, f) : !0;
            }
            function Mg(a, b, c) {
              var d = !1,
                  e = Cf;var f = b.contextType;"object" === typeof f && null !== f ? f = vg(f) : (e = Ff(b) ? Df : M.current, d = b.contextTypes, f = (d = null !== d && void 0 !== d) ? Ef(a, e) : Cf);b = new b(c, f);a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;b.updater = Kg;a.stateNode = b;b._reactInternals = a;d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f);return b;
            }
            function Ng(a, b, c, d) {
              a = b.state;"function" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);"function" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);b.state !== a && Kg.enqueueReplaceState(b, b.state, null);
            }
            function Og(a, b, c, d) {
              var e = a.stateNode;e.props = c;e.state = a.memoizedState;e.refs = Fg;xg(a);var f = b.contextType;"object" === typeof f && null !== f ? e.context = vg(f) : (f = Ff(b) ? Df : M.current, e.context = Ef(a, f));Cg(a, c, e, d);e.state = a.memoizedState;f = b.getDerivedStateFromProps;"function" === typeof f && (Gg(a, b, f, c), e.state = a.memoizedState);"function" === typeof b.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && Kg.enqueueReplaceState(e, e.state, null), Cg(a, c, e, d), e.state = a.memoizedState);"function" === typeof e.componentDidMount && (a.flags |= 4);
            }var Pg = Array.isArray;
            function Qg(a, b, c) {
              a = c.ref;if (null !== a && "function" !== typeof a && "object" !== typeof a) {
                if (c._owner) {
                  c = c._owner;if (c) {
                    if (1 !== c.tag) throw Error(y(309));var d = c.stateNode;
                  }if (!d) throw Error(y(147, a));var e = "" + a;if (null !== b && null !== b.ref && "function" === typeof b.ref && b.ref._stringRef === e) return b.ref;b = function (a) {
                    var b = d.refs;b === Fg && (b = d.refs = {});null === a ? delete b[e] : b[e] = a;
                  };b._stringRef = e;return b;
                }if ("string" !== typeof a) throw Error(y(284));if (!c._owner) throw Error(y(290, a));
              }return a;
            }
            function Rg(a, b) {
              if ("textarea" !== a.type) throw Error(y(31, "[object Object]" === Object.prototype.toString.call(b) ? "object with keys {" + Object.keys(b).join(", ") + "}" : b));
            }
            function Sg(a) {
              function b(b, c) {
                if (a) {
                  var d = b.lastEffect;null !== d ? (d.nextEffect = c, b.lastEffect = c) : b.firstEffect = b.lastEffect = c;c.nextEffect = null;c.flags = 8;
                }
              }function c(c, d) {
                if (!a) return null;for (; null !== d;) b(c, d), d = d.sibling;return null;
              }function d(a, b) {
                for (a = new Map(); null !== b;) null !== b.key ? a.set(b.key, b) : a.set(b.index, b), b = b.sibling;return a;
              }function e(a, b) {
                a = Tg(a, b);a.index = 0;a.sibling = null;return a;
              }function f(b, c, d) {
                b.index = d;if (!a) return c;d = b.alternate;if (null !== d) return d = d.index, d < c ? (b.flags = 2, c) : d;b.flags = 2;return c;
              }function g(b) {
                a && null === b.alternate && (b.flags = 2);return b;
              }function h(a, b, c, d) {
                if (null === b || 6 !== b.tag) return b = Ug(c, a.mode, d), b.return = a, b;b = e(b, c);b.return = a;return b;
              }function k(a, b, c, d) {
                if (null !== b && b.elementType === c.type) return d = e(b, c.props), d.ref = Qg(a, b, c), d.return = a, d;d = Vg(c.type, c.key, c.props, null, a.mode, d);d.ref = Qg(a, b, c);d.return = a;return d;
              }function l(a, b, c, d) {
                if (null === b || 4 !== b.tag || b.stateNode.containerInfo !== c.containerInfo || b.stateNode.implementation !== c.implementation) return b = Wg(c, a.mode, d), b.return = a, b;b = e(b, c.children || []);b.return = a;return b;
              }function n(a, b, c, d, f) {
                if (null === b || 7 !== b.tag) return b = Xg(c, a.mode, d, f), b.return = a, b;b = e(b, c);b.return = a;return b;
              }function A(a, b, c) {
                if ("string" === typeof b || "number" === typeof b) return b = Ug("" + b, a.mode, c), b.return = a, b;if ("object" === typeof b && null !== b) {
                  switch (b.$$typeof) {case sa:
                      return c = Vg(b.type, b.key, b.props, null, a.mode, c), c.ref = Qg(a, null, b), c.return = a, c;case ta:
                      return b = Wg(b, a.mode, c), b.return = a, b;}if (Pg(b) || La(b)) return b = Xg(b, a.mode, c, null), b.return = a, b;Rg(a, b);
                }return null;
              }function p(a, b, c, d) {
                var e = null !== b ? b.key : null;if ("string" === typeof c || "number" === typeof c) return null !== e ? null : h(a, b, "" + c, d);if ("object" === typeof c && null !== c) {
                  switch (c.$$typeof) {case sa:
                      return c.key === e ? c.type === ua ? n(a, b, c.props.children, d, e) : k(a, b, c, d) : null;case ta:
                      return c.key === e ? l(a, b, c, d) : null;}if (Pg(c) || La(c)) return null !== e ? null : n(a, b, c, d, null);Rg(a, c);
                }return null;
              }function C(a, b, c, d, e) {
                if ("string" === typeof d || "number" === typeof d) return a = a.get(c) || null, h(b, a, "" + d, e);if ("object" === typeof d && null !== d) {
                  switch (d.$$typeof) {case sa:
                      return a = a.get(null === d.key ? c : d.key) || null, d.type === ua ? n(b, a, d.props.children, e, d.key) : k(b, a, d, e);case ta:
                      return a = a.get(null === d.key ? c : d.key) || null, l(b, a, d, e);}if (Pg(d) || La(d)) return a = a.get(c) || null, n(b, a, d, e, null);Rg(b, d);
                }return null;
              }function x(e, g, h, k) {
                for (var l = null, t = null, u = g, z = g = 0, q = null; null !== u && z < h.length; z++) {
                  u.index > z ? (q = u, u = null) : q = u.sibling;var n = p(e, u, h[z], k);if (null === n) {
                    null === u && (u = q);break;
                  }a && u && null === n.alternate && b(e, u);g = f(n, g, z);null === t ? l = n : t.sibling = n;t = n;u = q;
                }if (z === h.length) return c(e, u), l;if (null === u) {
                  for (; z < h.length; z++) u = A(e, h[z], k), null !== u && (g = f(u, g, z), null === t ? l = u : t.sibling = u, t = u);return l;
                }for (u = d(e, u); z < h.length; z++) q = C(u, e, z, h[z], k), null !== q && (a && null !== q.alternate && u.delete(null === q.key ? z : q.key), g = f(q, g, z), null === t ? l = q : t.sibling = q, t = q);a && u.forEach(function (a) {
                  return b(e, a);
                });return l;
              }function w(e, g, h, k) {
                var l = La(h);if ("function" !== typeof l) throw Error(y(150));h = l.call(h);if (null == h) throw Error(y(151));for (var t = l = null, u = g, z = g = 0, q = null, n = h.next(); null !== u && !n.done; z++, n = h.next()) {
                  u.index > z ? (q = u, u = null) : q = u.sibling;var w = p(e, u, n.value, k);if (null === w) {
                    null === u && (u = q);break;
                  }a && u && null === w.alternate && b(e, u);g = f(w, g, z);null === t ? l = w : t.sibling = w;t = w;u = q;
                }if (n.done) return c(e, u), l;if (null === u) {
                  for (; !n.done; z++, n = h.next()) n = A(e, n.value, k), null !== n && (g = f(n, g, z), null === t ? l = n : t.sibling = n, t = n);return l;
                }for (u = d(e, u); !n.done; z++, n = h.next()) n = C(u, e, z, n.value, k), null !== n && (a && null !== n.alternate && u.delete(null === n.key ? z : n.key), g = f(n, g, z), null === t ? l = n : t.sibling = n, t = n);a && u.forEach(function (a) {
                  return b(e, a);
                });return l;
              }return function (a, d, f, h) {
                var k = "object" === typeof f && null !== f && f.type === ua && null === f.key;k && (f = f.props.children);var l = "object" === typeof f && null !== f;if (l) switch (f.$$typeof) {case sa:
                    a: {
                      l = f.key;for (k = d; null !== k;) {
                        if (k.key === l) {
                          switch (k.tag) {case 7:
                              if (f.type === ua) {
                                c(a, k.sibling);d = e(k, f.props.children);d.return = a;a = d;break a;
                              }break;default:
                              if (k.elementType === f.type) {
                                c(a, k.sibling);
                                d = e(k, f.props);d.ref = Qg(a, k, f);d.return = a;a = d;break a;
                              }}c(a, k);break;
                        } else b(a, k);k = k.sibling;
                      }f.type === ua ? (d = Xg(f.props.children, a.mode, h, f.key), d.return = a, a = d) : (h = Vg(f.type, f.key, f.props, null, a.mode, h), h.ref = Qg(a, d, f), h.return = a, a = h);
                    }return g(a);case ta:
                    a: {
                      for (k = f.key; null !== d;) {
                        if (d.key === k) {
                          if (4 === d.tag && d.stateNode.containerInfo === f.containerInfo && d.stateNode.implementation === f.implementation) {
                            c(a, d.sibling);d = e(d, f.children || []);d.return = a;a = d;break a;
                          } else {
                            c(a, d);break;
                          }
                        } else b(a, d);d = d.sibling;
                      }d = Wg(f, a.mode, h);d.return = a;a = d;
                    }return g(a);}if ("string" === typeof f || "number" === typeof f) return f = "" + f, null !== d && 6 === d.tag ? (c(a, d.sibling), d = e(d, f), d.return = a, a = d) : (c(a, d), d = Ug(f, a.mode, h), d.return = a, a = d), g(a);if (Pg(f)) return x(a, d, f, h);if (La(f)) return w(a, d, f, h);l && Rg(a, f);if ("undefined" === typeof f && !k) switch (a.tag) {case 1:case 22:case 0:case 11:case 15:
                    throw Error(y(152, Ra(a.type) || "Component"));}return c(a, d);
              };
            }var Yg = Sg(!0),
                Zg = Sg(!1),
                $g = {},
                ah = Bf($g),
                bh = Bf($g),
                ch = Bf($g);
            function dh(a) {
              if (a === $g) throw Error(y(174));return a;
            }function eh(a, b) {
              I(ch, b);I(bh, a);I(ah, $g);a = b.nodeType;switch (a) {case 9:case 11:
                  b = (b = b.documentElement) ? b.namespaceURI : mb(null, "");break;default:
                  a = 8 === a ? b.parentNode : b, b = a.namespaceURI || null, a = a.tagName, b = mb(b, a);}H(ah);I(ah, b);
            }function fh() {
              H(ah);H(bh);H(ch);
            }function gh(a) {
              dh(ch.current);var b = dh(ah.current);var c = mb(b, a.type);b !== c && (I(bh, a), I(ah, c));
            }function hh(a) {
              bh.current === a && (H(ah), H(bh));
            }var P = Bf(0);
            function ih(a) {
              for (var b = a; null !== b;) {
                if (13 === b.tag) {
                  var c = b.memoizedState;if (null !== c && (c = c.dehydrated, null === c || "$?" === c.data || "$!" === c.data)) return b;
                } else if (19 === b.tag && void 0 !== b.memoizedProps.revealOrder) {
                  if (0 !== (b.flags & 64)) return b;
                } else if (null !== b.child) {
                  b.child.return = b;b = b.child;continue;
                }if (b === a) break;for (; null === b.sibling;) {
                  if (null === b.return || b.return === a) return null;b = b.return;
                }b.sibling.return = b.return;b = b.sibling;
              }return null;
            }var jh = null,
                kh = null,
                lh = !1;
            function mh(a, b) {
              var c = nh(5, null, null, 0);c.elementType = "DELETED";c.type = "DELETED";c.stateNode = b;c.return = a;c.flags = 8;null !== a.lastEffect ? (a.lastEffect.nextEffect = c, a.lastEffect = c) : a.firstEffect = a.lastEffect = c;
            }function oh(a, b) {
              switch (a.tag) {case 5:
                  var c = a.type;b = 1 !== b.nodeType || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b;return null !== b ? (a.stateNode = b, !0) : !1;case 6:
                  return b = "" === a.pendingProps || 3 !== b.nodeType ? null : b, null !== b ? (a.stateNode = b, !0) : !1;case 13:
                  return !1;default:
                  return !1;}
            }
            function ph(a) {
              if (lh) {
                var b = kh;if (b) {
                  var c = b;if (!oh(a, b)) {
                    b = rf(c.nextSibling);if (!b || !oh(a, b)) {
                      a.flags = a.flags & -1025 | 2;lh = !1;jh = a;return;
                    }mh(jh, c);
                  }jh = a;kh = rf(b.firstChild);
                } else a.flags = a.flags & -1025 | 2, lh = !1, jh = a;
              }
            }function qh(a) {
              for (a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag;) a = a.return;jh = a;
            }
            function rh(a) {
              if (a !== jh) return !1;if (!lh) return qh(a), lh = !0, !1;var b = a.type;if (5 !== a.tag || "head" !== b && "body" !== b && !nf(b, a.memoizedProps)) for (b = kh; b;) mh(a, b), b = rf(b.nextSibling);qh(a);if (13 === a.tag) {
                a = a.memoizedState;a = null !== a ? a.dehydrated : null;if (!a) throw Error(y(317));a: {
                  a = a.nextSibling;for (b = 0; a;) {
                    if (8 === a.nodeType) {
                      var c = a.data;if ("/$" === c) {
                        if (0 === b) {
                          kh = rf(a.nextSibling);break a;
                        }b--;
                      } else "$" !== c && "$!" !== c && "$?" !== c || b++;
                    }a = a.nextSibling;
                  }kh = null;
                }
              } else kh = jh ? rf(a.stateNode.nextSibling) : null;return !0;
            }
            function sh() {
              kh = jh = null;lh = !1;
            }var th = [];function uh() {
              for (var a = 0; a < th.length; a++) th[a]._workInProgressVersionPrimary = null;th.length = 0;
            }var vh = ra.ReactCurrentDispatcher,
                wh = ra.ReactCurrentBatchConfig,
                xh = 0,
                R = null,
                S = null,
                T = null,
                yh = !1,
                zh = !1;function Ah() {
              throw Error(y(321));
            }function Bh(a, b) {
              if (null === b) return !1;for (var c = 0; c < b.length && c < a.length; c++) if (!He(a[c], b[c])) return !1;return !0;
            }
            function Ch(a, b, c, d, e, f) {
              xh = f;R = b;b.memoizedState = null;b.updateQueue = null;b.lanes = 0;vh.current = null === a || null === a.memoizedState ? Dh : Eh;a = c(d, e);if (zh) {
                f = 0;do {
                  zh = !1;if (!(25 > f)) throw Error(y(301));f += 1;T = S = null;b.updateQueue = null;vh.current = Fh;a = c(d, e);
                } while (zh);
              }vh.current = Gh;b = null !== S && null !== S.next;xh = 0;T = S = R = null;yh = !1;if (b) throw Error(y(300));return a;
            }function Hh() {
              var a = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };null === T ? R.memoizedState = T = a : T = T.next = a;return T;
            }
            function Ih() {
              if (null === S) {
                var a = R.alternate;a = null !== a ? a.memoizedState : null;
              } else a = S.next;var b = null === T ? R.memoizedState : T.next;if (null !== b) T = b, S = a;else {
                if (null === a) throw Error(y(310));S = a;a = { memoizedState: S.memoizedState, baseState: S.baseState, baseQueue: S.baseQueue, queue: S.queue, next: null };null === T ? R.memoizedState = T = a : T = T.next = a;
              }return T;
            }function Jh(a, b) {
              return "function" === typeof b ? b(a) : b;
            }
            function Kh(a) {
              var b = Ih(),
                  c = b.queue;if (null === c) throw Error(y(311));c.lastRenderedReducer = a;var d = S,
                  e = d.baseQueue,
                  f = c.pending;if (null !== f) {
                if (null !== e) {
                  var g = e.next;e.next = f.next;f.next = g;
                }d.baseQueue = e = f;c.pending = null;
              }if (null !== e) {
                e = e.next;d = d.baseState;var h = g = f = null,
                    k = e;do {
                  var l = k.lane;if ((xh & l) === l) null !== h && (h = h.next = { lane: 0, action: k.action, eagerReducer: k.eagerReducer, eagerState: k.eagerState, next: null }), d = k.eagerReducer === a ? k.eagerState : a(d, k.action);else {
                    var n = { lane: l, action: k.action, eagerReducer: k.eagerReducer,
                      eagerState: k.eagerState, next: null };null === h ? (g = h = n, f = d) : h = h.next = n;R.lanes |= l;Dg |= l;
                  }k = k.next;
                } while (null !== k && k !== e);null === h ? f = d : h.next = g;He(d, b.memoizedState) || (ug = !0);b.memoizedState = d;b.baseState = f;b.baseQueue = h;c.lastRenderedState = d;
              }return [b.memoizedState, c.dispatch];
            }
            function Lh(a) {
              var b = Ih(),
                  c = b.queue;if (null === c) throw Error(y(311));c.lastRenderedReducer = a;var d = c.dispatch,
                  e = c.pending,
                  f = b.memoizedState;if (null !== e) {
                c.pending = null;var g = e = e.next;do f = a(f, g.action), g = g.next; while (g !== e);He(f, b.memoizedState) || (ug = !0);b.memoizedState = f;null === b.baseQueue && (b.baseState = f);c.lastRenderedState = f;
              }return [f, d];
            }
            function Mh(a, b, c) {
              var d = b._getVersion;d = d(b._source);var e = b._workInProgressVersionPrimary;if (null !== e) a = e === d;else if (a = a.mutableReadLanes, a = (xh & a) === a) b._workInProgressVersionPrimary = d, th.push(b);if (a) return c(b._source);th.push(b);throw Error(y(350));
            }
            function Nh(a, b, c, d) {
              var e = U;if (null === e) throw Error(y(349));var f = b._getVersion,
                  g = f(b._source),
                  h = vh.current,
                  k = h.useState(function () {
                return Mh(e, b, c);
              }),
                  l = k[1],
                  n = k[0];k = T;var A = a.memoizedState,
                  p = A.refs,
                  C = p.getSnapshot,
                  x = A.source;A = A.subscribe;var w = R;a.memoizedState = { refs: p, source: b, subscribe: d };h.useEffect(function () {
                p.getSnapshot = c;p.setSnapshot = l;var a = f(b._source);if (!He(g, a)) {
                  a = c(b._source);He(n, a) || (l(a), a = Ig(w), e.mutableReadLanes |= a & e.pendingLanes);a = e.mutableReadLanes;e.entangledLanes |= a;for (var d = e.entanglements, h = a; 0 < h;) {
                    var k = 31 - Vc(h),
                        v = 1 << k;d[k] |= a;h &= ~v;
                  }
                }
              }, [c, b, d]);h.useEffect(function () {
                return d(b._source, function () {
                  var a = p.getSnapshot,
                      c = p.setSnapshot;try {
                    c(a(b._source));var d = Ig(w);e.mutableReadLanes |= d & e.pendingLanes;
                  } catch (q) {
                    c(function () {
                      throw q;
                    });
                  }
                });
              }, [b, d]);He(C, c) && He(x, b) && He(A, d) || (a = { pending: null, dispatch: null, lastRenderedReducer: Jh, lastRenderedState: n }, a.dispatch = l = Oh.bind(null, R, a), k.queue = a, k.baseQueue = null, n = Mh(e, b, c), k.memoizedState = k.baseState = n);return n;
            }
            function Ph(a, b, c) {
              var d = Ih();return Nh(d, a, b, c);
            }function Qh(a) {
              var b = Hh();"function" === typeof a && (a = a());b.memoizedState = b.baseState = a;a = b.queue = { pending: null, dispatch: null, lastRenderedReducer: Jh, lastRenderedState: a };a = a.dispatch = Oh.bind(null, R, a);return [b.memoizedState, a];
            }
            function Rh(a, b, c, d) {
              a = { tag: a, create: b, destroy: c, deps: d, next: null };b = R.updateQueue;null === b ? (b = { lastEffect: null }, R.updateQueue = b, b.lastEffect = a.next = a) : (c = b.lastEffect, null === c ? b.lastEffect = a.next = a : (d = c.next, c.next = a, a.next = d, b.lastEffect = a));return a;
            }function Sh(a) {
              var b = Hh();a = { current: a };return b.memoizedState = a;
            }function Th() {
              return Ih().memoizedState;
            }function Uh(a, b, c, d) {
              var e = Hh();R.flags |= a;e.memoizedState = Rh(1 | b, c, void 0, void 0 === d ? null : d);
            }
            function Vh(a, b, c, d) {
              var e = Ih();d = void 0 === d ? null : d;var f = void 0;if (null !== S) {
                var g = S.memoizedState;f = g.destroy;if (null !== d && Bh(d, g.deps)) {
                  Rh(b, c, f, d);return;
                }
              }R.flags |= a;e.memoizedState = Rh(1 | b, c, f, d);
            }function Wh(a, b) {
              return Uh(516, 4, a, b);
            }function Xh(a, b) {
              return Vh(516, 4, a, b);
            }function Yh(a, b) {
              return Vh(4, 2, a, b);
            }function Zh(a, b) {
              if ("function" === typeof b) return a = a(), b(a), function () {
                b(null);
              };if (null !== b && void 0 !== b) return a = a(), b.current = a, function () {
                b.current = null;
              };
            }
            function $h(a, b, c) {
              c = null !== c && void 0 !== c ? c.concat([a]) : null;return Vh(4, 2, Zh.bind(null, b, a), c);
            }function ai() {}function bi(a, b) {
              var c = Ih();b = void 0 === b ? null : b;var d = c.memoizedState;if (null !== d && null !== b && Bh(b, d[1])) return d[0];c.memoizedState = [a, b];return a;
            }function ci(a, b) {
              var c = Ih();b = void 0 === b ? null : b;var d = c.memoizedState;if (null !== d && null !== b && Bh(b, d[1])) return d[0];a = a();c.memoizedState = [a, b];return a;
            }
            function di(a, b) {
              var c = eg();gg(98 > c ? 98 : c, function () {
                a(!0);
              });gg(97 < c ? 97 : c, function () {
                var c = wh.transition;wh.transition = 1;try {
                  a(!1), b();
                } finally {
                  wh.transition = c;
                }
              });
            }
            function Oh(a, b, c) {
              var d = Hg(),
                  e = Ig(a),
                  f = { lane: e, action: c, eagerReducer: null, eagerState: null, next: null },
                  g = b.pending;null === g ? f.next = f : (f.next = g.next, g.next = f);b.pending = f;g = a.alternate;if (a === R || null !== g && g === R) zh = yh = !0;else {
                if (0 === a.lanes && (null === g || 0 === g.lanes) && (g = b.lastRenderedReducer, null !== g)) try {
                  var h = b.lastRenderedState,
                      k = g(h, c);f.eagerReducer = g;f.eagerState = k;if (He(k, h)) return;
                } catch (l) {} finally {}Jg(a, e, d);
              }
            }
            var Gh = { readContext: vg, useCallback: Ah, useContext: Ah, useEffect: Ah, useImperativeHandle: Ah, useLayoutEffect: Ah, useMemo: Ah, useReducer: Ah, useRef: Ah, useState: Ah, useDebugValue: Ah, useDeferredValue: Ah, useTransition: Ah, useMutableSource: Ah, useOpaqueIdentifier: Ah, unstable_isNewReconciler: !1 },
                Dh = { readContext: vg, useCallback: function (a, b) {
                Hh().memoizedState = [a, void 0 === b ? null : b];return a;
              }, useContext: vg, useEffect: Wh, useImperativeHandle: function (a, b, c) {
                c = null !== c && void 0 !== c ? c.concat([a]) : null;return Uh(4, 2, Zh.bind(null, b, a), c);
              }, useLayoutEffect: function (a, b) {
                return Uh(4, 2, a, b);
              }, useMemo: function (a, b) {
                var c = Hh();b = void 0 === b ? null : b;a = a();c.memoizedState = [a, b];return a;
              }, useReducer: function (a, b, c) {
                var d = Hh();b = void 0 !== c ? c(b) : b;d.memoizedState = d.baseState = b;a = d.queue = { pending: null, dispatch: null, lastRenderedReducer: a, lastRenderedState: b };a = a.dispatch = Oh.bind(null, R, a);return [d.memoizedState, a];
              }, useRef: Sh, useState: Qh, useDebugValue: ai, useDeferredValue: function (a) {
                var b = Qh(a),
                    c = b[0],
                    d = b[1];Wh(function () {
                  var b = wh.transition;
                  wh.transition = 1;try {
                    d(a);
                  } finally {
                    wh.transition = b;
                  }
                }, [a]);return c;
              }, useTransition: function () {
                var a = Qh(!1),
                    b = a[0];a = di.bind(null, a[1]);Sh(a);return [a, b];
              }, useMutableSource: function (a, b, c) {
                var d = Hh();d.memoizedState = { refs: { getSnapshot: b, setSnapshot: null }, source: a, subscribe: c };return Nh(d, a, b, c);
              }, useOpaqueIdentifier: function () {
                if (lh) {
                  var a = !1,
                      b = uf(function () {
                    a || (a = !0, c("r:" + (tf++).toString(36)));throw Error(y(355));
                  }),
                      c = Qh(b)[1];0 === (R.mode & 2) && (R.flags |= 516, Rh(5, function () {
                    c("r:" + (tf++).toString(36));
                  }, void 0, null));return b;
                }b = "r:" + (tf++).toString(36);Qh(b);return b;
              }, unstable_isNewReconciler: !1 },
                Eh = { readContext: vg, useCallback: bi, useContext: vg, useEffect: Xh, useImperativeHandle: $h, useLayoutEffect: Yh, useMemo: ci, useReducer: Kh, useRef: Th, useState: function () {
                return Kh(Jh);
              }, useDebugValue: ai, useDeferredValue: function (a) {
                var b = Kh(Jh),
                    c = b[0],
                    d = b[1];Xh(function () {
                  var b = wh.transition;wh.transition = 1;try {
                    d(a);
                  } finally {
                    wh.transition = b;
                  }
                }, [a]);return c;
              }, useTransition: function () {
                var a = Kh(Jh)[0];return [Th().current, a];
              }, useMutableSource: Ph, useOpaqueIdentifier: function () {
                return Kh(Jh)[0];
              }, unstable_isNewReconciler: !1 },
                Fh = { readContext: vg, useCallback: bi, useContext: vg, useEffect: Xh, useImperativeHandle: $h, useLayoutEffect: Yh, useMemo: ci, useReducer: Lh, useRef: Th, useState: function () {
                return Lh(Jh);
              }, useDebugValue: ai, useDeferredValue: function (a) {
                var b = Lh(Jh),
                    c = b[0],
                    d = b[1];Xh(function () {
                  var b = wh.transition;wh.transition = 1;try {
                    d(a);
                  } finally {
                    wh.transition = b;
                  }
                }, [a]);return c;
              }, useTransition: function () {
                var a = Lh(Jh)[0];return [Th().current, a];
              }, useMutableSource: Ph, useOpaqueIdentifier: function () {
                return Lh(Jh)[0];
              }, unstable_isNewReconciler: !1 },
                ei = ra.ReactCurrentOwner,
                ug = !1;function fi(a, b, c, d) {
              b.child = null === a ? Zg(b, null, c, d) : Yg(b, a.child, c, d);
            }function gi(a, b, c, d, e) {
              c = c.render;var f = b.ref;tg(b, e);d = Ch(a, b, c, d, f, e);if (null !== a && !ug) return b.updateQueue = a.updateQueue, b.flags &= -517, a.lanes &= ~e, hi(a, b, e);b.flags |= 1;fi(a, b, d, e);return b.child;
            }
            function ii(a, b, c, d, e, f) {
              if (null === a) {
                var g = c.type;if ("function" === typeof g && !ji(g) && void 0 === g.defaultProps && null === c.compare && void 0 === c.defaultProps) return b.tag = 15, b.type = g, ki(a, b, g, d, e, f);a = Vg(c.type, null, d, b, b.mode, f);a.ref = b.ref;a.return = b;return b.child = a;
              }g = a.child;if (0 === (e & f) && (e = g.memoizedProps, c = c.compare, c = null !== c ? c : Je, c(e, d) && a.ref === b.ref)) return hi(a, b, f);b.flags |= 1;a = Tg(g, d);a.ref = b.ref;a.return = b;return b.child = a;
            }
            function ki(a, b, c, d, e, f) {
              if (null !== a && Je(a.memoizedProps, d) && a.ref === b.ref) if (ug = !1, 0 !== (f & e)) 0 !== (a.flags & 16384) && (ug = !0);else return b.lanes = a.lanes, hi(a, b, f);return li(a, b, c, d, f);
            }
            function mi(a, b, c) {
              var d = b.pendingProps,
                  e = d.children,
                  f = null !== a ? a.memoizedState : null;if ("hidden" === d.mode || "unstable-defer-without-hiding" === d.mode) {
                if (0 === (b.mode & 4)) b.memoizedState = { baseLanes: 0 }, ni(b, c);else if (0 !== (c & 1073741824)) b.memoizedState = { baseLanes: 0 }, ni(b, null !== f ? f.baseLanes : c);else return a = null !== f ? f.baseLanes | c : c, b.lanes = b.childLanes = 1073741824, b.memoizedState = { baseLanes: a }, ni(b, a), null;
              } else null !== f ? (d = f.baseLanes | c, b.memoizedState = null) : d = c, ni(b, d);fi(a, b, e, c);return b.child;
            }
            function oi(a, b) {
              var c = b.ref;if (null === a && null !== c || null !== a && a.ref !== c) b.flags |= 128;
            }function li(a, b, c, d, e) {
              var f = Ff(c) ? Df : M.current;f = Ef(b, f);tg(b, e);c = Ch(a, b, c, d, f, e);if (null !== a && !ug) return b.updateQueue = a.updateQueue, b.flags &= -517, a.lanes &= ~e, hi(a, b, e);b.flags |= 1;fi(a, b, c, e);return b.child;
            }
            function pi(a, b, c, d, e) {
              if (Ff(c)) {
                var f = !0;Jf(b);
              } else f = !1;tg(b, e);if (null === b.stateNode) null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2), Mg(b, c, d), Og(b, c, d, e), d = !0;else if (null === a) {
                var g = b.stateNode,
                    h = b.memoizedProps;g.props = h;var k = g.context,
                    l = c.contextType;"object" === typeof l && null !== l ? l = vg(l) : (l = Ff(c) ? Df : M.current, l = Ef(b, l));var n = c.getDerivedStateFromProps,
                    A = "function" === typeof n || "function" === typeof g.getSnapshotBeforeUpdate;A || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k !== l) && Ng(b, g, d, l);wg = !1;var p = b.memoizedState;g.state = p;Cg(b, d, g, e);k = b.memoizedState;h !== d || p !== k || N.current || wg ? ("function" === typeof n && (Gg(b, c, n, d), k = b.memoizedState), (h = wg || Lg(b, c, h, d, p, k, l)) ? (A || "function" !== typeof g.UNSAFE_componentWillMount && "function" !== typeof g.componentWillMount || ("function" === typeof g.componentWillMount && g.componentWillMount(), "function" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), "function" === typeof g.componentDidMount && (b.flags |= 4)) : ("function" === typeof g.componentDidMount && (b.flags |= 4), b.memoizedProps = d, b.memoizedState = k), g.props = d, g.state = k, g.context = l, d = h) : ("function" === typeof g.componentDidMount && (b.flags |= 4), d = !1);
              } else {
                g = b.stateNode;yg(a, b);h = b.memoizedProps;l = b.type === b.elementType ? h : lg(b.type, h);g.props = l;A = b.pendingProps;p = g.context;k = c.contextType;"object" === typeof k && null !== k ? k = vg(k) : (k = Ff(c) ? Df : M.current, k = Ef(b, k));var C = c.getDerivedStateFromProps;(n = "function" === typeof C || "function" === typeof g.getSnapshotBeforeUpdate) || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== A || p !== k) && Ng(b, g, d, k);wg = !1;p = b.memoizedState;g.state = p;Cg(b, d, g, e);var x = b.memoizedState;h !== A || p !== x || N.current || wg ? ("function" === typeof C && (Gg(b, c, C, d), x = b.memoizedState), (l = wg || Lg(b, c, l, d, p, x, k)) ? (n || "function" !== typeof g.UNSAFE_componentWillUpdate && "function" !== typeof g.componentWillUpdate || ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(d, x, k), "function" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, x, k)), "function" === typeof g.componentDidUpdate && (b.flags |= 4), "function" === typeof g.getSnapshotBeforeUpdate && (b.flags |= 256)) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 256), b.memoizedProps = d, b.memoizedState = x), g.props = d, g.state = x, g.context = k, d = l) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 256), d = !1);
              }return qi(a, b, c, d, f, e);
            }
            function qi(a, b, c, d, e, f) {
              oi(a, b);var g = 0 !== (b.flags & 64);if (!d && !g) return e && Kf(b, c, !1), hi(a, b, f);d = b.stateNode;ei.current = b;var h = g && "function" !== typeof c.getDerivedStateFromError ? null : d.render();b.flags |= 1;null !== a && g ? (b.child = Yg(b, a.child, null, f), b.child = Yg(b, null, h, f)) : fi(a, b, h, f);b.memoizedState = d.state;e && Kf(b, c, !0);return b.child;
            }function ri(a) {
              var b = a.stateNode;b.pendingContext ? Hf(a, b.pendingContext, b.pendingContext !== b.context) : b.context && Hf(a, b.context, !1);eh(a, b.containerInfo);
            }
            var si = { dehydrated: null, retryLane: 0 };
            function ti(a, b, c) {
              var d = b.pendingProps,
                  e = P.current,
                  f = !1,
                  g;(g = 0 !== (b.flags & 64)) || (g = null !== a && null === a.memoizedState ? !1 : 0 !== (e & 2));g ? (f = !0, b.flags &= -65) : null !== a && null === a.memoizedState || void 0 === d.fallback || !0 === d.unstable_avoidThisFallback || (e |= 1);I(P, e & 1);if (null === a) {
                void 0 !== d.fallback && ph(b);a = d.children;e = d.fallback;if (f) return a = ui(b, a, e, c), b.child.memoizedState = { baseLanes: c }, b.memoizedState = si, a;if ("number" === typeof d.unstable_expectedLoadTime) return a = ui(b, a, e, c), b.child.memoizedState = { baseLanes: c }, b.memoizedState = si, b.lanes = 33554432, a;c = vi({ mode: "visible", children: a }, b.mode, c, null);c.return = b;return b.child = c;
              }if (null !== a.memoizedState) {
                if (f) return d = wi(a, b, d.children, d.fallback, c), f = b.child, e = a.child.memoizedState, f.memoizedState = null === e ? { baseLanes: c } : { baseLanes: e.baseLanes | c }, f.childLanes = a.childLanes & ~c, b.memoizedState = si, d;c = xi(a, b, d.children, c);b.memoizedState = null;return c;
              }if (f) return d = wi(a, b, d.children, d.fallback, c), f = b.child, e = a.child.memoizedState, f.memoizedState = null === e ? { baseLanes: c } : { baseLanes: e.baseLanes | c }, f.childLanes = a.childLanes & ~c, b.memoizedState = si, d;c = xi(a, b, d.children, c);b.memoizedState = null;return c;
            }function ui(a, b, c, d) {
              var e = a.mode,
                  f = a.child;b = { mode: "hidden", children: b };0 === (e & 2) && null !== f ? (f.childLanes = 0, f.pendingProps = b) : f = vi(b, e, 0, null);c = Xg(c, e, d, null);f.return = a;c.return = a;f.sibling = c;a.child = f;return c;
            }
            function xi(a, b, c, d) {
              var e = a.child;a = e.sibling;c = Tg(e, { mode: "visible", children: c });0 === (b.mode & 2) && (c.lanes = d);c.return = b;c.sibling = null;null !== a && (a.nextEffect = null, a.flags = 8, b.firstEffect = b.lastEffect = a);return b.child = c;
            }
            function wi(a, b, c, d, e) {
              var f = b.mode,
                  g = a.child;a = g.sibling;var h = { mode: "hidden", children: c };0 === (f & 2) && b.child !== g ? (c = b.child, c.childLanes = 0, c.pendingProps = h, g = c.lastEffect, null !== g ? (b.firstEffect = c.firstEffect, b.lastEffect = g, g.nextEffect = null) : b.firstEffect = b.lastEffect = null) : c = Tg(g, h);null !== a ? d = Tg(a, d) : (d = Xg(d, f, e, null), d.flags |= 2);d.return = b;c.return = b;c.sibling = d;b.child = c;return d;
            }function yi(a, b) {
              a.lanes |= b;var c = a.alternate;null !== c && (c.lanes |= b);sg(a.return, b);
            }
            function zi(a, b, c, d, e, f) {
              var g = a.memoizedState;null === g ? a.memoizedState = { isBackwards: b, rendering: null, renderingStartTime: 0, last: d, tail: c, tailMode: e, lastEffect: f } : (g.isBackwards = b, g.rendering = null, g.renderingStartTime = 0, g.last = d, g.tail = c, g.tailMode = e, g.lastEffect = f);
            }
            function Ai(a, b, c) {
              var d = b.pendingProps,
                  e = d.revealOrder,
                  f = d.tail;fi(a, b, d.children, c);d = P.current;if (0 !== (d & 2)) d = d & 1 | 2, b.flags |= 64;else {
                if (null !== a && 0 !== (a.flags & 64)) a: for (a = b.child; null !== a;) {
                  if (13 === a.tag) null !== a.memoizedState && yi(a, c);else if (19 === a.tag) yi(a, c);else if (null !== a.child) {
                    a.child.return = a;a = a.child;continue;
                  }if (a === b) break a;for (; null === a.sibling;) {
                    if (null === a.return || a.return === b) break a;a = a.return;
                  }a.sibling.return = a.return;a = a.sibling;
                }d &= 1;
              }I(P, d);if (0 === (b.mode & 2)) b.memoizedState = null;else switch (e) {case "forwards":
                  c = b.child;for (e = null; null !== c;) a = c.alternate, null !== a && null === ih(a) && (e = c), c = c.sibling;c = e;null === c ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null);zi(b, !1, e, c, f, b.lastEffect);break;case "backwards":
                  c = null;e = b.child;for (b.child = null; null !== e;) {
                    a = e.alternate;if (null !== a && null === ih(a)) {
                      b.child = e;break;
                    }a = e.sibling;e.sibling = c;c = e;e = a;
                  }zi(b, !0, c, null, f, b.lastEffect);break;case "together":
                  zi(b, !1, null, null, void 0, b.lastEffect);break;default:
                  b.memoizedState = null;}return b.child;
            }
            function hi(a, b, c) {
              null !== a && (b.dependencies = a.dependencies);Dg |= b.lanes;if (0 !== (c & b.childLanes)) {
                if (null !== a && b.child !== a.child) throw Error(y(153));if (null !== b.child) {
                  a = b.child;c = Tg(a, a.pendingProps);b.child = c;for (c.return = b; null !== a.sibling;) a = a.sibling, c = c.sibling = Tg(a, a.pendingProps), c.return = b;c.sibling = null;
                }return b.child;
              }return null;
            }var Bi, Ci, Di, Ei;
            Bi = function (a, b) {
              for (var c = b.child; null !== c;) {
                if (5 === c.tag || 6 === c.tag) a.appendChild(c.stateNode);else if (4 !== c.tag && null !== c.child) {
                  c.child.return = c;c = c.child;continue;
                }if (c === b) break;for (; null === c.sibling;) {
                  if (null === c.return || c.return === b) return;c = c.return;
                }c.sibling.return = c.return;c = c.sibling;
              }
            };Ci = function () {};
            Di = function (a, b, c, d) {
              var e = a.memoizedProps;if (e !== d) {
                a = b.stateNode;dh(ah.current);var f = null;switch (c) {case "input":
                    e = Ya(a, e);d = Ya(a, d);f = [];break;case "option":
                    e = eb(a, e);d = eb(a, d);f = [];break;case "select":
                    e = m({}, e, { value: void 0 });d = m({}, d, { value: void 0 });f = [];break;case "textarea":
                    e = gb(a, e);d = gb(a, d);f = [];break;default:
                    "function" !== typeof e.onClick && "function" === typeof d.onClick && (a.onclick = jf);}vb(c, d);var g;c = null;for (l in e) if (!d.hasOwnProperty(l) && e.hasOwnProperty(l) && null != e[l]) if ("style" === l) {
                  var h = e[l];for (g in h) h.hasOwnProperty(g) && (c || (c = {}), c[g] = "");
                } else "dangerouslySetInnerHTML" !== l && "children" !== l && "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && "autoFocus" !== l && (ca.hasOwnProperty(l) ? f || (f = []) : (f = f || []).push(l, null));for (l in d) {
                  var k = d[l];h = null != e ? e[l] : void 0;if (d.hasOwnProperty(l) && k !== h && (null != k || null != h)) if ("style" === l) {
                    if (h) {
                      for (g in h) !h.hasOwnProperty(g) || k && k.hasOwnProperty(g) || (c || (c = {}), c[g] = "");for (g in k) k.hasOwnProperty(g) && h[g] !== k[g] && (c || (c = {}), c[g] = k[g]);
                    } else c || (f || (f = []), f.push(l, c)), c = k;
                  } else "dangerouslySetInnerHTML" === l ? (k = k ? k.__html : void 0, h = h ? h.__html : void 0, null != k && h !== k && (f = f || []).push(l, k)) : "children" === l ? "string" !== typeof k && "number" !== typeof k || (f = f || []).push(l, "" + k) : "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && (ca.hasOwnProperty(l) ? (null != k && "onScroll" === l && G("scroll", a), f || h === k || (f = [])) : "object" === typeof k && null !== k && k.$$typeof === Ga ? k.toString() : (f = f || []).push(l, k));
                }c && (f = f || []).push("style", c);var l = f;if (b.updateQueue = l) b.flags |= 4;
              }
            };Ei = function (a, b, c, d) {
              c !== d && (b.flags |= 4);
            };function Fi(a, b) {
              if (!lh) switch (a.tailMode) {case "hidden":
                  b = a.tail;for (var c = null; null !== b;) null !== b.alternate && (c = b), b = b.sibling;null === c ? a.tail = null : c.sibling = null;break;case "collapsed":
                  c = a.tail;for (var d = null; null !== c;) null !== c.alternate && (d = c), c = c.sibling;null === d ? b || null === a.tail ? a.tail = null : a.tail.sibling = null : d.sibling = null;}
            }
            function Gi(a, b, c) {
              var d = b.pendingProps;switch (b.tag) {case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:
                  return null;case 1:
                  return Ff(b.type) && Gf(), null;case 3:
                  fh();H(N);H(M);uh();d = b.stateNode;d.pendingContext && (d.context = d.pendingContext, d.pendingContext = null);if (null === a || null === a.child) rh(b) ? b.flags |= 4 : d.hydrate || (b.flags |= 256);Ci(b);return null;case 5:
                  hh(b);var e = dh(ch.current);c = b.type;if (null !== a && null != b.stateNode) Di(a, b, c, d, e), a.ref !== b.ref && (b.flags |= 128);else {
                    if (!d) {
                      if (null === b.stateNode) throw Error(y(166));return null;
                    }a = dh(ah.current);if (rh(b)) {
                      d = b.stateNode;c = b.type;var f = b.memoizedProps;d[wf] = b;d[xf] = f;switch (c) {case "dialog":
                          G("cancel", d);G("close", d);break;case "iframe":case "object":case "embed":
                          G("load", d);break;case "video":case "audio":
                          for (a = 0; a < Xe.length; a++) G(Xe[a], d);break;case "source":
                          G("error", d);break;case "img":case "image":case "link":
                          G("error", d);G("load", d);break;case "details":
                          G("toggle", d);break;case "input":
                          Za(d, f);G("invalid", d);break;case "select":
                          d._wrapperState = { wasMultiple: !!f.multiple };G("invalid", d);break;case "textarea":
                          hb(d, f), G("invalid", d);}vb(c, f);a = null;for (var g in f) f.hasOwnProperty(g) && (e = f[g], "children" === g ? "string" === typeof e ? d.textContent !== e && (a = ["children", e]) : "number" === typeof e && d.textContent !== "" + e && (a = ["children", "" + e]) : ca.hasOwnProperty(g) && null != e && "onScroll" === g && G("scroll", d));switch (c) {case "input":
                          Va(d);cb(d, f, !0);break;case "textarea":
                          Va(d);jb(d);break;case "select":case "option":
                          break;default:
                          "function" === typeof f.onClick && (d.onclick = jf);}d = a;b.updateQueue = d;null !== d && (b.flags |= 4);
                    } else {
                      g = 9 === e.nodeType ? e : e.ownerDocument;a === kb.html && (a = lb(c));a === kb.html ? "script" === c ? (a = g.createElement("div"), a.innerHTML = "<script>\x3c/script>", a = a.removeChild(a.firstChild)) : "string" === typeof d.is ? a = g.createElement(c, { is: d.is }) : (a = g.createElement(c), "select" === c && (g = a, d.multiple ? g.multiple = !0 : d.size && (g.size = d.size))) : a = g.createElementNS(a, c);a[wf] = b;a[xf] = d;Bi(a, b, !1, !1);b.stateNode = a;g = wb(c, d);switch (c) {case "dialog":
                          G("cancel", a);G("close", a);
                          e = d;break;case "iframe":case "object":case "embed":
                          G("load", a);e = d;break;case "video":case "audio":
                          for (e = 0; e < Xe.length; e++) G(Xe[e], a);e = d;break;case "source":
                          G("error", a);e = d;break;case "img":case "image":case "link":
                          G("error", a);G("load", a);e = d;break;case "details":
                          G("toggle", a);e = d;break;case "input":
                          Za(a, d);e = Ya(a, d);G("invalid", a);break;case "option":
                          e = eb(a, d);break;case "select":
                          a._wrapperState = { wasMultiple: !!d.multiple };e = m({}, d, { value: void 0 });G("invalid", a);break;case "textarea":
                          hb(a, d);e = gb(a, d);G("invalid", a);break;default:
                          e = d;}vb(c, e);var h = e;for (f in h) if (h.hasOwnProperty(f)) {
                        var k = h[f];"style" === f ? tb(a, k) : "dangerouslySetInnerHTML" === f ? (k = k ? k.__html : void 0, null != k && ob(a, k)) : "children" === f ? "string" === typeof k ? ("textarea" !== c || "" !== k) && pb(a, k) : "number" === typeof k && pb(a, "" + k) : "suppressContentEditableWarning" !== f && "suppressHydrationWarning" !== f && "autoFocus" !== f && (ca.hasOwnProperty(f) ? null != k && "onScroll" === f && G("scroll", a) : null != k && qa(a, f, k, g));
                      }switch (c) {case "input":
                          Va(a);cb(a, d, !1);
                          break;case "textarea":
                          Va(a);jb(a);break;case "option":
                          null != d.value && a.setAttribute("value", "" + Sa(d.value));break;case "select":
                          a.multiple = !!d.multiple;f = d.value;null != f ? fb(a, !!d.multiple, f, !1) : null != d.defaultValue && fb(a, !!d.multiple, d.defaultValue, !0);break;default:
                          "function" === typeof e.onClick && (a.onclick = jf);}mf(c, d) && (b.flags |= 4);
                    }null !== b.ref && (b.flags |= 128);
                  }return null;case 6:
                  if (a && null != b.stateNode) Ei(a, b, a.memoizedProps, d);else {
                    if ("string" !== typeof d && null === b.stateNode) throw Error(y(166));
                    c = dh(ch.current);dh(ah.current);rh(b) ? (d = b.stateNode, c = b.memoizedProps, d[wf] = b, d.nodeValue !== c && (b.flags |= 4)) : (d = (9 === c.nodeType ? c : c.ownerDocument).createTextNode(d), d[wf] = b, b.stateNode = d);
                  }return null;case 13:
                  H(P);d = b.memoizedState;if (0 !== (b.flags & 64)) return b.lanes = c, b;d = null !== d;c = !1;null === a ? void 0 !== b.memoizedProps.fallback && rh(b) : c = null !== a.memoizedState;if (d && !c && 0 !== (b.mode & 2)) if (null === a && !0 !== b.memoizedProps.unstable_avoidThisFallback || 0 !== (P.current & 1)) 0 === V && (V = 3);else {
                    if (0 === V || 3 === V) V = 4;null === U || 0 === (Dg & 134217727) && 0 === (Hi & 134217727) || Ii(U, W);
                  }if (d || c) b.flags |= 4;return null;case 4:
                  return fh(), Ci(b), null === a && cf(b.stateNode.containerInfo), null;case 10:
                  return rg(b), null;case 17:
                  return Ff(b.type) && Gf(), null;case 19:
                  H(P);d = b.memoizedState;if (null === d) return null;f = 0 !== (b.flags & 64);g = d.rendering;if (null === g) {
                    if (f) Fi(d, !1);else {
                      if (0 !== V || null !== a && 0 !== (a.flags & 64)) for (a = b.child; null !== a;) {
                        g = ih(a);if (null !== g) {
                          b.flags |= 64;Fi(d, !1);f = g.updateQueue;null !== f && (b.updateQueue = f, b.flags |= 4);
                          null === d.lastEffect && (b.firstEffect = null);b.lastEffect = d.lastEffect;d = c;for (c = b.child; null !== c;) f = c, a = d, f.flags &= 2, f.nextEffect = null, f.firstEffect = null, f.lastEffect = null, g = f.alternate, null === g ? (f.childLanes = 0, f.lanes = a, f.child = null, f.memoizedProps = null, f.memoizedState = null, f.updateQueue = null, f.dependencies = null, f.stateNode = null) : (f.childLanes = g.childLanes, f.lanes = g.lanes, f.child = g.child, f.memoizedProps = g.memoizedProps, f.memoizedState = g.memoizedState, f.updateQueue = g.updateQueue, f.type = g.type, a = g.dependencies, f.dependencies = null === a ? null : { lanes: a.lanes, firstContext: a.firstContext }), c = c.sibling;I(P, P.current & 1 | 2);return b.child;
                        }a = a.sibling;
                      }null !== d.tail && O() > Ji && (b.flags |= 64, f = !0, Fi(d, !1), b.lanes = 33554432);
                    }
                  } else {
                    if (!f) if (a = ih(g), null !== a) {
                      if (b.flags |= 64, f = !0, c = a.updateQueue, null !== c && (b.updateQueue = c, b.flags |= 4), Fi(d, !0), null === d.tail && "hidden" === d.tailMode && !g.alternate && !lh) return b = b.lastEffect = d.lastEffect, null !== b && (b.nextEffect = null), null;
                    } else 2 * O() - d.renderingStartTime > Ji && 1073741824 !== c && (b.flags |= 64, f = !0, Fi(d, !1), b.lanes = 33554432);d.isBackwards ? (g.sibling = b.child, b.child = g) : (c = d.last, null !== c ? c.sibling = g : b.child = g, d.last = g);
                  }return null !== d.tail ? (c = d.tail, d.rendering = c, d.tail = c.sibling, d.lastEffect = b.lastEffect, d.renderingStartTime = O(), c.sibling = null, b = P.current, I(P, f ? b & 1 | 2 : b & 1), c) : null;case 23:case 24:
                  return Ki(), null !== a && null !== a.memoizedState !== (null !== b.memoizedState) && "unstable-defer-without-hiding" !== d.mode && (b.flags |= 4), null;}throw Error(y(156, b.tag));
            }
            function Li(a) {
              switch (a.tag) {case 1:
                  Ff(a.type) && Gf();var b = a.flags;return b & 4096 ? (a.flags = b & -4097 | 64, a) : null;case 3:
                  fh();H(N);H(M);uh();b = a.flags;if (0 !== (b & 64)) throw Error(y(285));a.flags = b & -4097 | 64;return a;case 5:
                  return hh(a), null;case 13:
                  return H(P), b = a.flags, b & 4096 ? (a.flags = b & -4097 | 64, a) : null;case 19:
                  return H(P), null;case 4:
                  return fh(), null;case 10:
                  return rg(a), null;case 23:case 24:
                  return Ki(), null;default:
                  return null;}
            }
            function Mi(a, b) {
              try {
                var c = "",
                    d = b;do c += Qa(d), d = d.return; while (d);var e = c;
              } catch (f) {
                e = "\nError generating stack: " + f.message + "\n" + f.stack;
              }return { value: a, source: b, stack: e };
            }function Ni(a, b) {
              try {
                console.error(b.value);
              } catch (c) {
                setTimeout(function () {
                  throw c;
                });
              }
            }var Oi = "function" === typeof WeakMap ? WeakMap : Map;function Pi(a, b, c) {
              c = zg(-1, c);c.tag = 3;c.payload = { element: null };var d = b.value;c.callback = function () {
                Qi || (Qi = !0, Ri = d);Ni(a, b);
              };return c;
            }
            function Si(a, b, c) {
              c = zg(-1, c);c.tag = 3;var d = a.type.getDerivedStateFromError;if ("function" === typeof d) {
                var e = b.value;c.payload = function () {
                  Ni(a, b);return d(e);
                };
              }var f = a.stateNode;null !== f && "function" === typeof f.componentDidCatch && (c.callback = function () {
                "function" !== typeof d && (null === Ti ? Ti = new Set([this]) : Ti.add(this), Ni(a, b));var c = b.stack;this.componentDidCatch(b.value, { componentStack: null !== c ? c : "" });
              });return c;
            }var Ui = "function" === typeof WeakSet ? WeakSet : Set;
            function Vi(a) {
              var b = a.ref;if (null !== b) if ("function" === typeof b) try {
                b(null);
              } catch (c) {
                Wi(a, c);
              } else b.current = null;
            }function Xi(a, b) {
              switch (b.tag) {case 0:case 11:case 15:case 22:
                  return;case 1:
                  if (b.flags & 256 && null !== a) {
                    var c = a.memoizedProps,
                        d = a.memoizedState;a = b.stateNode;b = a.getSnapshotBeforeUpdate(b.elementType === b.type ? c : lg(b.type, c), d);a.__reactInternalSnapshotBeforeUpdate = b;
                  }return;case 3:
                  b.flags & 256 && qf(b.stateNode.containerInfo);return;case 5:case 6:case 4:case 17:
                  return;}throw Error(y(163));
            }
            function Yi(a, b, c) {
              switch (c.tag) {case 0:case 11:case 15:case 22:
                  b = c.updateQueue;b = null !== b ? b.lastEffect : null;if (null !== b) {
                    a = b = b.next;do {
                      if (3 === (a.tag & 3)) {
                        var d = a.create;a.destroy = d();
                      }a = a.next;
                    } while (a !== b);
                  }b = c.updateQueue;b = null !== b ? b.lastEffect : null;if (null !== b) {
                    a = b = b.next;do {
                      var e = a;d = e.next;e = e.tag;0 !== (e & 4) && 0 !== (e & 1) && (Zi(c, a), $i(c, a));a = d;
                    } while (a !== b);
                  }return;case 1:
                  a = c.stateNode;c.flags & 4 && (null === b ? a.componentDidMount() : (d = c.elementType === c.type ? b.memoizedProps : lg(c.type, b.memoizedProps), a.componentDidUpdate(d, b.memoizedState, a.__reactInternalSnapshotBeforeUpdate)));b = c.updateQueue;null !== b && Eg(c, b, a);return;case 3:
                  b = c.updateQueue;if (null !== b) {
                    a = null;if (null !== c.child) switch (c.child.tag) {case 5:
                        a = c.child.stateNode;break;case 1:
                        a = c.child.stateNode;}Eg(c, b, a);
                  }return;case 5:
                  a = c.stateNode;null === b && c.flags & 4 && mf(c.type, c.memoizedProps) && a.focus();return;case 6:
                  return;case 4:
                  return;case 12:
                  return;case 13:
                  null === c.memoizedState && (c = c.alternate, null !== c && (c = c.memoizedState, null !== c && (c = c.dehydrated, null !== c && Cc(c))));
                  return;case 19:case 17:case 20:case 21:case 23:case 24:
                  return;}throw Error(y(163));
            }
            function aj(a, b) {
              for (var c = a;;) {
                if (5 === c.tag) {
                  var d = c.stateNode;if (b) d = d.style, "function" === typeof d.setProperty ? d.setProperty("display", "none", "important") : d.display = "none";else {
                    d = c.stateNode;var e = c.memoizedProps.style;e = void 0 !== e && null !== e && e.hasOwnProperty("display") ? e.display : null;d.style.display = sb("display", e);
                  }
                } else if (6 === c.tag) c.stateNode.nodeValue = b ? "" : c.memoizedProps;else if ((23 !== c.tag && 24 !== c.tag || null === c.memoizedState || c === a) && null !== c.child) {
                  c.child.return = c;c = c.child;continue;
                }if (c === a) break;for (; null === c.sibling;) {
                  if (null === c.return || c.return === a) return;c = c.return;
                }c.sibling.return = c.return;c = c.sibling;
              }
            }
            function bj(a, b) {
              if (Mf && "function" === typeof Mf.onCommitFiberUnmount) try {
                Mf.onCommitFiberUnmount(Lf, b);
              } catch (f) {}switch (b.tag) {case 0:case 11:case 14:case 15:case 22:
                  a = b.updateQueue;if (null !== a && (a = a.lastEffect, null !== a)) {
                    var c = a = a.next;do {
                      var d = c,
                          e = d.destroy;d = d.tag;if (void 0 !== e) if (0 !== (d & 4)) Zi(b, c);else {
                        d = b;try {
                          e();
                        } catch (f) {
                          Wi(d, f);
                        }
                      }c = c.next;
                    } while (c !== a);
                  }break;case 1:
                  Vi(b);a = b.stateNode;if ("function" === typeof a.componentWillUnmount) try {
                    a.props = b.memoizedProps, a.state = b.memoizedState, a.componentWillUnmount();
                  } catch (f) {
                    Wi(b, f);
                  }break;case 5:
                  Vi(b);break;case 4:
                  cj(a, b);}
            }function dj(a) {
              a.alternate = null;a.child = null;a.dependencies = null;a.firstEffect = null;a.lastEffect = null;a.memoizedProps = null;a.memoizedState = null;a.pendingProps = null;a.return = null;a.updateQueue = null;
            }function ej(a) {
              return 5 === a.tag || 3 === a.tag || 4 === a.tag;
            }
            function fj(a) {
              a: {
                for (var b = a.return; null !== b;) {
                  if (ej(b)) break a;b = b.return;
                }throw Error(y(160));
              }var c = b;b = c.stateNode;switch (c.tag) {case 5:
                  var d = !1;break;case 3:
                  b = b.containerInfo;d = !0;break;case 4:
                  b = b.containerInfo;d = !0;break;default:
                  throw Error(y(161));}c.flags & 16 && (pb(b, ""), c.flags &= -17);a: b: for (c = a;;) {
                for (; null === c.sibling;) {
                  if (null === c.return || ej(c.return)) {
                    c = null;break a;
                  }c = c.return;
                }c.sibling.return = c.return;for (c = c.sibling; 5 !== c.tag && 6 !== c.tag && 18 !== c.tag;) {
                  if (c.flags & 2) continue b;if (null === c.child || 4 === c.tag) continue b;else c.child.return = c, c = c.child;
                }if (!(c.flags & 2)) {
                  c = c.stateNode;break a;
                }
              }d ? gj(a, c, b) : hj(a, c, b);
            }
            function gj(a, b, c) {
              var d = a.tag,
                  e = 5 === d || 6 === d;if (e) a = e ? a.stateNode : a.stateNode.instance, b ? 8 === c.nodeType ? c.parentNode.insertBefore(a, b) : c.insertBefore(a, b) : (8 === c.nodeType ? (b = c.parentNode, b.insertBefore(a, c)) : (b = c, b.appendChild(a)), c = c._reactRootContainer, null !== c && void 0 !== c || null !== b.onclick || (b.onclick = jf));else if (4 !== d && (a = a.child, null !== a)) for (gj(a, b, c), a = a.sibling; null !== a;) gj(a, b, c), a = a.sibling;
            }
            function hj(a, b, c) {
              var d = a.tag,
                  e = 5 === d || 6 === d;if (e) a = e ? a.stateNode : a.stateNode.instance, b ? c.insertBefore(a, b) : c.appendChild(a);else if (4 !== d && (a = a.child, null !== a)) for (hj(a, b, c), a = a.sibling; null !== a;) hj(a, b, c), a = a.sibling;
            }
            function cj(a, b) {
              for (var c = b, d = !1, e, f;;) {
                if (!d) {
                  d = c.return;a: for (;;) {
                    if (null === d) throw Error(y(160));e = d.stateNode;switch (d.tag) {case 5:
                        f = !1;break a;case 3:
                        e = e.containerInfo;f = !0;break a;case 4:
                        e = e.containerInfo;f = !0;break a;}d = d.return;
                  }d = !0;
                }if (5 === c.tag || 6 === c.tag) {
                  a: for (var g = a, h = c, k = h;;) if (bj(g, k), null !== k.child && 4 !== k.tag) k.child.return = k, k = k.child;else {
                    if (k === h) break a;for (; null === k.sibling;) {
                      if (null === k.return || k.return === h) break a;k = k.return;
                    }k.sibling.return = k.return;k = k.sibling;
                  }f ? (g = e, h = c.stateNode, 8 === g.nodeType ? g.parentNode.removeChild(h) : g.removeChild(h)) : e.removeChild(c.stateNode);
                } else if (4 === c.tag) {
                  if (null !== c.child) {
                    e = c.stateNode.containerInfo;f = !0;c.child.return = c;c = c.child;continue;
                  }
                } else if (bj(a, c), null !== c.child) {
                  c.child.return = c;c = c.child;continue;
                }if (c === b) break;for (; null === c.sibling;) {
                  if (null === c.return || c.return === b) return;c = c.return;4 === c.tag && (d = !1);
                }c.sibling.return = c.return;c = c.sibling;
              }
            }
            function ij(a, b) {
              switch (b.tag) {case 0:case 11:case 14:case 15:case 22:
                  var c = b.updateQueue;c = null !== c ? c.lastEffect : null;if (null !== c) {
                    var d = c = c.next;do 3 === (d.tag & 3) && (a = d.destroy, d.destroy = void 0, void 0 !== a && a()), d = d.next; while (d !== c);
                  }return;case 1:
                  return;case 5:
                  c = b.stateNode;if (null != c) {
                    d = b.memoizedProps;var e = null !== a ? a.memoizedProps : d;a = b.type;var f = b.updateQueue;b.updateQueue = null;if (null !== f) {
                      c[xf] = d;"input" === a && "radio" === d.type && null != d.name && $a(c, d);wb(a, e);b = wb(a, d);for (e = 0; e < f.length; e += 2) {
                        var g = f[e],
                            h = f[e + 1];"style" === g ? tb(c, h) : "dangerouslySetInnerHTML" === g ? ob(c, h) : "children" === g ? pb(c, h) : qa(c, g, h, b);
                      }switch (a) {case "input":
                          ab(c, d);break;case "textarea":
                          ib(c, d);break;case "select":
                          a = c._wrapperState.wasMultiple, c._wrapperState.wasMultiple = !!d.multiple, f = d.value, null != f ? fb(c, !!d.multiple, f, !1) : a !== !!d.multiple && (null != d.defaultValue ? fb(c, !!d.multiple, d.defaultValue, !0) : fb(c, !!d.multiple, d.multiple ? [] : "", !1));}
                    }
                  }return;case 6:
                  if (null === b.stateNode) throw Error(y(162));b.stateNode.nodeValue = b.memoizedProps;return;case 3:
                  c = b.stateNode;c.hydrate && (c.hydrate = !1, Cc(c.containerInfo));return;case 12:
                  return;case 13:
                  null !== b.memoizedState && (jj = O(), aj(b.child, !0));kj(b);return;case 19:
                  kj(b);return;case 17:
                  return;case 23:case 24:
                  aj(b, null !== b.memoizedState);return;}throw Error(y(163));
            }function kj(a) {
              var b = a.updateQueue;if (null !== b) {
                a.updateQueue = null;var c = a.stateNode;null === c && (c = a.stateNode = new Ui());b.forEach(function (b) {
                  var d = lj.bind(null, a, b);c.has(b) || (c.add(b), b.then(d, d));
                });
              }
            }
            function mj(a, b) {
              return null !== a && (a = a.memoizedState, null === a || null !== a.dehydrated) ? (b = b.memoizedState, null !== b && null === b.dehydrated) : !1;
            }var nj = Math.ceil,
                oj = ra.ReactCurrentDispatcher,
                pj = ra.ReactCurrentOwner,
                X = 0,
                U = null,
                Y = null,
                W = 0,
                qj = 0,
                rj = Bf(0),
                V = 0,
                sj = null,
                tj = 0,
                Dg = 0,
                Hi = 0,
                uj = 0,
                vj = null,
                jj = 0,
                Ji = Infinity;function wj() {
              Ji = O() + 500;
            }var Z = null,
                Qi = !1,
                Ri = null,
                Ti = null,
                xj = !1,
                yj = null,
                zj = 90,
                Aj = [],
                Bj = [],
                Cj = null,
                Dj = 0,
                Ej = null,
                Fj = -1,
                Gj = 0,
                Hj = 0,
                Ij = null,
                Jj = !1;function Hg() {
              return 0 !== (X & 48) ? O() : -1 !== Fj ? Fj : Fj = O();
            }
            function Ig(a) {
              a = a.mode;if (0 === (a & 2)) return 1;if (0 === (a & 4)) return 99 === eg() ? 1 : 2;0 === Gj && (Gj = tj);if (0 !== kg.transition) {
                0 !== Hj && (Hj = null !== vj ? vj.pendingLanes : 0);a = Gj;var b = 4186112 & ~Hj;b &= -b;0 === b && (a = 4186112 & ~a, b = a & -a, 0 === b && (b = 8192));return b;
              }a = eg();0 !== (X & 4) && 98 === a ? a = Xc(12, Gj) : (a = Sc(a), a = Xc(a, Gj));return a;
            }
            function Jg(a, b, c) {
              if (50 < Dj) throw Dj = 0, Ej = null, Error(y(185));a = Kj(a, b);if (null === a) return null;$c(a, b, c);a === U && (Hi |= b, 4 === V && Ii(a, W));var d = eg();1 === b ? 0 !== (X & 8) && 0 === (X & 48) ? Lj(a) : (Mj(a, c), 0 === X && (wj(), ig())) : (0 === (X & 4) || 98 !== d && 99 !== d || (null === Cj ? Cj = new Set([a]) : Cj.add(a)), Mj(a, c));vj = a;
            }function Kj(a, b) {
              a.lanes |= b;var c = a.alternate;null !== c && (c.lanes |= b);c = a;for (a = a.return; null !== a;) a.childLanes |= b, c = a.alternate, null !== c && (c.childLanes |= b), c = a, a = a.return;return 3 === c.tag ? c.stateNode : null;
            }
            function Mj(a, b) {
              for (var c = a.callbackNode, d = a.suspendedLanes, e = a.pingedLanes, f = a.expirationTimes, g = a.pendingLanes; 0 < g;) {
                var h = 31 - Vc(g),
                    k = 1 << h,
                    l = f[h];if (-1 === l) {
                  if (0 === (k & d) || 0 !== (k & e)) {
                    l = b;Rc(k);var n = F;f[h] = 10 <= n ? l + 250 : 6 <= n ? l + 5E3 : -1;
                  }
                } else l <= b && (a.expiredLanes |= k);g &= ~k;
              }d = Uc(a, a === U ? W : 0);b = F;if (0 === d) null !== c && (c !== Zf && Pf(c), a.callbackNode = null, a.callbackPriority = 0);else {
                if (null !== c) {
                  if (a.callbackPriority === b) return;c !== Zf && Pf(c);
                }15 === b ? (c = Lj.bind(null, a), null === ag ? (ag = [c], bg = Of(Uf, jg)) : ag.push(c), c = Zf) : 14 === b ? c = hg(99, Lj.bind(null, a)) : (c = Tc(b), c = hg(c, Nj.bind(null, a)));a.callbackPriority = b;a.callbackNode = c;
              }
            }
            function Nj(a) {
              Fj = -1;Hj = Gj = 0;if (0 !== (X & 48)) throw Error(y(327));var b = a.callbackNode;if (Oj() && a.callbackNode !== b) return null;var c = Uc(a, a === U ? W : 0);if (0 === c) return null;var d = c;var e = X;X |= 16;var f = Pj();if (U !== a || W !== d) wj(), Qj(a, d);do try {
                Rj();break;
              } catch (h) {
                Sj(a, h);
              } while (1);qg();oj.current = f;X = e;null !== Y ? d = 0 : (U = null, W = 0, d = V);if (0 !== (tj & Hi)) Qj(a, 0);else if (0 !== d) {
                2 === d && (X |= 64, a.hydrate && (a.hydrate = !1, qf(a.containerInfo)), c = Wc(a), 0 !== c && (d = Tj(a, c)));if (1 === d) throw b = sj, Qj(a, 0), Ii(a, c), Mj(a, O()), b;a.finishedWork = a.current.alternate;a.finishedLanes = c;switch (d) {case 0:case 1:
                    throw Error(y(345));case 2:
                    Uj(a);break;case 3:
                    Ii(a, c);if ((c & 62914560) === c && (d = jj + 500 - O(), 10 < d)) {
                      if (0 !== Uc(a, 0)) break;e = a.suspendedLanes;if ((e & c) !== c) {
                        Hg();a.pingedLanes |= a.suspendedLanes & e;break;
                      }a.timeoutHandle = of(Uj.bind(null, a), d);break;
                    }Uj(a);break;case 4:
                    Ii(a, c);if ((c & 4186112) === c) break;d = a.eventTimes;for (e = -1; 0 < c;) {
                      var g = 31 - Vc(c);f = 1 << g;g = d[g];g > e && (e = g);c &= ~f;
                    }c = e;c = O() - c;c = (120 > c ? 120 : 480 > c ? 480 : 1080 > c ? 1080 : 1920 > c ? 1920 : 3E3 > c ? 3E3 : 4320 > c ? 4320 : 1960 * nj(c / 1960)) - c;if (10 < c) {
                      a.timeoutHandle = of(Uj.bind(null, a), c);break;
                    }Uj(a);break;case 5:
                    Uj(a);break;default:
                    throw Error(y(329));}
              }Mj(a, O());return a.callbackNode === b ? Nj.bind(null, a) : null;
            }function Ii(a, b) {
              b &= ~uj;b &= ~Hi;a.suspendedLanes |= b;a.pingedLanes &= ~b;for (a = a.expirationTimes; 0 < b;) {
                var c = 31 - Vc(b),
                    d = 1 << c;a[c] = -1;b &= ~d;
              }
            }
            function Lj(a) {
              if (0 !== (X & 48)) throw Error(y(327));Oj();if (a === U && 0 !== (a.expiredLanes & W)) {
                var b = W;var c = Tj(a, b);0 !== (tj & Hi) && (b = Uc(a, b), c = Tj(a, b));
              } else b = Uc(a, 0), c = Tj(a, b);0 !== a.tag && 2 === c && (X |= 64, a.hydrate && (a.hydrate = !1, qf(a.containerInfo)), b = Wc(a), 0 !== b && (c = Tj(a, b)));if (1 === c) throw c = sj, Qj(a, 0), Ii(a, b), Mj(a, O()), c;a.finishedWork = a.current.alternate;a.finishedLanes = b;Uj(a);Mj(a, O());return null;
            }
            function Vj() {
              if (null !== Cj) {
                var a = Cj;Cj = null;a.forEach(function (a) {
                  a.expiredLanes |= 24 & a.pendingLanes;Mj(a, O());
                });
              }ig();
            }function Wj(a, b) {
              var c = X;X |= 1;try {
                return a(b);
              } finally {
                X = c, 0 === X && (wj(), ig());
              }
            }function Xj(a, b) {
              var c = X;X &= -2;X |= 8;try {
                return a(b);
              } finally {
                X = c, 0 === X && (wj(), ig());
              }
            }function ni(a, b) {
              I(rj, qj);qj |= b;tj |= b;
            }function Ki() {
              qj = rj.current;H(rj);
            }
            function Qj(a, b) {
              a.finishedWork = null;a.finishedLanes = 0;var c = a.timeoutHandle;-1 !== c && (a.timeoutHandle = -1, pf(c));if (null !== Y) for (c = Y.return; null !== c;) {
                var d = c;switch (d.tag) {case 1:
                    d = d.type.childContextTypes;null !== d && void 0 !== d && Gf();break;case 3:
                    fh();H(N);H(M);uh();break;case 5:
                    hh(d);break;case 4:
                    fh();break;case 13:
                    H(P);break;case 19:
                    H(P);break;case 10:
                    rg(d);break;case 23:case 24:
                    Ki();}c = c.return;
              }U = a;Y = Tg(a.current, null);W = qj = tj = b;V = 0;sj = null;uj = Hi = Dg = 0;
            }
            function Sj(a, b) {
              do {
                var c = Y;try {
                  qg();vh.current = Gh;if (yh) {
                    for (var d = R.memoizedState; null !== d;) {
                      var e = d.queue;null !== e && (e.pending = null);d = d.next;
                    }yh = !1;
                  }xh = 0;T = S = R = null;zh = !1;pj.current = null;if (null === c || null === c.return) {
                    V = 1;sj = b;Y = null;break;
                  }a: {
                    var f = a,
                        g = c.return,
                        h = c,
                        k = b;b = W;h.flags |= 2048;h.firstEffect = h.lastEffect = null;if (null !== k && "object" === typeof k && "function" === typeof k.then) {
                      var l = k;if (0 === (h.mode & 2)) {
                        var n = h.alternate;n ? (h.updateQueue = n.updateQueue, h.memoizedState = n.memoizedState, h.lanes = n.lanes) : (h.updateQueue = null, h.memoizedState = null);
                      }var A = 0 !== (P.current & 1),
                          p = g;do {
                        var C;if (C = 13 === p.tag) {
                          var x = p.memoizedState;if (null !== x) C = null !== x.dehydrated ? !0 : !1;else {
                            var w = p.memoizedProps;C = void 0 === w.fallback ? !1 : !0 !== w.unstable_avoidThisFallback ? !0 : A ? !1 : !0;
                          }
                        }if (C) {
                          var z = p.updateQueue;if (null === z) {
                            var u = new Set();u.add(l);p.updateQueue = u;
                          } else z.add(l);if (0 === (p.mode & 2)) {
                            p.flags |= 64;h.flags |= 16384;h.flags &= -2981;if (1 === h.tag) if (null === h.alternate) h.tag = 17;else {
                              var t = zg(-1, 1);t.tag = 2;Ag(h, t);
                            }h.lanes |= 1;break a;
                          }k = void 0;h = b;var q = f.pingCache;null === q ? (q = f.pingCache = new Oi(), k = new Set(), q.set(l, k)) : (k = q.get(l), void 0 === k && (k = new Set(), q.set(l, k)));if (!k.has(h)) {
                            k.add(h);var v = Yj.bind(null, f, l, h);l.then(v, v);
                          }p.flags |= 4096;p.lanes = b;break a;
                        }p = p.return;
                      } while (null !== p);k = Error((Ra(h.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");
                    }5 !== V && (V = 2);k = Mi(k, h);p = g;do {
                      switch (p.tag) {case 3:
                          f = k;p.flags |= 4096;b &= -b;p.lanes |= b;var J = Pi(p, f, b);Bg(p, J);break a;case 1:
                          f = k;var K = p.type,
                              Q = p.stateNode;if (0 === (p.flags & 64) && ("function" === typeof K.getDerivedStateFromError || null !== Q && "function" === typeof Q.componentDidCatch && (null === Ti || !Ti.has(Q)))) {
                            p.flags |= 4096;b &= -b;p.lanes |= b;var L = Si(p, f, b);Bg(p, L);break a;
                          }}p = p.return;
                    } while (null !== p);
                  }Zj(c);
                } catch (va) {
                  b = va;Y === c && null !== c && (Y = c = c.return);continue;
                }break;
              } while (1);
            }
            function Pj() {
              var a = oj.current;oj.current = Gh;return null === a ? Gh : a;
            }function Tj(a, b) {
              var c = X;X |= 16;var d = Pj();U === a && W === b || Qj(a, b);do try {
                ak();break;
              } catch (e) {
                Sj(a, e);
              } while (1);qg();X = c;oj.current = d;if (null !== Y) throw Error(y(261));U = null;W = 0;return V;
            }function ak() {
              for (; null !== Y;) bk(Y);
            }function Rj() {
              for (; null !== Y && !Qf();) bk(Y);
            }function bk(a) {
              var b = ck(a.alternate, a, qj);a.memoizedProps = a.pendingProps;null === b ? Zj(a) : Y = b;pj.current = null;
            }
            function Zj(a) {
              var b = a;do {
                var c = b.alternate;a = b.return;if (0 === (b.flags & 2048)) {
                  c = Gi(c, b, qj);if (null !== c) {
                    Y = c;return;
                  }c = b;if (24 !== c.tag && 23 !== c.tag || null === c.memoizedState || 0 !== (qj & 1073741824) || 0 === (c.mode & 4)) {
                    for (var d = 0, e = c.child; null !== e;) d |= e.lanes | e.childLanes, e = e.sibling;c.childLanes = d;
                  }null !== a && 0 === (a.flags & 2048) && (null === a.firstEffect && (a.firstEffect = b.firstEffect), null !== b.lastEffect && (null !== a.lastEffect && (a.lastEffect.nextEffect = b.firstEffect), a.lastEffect = b.lastEffect), 1 < b.flags && (null !== a.lastEffect ? a.lastEffect.nextEffect = b : a.firstEffect = b, a.lastEffect = b));
                } else {
                  c = Li(b);if (null !== c) {
                    c.flags &= 2047;Y = c;return;
                  }null !== a && (a.firstEffect = a.lastEffect = null, a.flags |= 2048);
                }b = b.sibling;if (null !== b) {
                  Y = b;return;
                }Y = b = a;
              } while (null !== b);0 === V && (V = 5);
            }function Uj(a) {
              var b = eg();gg(99, dk.bind(null, a, b));return null;
            }
            function dk(a, b) {
              do Oj(); while (null !== yj);if (0 !== (X & 48)) throw Error(y(327));var c = a.finishedWork;if (null === c) return null;a.finishedWork = null;a.finishedLanes = 0;if (c === a.current) throw Error(y(177));a.callbackNode = null;var d = c.lanes | c.childLanes,
                  e = d,
                  f = a.pendingLanes & ~e;a.pendingLanes = e;a.suspendedLanes = 0;a.pingedLanes = 0;a.expiredLanes &= e;a.mutableReadLanes &= e;a.entangledLanes &= e;e = a.entanglements;for (var g = a.eventTimes, h = a.expirationTimes; 0 < f;) {
                var k = 31 - Vc(f),
                    l = 1 << k;e[k] = 0;g[k] = -1;h[k] = -1;f &= ~l;
              }null !== Cj && 0 === (d & 24) && Cj.has(a) && Cj.delete(a);a === U && (Y = U = null, W = 0);1 < c.flags ? null !== c.lastEffect ? (c.lastEffect.nextEffect = c, d = c.firstEffect) : d = c : d = c.firstEffect;if (null !== d) {
                e = X;X |= 32;pj.current = null;kf = fd;g = Ne();if (Oe(g)) {
                  if ("selectionStart" in g) h = { start: g.selectionStart, end: g.selectionEnd };else a: if (h = (h = g.ownerDocument) && h.defaultView || window, (l = h.getSelection && h.getSelection()) && 0 !== l.rangeCount) {
                    h = l.anchorNode;f = l.anchorOffset;k = l.focusNode;l = l.focusOffset;try {
                      h.nodeType, k.nodeType;
                    } catch (va) {
                      h = null;
                      break a;
                    }var n = 0,
                        A = -1,
                        p = -1,
                        C = 0,
                        x = 0,
                        w = g,
                        z = null;b: for (;;) {
                      for (var u;;) {
                        w !== h || 0 !== f && 3 !== w.nodeType || (A = n + f);w !== k || 0 !== l && 3 !== w.nodeType || (p = n + l);3 === w.nodeType && (n += w.nodeValue.length);if (null === (u = w.firstChild)) break;z = w;w = u;
                      }for (;;) {
                        if (w === g) break b;z === h && ++C === f && (A = n);z === k && ++x === l && (p = n);if (null !== (u = w.nextSibling)) break;w = z;z = w.parentNode;
                      }w = u;
                    }h = -1 === A || -1 === p ? null : { start: A, end: p };
                  } else h = null;h = h || { start: 0, end: 0 };
                } else h = null;lf = { focusedElem: g, selectionRange: h };fd = !1;Ij = null;Jj = !1;Z = d;do try {
                  ek();
                } catch (va) {
                  if (null === Z) throw Error(y(330));Wi(Z, va);Z = Z.nextEffect;
                } while (null !== Z);Ij = null;Z = d;do try {
                  for (g = a; null !== Z;) {
                    var t = Z.flags;t & 16 && pb(Z.stateNode, "");if (t & 128) {
                      var q = Z.alternate;if (null !== q) {
                        var v = q.ref;null !== v && ("function" === typeof v ? v(null) : v.current = null);
                      }
                    }switch (t & 1038) {case 2:
                        fj(Z);Z.flags &= -3;break;case 6:
                        fj(Z);Z.flags &= -3;ij(Z.alternate, Z);break;case 1024:
                        Z.flags &= -1025;break;case 1028:
                        Z.flags &= -1025;ij(Z.alternate, Z);break;case 4:
                        ij(Z.alternate, Z);break;case 8:
                        h = Z;cj(g, h);var J = h.alternate;dj(h);null !== J && dj(J);}Z = Z.nextEffect;
                  }
                } catch (va) {
                  if (null === Z) throw Error(y(330));Wi(Z, va);Z = Z.nextEffect;
                } while (null !== Z);v = lf;q = Ne();t = v.focusedElem;g = v.selectionRange;if (q !== t && t && t.ownerDocument && Me(t.ownerDocument.documentElement, t)) {
                  null !== g && Oe(t) && (q = g.start, v = g.end, void 0 === v && (v = q), "selectionStart" in t ? (t.selectionStart = q, t.selectionEnd = Math.min(v, t.value.length)) : (v = (q = t.ownerDocument || document) && q.defaultView || window, v.getSelection && (v = v.getSelection(), h = t.textContent.length, J = Math.min(g.start, h), g = void 0 === g.end ? J : Math.min(g.end, h), !v.extend && J > g && (h = g, g = J, J = h), h = Le(t, J), f = Le(t, g), h && f && (1 !== v.rangeCount || v.anchorNode !== h.node || v.anchorOffset !== h.offset || v.focusNode !== f.node || v.focusOffset !== f.offset) && (q = q.createRange(), q.setStart(h.node, h.offset), v.removeAllRanges(), J > g ? (v.addRange(q), v.extend(f.node, f.offset)) : (q.setEnd(f.node, f.offset), v.addRange(q))))));q = [];for (v = t; v = v.parentNode;) 1 === v.nodeType && q.push({ element: v, left: v.scrollLeft, top: v.scrollTop });"function" === typeof t.focus && t.focus();for (t = 0; t < q.length; t++) v = q[t], v.element.scrollLeft = v.left, v.element.scrollTop = v.top;
                }fd = !!kf;lf = kf = null;a.current = c;Z = d;do try {
                  for (t = a; null !== Z;) {
                    var K = Z.flags;K & 36 && Yi(t, Z.alternate, Z);if (K & 128) {
                      q = void 0;var Q = Z.ref;if (null !== Q) {
                        var L = Z.stateNode;switch (Z.tag) {case 5:
                            q = L;break;default:
                            q = L;}"function" === typeof Q ? Q(q) : Q.current = q;
                      }
                    }Z = Z.nextEffect;
                  }
                } catch (va) {
                  if (null === Z) throw Error(y(330));Wi(Z, va);Z = Z.nextEffect;
                } while (null !== Z);Z = null;$f();X = e;
              } else a.current = c;if (xj) xj = !1, yj = a, zj = b;else for (Z = d; null !== Z;) b = Z.nextEffect, Z.nextEffect = null, Z.flags & 8 && (K = Z, K.sibling = null, K.stateNode = null), Z = b;d = a.pendingLanes;0 === d && (Ti = null);1 === d ? a === Ej ? Dj++ : (Dj = 0, Ej = a) : Dj = 0;c = c.stateNode;if (Mf && "function" === typeof Mf.onCommitFiberRoot) try {
                Mf.onCommitFiberRoot(Lf, c, void 0, 64 === (c.current.flags & 64));
              } catch (va) {}Mj(a, O());if (Qi) throw Qi = !1, a = Ri, Ri = null, a;if (0 !== (X & 8)) return null;ig();return null;
            }
            function ek() {
              for (; null !== Z;) {
                var a = Z.alternate;Jj || null === Ij || (0 !== (Z.flags & 8) ? dc(Z, Ij) && (Jj = !0) : 13 === Z.tag && mj(a, Z) && dc(Z, Ij) && (Jj = !0));var b = Z.flags;0 !== (b & 256) && Xi(a, Z);0 === (b & 512) || xj || (xj = !0, hg(97, function () {
                  Oj();return null;
                }));Z = Z.nextEffect;
              }
            }function Oj() {
              if (90 !== zj) {
                var a = 97 < zj ? 97 : zj;zj = 90;return gg(a, fk);
              }return !1;
            }function $i(a, b) {
              Aj.push(b, a);xj || (xj = !0, hg(97, function () {
                Oj();return null;
              }));
            }function Zi(a, b) {
              Bj.push(b, a);xj || (xj = !0, hg(97, function () {
                Oj();return null;
              }));
            }
            function fk() {
              if (null === yj) return !1;var a = yj;yj = null;if (0 !== (X & 48)) throw Error(y(331));var b = X;X |= 32;var c = Bj;Bj = [];for (var d = 0; d < c.length; d += 2) {
                var e = c[d],
                    f = c[d + 1],
                    g = e.destroy;e.destroy = void 0;if ("function" === typeof g) try {
                  g();
                } catch (k) {
                  if (null === f) throw Error(y(330));Wi(f, k);
                }
              }c = Aj;Aj = [];for (d = 0; d < c.length; d += 2) {
                e = c[d];f = c[d + 1];try {
                  var h = e.create;e.destroy = h();
                } catch (k) {
                  if (null === f) throw Error(y(330));Wi(f, k);
                }
              }for (h = a.current.firstEffect; null !== h;) a = h.nextEffect, h.nextEffect = null, h.flags & 8 && (h.sibling = null, h.stateNode = null), h = a;X = b;ig();return !0;
            }function gk(a, b, c) {
              b = Mi(c, b);b = Pi(a, b, 1);Ag(a, b);b = Hg();a = Kj(a, 1);null !== a && ($c(a, 1, b), Mj(a, b));
            }
            function Wi(a, b) {
              if (3 === a.tag) gk(a, a, b);else for (var c = a.return; null !== c;) {
                if (3 === c.tag) {
                  gk(c, a, b);break;
                } else if (1 === c.tag) {
                  var d = c.stateNode;if ("function" === typeof c.type.getDerivedStateFromError || "function" === typeof d.componentDidCatch && (null === Ti || !Ti.has(d))) {
                    a = Mi(b, a);var e = Si(c, a, 1);Ag(c, e);e = Hg();c = Kj(c, 1);if (null !== c) $c(c, 1, e), Mj(c, e);else if ("function" === typeof d.componentDidCatch && (null === Ti || !Ti.has(d))) try {
                      d.componentDidCatch(b, a);
                    } catch (f) {}break;
                  }
                }c = c.return;
              }
            }
            function Yj(a, b, c) {
              var d = a.pingCache;null !== d && d.delete(b);b = Hg();a.pingedLanes |= a.suspendedLanes & c;U === a && (W & c) === c && (4 === V || 3 === V && (W & 62914560) === W && 500 > O() - jj ? Qj(a, 0) : uj |= c);Mj(a, b);
            }function lj(a, b) {
              var c = a.stateNode;null !== c && c.delete(b);b = 0;0 === b && (b = a.mode, 0 === (b & 2) ? b = 1 : 0 === (b & 4) ? b = 99 === eg() ? 1 : 2 : (0 === Gj && (Gj = tj), b = Yc(62914560 & ~Gj), 0 === b && (b = 4194304)));c = Hg();a = Kj(a, b);null !== a && ($c(a, b, c), Mj(a, c));
            }var ck;
            ck = function (a, b, c) {
              var d = b.lanes;if (null !== a) {
                if (a.memoizedProps !== b.pendingProps || N.current) ug = !0;else if (0 !== (c & d)) ug = 0 !== (a.flags & 16384) ? !0 : !1;else {
                  ug = !1;switch (b.tag) {case 3:
                      ri(b);sh();break;case 5:
                      gh(b);break;case 1:
                      Ff(b.type) && Jf(b);break;case 4:
                      eh(b, b.stateNode.containerInfo);break;case 10:
                      d = b.memoizedProps.value;var e = b.type._context;I(mg, e._currentValue);e._currentValue = d;break;case 13:
                      if (null !== b.memoizedState) {
                        if (0 !== (c & b.child.childLanes)) return ti(a, b, c);I(P, P.current & 1);b = hi(a, b, c);return null !== b ? b.sibling : null;
                      }I(P, P.current & 1);break;case 19:
                      d = 0 !== (c & b.childLanes);if (0 !== (a.flags & 64)) {
                        if (d) return Ai(a, b, c);b.flags |= 64;
                      }e = b.memoizedState;null !== e && (e.rendering = null, e.tail = null, e.lastEffect = null);I(P, P.current);if (d) break;else return null;case 23:case 24:
                      return b.lanes = 0, mi(a, b, c);}return hi(a, b, c);
                }
              } else ug = !1;b.lanes = 0;switch (b.tag) {case 2:
                  d = b.type;null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2);a = b.pendingProps;e = Ef(b, M.current);tg(b, c);e = Ch(null, b, d, a, e, c);b.flags |= 1;if ("object" === typeof e && null !== e && "function" === typeof e.render && void 0 === e.$$typeof) {
                    b.tag = 1;b.memoizedState = null;b.updateQueue = null;if (Ff(d)) {
                      var f = !0;Jf(b);
                    } else f = !1;b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null;xg(b);var g = d.getDerivedStateFromProps;"function" === typeof g && Gg(b, d, g, a);e.updater = Kg;b.stateNode = e;e._reactInternals = b;Og(b, d, a, c);b = qi(null, b, d, !0, f, c);
                  } else b.tag = 0, fi(null, b, e, c), b = b.child;return b;case 16:
                  e = b.elementType;a: {
                    null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2);
                    a = b.pendingProps;f = e._init;e = f(e._payload);b.type = e;f = b.tag = hk(e);a = lg(e, a);switch (f) {case 0:
                        b = li(null, b, e, a, c);break a;case 1:
                        b = pi(null, b, e, a, c);break a;case 11:
                        b = gi(null, b, e, a, c);break a;case 14:
                        b = ii(null, b, e, lg(e.type, a), d, c);break a;}throw Error(y(306, e, ""));
                  }return b;case 0:
                  return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), li(a, b, d, e, c);case 1:
                  return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), pi(a, b, d, e, c);case 3:
                  ri(b);d = b.updateQueue;if (null === a || null === d) throw Error(y(282));
                  d = b.pendingProps;e = b.memoizedState;e = null !== e ? e.element : null;yg(a, b);Cg(b, d, null, c);d = b.memoizedState.element;if (d === e) sh(), b = hi(a, b, c);else {
                    e = b.stateNode;if (f = e.hydrate) kh = rf(b.stateNode.containerInfo.firstChild), jh = b, f = lh = !0;if (f) {
                      a = e.mutableSourceEagerHydrationData;if (null != a) for (e = 0; e < a.length; e += 2) f = a[e], f._workInProgressVersionPrimary = a[e + 1], th.push(f);c = Zg(b, null, d, c);for (b.child = c; c;) c.flags = c.flags & -3 | 1024, c = c.sibling;
                    } else fi(a, b, d, c), sh();b = b.child;
                  }return b;case 5:
                  return gh(b), null === a && ph(b), d = b.type, e = b.pendingProps, f = null !== a ? a.memoizedProps : null, g = e.children, nf(d, e) ? g = null : null !== f && nf(d, f) && (b.flags |= 16), oi(a, b), fi(a, b, g, c), b.child;case 6:
                  return null === a && ph(b), null;case 13:
                  return ti(a, b, c);case 4:
                  return eh(b, b.stateNode.containerInfo), d = b.pendingProps, null === a ? b.child = Yg(b, null, d, c) : fi(a, b, d, c), b.child;case 11:
                  return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), gi(a, b, d, e, c);case 7:
                  return fi(a, b, b.pendingProps, c), b.child;case 8:
                  return fi(a, b, b.pendingProps.children, c), b.child;case 12:
                  return fi(a, b, b.pendingProps.children, c), b.child;case 10:
                  a: {
                    d = b.type._context;e = b.pendingProps;g = b.memoizedProps;f = e.value;var h = b.type._context;I(mg, h._currentValue);h._currentValue = f;if (null !== g) if (h = g.value, f = He(h, f) ? 0 : ("function" === typeof d._calculateChangedBits ? d._calculateChangedBits(h, f) : 1073741823) | 0, 0 === f) {
                      if (g.children === e.children && !N.current) {
                        b = hi(a, b, c);break a;
                      }
                    } else for (h = b.child, null !== h && (h.return = b); null !== h;) {
                      var k = h.dependencies;if (null !== k) {
                        g = h.child;for (var l = k.firstContext; null !== l;) {
                          if (l.context === d && 0 !== (l.observedBits & f)) {
                            1 === h.tag && (l = zg(-1, c & -c), l.tag = 2, Ag(h, l));h.lanes |= c;l = h.alternate;null !== l && (l.lanes |= c);sg(h.return, c);k.lanes |= c;break;
                          }l = l.next;
                        }
                      } else g = 10 === h.tag ? h.type === b.type ? null : h.child : h.child;if (null !== g) g.return = h;else for (g = h; null !== g;) {
                        if (g === b) {
                          g = null;break;
                        }h = g.sibling;if (null !== h) {
                          h.return = g.return;g = h;break;
                        }g = g.return;
                      }h = g;
                    }fi(a, b, e.children, c);b = b.child;
                  }return b;case 9:
                  return e = b.type, f = b.pendingProps, d = f.children, tg(b, c), e = vg(e, f.unstable_observedBits), d = d(e), b.flags |= 1, fi(a, b, d, c), b.child;case 14:
                  return e = b.type, f = lg(e, b.pendingProps), f = lg(e.type, f), ii(a, b, e, f, d, c);case 15:
                  return ki(a, b, b.type, b.pendingProps, d, c);case 17:
                  return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2), b.tag = 1, Ff(d) ? (a = !0, Jf(b)) : a = !1, tg(b, c), Mg(b, d, e), Og(b, d, e, c), qi(null, b, d, !0, a, c);case 19:
                  return Ai(a, b, c);case 23:
                  return mi(a, b, c);case 24:
                  return mi(a, b, c);}throw Error(y(156, b.tag));
            };function ik(a, b, c, d) {
              this.tag = a;this.key = c;this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;this.index = 0;this.ref = null;this.pendingProps = b;this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;this.mode = d;this.flags = 0;this.lastEffect = this.firstEffect = this.nextEffect = null;this.childLanes = this.lanes = 0;this.alternate = null;
            }function nh(a, b, c, d) {
              return new ik(a, b, c, d);
            }function ji(a) {
              a = a.prototype;return !(!a || !a.isReactComponent);
            }
            function hk(a) {
              if ("function" === typeof a) return ji(a) ? 1 : 0;if (void 0 !== a && null !== a) {
                a = a.$$typeof;if (a === Aa) return 11;if (a === Da) return 14;
              }return 2;
            }
            function Tg(a, b) {
              var c = a.alternate;null === c ? (c = nh(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.type = a.type, c.flags = 0, c.nextEffect = null, c.firstEffect = null, c.lastEffect = null);c.childLanes = a.childLanes;c.lanes = a.lanes;c.child = a.child;c.memoizedProps = a.memoizedProps;c.memoizedState = a.memoizedState;c.updateQueue = a.updateQueue;b = a.dependencies;c.dependencies = null === b ? null : { lanes: b.lanes, firstContext: b.firstContext };
              c.sibling = a.sibling;c.index = a.index;c.ref = a.ref;return c;
            }
            function Vg(a, b, c, d, e, f) {
              var g = 2;d = a;if ("function" === typeof a) ji(a) && (g = 1);else if ("string" === typeof a) g = 5;else a: switch (a) {case ua:
                  return Xg(c.children, e, f, b);case Ha:
                  g = 8;e |= 16;break;case wa:
                  g = 8;e |= 1;break;case xa:
                  return a = nh(12, c, b, e | 8), a.elementType = xa, a.type = xa, a.lanes = f, a;case Ba:
                  return a = nh(13, c, b, e), a.type = Ba, a.elementType = Ba, a.lanes = f, a;case Ca:
                  return a = nh(19, c, b, e), a.elementType = Ca, a.lanes = f, a;case Ia:
                  return vi(c, e, f, b);case Ja:
                  return a = nh(24, c, b, e), a.elementType = Ja, a.lanes = f, a;default:
                  if ("object" === typeof a && null !== a) switch (a.$$typeof) {case ya:
                      g = 10;break a;case za:
                      g = 9;break a;case Aa:
                      g = 11;break a;case Da:
                      g = 14;break a;case Ea:
                      g = 16;d = null;break a;case Fa:
                      g = 22;break a;}throw Error(y(130, null == a ? a : typeof a, ""));}b = nh(g, c, b, e);b.elementType = a;b.type = d;b.lanes = f;return b;
            }function Xg(a, b, c, d) {
              a = nh(7, a, d, b);a.lanes = c;return a;
            }function vi(a, b, c, d) {
              a = nh(23, a, d, b);a.elementType = Ia;a.lanes = c;return a;
            }function Ug(a, b, c) {
              a = nh(6, a, null, b);a.lanes = c;return a;
            }
            function Wg(a, b, c) {
              b = nh(4, null !== a.children ? a.children : [], a.key, b);b.lanes = c;b.stateNode = { containerInfo: a.containerInfo, pendingChildren: null, implementation: a.implementation };return b;
            }
            function jk(a, b, c) {
              this.tag = b;this.containerInfo = a;this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;this.timeoutHandle = -1;this.pendingContext = this.context = null;this.hydrate = c;this.callbackNode = null;this.callbackPriority = 0;this.eventTimes = Zc(0);this.expirationTimes = Zc(-1);this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;this.entanglements = Zc(0);this.mutableSourceEagerHydrationData = null;
            }
            function kk(a, b, c) {
              var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;return { $$typeof: ta, key: null == d ? null : "" + d, children: a, containerInfo: b, implementation: c };
            }
            function lk(a, b, c, d) {
              var e = b.current,
                  f = Hg(),
                  g = Ig(e);a: if (c) {
                c = c._reactInternals;b: {
                  if (Zb(c) !== c || 1 !== c.tag) throw Error(y(170));var h = c;do {
                    switch (h.tag) {case 3:
                        h = h.stateNode.context;break b;case 1:
                        if (Ff(h.type)) {
                          h = h.stateNode.__reactInternalMemoizedMergedChildContext;break b;
                        }}h = h.return;
                  } while (null !== h);throw Error(y(171));
                }if (1 === c.tag) {
                  var k = c.type;if (Ff(k)) {
                    c = If(c, k, h);break a;
                  }
                }c = h;
              } else c = Cf;null === b.context ? b.context = c : b.pendingContext = c;b = zg(f, g);b.payload = { element: a };d = void 0 === d ? null : d;null !== d && (b.callback = d);Ag(e, b);Jg(e, g, f);return g;
            }function mk(a) {
              a = a.current;if (!a.child) return null;switch (a.child.tag) {case 5:
                  return a.child.stateNode;default:
                  return a.child.stateNode;}
            }function nk(a, b) {
              a = a.memoizedState;if (null !== a && null !== a.dehydrated) {
                var c = a.retryLane;a.retryLane = 0 !== c && c < b ? c : b;
              }
            }function ok(a, b) {
              nk(a, b);(a = a.alternate) && nk(a, b);
            }function pk() {
              return null;
            }
            function qk(a, b, c) {
              var d = null != c && null != c.hydrationOptions && c.hydrationOptions.mutableSources || null;c = new jk(a, b, null != c && !0 === c.hydrate);b = nh(3, null, null, 2 === b ? 7 : 1 === b ? 3 : 0);c.current = b;b.stateNode = c;xg(b);a[ff] = c.current;cf(8 === a.nodeType ? a.parentNode : a);if (d) for (a = 0; a < d.length; a++) {
                b = d[a];var e = b._getVersion;e = e(b._source);null == c.mutableSourceEagerHydrationData ? c.mutableSourceEagerHydrationData = [b, e] : c.mutableSourceEagerHydrationData.push(b, e);
              }this._internalRoot = c;
            }
            qk.prototype.render = function (a) {
              lk(a, this._internalRoot, null, null);
            };qk.prototype.unmount = function () {
              var a = this._internalRoot,
                  b = a.containerInfo;lk(null, a, null, function () {
                b[ff] = null;
              });
            };function rk(a) {
              return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));
            }
            function sk(a, b) {
              b || (b = a ? 9 === a.nodeType ? a.documentElement : a.firstChild : null, b = !(!b || 1 !== b.nodeType || !b.hasAttribute("data-reactroot")));if (!b) for (var c; c = a.lastChild;) a.removeChild(c);return new qk(a, 0, b ? { hydrate: !0 } : void 0);
            }
            function tk(a, b, c, d, e) {
              var f = c._reactRootContainer;if (f) {
                var g = f._internalRoot;if ("function" === typeof e) {
                  var h = e;e = function () {
                    var a = mk(g);h.call(a);
                  };
                }lk(b, g, a, e);
              } else {
                f = c._reactRootContainer = sk(c, d);g = f._internalRoot;if ("function" === typeof e) {
                  var k = e;e = function () {
                    var a = mk(g);k.call(a);
                  };
                }Xj(function () {
                  lk(b, g, a, e);
                });
              }return mk(g);
            }ec = function (a) {
              if (13 === a.tag) {
                var b = Hg();Jg(a, 4, b);ok(a, 4);
              }
            };fc = function (a) {
              if (13 === a.tag) {
                var b = Hg();Jg(a, 67108864, b);ok(a, 67108864);
              }
            };
            gc = function (a) {
              if (13 === a.tag) {
                var b = Hg(),
                    c = Ig(a);Jg(a, c, b);ok(a, c);
              }
            };hc = function (a, b) {
              return b();
            };
            yb = function (a, b, c) {
              switch (b) {case "input":
                  ab(a, c);b = c.name;if ("radio" === c.type && null != b) {
                    for (c = a; c.parentNode;) c = c.parentNode;c = c.querySelectorAll("input[name=" + JSON.stringify("" + b) + '][type="radio"]');for (b = 0; b < c.length; b++) {
                      var d = c[b];if (d !== a && d.form === a.form) {
                        var e = Db(d);if (!e) throw Error(y(90));Wa(d);ab(d, e);
                      }
                    }
                  }break;case "textarea":
                  ib(a, c);break;case "select":
                  b = c.value, null != b && fb(a, !!c.multiple, b, !1);}
            };Gb = Wj;
            Hb = function (a, b, c, d, e) {
              var f = X;X |= 4;try {
                return gg(98, a.bind(null, b, c, d, e));
              } finally {
                X = f, 0 === X && (wj(), ig());
              }
            };Ib = function () {
              0 === (X & 49) && (Vj(), Oj());
            };Jb = function (a, b) {
              var c = X;X |= 2;try {
                return a(b);
              } finally {
                X = c, 0 === X && (wj(), ig());
              }
            };function uk(a, b) {
              var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;if (!rk(b)) throw Error(y(200));return kk(a, b, null, c);
            }var vk = { Events: [Cb, ue, Db, Eb, Fb, Oj, { current: !1 }] },
                wk = { findFiberByHostInstance: wc, bundleType: 0, version: "17.0.2", rendererPackageName: "react-dom" };
            var xk = { bundleType: wk.bundleType, version: wk.version, rendererPackageName: wk.rendererPackageName, rendererConfig: wk.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: ra.ReactCurrentDispatcher, findHostInstanceByFiber: function (a) {
                a = cc(a);return null === a ? null : a.stateNode;
              }, findFiberByHostInstance: wk.findFiberByHostInstance || pk, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null };if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
              var yk = __REACT_DEVTOOLS_GLOBAL_HOOK__;if (!yk.isDisabled && yk.supportsFiber) try {
                Lf = yk.inject(xk), Mf = yk;
              } catch (a) {}
            }_exports20.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = vk;_exports20.createPortal = uk;
            _exports20.findDOMNode = function (a) {
              if (null == a) return null;if (1 === a.nodeType) return a;var b = a._reactInternals;if (void 0 === b) {
                if ("function" === typeof a.render) throw Error(y(188));throw Error(y(268, Object.keys(a)));
              }a = cc(b);a = null === a ? null : a.stateNode;return a;
            };_exports20.flushSync = function (a, b) {
              var c = X;if (0 !== (c & 48)) return a(b);X |= 1;try {
                if (a) return gg(99, a.bind(null, b));
              } finally {
                X = c, ig();
              }
            };_exports20.hydrate = function (a, b, c) {
              if (!rk(b)) throw Error(y(200));return tk(null, a, b, !0, c);
            };
            _exports20.render = function (a, b, c) {
              if (!rk(b)) throw Error(y(200));return tk(null, a, b, !1, c);
            };_exports20.unmountComponentAtNode = function (a) {
              if (!rk(a)) throw Error(y(40));return a._reactRootContainer ? (Xj(function () {
                tk(null, null, a, !1, function () {
                  a._reactRootContainer = null;a[ff] = null;
                });
              }), !0) : !1;
            };_exports20.unstable_batchedUpdates = Wj;_exports20.unstable_createPortal = function (a, b) {
              return uk(a, b, 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null);
            };
            _exports20.unstable_renderSubtreeIntoContainer = function (a, b, c, d) {
              if (!rk(c)) throw Error(y(200));if (null == a || void 0 === a._reactInternals) throw Error(y(38));return tk(a, b, c, !1, d);
            };_exports20.version = "17.0.2";

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "react-dom.development.js": function module(_require20, _exports21, _module22) {

            if (process.env.NODE_ENV !== "production") {
              (function () {

                var React = _require20('react');
                var _assign = _require20('object-assign');
                var Scheduler = _require20('scheduler');
                var tracing = _require20('scheduler/tracing');

                var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

                // by calls to these methods by a Babel plugin.
                //
                // In PROD (or in packages without access to React internals),
                // they are left as they are instead.

                function warn(format) {
                  {
                    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                      args[_key - 1] = arguments[_key];
                    }

                    printWarning('warn', format, args);
                  }
                }
                function error(format) {
                  {
                    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                      args[_key2 - 1] = arguments[_key2];
                    }

                    printWarning('error', format, args);
                  }
                }

                function printWarning(level, format, args) {
                  // When changing this logic, you might want to also
                  // update consoleWithStackDev.www.js as well.
                  {
                    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
                    var stack = ReactDebugCurrentFrame.getStackAddendum();

                    if (stack !== '') {
                      format += '%s';
                      args = args.concat([stack]);
                    }

                    var argsWithFormat = args.map(function (item) {
                      return '' + item;
                    }); // Careful: RN currently depends on this prefix

                    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
                    // breaks IE9: https://github.com/facebook/react/issues/13610
                    // eslint-disable-next-line react-internal/no-production-logging

                    Function.prototype.apply.call(console[level], console, argsWithFormat);
                  }
                }

                if (!React) {
                  {
                    throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
                  }
                }

                var FunctionComponent = 0;
                var ClassComponent = 1;
                var IndeterminateComponent = 2; // Before we know whether it is function or class

                var HostRoot = 3; // Root of a host tree. Could be nested inside another node.

                var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.

                var HostComponent = 5;
                var HostText = 6;
                var Fragment = 7;
                var Mode = 8;
                var ContextConsumer = 9;
                var ContextProvider = 10;
                var ForwardRef = 11;
                var Profiler = 12;
                var SuspenseComponent = 13;
                var MemoComponent = 14;
                var SimpleMemoComponent = 15;
                var LazyComponent = 16;
                var IncompleteClassComponent = 17;
                var DehydratedFragment = 18;
                var SuspenseListComponent = 19;
                var FundamentalComponent = 20;
                var ScopeComponent = 21;
                var Block = 22;
                var OffscreenComponent = 23;
                var LegacyHiddenComponent = 24;

                // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

                var enableProfilerTimer = true; // Record durations for commit and passive effects phases.

                var enableFundamentalAPI = false; // Experimental Scope support.
                var enableNewReconciler = false; // Errors that are thrown while unmounting (or after in the case of passive effects)
                var warnAboutStringRefs = false;

                var allNativeEvents = new Set();
                /**
                 * Mapping from registration name to event name
                 */

                var registrationNameDependencies = {};
                /**
                 * Mapping from lowercase registration names to the properly cased version,
                 * used to warn in the case of missing event handlers. Available
                 * only in true.
                 * @type {Object}
                 */

                var possibleRegistrationNames = {}; // Trust the developer to only use possibleRegistrationNames in true

                function registerTwoPhaseEvent(registrationName, dependencies) {
                  registerDirectEvent(registrationName, dependencies);
                  registerDirectEvent(registrationName + 'Capture', dependencies);
                }
                function registerDirectEvent(registrationName, dependencies) {
                  {
                    if (registrationNameDependencies[registrationName]) {
                      error('EventRegistry: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName);
                    }
                  }

                  registrationNameDependencies[registrationName] = dependencies;

                  {
                    var lowerCasedName = registrationName.toLowerCase();
                    possibleRegistrationNames[lowerCasedName] = registrationName;

                    if (registrationName === 'onDoubleClick') {
                      possibleRegistrationNames.ondblclick = registrationName;
                    }
                  }

                  for (var i = 0; i < dependencies.length; i++) {
                    allNativeEvents.add(dependencies[i]);
                  }
                }

                var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');

                // A reserved attribute.
                // It is handled by React separately and shouldn't be written to the DOM.
                var RESERVED = 0; // A simple string attribute.
                // Attributes that aren't in the filter are presumed to have this type.

                var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
                // "enumerated" attributes with "true" and "false" as possible values.
                // When true, it should be set to a "true" string.
                // When false, it should be set to a "false" string.

                var BOOLEANISH_STRING = 2; // A real boolean attribute.
                // When true, it should be present (set either to an empty string or its name).
                // When false, it should be omitted.

                var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
                // When true, it should be present (set either to an empty string or its name).
                // When false, it should be omitted.
                // For any other value, should be present with that value.

                var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
                // When falsy, it should be removed.

                var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
                // When falsy, it should be removed.

                var POSITIVE_NUMERIC = 6;

                /* eslint-disable max-len */
                var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
                /* eslint-enable max-len */

                var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
                var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
                var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
                var hasOwnProperty = Object.prototype.hasOwnProperty;
                var illegalAttributeNameCache = {};
                var validatedAttributeNameCache = {};
                function isAttributeNameSafe(attributeName) {
                  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
                    return true;
                  }

                  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
                    return false;
                  }

                  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
                    validatedAttributeNameCache[attributeName] = true;
                    return true;
                  }

                  illegalAttributeNameCache[attributeName] = true;

                  {
                    error('Invalid attribute name: `%s`', attributeName);
                  }

                  return false;
                }
                function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
                  if (propertyInfo !== null) {
                    return propertyInfo.type === RESERVED;
                  }

                  if (isCustomComponentTag) {
                    return false;
                  }

                  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
                    return true;
                  }

                  return false;
                }
                function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
                  if (propertyInfo !== null && propertyInfo.type === RESERVED) {
                    return false;
                  }

                  switch (typeof value) {
                    case 'function': // $FlowIssue symbol is perfectly valid here

                    case 'symbol':
                      // eslint-disable-line
                      return true;

                    case 'boolean':
                      {
                        if (isCustomComponentTag) {
                          return false;
                        }

                        if (propertyInfo !== null) {
                          return !propertyInfo.acceptsBooleans;
                        } else {
                          var prefix = name.toLowerCase().slice(0, 5);
                          return prefix !== 'data-' && prefix !== 'aria-';
                        }
                      }

                    default:
                      return false;
                  }
                }
                function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
                  if (value === null || typeof value === 'undefined') {
                    return true;
                  }

                  if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
                    return true;
                  }

                  if (isCustomComponentTag) {
                    return false;
                  }

                  if (propertyInfo !== null) {

                    switch (propertyInfo.type) {
                      case BOOLEAN:
                        return !value;

                      case OVERLOADED_BOOLEAN:
                        return value === false;

                      case NUMERIC:
                        return isNaN(value);

                      case POSITIVE_NUMERIC:
                        return isNaN(value) || value < 1;
                    }
                  }

                  return false;
                }
                function getPropertyInfo(name) {
                  return properties.hasOwnProperty(name) ? properties[name] : null;
                }

                function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
                  this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
                  this.attributeName = attributeName;
                  this.attributeNamespace = attributeNamespace;
                  this.mustUseProperty = mustUseProperty;
                  this.propertyName = name;
                  this.type = type;
                  this.sanitizeURL = sanitizeURL;
                  this.removeEmptyString = removeEmptyString;
                } // When adding attributes to this list, be sure to also add them to
                // the `possibleStandardNames` module to ensure casing and incorrect
                // name warnings.


                var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.

                var reservedProps = ['children', 'dangerouslySetInnerHTML', // TODO: This prevents the assignment of defaultValue to regular
                // elements (not just inputs). Now that ReactDOMInput assigns to the
                // defaultValue property -- do we need this?
                'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'];
                reservedProps.forEach(function (name) {
                  properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
                  name, // attributeName
                  null, // attributeNamespace
                  false, // sanitizeURL
                  false);
                }); // A few React string attributes have a different name.
                // This is a mapping from React prop names to the attribute names.

                [['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
                  var name = _ref[0],
                      attributeName = _ref[1];
                  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
                  attributeName, // attributeName
                  null, // attributeNamespace
                  false, // sanitizeURL
                  false);
                }); // These are "enumerated" HTML attributes that accept "true" and "false".
                // In React, we let users pass `true` and `false` even though technically
                // these aren't boolean attributes (they are coerced to strings).

                ['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
                  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
                  name.toLowerCase(), // attributeName
                  null, // attributeNamespace
                  false, // sanitizeURL
                  false);
                }); // These are "enumerated" SVG attributes that accept "true" and "false".
                // In React, we let users pass `true` and `false` even though technically
                // these aren't boolean attributes (they are coerced to strings).
                // Since these are SVG attributes, their attribute names are case-sensitive.

                ['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
                  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
                  name, // attributeName
                  null, // attributeNamespace
                  false, // sanitizeURL
                  false);
                }); // These are HTML boolean attributes.

                ['allowFullScreen', 'async', // Note: there is a special case that prevents it from being written to the DOM
                // on the client side because the browsers are inconsistent. Instead we call focus().
                'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'disableRemotePlayback', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata
                'itemScope'].forEach(function (name) {
                  properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
                  name.toLowerCase(), // attributeName
                  null, // attributeNamespace
                  false, // sanitizeURL
                  false);
                }); // These are the few React props that we set as DOM properties
                // rather than attributes. These are all booleans.

                ['checked', // Note: `option.selected` is not updated if `select.multiple` is
                // disabled with `removeAttribute`. We have special logic for handling this.
                'multiple', 'muted', 'selected' // NOTE: if you add a camelCased prop to this list,
                // you'll need to set attributeName to name.toLowerCase()
                // instead in the assignment below.
                ].forEach(function (name) {
                  properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
                  name, // attributeName
                  null, // attributeNamespace
                  false, // sanitizeURL
                  false);
                }); // These are HTML attributes that are "overloaded booleans": they behave like
                // booleans, but can also accept a string value.

                ['capture', 'download' // NOTE: if you add a camelCased prop to this list,
                // you'll need to set attributeName to name.toLowerCase()
                // instead in the assignment below.
                ].forEach(function (name) {
                  properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
                  name, // attributeName
                  null, // attributeNamespace
                  false, // sanitizeURL
                  false);
                }); // These are HTML attributes that must be positive numbers.

                ['cols', 'rows', 'size', 'span' // NOTE: if you add a camelCased prop to this list,
                // you'll need to set attributeName to name.toLowerCase()
                // instead in the assignment below.
                ].forEach(function (name) {
                  properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
                  name, // attributeName
                  null, // attributeNamespace
                  false, // sanitizeURL
                  false);
                }); // These are HTML attributes that must be numbers.

                ['rowSpan', 'start'].forEach(function (name) {
                  properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
                  name.toLowerCase(), // attributeName
                  null, // attributeNamespace
                  false, // sanitizeURL
                  false);
                });
                var CAMELIZE = /[\-\:]([a-z])/g;

                var capitalize = function (token) {
                  return token[1].toUpperCase();
                }; // This is a list of all SVG attributes that need special casing, namespacing,
                // or boolean value assignment. Regular attributes that just accept strings
                // and have the same names are omitted, just like in the HTML attribute filter.
                // Some of these attributes can be hard to find. This list was created by
                // scraping the MDN documentation.


                ['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height' // NOTE: if you add a camelCased prop to this list,
                // you'll need to set attributeName to name.toLowerCase()
                // instead in the assignment below.
                ].forEach(function (attributeName) {
                  var name = attributeName.replace(CAMELIZE, capitalize);
                  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
                  attributeName, null, // attributeNamespace
                  false, // sanitizeURL
                  false);
                }); // String SVG attributes with the xlink namespace.

                ['xlink:actuate', 'xlink:arcrole', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type' // NOTE: if you add a camelCased prop to this list,
                // you'll need to set attributeName to name.toLowerCase()
                // instead in the assignment below.
                ].forEach(function (attributeName) {
                  var name = attributeName.replace(CAMELIZE, capitalize);
                  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
                  attributeName, 'http://www.w3.org/1999/xlink', false, // sanitizeURL
                  false);
                }); // String SVG attributes with the xml namespace.

                ['xml:base', 'xml:lang', 'xml:space' // NOTE: if you add a camelCased prop to this list,
                // you'll need to set attributeName to name.toLowerCase()
                // instead in the assignment below.
                ].forEach(function (attributeName) {
                  var name = attributeName.replace(CAMELIZE, capitalize);
                  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
                  attributeName, 'http://www.w3.org/XML/1998/namespace', false, // sanitizeURL
                  false);
                }); // These attribute exists both in HTML and SVG.
                // The attribute name is case-sensitive in SVG so we can't just use
                // the React name like we do for attributes that exist only in HTML.

                ['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
                  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
                  attributeName.toLowerCase(), // attributeName
                  null, // attributeNamespace
                  false, // sanitizeURL
                  false);
                }); // These attributes accept URLs. These must not allow javascript: URLS.
                // These will also need to accept Trusted Types object in the future.

                var xlinkHref = 'xlinkHref';
                properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, // mustUseProperty
                'xlink:href', 'http://www.w3.org/1999/xlink', true, // sanitizeURL
                false);
                ['src', 'href', 'action', 'formAction'].forEach(function (attributeName) {
                  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
                  attributeName.toLowerCase(), // attributeName
                  null, // attributeNamespace
                  true, // sanitizeURL
                  true);
                });

                // and any newline or tab are filtered out as if they're not part of the URL.
                // https://url.spec.whatwg.org/#url-parsing
                // Tab or newline are defined as \r\n\t:
                // https://infra.spec.whatwg.org/#ascii-tab-or-newline
                // A C0 control is a code point in the range \u0000 NULL to \u001F
                // INFORMATION SEPARATOR ONE, inclusive:
                // https://infra.spec.whatwg.org/#c0-control-or-space

                /* eslint-disable max-len */

                var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
                var didWarn = false;

                function sanitizeURL(url) {
                  {
                    if (!didWarn && isJavaScriptProtocol.test(url)) {
                      didWarn = true;

                      error('A future version of React will block javascript: URLs as a security precaution. ' + 'Use event handlers instead if you can. If you need to generate unsafe HTML try ' + 'using dangerouslySetInnerHTML instead. React was passed %s.', JSON.stringify(url));
                    }
                  }
                }

                /**
                 * Get the value for a property on a node. Only used in DEV for SSR validation.
                 * The "expected" argument is used as a hint of what the expected value is.
                 * Some properties have multiple equivalent values.
                 */
                function getValueForProperty(node, name, expected, propertyInfo) {
                  {
                    if (propertyInfo.mustUseProperty) {
                      var propertyName = propertyInfo.propertyName;
                      return node[propertyName];
                    } else {
                      if (propertyInfo.sanitizeURL) {
                        // If we haven't fully disabled javascript: URLs, and if
                        // the hydration is successful of a javascript: URL, we
                        // still want to warn on the client.
                        sanitizeURL('' + expected);
                      }

                      var attributeName = propertyInfo.attributeName;
                      var stringValue = null;

                      if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                        if (node.hasAttribute(attributeName)) {
                          var value = node.getAttribute(attributeName);

                          if (value === '') {
                            return true;
                          }

                          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                            return value;
                          }

                          if (value === '' + expected) {
                            return expected;
                          }

                          return value;
                        }
                      } else if (node.hasAttribute(attributeName)) {
                        if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                          // We had an attribute but shouldn't have had one, so read it
                          // for the error message.
                          return node.getAttribute(attributeName);
                        }

                        if (propertyInfo.type === BOOLEAN) {
                          // If this was a boolean, it doesn't matter what the value is
                          // the fact that we have it is the same as the expected.
                          return expected;
                        } // Even if this property uses a namespace we use getAttribute
                        // because we assume its namespaced name is the same as our config.
                        // To use getAttributeNS we need the local name which we don't have
                        // in our config atm.


                        stringValue = node.getAttribute(attributeName);
                      }

                      if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                        return stringValue === null ? expected : stringValue;
                      } else if (stringValue === '' + expected) {
                        return expected;
                      } else {
                        return stringValue;
                      }
                    }
                  }
                }
                /**
                 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
                 * The third argument is used as a hint of what the expected value is. Some
                 * attributes have multiple equivalent values.
                 */

                function getValueForAttribute(node, name, expected) {
                  {
                    if (!isAttributeNameSafe(name)) {
                      return;
                    } // If the object is an opaque reference ID, it's expected that
                    // the next prop is different than the server value, so just return
                    // expected


                    if (isOpaqueHydratingObject(expected)) {
                      return expected;
                    }

                    if (!node.hasAttribute(name)) {
                      return expected === undefined ? undefined : null;
                    }

                    var value = node.getAttribute(name);

                    if (value === '' + expected) {
                      return expected;
                    }

                    return value;
                  }
                }
                /**
                 * Sets the value for a property on a node.
                 *
                 * @param {DOMElement} node
                 * @param {string} name
                 * @param {*} value
                 */

                function setValueForProperty(node, name, value, isCustomComponentTag) {
                  var propertyInfo = getPropertyInfo(name);

                  if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
                    return;
                  }

                  if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
                    value = null;
                  } // If the prop isn't in the special list, treat it as a simple attribute.


                  if (isCustomComponentTag || propertyInfo === null) {
                    if (isAttributeNameSafe(name)) {
                      var _attributeName = name;

                      if (value === null) {
                        node.removeAttribute(_attributeName);
                      } else {
                        node.setAttribute(_attributeName, '' + value);
                      }
                    }

                    return;
                  }

                  var mustUseProperty = propertyInfo.mustUseProperty;

                  if (mustUseProperty) {
                    var propertyName = propertyInfo.propertyName;

                    if (value === null) {
                      var type = propertyInfo.type;
                      node[propertyName] = type === BOOLEAN ? false : '';
                    } else {
                      // Contrary to `setAttribute`, object properties are properly
                      // `toString`ed by IE8/9.
                      node[propertyName] = value;
                    }

                    return;
                  } // The rest are treated as attributes with special cases.


                  var attributeName = propertyInfo.attributeName,
                      attributeNamespace = propertyInfo.attributeNamespace;

                  if (value === null) {
                    node.removeAttribute(attributeName);
                  } else {
                    var _type = propertyInfo.type;
                    var attributeValue;

                    if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                      // If attribute type is boolean, we know for sure it won't be an execution sink
                      // and we won't require Trusted Type here.
                      attributeValue = '';
                    } else {
                      // `setAttribute` with objects becomes only `[object]` in IE8/9,
                      // ('' + value) makes it output the correct toString()-value.
                      {
                        attributeValue = '' + value;
                      }

                      if (propertyInfo.sanitizeURL) {
                        sanitizeURL(attributeValue.toString());
                      }
                    }

                    if (attributeNamespace) {
                      node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
                    } else {
                      node.setAttribute(attributeName, attributeValue);
                    }
                  }
                }

                // ATTENTION
                // When adding new symbols to this file,
                // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
                // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
                // nor polyfill, then a plain number is used for performance.
                var REACT_ELEMENT_TYPE = 0xeac7;
                var REACT_PORTAL_TYPE = 0xeaca;
                var REACT_FRAGMENT_TYPE = 0xeacb;
                var REACT_STRICT_MODE_TYPE = 0xeacc;
                var REACT_PROFILER_TYPE = 0xead2;
                var REACT_PROVIDER_TYPE = 0xeacd;
                var REACT_CONTEXT_TYPE = 0xeace;
                var REACT_FORWARD_REF_TYPE = 0xead0;
                var REACT_SUSPENSE_TYPE = 0xead1;
                var REACT_SUSPENSE_LIST_TYPE = 0xead8;
                var REACT_MEMO_TYPE = 0xead3;
                var REACT_LAZY_TYPE = 0xead4;
                var REACT_BLOCK_TYPE = 0xead9;
                var REACT_SERVER_BLOCK_TYPE = 0xeada;
                var REACT_FUNDAMENTAL_TYPE = 0xead5;
                var REACT_SCOPE_TYPE = 0xead7;
                var REACT_OPAQUE_ID_TYPE = 0xeae0;
                var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
                var REACT_OFFSCREEN_TYPE = 0xeae2;
                var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

                if (typeof Symbol === 'function' && Symbol.for) {
                  var symbolFor = Symbol.for;
                  REACT_ELEMENT_TYPE = symbolFor('react.element');
                  REACT_PORTAL_TYPE = symbolFor('react.portal');
                  REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
                  REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
                  REACT_PROFILER_TYPE = symbolFor('react.profiler');
                  REACT_PROVIDER_TYPE = symbolFor('react.provider');
                  REACT_CONTEXT_TYPE = symbolFor('react.context');
                  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
                  REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
                  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
                  REACT_MEMO_TYPE = symbolFor('react.memo');
                  REACT_LAZY_TYPE = symbolFor('react.lazy');
                  REACT_BLOCK_TYPE = symbolFor('react.block');
                  REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
                  REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
                  REACT_SCOPE_TYPE = symbolFor('react.scope');
                  REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
                  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
                  REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
                  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
                }

                var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
                var FAUX_ITERATOR_SYMBOL = '@@iterator';
                function getIteratorFn(maybeIterable) {
                  if (maybeIterable === null || typeof maybeIterable !== 'object') {
                    return null;
                  }

                  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

                  if (typeof maybeIterator === 'function') {
                    return maybeIterator;
                  }

                  return null;
                }

                // Helpers to patch console.logs to avoid logging during side-effect free
                // replaying on render function. This currently only patches the object
                // lazily which won't cover if the log function was extracted eagerly.
                // We could also eagerly patch the method.
                var disabledDepth = 0;
                var prevLog;
                var prevInfo;
                var prevWarn;
                var prevError;
                var prevGroup;
                var prevGroupCollapsed;
                var prevGroupEnd;

                function disabledLog() {}

                disabledLog.__reactDisabledLog = true;
                function disableLogs() {
                  {
                    if (disabledDepth === 0) {
                      /* eslint-disable react-internal/no-production-logging */
                      prevLog = console.log;
                      prevInfo = console.info;
                      prevWarn = console.warn;
                      prevError = console.error;
                      prevGroup = console.group;
                      prevGroupCollapsed = console.groupCollapsed;
                      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

                      var props = {
                        configurable: true,
                        enumerable: true,
                        value: disabledLog,
                        writable: true
                      }; // $FlowFixMe Flow thinks console is immutable.

                      Object.defineProperties(console, {
                        info: props,
                        log: props,
                        warn: props,
                        error: props,
                        group: props,
                        groupCollapsed: props,
                        groupEnd: props
                      });
                      /* eslint-enable react-internal/no-production-logging */
                    }

                    disabledDepth++;
                  }
                }
                function reenableLogs() {
                  {
                    disabledDepth--;

                    if (disabledDepth === 0) {
                      /* eslint-disable react-internal/no-production-logging */
                      var props = {
                        configurable: true,
                        enumerable: true,
                        writable: true
                      }; // $FlowFixMe Flow thinks console is immutable.

                      Object.defineProperties(console, {
                        log: _assign({}, props, {
                          value: prevLog
                        }),
                        info: _assign({}, props, {
                          value: prevInfo
                        }),
                        warn: _assign({}, props, {
                          value: prevWarn
                        }),
                        error: _assign({}, props, {
                          value: prevError
                        }),
                        group: _assign({}, props, {
                          value: prevGroup
                        }),
                        groupCollapsed: _assign({}, props, {
                          value: prevGroupCollapsed
                        }),
                        groupEnd: _assign({}, props, {
                          value: prevGroupEnd
                        })
                      });
                      /* eslint-enable react-internal/no-production-logging */
                    }

                    if (disabledDepth < 0) {
                      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
                    }
                  }
                }

                var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
                var prefix;
                function describeBuiltInComponentFrame(name, source, ownerFn) {
                  {
                    if (prefix === undefined) {
                      // Extract the VM specific prefix used by each line.
                      try {
                        throw Error();
                      } catch (x) {
                        var match = x.stack.trim().match(/\n( *(at )?)/);
                        prefix = match && match[1] || '';
                      }
                    } // We use the prefix to ensure our stacks line up with native stack frames.


                    return '\n' + prefix + name;
                  }
                }
                var reentry = false;
                var componentFrameCache;

                {
                  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
                  componentFrameCache = new PossiblyWeakMap();
                }

                function describeNativeComponentFrame(fn, construct) {
                  // If something asked for a stack inside a fake render, it should get ignored.
                  if (!fn || reentry) {
                    return '';
                  }

                  {
                    var frame = componentFrameCache.get(fn);

                    if (frame !== undefined) {
                      return frame;
                    }
                  }

                  var control;
                  reentry = true;
                  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

                  Error.prepareStackTrace = undefined;
                  var previousDispatcher;

                  {
                    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
                    // for warnings.

                    ReactCurrentDispatcher.current = null;
                    disableLogs();
                  }

                  try {
                    // This should throw.
                    if (construct) {
                      // Something should be setting the props in the constructor.
                      var Fake = function () {
                        throw Error();
                      }; // $FlowFixMe


                      Object.defineProperty(Fake.prototype, 'props', {
                        set: function () {
                          // We use a throwing setter instead of frozen or non-writable props
                          // because that won't throw in a non-strict mode function.
                          throw Error();
                        }
                      });

                      if (typeof Reflect === 'object' && Reflect.construct) {
                        // We construct a different control for this case to include any extra
                        // frames added by the construct call.
                        try {
                          Reflect.construct(Fake, []);
                        } catch (x) {
                          control = x;
                        }

                        Reflect.construct(fn, [], Fake);
                      } else {
                        try {
                          Fake.call();
                        } catch (x) {
                          control = x;
                        }

                        fn.call(Fake.prototype);
                      }
                    } else {
                      try {
                        throw Error();
                      } catch (x) {
                        control = x;
                      }

                      fn();
                    }
                  } catch (sample) {
                    // This is inlined manually because closure doesn't do it for us.
                    if (sample && control && typeof sample.stack === 'string') {
                      // This extracts the first frame from the sample that isn't also in the control.
                      // Skipping one frame that we assume is the frame that calls the two.
                      var sampleLines = sample.stack.split('\n');
                      var controlLines = control.stack.split('\n');
                      var s = sampleLines.length - 1;
                      var c = controlLines.length - 1;

                      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                        // We expect at least one stack frame to be shared.
                        // Typically this will be the root most one. However, stack frames may be
                        // cut off due to maximum stack limits. In this case, one maybe cut off
                        // earlier than the other. We assume that the sample is longer or the same
                        // and there for cut off earlier. So we should find the root most frame in
                        // the sample somewhere in the control.
                        c--;
                      }

                      for (; s >= 1 && c >= 0; s--, c--) {
                        // Next we find the first one that isn't the same which should be the
                        // frame that called our sample function and the control.
                        if (sampleLines[s] !== controlLines[c]) {
                          // In V8, the first line is describing the message but other VMs don't.
                          // If we're about to return the first line, and the control is also on the same
                          // line, that's a pretty good indicator that our sample threw at same line as
                          // the control. I.e. before we entered the sample frame. So we ignore this result.
                          // This can happen if you passed a class to function component, or non-function.
                          if (s !== 1 || c !== 1) {
                            do {
                              s--;
                              c--; // We may still have similar intermediate frames from the construct call.
                              // The next one that isn't the same should be our match though.

                              if (c < 0 || sampleLines[s] !== controlLines[c]) {
                                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');

                                {
                                  if (typeof fn === 'function') {
                                    componentFrameCache.set(fn, _frame);
                                  }
                                } // Return the line we found.


                                return _frame;
                              }
                            } while (s >= 1 && c >= 0);
                          }

                          break;
                        }
                      }
                    }
                  } finally {
                    reentry = false;

                    {
                      ReactCurrentDispatcher.current = previousDispatcher;
                      reenableLogs();
                    }

                    Error.prepareStackTrace = previousPrepareStackTrace;
                  } // Fallback to just using the name if we couldn't make it throw.


                  var name = fn ? fn.displayName || fn.name : '';
                  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

                  {
                    if (typeof fn === 'function') {
                      componentFrameCache.set(fn, syntheticFrame);
                    }
                  }

                  return syntheticFrame;
                }

                function describeClassComponentFrame(ctor, source, ownerFn) {
                  {
                    return describeNativeComponentFrame(ctor, true);
                  }
                }
                function describeFunctionComponentFrame(fn, source, ownerFn) {
                  {
                    return describeNativeComponentFrame(fn, false);
                  }
                }

                function shouldConstruct(Component) {
                  var prototype = Component.prototype;
                  return !!(prototype && prototype.isReactComponent);
                }

                function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

                  if (type == null) {
                    return '';
                  }

                  if (typeof type === 'function') {
                    {
                      return describeNativeComponentFrame(type, shouldConstruct(type));
                    }
                  }

                  if (typeof type === 'string') {
                    return describeBuiltInComponentFrame(type);
                  }

                  switch (type) {
                    case REACT_SUSPENSE_TYPE:
                      return describeBuiltInComponentFrame('Suspense');

                    case REACT_SUSPENSE_LIST_TYPE:
                      return describeBuiltInComponentFrame('SuspenseList');
                  }

                  if (typeof type === 'object') {
                    switch (type.$$typeof) {
                      case REACT_FORWARD_REF_TYPE:
                        return describeFunctionComponentFrame(type.render);

                      case REACT_MEMO_TYPE:
                        // Memo may contain any component type so we recursively resolve it.
                        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

                      case REACT_BLOCK_TYPE:
                        return describeFunctionComponentFrame(type._render);

                      case REACT_LAZY_TYPE:
                        {
                          var lazyComponent = type;
                          var payload = lazyComponent._payload;
                          var init = lazyComponent._init;

                          try {
                            // Lazy may contain any component type so we recursively resolve it.
                            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                          } catch (x) {}
                        }
                    }
                  }

                  return '';
                }

                function describeFiber(fiber) {
                  var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
                  var source = fiber._debugSource;

                  switch (fiber.tag) {
                    case HostComponent:
                      return describeBuiltInComponentFrame(fiber.type);

                    case LazyComponent:
                      return describeBuiltInComponentFrame('Lazy');

                    case SuspenseComponent:
                      return describeBuiltInComponentFrame('Suspense');

                    case SuspenseListComponent:
                      return describeBuiltInComponentFrame('SuspenseList');

                    case FunctionComponent:
                    case IndeterminateComponent:
                    case SimpleMemoComponent:
                      return describeFunctionComponentFrame(fiber.type);

                    case ForwardRef:
                      return describeFunctionComponentFrame(fiber.type.render);

                    case Block:
                      return describeFunctionComponentFrame(fiber.type._render);

                    case ClassComponent:
                      return describeClassComponentFrame(fiber.type);

                    default:
                      return '';
                  }
                }

                function getStackByFiberInDevAndProd(workInProgress) {
                  try {
                    var info = '';
                    var node = workInProgress;

                    do {
                      info += describeFiber(node);
                      node = node.return;
                    } while (node);

                    return info;
                  } catch (x) {
                    return '\nError generating stack: ' + x.message + '\n' + x.stack;
                  }
                }

                function getWrappedName(outerType, innerType, wrapperName) {
                  var functionName = innerType.displayName || innerType.name || '';
                  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
                }

                function getContextName(type) {
                  return type.displayName || 'Context';
                }

                function getComponentName(type) {
                  if (type == null) {
                    // Host root, text node or just invalid type.
                    return null;
                  }

                  {
                    if (typeof type.tag === 'number') {
                      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
                    }
                  }

                  if (typeof type === 'function') {
                    return type.displayName || type.name || null;
                  }

                  if (typeof type === 'string') {
                    return type;
                  }

                  switch (type) {
                    case REACT_FRAGMENT_TYPE:
                      return 'Fragment';

                    case REACT_PORTAL_TYPE:
                      return 'Portal';

                    case REACT_PROFILER_TYPE:
                      return 'Profiler';

                    case REACT_STRICT_MODE_TYPE:
                      return 'StrictMode';

                    case REACT_SUSPENSE_TYPE:
                      return 'Suspense';

                    case REACT_SUSPENSE_LIST_TYPE:
                      return 'SuspenseList';
                  }

                  if (typeof type === 'object') {
                    switch (type.$$typeof) {
                      case REACT_CONTEXT_TYPE:
                        var context = type;
                        return getContextName(context) + '.Consumer';

                      case REACT_PROVIDER_TYPE:
                        var provider = type;
                        return getContextName(provider._context) + '.Provider';

                      case REACT_FORWARD_REF_TYPE:
                        return getWrappedName(type, type.render, 'ForwardRef');

                      case REACT_MEMO_TYPE:
                        return getComponentName(type.type);

                      case REACT_BLOCK_TYPE:
                        return getComponentName(type._render);

                      case REACT_LAZY_TYPE:
                        {
                          var lazyComponent = type;
                          var payload = lazyComponent._payload;
                          var init = lazyComponent._init;

                          try {
                            return getComponentName(init(payload));
                          } catch (x) {
                            return null;
                          }
                        }
                    }
                  }

                  return null;
                }

                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
                var current = null;
                var isRendering = false;
                function getCurrentFiberOwnerNameInDevOrNull() {
                  {
                    if (current === null) {
                      return null;
                    }

                    var owner = current._debugOwner;

                    if (owner !== null && typeof owner !== 'undefined') {
                      return getComponentName(owner.type);
                    }
                  }

                  return null;
                }

                function getCurrentFiberStackInDev() {
                  {
                    if (current === null) {
                      return '';
                    } // Safe because if current fiber exists, we are reconciling,
                    // and it is guaranteed to be the work-in-progress version.


                    return getStackByFiberInDevAndProd(current);
                  }
                }

                function resetCurrentFiber() {
                  {
                    ReactDebugCurrentFrame.getCurrentStack = null;
                    current = null;
                    isRendering = false;
                  }
                }
                function setCurrentFiber(fiber) {
                  {
                    ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
                    current = fiber;
                    isRendering = false;
                  }
                }
                function setIsRendering(rendering) {
                  {
                    isRendering = rendering;
                  }
                }
                function getIsRendering() {
                  {
                    return isRendering;
                  }
                }

                // Flow does not allow string concatenation of most non-string types. To work
                // around this limitation, we use an opaque type that can only be obtained by
                // passing the value through getToStringValue first.
                function toString(value) {
                  return '' + value;
                }
                function getToStringValue(value) {
                  switch (typeof value) {
                    case 'boolean':
                    case 'number':
                    case 'object':
                    case 'string':
                    case 'undefined':
                      return value;

                    default:
                      // function, symbol are assigned as empty strings
                      return '';
                  }
                }

                var hasReadOnlyValue = {
                  button: true,
                  checkbox: true,
                  image: true,
                  hidden: true,
                  radio: true,
                  reset: true,
                  submit: true
                };
                function checkControlledValueProps(tagName, props) {
                  {
                    if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                      error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
                    }

                    if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                      error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
                    }
                  }
                }

                function isCheckable(elem) {
                  var type = elem.type;
                  var nodeName = elem.nodeName;
                  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
                }

                function getTracker(node) {
                  return node._valueTracker;
                }

                function detachTracker(node) {
                  node._valueTracker = null;
                }

                function getValueFromNode(node) {
                  var value = '';

                  if (!node) {
                    return value;
                  }

                  if (isCheckable(node)) {
                    value = node.checked ? 'true' : 'false';
                  } else {
                    value = node.value;
                  }

                  return value;
                }

                function trackValueOnNode(node) {
                  var valueField = isCheckable(node) ? 'checked' : 'value';
                  var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
                  var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
                  // and don't track value will cause over reporting of changes,
                  // but it's better then a hard failure
                  // (needed for certain tests that spyOn input values and Safari)

                  if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
                    return;
                  }

                  var get = descriptor.get,
                      set = descriptor.set;
                  Object.defineProperty(node, valueField, {
                    configurable: true,
                    get: function () {
                      return get.call(this);
                    },
                    set: function (value) {
                      currentValue = '' + value;
                      set.call(this, value);
                    }
                  }); // We could've passed this the first time
                  // but it triggers a bug in IE11 and Edge 14/15.
                  // Calling defineProperty() again should be equivalent.
                  // https://github.com/facebook/react/issues/11768

                  Object.defineProperty(node, valueField, {
                    enumerable: descriptor.enumerable
                  });
                  var tracker = {
                    getValue: function () {
                      return currentValue;
                    },
                    setValue: function (value) {
                      currentValue = '' + value;
                    },
                    stopTracking: function () {
                      detachTracker(node);
                      delete node[valueField];
                    }
                  };
                  return tracker;
                }

                function track(node) {
                  if (getTracker(node)) {
                    return;
                  } // TODO: Once it's just Fiber we can move this to node._wrapperState


                  node._valueTracker = trackValueOnNode(node);
                }
                function updateValueIfChanged(node) {
                  if (!node) {
                    return false;
                  }

                  var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
                  // that trying again will succeed

                  if (!tracker) {
                    return true;
                  }

                  var lastValue = tracker.getValue();
                  var nextValue = getValueFromNode(node);

                  if (nextValue !== lastValue) {
                    tracker.setValue(nextValue);
                    return true;
                  }

                  return false;
                }

                function getActiveElement(doc) {
                  doc = doc || (typeof document !== 'undefined' ? document : undefined);

                  if (typeof doc === 'undefined') {
                    return null;
                  }

                  try {
                    return doc.activeElement || doc.body;
                  } catch (e) {
                    return doc.body;
                  }
                }

                var didWarnValueDefaultValue = false;
                var didWarnCheckedDefaultChecked = false;
                var didWarnControlledToUncontrolled = false;
                var didWarnUncontrolledToControlled = false;

                function isControlled(props) {
                  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
                  return usesChecked ? props.checked != null : props.value != null;
                }
                /**
                 * Implements an <input> host component that allows setting these optional
                 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
                 *
                 * If `checked` or `value` are not supplied (or null/undefined), user actions
                 * that affect the checked state or value will trigger updates to the element.
                 *
                 * If they are supplied (and not null/undefined), the rendered element will not
                 * trigger updates to the element. Instead, the props must change in order for
                 * the rendered element to be updated.
                 *
                 * The rendered element will be initialized as unchecked (or `defaultChecked`)
                 * with an empty value (or `defaultValue`).
                 *
                 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
                 */

                function getHostProps(element, props) {
                  var node = element;
                  var checked = props.checked;

                  var hostProps = _assign({}, props, {
                    defaultChecked: undefined,
                    defaultValue: undefined,
                    value: undefined,
                    checked: checked != null ? checked : node._wrapperState.initialChecked
                  });

                  return hostProps;
                }
                function initWrapperState(element, props) {
                  {
                    checkControlledValueProps('input', props);

                    if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
                      error('%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

                      didWarnCheckedDefaultChecked = true;
                    }

                    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
                      error('%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

                      didWarnValueDefaultValue = true;
                    }
                  }

                  var node = element;
                  var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
                  node._wrapperState = {
                    initialChecked: props.checked != null ? props.checked : props.defaultChecked,
                    initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
                    controlled: isControlled(props)
                  };
                }
                function updateChecked(element, props) {
                  var node = element;
                  var checked = props.checked;

                  if (checked != null) {
                    setValueForProperty(node, 'checked', checked, false);
                  }
                }
                function updateWrapper(element, props) {
                  var node = element;

                  {
                    var controlled = isControlled(props);

                    if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                      error('A component is changing an uncontrolled input to be controlled. ' + 'This is likely caused by the value changing from undefined to ' + 'a defined value, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');

                      didWarnUncontrolledToControlled = true;
                    }

                    if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                      error('A component is changing a controlled input to be uncontrolled. ' + 'This is likely caused by the value changing from a defined to ' + 'undefined, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');

                      didWarnControlledToUncontrolled = true;
                    }
                  }

                  updateChecked(element, props);
                  var value = getToStringValue(props.value);
                  var type = props.type;

                  if (value != null) {
                    if (type === 'number') {
                      if (value === 0 && node.value === '' || // We explicitly want to coerce to number here if possible.
                      // eslint-disable-next-line
                      node.value != value) {
                        node.value = toString(value);
                      }
                    } else if (node.value !== toString(value)) {
                      node.value = toString(value);
                    }
                  } else if (type === 'submit' || type === 'reset') {
                    // Submit/reset inputs need the attribute removed completely to avoid
                    // blank-text buttons.
                    node.removeAttribute('value');
                    return;
                  }

                  {
                    // When syncing the value attribute, the value comes from a cascade of
                    // properties:
                    //  1. The value React property
                    //  2. The defaultValue React property
                    //  3. Otherwise there should be no change
                    if (props.hasOwnProperty('value')) {
                      setDefaultValue(node, props.type, value);
                    } else if (props.hasOwnProperty('defaultValue')) {
                      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
                    }
                  }

                  {
                    // When syncing the checked attribute, it only changes when it needs
                    // to be removed, such as transitioning from a checkbox into a text input
                    if (props.checked == null && props.defaultChecked != null) {
                      node.defaultChecked = !!props.defaultChecked;
                    }
                  }
                }
                function postMountWrapper(element, props, isHydrating) {
                  var node = element; // Do not assign value if it is already set. This prevents user text input
                  // from being lost during SSR hydration.

                  if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
                    var type = props.type;
                    var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
                    // default value provided by the browser. See: #12872

                    if (isButton && (props.value === undefined || props.value === null)) {
                      return;
                    }

                    var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
                    // from being lost during SSR hydration.

                    if (!isHydrating) {
                      {
                        // When syncing the value attribute, the value property should use
                        // the wrapperState._initialValue property. This uses:
                        //
                        //   1. The value React property when present
                        //   2. The defaultValue React property when present
                        //   3. An empty string
                        if (initialValue !== node.value) {
                          node.value = initialValue;
                        }
                      }
                    }

                    {
                      // Otherwise, the value attribute is synchronized to the property,
                      // so we assign defaultValue to the same thing as the value property
                      // assignment step above.
                      node.defaultValue = initialValue;
                    }
                  } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
                  // this is needed to work around a chrome bug where setting defaultChecked
                  // will sometimes influence the value of checked (even after detachment).
                  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
                  // We need to temporarily unset name to avoid disrupting radio button groups.


                  var name = node.name;

                  if (name !== '') {
                    node.name = '';
                  }

                  {
                    // When syncing the checked attribute, both the checked property and
                    // attribute are assigned at the same time using defaultChecked. This uses:
                    //
                    //   1. The checked React property when present
                    //   2. The defaultChecked React property when present
                    //   3. Otherwise, false
                    node.defaultChecked = !node.defaultChecked;
                    node.defaultChecked = !!node._wrapperState.initialChecked;
                  }

                  if (name !== '') {
                    node.name = name;
                  }
                }
                function restoreControlledState(element, props) {
                  var node = element;
                  updateWrapper(node, props);
                  updateNamedCousins(node, props);
                }

                function updateNamedCousins(rootNode, props) {
                  var name = props.name;

                  if (props.type === 'radio' && name != null) {
                    var queryRoot = rootNode;

                    while (queryRoot.parentNode) {
                      queryRoot = queryRoot.parentNode;
                    } // If `rootNode.form` was non-null, then we could try `form.elements`,
                    // but that sometimes behaves strangely in IE8. We could also try using
                    // `form.getElementsByName`, but that will only return direct children
                    // and won't include inputs that use the HTML5 `form=` attribute. Since
                    // the input might not even be in a form. It might not even be in the
                    // document. Let's just use the local `querySelectorAll` to ensure we don't
                    // miss anything.


                    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

                    for (var i = 0; i < group.length; i++) {
                      var otherNode = group[i];

                      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                        continue;
                      } // This will throw if radio buttons rendered by different copies of React
                      // and the same name are rendered into the same form (same as #1939).
                      // That's probably okay; we don't support it just as we don't support
                      // mixing React radio buttons with non-React ones.


                      var otherProps = getFiberCurrentPropsFromNode(otherNode);

                      if (!otherProps) {
                        {
                          throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                        }
                      } // We need update the tracked value on the named cousin since the value
                      // was changed but the input saw no event or value set


                      updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
                      // was previously checked to update will cause it to be come re-checked
                      // as appropriate.

                      updateWrapper(otherNode, otherProps);
                    }
                  }
                } // In Chrome, assigning defaultValue to certain input types triggers input validation.
                // For number inputs, the display value loses trailing decimal points. For email inputs,
                // Chrome raises "The specified value <x> is not a valid email address".
                //
                // Here we check to see if the defaultValue has actually changed, avoiding these problems
                // when the user is inputting text
                //
                // https://github.com/facebook/react/issues/7253


                function setDefaultValue(node, type, value) {
                  if ( // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
                  type !== 'number' || getActiveElement(node.ownerDocument) !== node) {
                    if (value == null) {
                      node.defaultValue = toString(node._wrapperState.initialValue);
                    } else if (node.defaultValue !== toString(value)) {
                      node.defaultValue = toString(value);
                    }
                  }
                }

                var didWarnSelectedSetOnOption = false;
                var didWarnInvalidChild = false;

                function flattenChildren(children) {
                  var content = ''; // Flatten children. We'll warn if they are invalid
                  // during validateProps() which runs for hydration too.
                  // Note that this would throw on non-element objects.
                  // Elements are stringified (which is normally irrelevant
                  // but matters for <fbt>).

                  React.Children.forEach(children, function (child) {
                    if (child == null) {
                      return;
                    }

                    content += child; // Note: we don't warn about invalid children here.
                    // Instead, this is done separately below so that
                    // it happens during the hydration code path too.
                  });
                  return content;
                }
                /**
                 * Implements an <option> host component that warns when `selected` is set.
                 */

                function validateProps(element, props) {
                  {
                    // This mirrors the code path above, but runs for hydration too.
                    // Warn about invalid children here so that client and hydration are consistent.
                    // TODO: this seems like it could cause a DEV-only throw for hydration
                    // if children contains a non-element object. We should try to avoid that.
                    if (typeof props.children === 'object' && props.children !== null) {
                      React.Children.forEach(props.children, function (child) {
                        if (child == null) {
                          return;
                        }

                        if (typeof child === 'string' || typeof child === 'number') {
                          return;
                        }

                        if (typeof child.type !== 'string') {
                          return;
                        }

                        if (!didWarnInvalidChild) {
                          didWarnInvalidChild = true;

                          error('Only strings and numbers are supported as <option> children.');
                        }
                      });
                    } // TODO: Remove support for `selected` in <option>.


                    if (props.selected != null && !didWarnSelectedSetOnOption) {
                      error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');

                      didWarnSelectedSetOnOption = true;
                    }
                  }
                }
                function postMountWrapper$1(element, props) {
                  // value="" should make a value attribute (#6219)
                  if (props.value != null) {
                    element.setAttribute('value', toString(getToStringValue(props.value)));
                  }
                }
                function getHostProps$1(element, props) {
                  var hostProps = _assign({
                    children: undefined
                  }, props);

                  var content = flattenChildren(props.children);

                  if (content) {
                    hostProps.children = content;
                  }

                  return hostProps;
                }

                var didWarnValueDefaultValue$1;

                {
                  didWarnValueDefaultValue$1 = false;
                }

                function getDeclarationErrorAddendum() {
                  var ownerName = getCurrentFiberOwnerNameInDevOrNull();

                  if (ownerName) {
                    return '\n\nCheck the render method of `' + ownerName + '`.';
                  }

                  return '';
                }

                var valuePropNames = ['value', 'defaultValue'];
                /**
                 * Validation function for `value` and `defaultValue`.
                 */

                function checkSelectPropTypes(props) {
                  {
                    checkControlledValueProps('select', props);

                    for (var i = 0; i < valuePropNames.length; i++) {
                      var propName = valuePropNames[i];

                      if (props[propName] == null) {
                        continue;
                      }

                      var isArray = Array.isArray(props[propName]);

                      if (props.multiple && !isArray) {
                        error('The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
                      } else if (!props.multiple && isArray) {
                        error('The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
                      }
                    }
                  }
                }

                function updateOptions(node, multiple, propValue, setDefaultSelected) {
                  var options = node.options;

                  if (multiple) {
                    var selectedValues = propValue;
                    var selectedValue = {};

                    for (var i = 0; i < selectedValues.length; i++) {
                      // Prefix to avoid chaos with special keys.
                      selectedValue['$' + selectedValues[i]] = true;
                    }

                    for (var _i = 0; _i < options.length; _i++) {
                      var selected = selectedValue.hasOwnProperty('$' + options[_i].value);

                      if (options[_i].selected !== selected) {
                        options[_i].selected = selected;
                      }

                      if (selected && setDefaultSelected) {
                        options[_i].defaultSelected = true;
                      }
                    }
                  } else {
                    // Do not set `select.value` as exact behavior isn't consistent across all
                    // browsers for all cases.
                    var _selectedValue = toString(getToStringValue(propValue));

                    var defaultSelected = null;

                    for (var _i2 = 0; _i2 < options.length; _i2++) {
                      if (options[_i2].value === _selectedValue) {
                        options[_i2].selected = true;

                        if (setDefaultSelected) {
                          options[_i2].defaultSelected = true;
                        }

                        return;
                      }

                      if (defaultSelected === null && !options[_i2].disabled) {
                        defaultSelected = options[_i2];
                      }
                    }

                    if (defaultSelected !== null) {
                      defaultSelected.selected = true;
                    }
                  }
                }
                /**
                 * Implements a <select> host component that allows optionally setting the
                 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
                 * stringable. If `multiple` is true, the prop must be an array of stringables.
                 *
                 * If `value` is not supplied (or null/undefined), user actions that change the
                 * selected option will trigger updates to the rendered options.
                 *
                 * If it is supplied (and not null/undefined), the rendered options will not
                 * update in response to user actions. Instead, the `value` prop must change in
                 * order for the rendered options to update.
                 *
                 * If `defaultValue` is provided, any options with the supplied values will be
                 * selected.
                 */

                function getHostProps$2(element, props) {
                  return _assign({}, props, {
                    value: undefined
                  });
                }
                function initWrapperState$1(element, props) {
                  var node = element;

                  {
                    checkSelectPropTypes(props);
                  }

                  node._wrapperState = {
                    wasMultiple: !!props.multiple
                  };

                  {
                    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
                      error('Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components');

                      didWarnValueDefaultValue$1 = true;
                    }
                  }
                }
                function postMountWrapper$2(element, props) {
                  var node = element;
                  node.multiple = !!props.multiple;
                  var value = props.value;

                  if (value != null) {
                    updateOptions(node, !!props.multiple, value, false);
                  } else if (props.defaultValue != null) {
                    updateOptions(node, !!props.multiple, props.defaultValue, true);
                  }
                }
                function postUpdateWrapper(element, props) {
                  var node = element;
                  var wasMultiple = node._wrapperState.wasMultiple;
                  node._wrapperState.wasMultiple = !!props.multiple;
                  var value = props.value;

                  if (value != null) {
                    updateOptions(node, !!props.multiple, value, false);
                  } else if (wasMultiple !== !!props.multiple) {
                    // For simplicity, reapply `defaultValue` if `multiple` is toggled.
                    if (props.defaultValue != null) {
                      updateOptions(node, !!props.multiple, props.defaultValue, true);
                    } else {
                      // Revert the select back to its default unselected state.
                      updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
                    }
                  }
                }
                function restoreControlledState$1(element, props) {
                  var node = element;
                  var value = props.value;

                  if (value != null) {
                    updateOptions(node, !!props.multiple, value, false);
                  }
                }

                var didWarnValDefaultVal = false;

                /**
                 * Implements a <textarea> host component that allows setting `value`, and
                 * `defaultValue`. This differs from the traditional DOM API because value is
                 * usually set as PCDATA children.
                 *
                 * If `value` is not supplied (or null/undefined), user actions that affect the
                 * value will trigger updates to the element.
                 *
                 * If `value` is supplied (and not null/undefined), the rendered element will
                 * not trigger updates to the element. Instead, the `value` prop must change in
                 * order for the rendered element to be updated.
                 *
                 * The rendered element will be initialized with an empty value, the prop
                 * `defaultValue` if specified, or the children content (deprecated).
                 */
                function getHostProps$3(element, props) {
                  var node = element;

                  if (!(props.dangerouslySetInnerHTML == null)) {
                    {
                      throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
                    }
                  } // Always set children to the same thing. In IE9, the selection range will
                  // get reset if `textContent` is mutated.  We could add a check in setTextContent
                  // to only set the value if/when the value differs from the node value (which would
                  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
                  // solution. The value can be a boolean or object so that's why it's forced
                  // to be a string.


                  var hostProps = _assign({}, props, {
                    value: undefined,
                    defaultValue: undefined,
                    children: toString(node._wrapperState.initialValue)
                  });

                  return hostProps;
                }
                function initWrapperState$2(element, props) {
                  var node = element;

                  {
                    checkControlledValueProps('textarea', props);

                    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
                      error('%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');

                      didWarnValDefaultVal = true;
                    }
                  }

                  var initialValue = props.value; // Only bother fetching default value if we're going to use it

                  if (initialValue == null) {
                    var children = props.children,
                        defaultValue = props.defaultValue;

                    if (children != null) {
                      {
                        error('Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
                      }

                      {
                        if (!(defaultValue == null)) {
                          {
                            throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                          }
                        }

                        if (Array.isArray(children)) {
                          if (!(children.length <= 1)) {
                            {
                              throw Error("<textarea> can only have at most one child.");
                            }
                          }

                          children = children[0];
                        }

                        defaultValue = children;
                      }
                    }

                    if (defaultValue == null) {
                      defaultValue = '';
                    }

                    initialValue = defaultValue;
                  }

                  node._wrapperState = {
                    initialValue: getToStringValue(initialValue)
                  };
                }
                function updateWrapper$1(element, props) {
                  var node = element;
                  var value = getToStringValue(props.value);
                  var defaultValue = getToStringValue(props.defaultValue);

                  if (value != null) {
                    // Cast `value` to a string to ensure the value is set correctly. While
                    // browsers typically do this as necessary, jsdom doesn't.
                    var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed

                    if (newValue !== node.value) {
                      node.value = newValue;
                    }

                    if (props.defaultValue == null && node.defaultValue !== newValue) {
                      node.defaultValue = newValue;
                    }
                  }

                  if (defaultValue != null) {
                    node.defaultValue = toString(defaultValue);
                  }
                }
                function postMountWrapper$3(element, props) {
                  var node = element; // This is in postMount because we need access to the DOM node, which is not
                  // available until after the component has mounted.

                  var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
                  // initial value. In IE10/IE11 there is a bug where the placeholder attribute
                  // will populate textContent as well.
                  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/

                  if (textContent === node._wrapperState.initialValue) {
                    if (textContent !== '' && textContent !== null) {
                      node.value = textContent;
                    }
                  }
                }
                function restoreControlledState$2(element, props) {
                  // DOM component is still mounted; update
                  updateWrapper$1(element, props);
                }

                var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
                var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
                var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
                var Namespaces = {
                  html: HTML_NAMESPACE,
                  mathml: MATH_NAMESPACE,
                  svg: SVG_NAMESPACE
                }; // Assumes there is no parent namespace.

                function getIntrinsicNamespace(type) {
                  switch (type) {
                    case 'svg':
                      return SVG_NAMESPACE;

                    case 'math':
                      return MATH_NAMESPACE;

                    default:
                      return HTML_NAMESPACE;
                  }
                }
                function getChildNamespace(parentNamespace, type) {
                  if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
                    // No (or default) parent namespace: potential entry point.
                    return getIntrinsicNamespace(type);
                  }

                  if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
                    // We're leaving SVG.
                    return HTML_NAMESPACE;
                  } // By default, pass namespace below.


                  return parentNamespace;
                }

                /* globals MSApp */

                /**
                 * Create a function which has 'unsafe' privileges (required by windows8 apps)
                 */
                var createMicrosoftUnsafeLocalFunction = function (func) {
                  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
                    return function (arg0, arg1, arg2, arg3) {
                      MSApp.execUnsafeLocalFunction(function () {
                        return func(arg0, arg1, arg2, arg3);
                      });
                    };
                  } else {
                    return func;
                  }
                };

                var reusableSVGContainer;
                /**
                 * Set the innerHTML property of a node
                 *
                 * @param {DOMElement} node
                 * @param {string} html
                 * @internal
                 */

                var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
                  if (node.namespaceURI === Namespaces.svg) {

                    if (!('innerHTML' in node)) {
                      // IE does not have innerHTML for SVG nodes, so instead we inject the
                      // new markup in a temp node and then move the child nodes across into
                      // the target node
                      reusableSVGContainer = reusableSVGContainer || document.createElement('div');
                      reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
                      var svgNode = reusableSVGContainer.firstChild;

                      while (node.firstChild) {
                        node.removeChild(node.firstChild);
                      }

                      while (svgNode.firstChild) {
                        node.appendChild(svgNode.firstChild);
                      }

                      return;
                    }
                  }

                  node.innerHTML = html;
                });

                /**
                 * HTML nodeType values that represent the type of the node
                 */
                var ELEMENT_NODE = 1;
                var TEXT_NODE = 3;
                var COMMENT_NODE = 8;
                var DOCUMENT_NODE = 9;
                var DOCUMENT_FRAGMENT_NODE = 11;

                /**
                 * Set the textContent property of a node. For text updates, it's faster
                 * to set the `nodeValue` of the Text node directly instead of using
                 * `.textContent` which will remove the existing node and create a new one.
                 *
                 * @param {DOMElement} node
                 * @param {string} text
                 * @internal
                 */

                var setTextContent = function (node, text) {
                  if (text) {
                    var firstChild = node.firstChild;

                    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                      firstChild.nodeValue = text;
                      return;
                    }
                  }

                  node.textContent = text;
                };

                // List derived from Gecko source code:
                // https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
                var shorthandToLonghand = {
                  animation: ['animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction'],
                  background: ['backgroundAttachment', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundSize'],
                  backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
                  border: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderTopColor', 'borderTopStyle', 'borderTopWidth'],
                  borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'],
                  borderBlockStart: ['borderBlockStartColor', 'borderBlockStartStyle', 'borderBlockStartWidth'],
                  borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'],
                  borderColor: ['borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor'],
                  borderImage: ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],
                  borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],
                  borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],
                  borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],
                  borderRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],
                  borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'],
                  borderStyle: ['borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopStyle'],
                  borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],
                  borderWidth: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'],
                  columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],
                  columns: ['columnCount', 'columnWidth'],
                  flex: ['flexBasis', 'flexGrow', 'flexShrink'],
                  flexFlow: ['flexDirection', 'flexWrap'],
                  font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'],
                  fontVariant: ['fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition'],
                  gap: ['columnGap', 'rowGap'],
                  grid: ['gridAutoColumns', 'gridAutoFlow', 'gridAutoRows', 'gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
                  gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'],
                  gridColumn: ['gridColumnEnd', 'gridColumnStart'],
                  gridColumnGap: ['columnGap'],
                  gridGap: ['columnGap', 'rowGap'],
                  gridRow: ['gridRowEnd', 'gridRowStart'],
                  gridRowGap: ['rowGap'],
                  gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
                  listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
                  margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
                  marker: ['markerEnd', 'markerMid', 'markerStart'],
                  mask: ['maskClip', 'maskComposite', 'maskImage', 'maskMode', 'maskOrigin', 'maskPositionX', 'maskPositionY', 'maskRepeat', 'maskSize'],
                  maskPosition: ['maskPositionX', 'maskPositionY'],
                  outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],
                  overflow: ['overflowX', 'overflowY'],
                  padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
                  placeContent: ['alignContent', 'justifyContent'],
                  placeItems: ['alignItems', 'justifyItems'],
                  placeSelf: ['alignSelf', 'justifySelf'],
                  textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'],
                  textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],
                  transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction'],
                  wordWrap: ['overflowWrap']
                };

                /**
                 * CSS properties which accept numbers but are not in units of "px".
                 */
                var isUnitlessNumber = {
                  animationIterationCount: true,
                  borderImageOutset: true,
                  borderImageSlice: true,
                  borderImageWidth: true,
                  boxFlex: true,
                  boxFlexGroup: true,
                  boxOrdinalGroup: true,
                  columnCount: true,
                  columns: true,
                  flex: true,
                  flexGrow: true,
                  flexPositive: true,
                  flexShrink: true,
                  flexNegative: true,
                  flexOrder: true,
                  gridArea: true,
                  gridRow: true,
                  gridRowEnd: true,
                  gridRowSpan: true,
                  gridRowStart: true,
                  gridColumn: true,
                  gridColumnEnd: true,
                  gridColumnSpan: true,
                  gridColumnStart: true,
                  fontWeight: true,
                  lineClamp: true,
                  lineHeight: true,
                  opacity: true,
                  order: true,
                  orphans: true,
                  tabSize: true,
                  widows: true,
                  zIndex: true,
                  zoom: true,
                  // SVG-related properties
                  fillOpacity: true,
                  floodOpacity: true,
                  stopOpacity: true,
                  strokeDasharray: true,
                  strokeDashoffset: true,
                  strokeMiterlimit: true,
                  strokeOpacity: true,
                  strokeWidth: true
                };
                /**
                 * @param {string} prefix vendor-specific prefix, eg: Webkit
                 * @param {string} key style name, eg: transitionDuration
                 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
                 * WebkitTransitionDuration
                 */

                function prefixKey(prefix, key) {
                  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
                }
                /**
                 * Support style names that may come passed in prefixed by adding permutations
                 * of vendor prefixes.
                 */

                var prefixes = ['Webkit', 'ms', 'Moz', 'O']; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
                // infinite loop, because it iterates over the newly added props too.

                Object.keys(isUnitlessNumber).forEach(function (prop) {
                  prefixes.forEach(function (prefix) {
                    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
                  });
                });

                /**
                 * Convert a value into the proper css writable value. The style name `name`
                 * should be logical (no hyphens), as specified
                 * in `CSSProperty.isUnitlessNumber`.
                 *
                 * @param {string} name CSS property name such as `topMargin`.
                 * @param {*} value CSS property value such as `10px`.
                 * @return {string} Normalized style value with dimensions applied.
                 */

                function dangerousStyleValue(name, value, isCustomProperty) {
                  // Note that we've removed escapeTextForBrowser() calls here since the
                  // whole string will be escaped when the attribute is injected into
                  // the markup. If you provide unsafe user data here they can inject
                  // arbitrary CSS which may be problematic (I couldn't repro this):
                  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
                  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
                  // This is not an XSS hole but instead a potential CSS injection issue
                  // which has lead to a greater discussion about how we're going to
                  // trust URLs moving forward. See #2115901
                  var isEmpty = value == null || typeof value === 'boolean' || value === '';

                  if (isEmpty) {
                    return '';
                  }

                  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
                    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
                  }

                  return ('' + value).trim();
                }

                var uppercasePattern = /([A-Z])/g;
                var msPattern = /^ms-/;
                /**
                 * Hyphenates a camelcased CSS property name, for example:
                 *
                 *   > hyphenateStyleName('backgroundColor')
                 *   < "background-color"
                 *   > hyphenateStyleName('MozTransition')
                 *   < "-moz-transition"
                 *   > hyphenateStyleName('msTransition')
                 *   < "-ms-transition"
                 *
                 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
                 * is converted to `-ms-`.
                 */

                function hyphenateStyleName(name) {
                  return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
                }

                var warnValidStyle = function () {};

                {
                  // 'msTransform' is correct, but the other prefixes should be capitalized
                  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
                  var msPattern$1 = /^-ms-/;
                  var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon

                  var badStyleValueWithSemicolonPattern = /;\s*$/;
                  var warnedStyleNames = {};
                  var warnedStyleValues = {};
                  var warnedForNaNValue = false;
                  var warnedForInfinityValue = false;

                  var camelize = function (string) {
                    return string.replace(hyphenPattern, function (_, character) {
                      return character.toUpperCase();
                    });
                  };

                  var warnHyphenatedStyleName = function (name) {
                    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                      return;
                    }

                    warnedStyleNames[name] = true;

                    error('Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests
                    // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                    // is converted to lowercase `ms`.
                    camelize(name.replace(msPattern$1, 'ms-')));
                  };

                  var warnBadVendoredStyleName = function (name) {
                    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                      return;
                    }

                    warnedStyleNames[name] = true;

                    error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
                  };

                  var warnStyleValueWithSemicolon = function (name, value) {
                    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                      return;
                    }

                    warnedStyleValues[value] = true;

                    error("Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
                  };

                  var warnStyleValueIsNaN = function (name, value) {
                    if (warnedForNaNValue) {
                      return;
                    }

                    warnedForNaNValue = true;

                    error('`NaN` is an invalid value for the `%s` css style property.', name);
                  };

                  var warnStyleValueIsInfinity = function (name, value) {
                    if (warnedForInfinityValue) {
                      return;
                    }

                    warnedForInfinityValue = true;

                    error('`Infinity` is an invalid value for the `%s` css style property.', name);
                  };

                  warnValidStyle = function (name, value) {
                    if (name.indexOf('-') > -1) {
                      warnHyphenatedStyleName(name);
                    } else if (badVendoredStyleNamePattern.test(name)) {
                      warnBadVendoredStyleName(name);
                    } else if (badStyleValueWithSemicolonPattern.test(value)) {
                      warnStyleValueWithSemicolon(name, value);
                    }

                    if (typeof value === 'number') {
                      if (isNaN(value)) {
                        warnStyleValueIsNaN(name, value);
                      } else if (!isFinite(value)) {
                        warnStyleValueIsInfinity(name, value);
                      }
                    }
                  };
                }

                var warnValidStyle$1 = warnValidStyle;

                /**
                 * Operations for dealing with CSS properties.
                 */

                /**
                 * This creates a string that is expected to be equivalent to the style
                 * attribute generated by server-side rendering. It by-passes warnings and
                 * security checks so it's not safe to use this value for anything other than
                 * comparison. It is only used in DEV for SSR validation.
                 */

                function createDangerousStringForStyles(styles) {
                  {
                    var serialized = '';
                    var delimiter = '';

                    for (var styleName in styles) {
                      if (!styles.hasOwnProperty(styleName)) {
                        continue;
                      }

                      var styleValue = styles[styleName];

                      if (styleValue != null) {
                        var isCustomProperty = styleName.indexOf('--') === 0;
                        serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
                        serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                        delimiter = ';';
                      }
                    }

                    return serialized || null;
                  }
                }
                /**
                 * Sets the value for multiple styles on a node.  If a value is specified as
                 * '' (empty string), the corresponding style property will be unset.
                 *
                 * @param {DOMElement} node
                 * @param {object} styles
                 */

                function setValueForStyles(node, styles) {
                  var style = node.style;

                  for (var styleName in styles) {
                    if (!styles.hasOwnProperty(styleName)) {
                      continue;
                    }

                    var isCustomProperty = styleName.indexOf('--') === 0;

                    {
                      if (!isCustomProperty) {
                        warnValidStyle$1(styleName, styles[styleName]);
                      }
                    }

                    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);

                    if (styleName === 'float') {
                      styleName = 'cssFloat';
                    }

                    if (isCustomProperty) {
                      style.setProperty(styleName, styleValue);
                    } else {
                      style[styleName] = styleValue;
                    }
                  }
                }

                function isValueEmpty(value) {
                  return value == null || typeof value === 'boolean' || value === '';
                }
                /**
                 * Given {color: 'red', overflow: 'hidden'} returns {
                 *   color: 'color',
                 *   overflowX: 'overflow',
                 *   overflowY: 'overflow',
                 * }. This can be read as "the overflowY property was set by the overflow
                 * shorthand". That is, the values are the property that each was derived from.
                 */

                function expandShorthandMap(styles) {
                  var expanded = {};

                  for (var key in styles) {
                    var longhands = shorthandToLonghand[key] || [key];

                    for (var i = 0; i < longhands.length; i++) {
                      expanded[longhands[i]] = key;
                    }
                  }

                  return expanded;
                }
                /**
                 * When mixing shorthand and longhand property names, we warn during updates if
                 * we expect an incorrect result to occur. In particular, we warn for:
                 *
                 * Updating a shorthand property (longhand gets overwritten):
                 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
                 *   becomes .style.font = 'baz'
                 * Removing a shorthand property (longhand gets lost too):
                 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
                 *   becomes .style.font = ''
                 * Removing a longhand property (should revert to shorthand; doesn't):
                 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
                 *   becomes .style.fontVariant = ''
                 */

                function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
                  {
                    if (!nextStyles) {
                      return;
                    }

                    var expandedUpdates = expandShorthandMap(styleUpdates);
                    var expandedStyles = expandShorthandMap(nextStyles);
                    var warnedAbout = {};

                    for (var key in expandedUpdates) {
                      var originalKey = expandedUpdates[key];
                      var correctOriginalKey = expandedStyles[key];

                      if (correctOriginalKey && originalKey !== correctOriginalKey) {
                        var warningKey = originalKey + ',' + correctOriginalKey;

                        if (warnedAbout[warningKey]) {
                          continue;
                        }

                        warnedAbout[warningKey] = true;

                        error('%s a style property during rerender (%s) when a ' + 'conflicting property is set (%s) can lead to styling bugs. To ' + "avoid this, don't mix shorthand and non-shorthand properties " + 'for the same value; instead, replace the shorthand with ' + 'separate values.', isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
                      }
                    }
                  }
                }

                // For HTML, certain tags should omit their close tag. We keep a list for
                // those special-case tags.
                var omittedCloseTags = {
                  area: true,
                  base: true,
                  br: true,
                  col: true,
                  embed: true,
                  hr: true,
                  img: true,
                  input: true,
                  keygen: true,
                  link: true,
                  meta: true,
                  param: true,
                  source: true,
                  track: true,
                  wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.

                };

                // `omittedCloseTags` except that `menuitem` should still have its closing tag.

                var voidElementTags = _assign({
                  menuitem: true
                }, omittedCloseTags);

                var HTML = '__html';

                function assertValidProps(tag, props) {
                  if (!props) {
                    return;
                  } // Note the use of `==` which checks for null or undefined.


                  if (voidElementTags[tag]) {
                    if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
                      {
                        throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                      }
                    }
                  }

                  if (props.dangerouslySetInnerHTML != null) {
                    if (!(props.children == null)) {
                      {
                        throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
                      }
                    }

                    if (!(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML)) {
                      {
                        throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
                      }
                    }
                  }

                  {
                    if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                      error('A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.');
                    }
                  }

                  if (!(props.style == null || typeof props.style === 'object')) {
                    {
                      throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
                    }
                  }
                }

                function isCustomComponent(tagName, props) {
                  if (tagName.indexOf('-') === -1) {
                    return typeof props.is === 'string';
                  }

                  switch (tagName) {
                    // These are reserved SVG and MathML elements.
                    // We don't mind this list too much because we expect it to never grow.
                    // The alternative is to track the namespace in a few places which is convoluted.
                    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
                    case 'annotation-xml':
                    case 'color-profile':
                    case 'font-face':
                    case 'font-face-src':
                    case 'font-face-uri':
                    case 'font-face-format':
                    case 'font-face-name':
                    case 'missing-glyph':
                      return false;

                    default:
                      return true;
                  }
                }

                // When adding attributes to the HTML or SVG allowed attribute list, be sure to
                // also add them to this module to ensure casing and incorrect name
                // warnings.
                var possibleStandardNames = {
                  // HTML
                  accept: 'accept',
                  acceptcharset: 'acceptCharset',
                  'accept-charset': 'acceptCharset',
                  accesskey: 'accessKey',
                  action: 'action',
                  allowfullscreen: 'allowFullScreen',
                  alt: 'alt',
                  as: 'as',
                  async: 'async',
                  autocapitalize: 'autoCapitalize',
                  autocomplete: 'autoComplete',
                  autocorrect: 'autoCorrect',
                  autofocus: 'autoFocus',
                  autoplay: 'autoPlay',
                  autosave: 'autoSave',
                  capture: 'capture',
                  cellpadding: 'cellPadding',
                  cellspacing: 'cellSpacing',
                  challenge: 'challenge',
                  charset: 'charSet',
                  checked: 'checked',
                  children: 'children',
                  cite: 'cite',
                  class: 'className',
                  classid: 'classID',
                  classname: 'className',
                  cols: 'cols',
                  colspan: 'colSpan',
                  content: 'content',
                  contenteditable: 'contentEditable',
                  contextmenu: 'contextMenu',
                  controls: 'controls',
                  controlslist: 'controlsList',
                  coords: 'coords',
                  crossorigin: 'crossOrigin',
                  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
                  data: 'data',
                  datetime: 'dateTime',
                  default: 'default',
                  defaultchecked: 'defaultChecked',
                  defaultvalue: 'defaultValue',
                  defer: 'defer',
                  dir: 'dir',
                  disabled: 'disabled',
                  disablepictureinpicture: 'disablePictureInPicture',
                  disableremoteplayback: 'disableRemotePlayback',
                  download: 'download',
                  draggable: 'draggable',
                  enctype: 'encType',
                  enterkeyhint: 'enterKeyHint',
                  for: 'htmlFor',
                  form: 'form',
                  formmethod: 'formMethod',
                  formaction: 'formAction',
                  formenctype: 'formEncType',
                  formnovalidate: 'formNoValidate',
                  formtarget: 'formTarget',
                  frameborder: 'frameBorder',
                  headers: 'headers',
                  height: 'height',
                  hidden: 'hidden',
                  high: 'high',
                  href: 'href',
                  hreflang: 'hrefLang',
                  htmlfor: 'htmlFor',
                  httpequiv: 'httpEquiv',
                  'http-equiv': 'httpEquiv',
                  icon: 'icon',
                  id: 'id',
                  innerhtml: 'innerHTML',
                  inputmode: 'inputMode',
                  integrity: 'integrity',
                  is: 'is',
                  itemid: 'itemID',
                  itemprop: 'itemProp',
                  itemref: 'itemRef',
                  itemscope: 'itemScope',
                  itemtype: 'itemType',
                  keyparams: 'keyParams',
                  keytype: 'keyType',
                  kind: 'kind',
                  label: 'label',
                  lang: 'lang',
                  list: 'list',
                  loop: 'loop',
                  low: 'low',
                  manifest: 'manifest',
                  marginwidth: 'marginWidth',
                  marginheight: 'marginHeight',
                  max: 'max',
                  maxlength: 'maxLength',
                  media: 'media',
                  mediagroup: 'mediaGroup',
                  method: 'method',
                  min: 'min',
                  minlength: 'minLength',
                  multiple: 'multiple',
                  muted: 'muted',
                  name: 'name',
                  nomodule: 'noModule',
                  nonce: 'nonce',
                  novalidate: 'noValidate',
                  open: 'open',
                  optimum: 'optimum',
                  pattern: 'pattern',
                  placeholder: 'placeholder',
                  playsinline: 'playsInline',
                  poster: 'poster',
                  preload: 'preload',
                  profile: 'profile',
                  radiogroup: 'radioGroup',
                  readonly: 'readOnly',
                  referrerpolicy: 'referrerPolicy',
                  rel: 'rel',
                  required: 'required',
                  reversed: 'reversed',
                  role: 'role',
                  rows: 'rows',
                  rowspan: 'rowSpan',
                  sandbox: 'sandbox',
                  scope: 'scope',
                  scoped: 'scoped',
                  scrolling: 'scrolling',
                  seamless: 'seamless',
                  selected: 'selected',
                  shape: 'shape',
                  size: 'size',
                  sizes: 'sizes',
                  span: 'span',
                  spellcheck: 'spellCheck',
                  src: 'src',
                  srcdoc: 'srcDoc',
                  srclang: 'srcLang',
                  srcset: 'srcSet',
                  start: 'start',
                  step: 'step',
                  style: 'style',
                  summary: 'summary',
                  tabindex: 'tabIndex',
                  target: 'target',
                  title: 'title',
                  type: 'type',
                  usemap: 'useMap',
                  value: 'value',
                  width: 'width',
                  wmode: 'wmode',
                  wrap: 'wrap',
                  // SVG
                  about: 'about',
                  accentheight: 'accentHeight',
                  'accent-height': 'accentHeight',
                  accumulate: 'accumulate',
                  additive: 'additive',
                  alignmentbaseline: 'alignmentBaseline',
                  'alignment-baseline': 'alignmentBaseline',
                  allowreorder: 'allowReorder',
                  alphabetic: 'alphabetic',
                  amplitude: 'amplitude',
                  arabicform: 'arabicForm',
                  'arabic-form': 'arabicForm',
                  ascent: 'ascent',
                  attributename: 'attributeName',
                  attributetype: 'attributeType',
                  autoreverse: 'autoReverse',
                  azimuth: 'azimuth',
                  basefrequency: 'baseFrequency',
                  baselineshift: 'baselineShift',
                  'baseline-shift': 'baselineShift',
                  baseprofile: 'baseProfile',
                  bbox: 'bbox',
                  begin: 'begin',
                  bias: 'bias',
                  by: 'by',
                  calcmode: 'calcMode',
                  capheight: 'capHeight',
                  'cap-height': 'capHeight',
                  clip: 'clip',
                  clippath: 'clipPath',
                  'clip-path': 'clipPath',
                  clippathunits: 'clipPathUnits',
                  cliprule: 'clipRule',
                  'clip-rule': 'clipRule',
                  color: 'color',
                  colorinterpolation: 'colorInterpolation',
                  'color-interpolation': 'colorInterpolation',
                  colorinterpolationfilters: 'colorInterpolationFilters',
                  'color-interpolation-filters': 'colorInterpolationFilters',
                  colorprofile: 'colorProfile',
                  'color-profile': 'colorProfile',
                  colorrendering: 'colorRendering',
                  'color-rendering': 'colorRendering',
                  contentscripttype: 'contentScriptType',
                  contentstyletype: 'contentStyleType',
                  cursor: 'cursor',
                  cx: 'cx',
                  cy: 'cy',
                  d: 'd',
                  datatype: 'datatype',
                  decelerate: 'decelerate',
                  descent: 'descent',
                  diffuseconstant: 'diffuseConstant',
                  direction: 'direction',
                  display: 'display',
                  divisor: 'divisor',
                  dominantbaseline: 'dominantBaseline',
                  'dominant-baseline': 'dominantBaseline',
                  dur: 'dur',
                  dx: 'dx',
                  dy: 'dy',
                  edgemode: 'edgeMode',
                  elevation: 'elevation',
                  enablebackground: 'enableBackground',
                  'enable-background': 'enableBackground',
                  end: 'end',
                  exponent: 'exponent',
                  externalresourcesrequired: 'externalResourcesRequired',
                  fill: 'fill',
                  fillopacity: 'fillOpacity',
                  'fill-opacity': 'fillOpacity',
                  fillrule: 'fillRule',
                  'fill-rule': 'fillRule',
                  filter: 'filter',
                  filterres: 'filterRes',
                  filterunits: 'filterUnits',
                  floodopacity: 'floodOpacity',
                  'flood-opacity': 'floodOpacity',
                  floodcolor: 'floodColor',
                  'flood-color': 'floodColor',
                  focusable: 'focusable',
                  fontfamily: 'fontFamily',
                  'font-family': 'fontFamily',
                  fontsize: 'fontSize',
                  'font-size': 'fontSize',
                  fontsizeadjust: 'fontSizeAdjust',
                  'font-size-adjust': 'fontSizeAdjust',
                  fontstretch: 'fontStretch',
                  'font-stretch': 'fontStretch',
                  fontstyle: 'fontStyle',
                  'font-style': 'fontStyle',
                  fontvariant: 'fontVariant',
                  'font-variant': 'fontVariant',
                  fontweight: 'fontWeight',
                  'font-weight': 'fontWeight',
                  format: 'format',
                  from: 'from',
                  fx: 'fx',
                  fy: 'fy',
                  g1: 'g1',
                  g2: 'g2',
                  glyphname: 'glyphName',
                  'glyph-name': 'glyphName',
                  glyphorientationhorizontal: 'glyphOrientationHorizontal',
                  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
                  glyphorientationvertical: 'glyphOrientationVertical',
                  'glyph-orientation-vertical': 'glyphOrientationVertical',
                  glyphref: 'glyphRef',
                  gradienttransform: 'gradientTransform',
                  gradientunits: 'gradientUnits',
                  hanging: 'hanging',
                  horizadvx: 'horizAdvX',
                  'horiz-adv-x': 'horizAdvX',
                  horizoriginx: 'horizOriginX',
                  'horiz-origin-x': 'horizOriginX',
                  ideographic: 'ideographic',
                  imagerendering: 'imageRendering',
                  'image-rendering': 'imageRendering',
                  in2: 'in2',
                  in: 'in',
                  inlist: 'inlist',
                  intercept: 'intercept',
                  k1: 'k1',
                  k2: 'k2',
                  k3: 'k3',
                  k4: 'k4',
                  k: 'k',
                  kernelmatrix: 'kernelMatrix',
                  kernelunitlength: 'kernelUnitLength',
                  kerning: 'kerning',
                  keypoints: 'keyPoints',
                  keysplines: 'keySplines',
                  keytimes: 'keyTimes',
                  lengthadjust: 'lengthAdjust',
                  letterspacing: 'letterSpacing',
                  'letter-spacing': 'letterSpacing',
                  lightingcolor: 'lightingColor',
                  'lighting-color': 'lightingColor',
                  limitingconeangle: 'limitingConeAngle',
                  local: 'local',
                  markerend: 'markerEnd',
                  'marker-end': 'markerEnd',
                  markerheight: 'markerHeight',
                  markermid: 'markerMid',
                  'marker-mid': 'markerMid',
                  markerstart: 'markerStart',
                  'marker-start': 'markerStart',
                  markerunits: 'markerUnits',
                  markerwidth: 'markerWidth',
                  mask: 'mask',
                  maskcontentunits: 'maskContentUnits',
                  maskunits: 'maskUnits',
                  mathematical: 'mathematical',
                  mode: 'mode',
                  numoctaves: 'numOctaves',
                  offset: 'offset',
                  opacity: 'opacity',
                  operator: 'operator',
                  order: 'order',
                  orient: 'orient',
                  orientation: 'orientation',
                  origin: 'origin',
                  overflow: 'overflow',
                  overlineposition: 'overlinePosition',
                  'overline-position': 'overlinePosition',
                  overlinethickness: 'overlineThickness',
                  'overline-thickness': 'overlineThickness',
                  paintorder: 'paintOrder',
                  'paint-order': 'paintOrder',
                  panose1: 'panose1',
                  'panose-1': 'panose1',
                  pathlength: 'pathLength',
                  patterncontentunits: 'patternContentUnits',
                  patterntransform: 'patternTransform',
                  patternunits: 'patternUnits',
                  pointerevents: 'pointerEvents',
                  'pointer-events': 'pointerEvents',
                  points: 'points',
                  pointsatx: 'pointsAtX',
                  pointsaty: 'pointsAtY',
                  pointsatz: 'pointsAtZ',
                  prefix: 'prefix',
                  preservealpha: 'preserveAlpha',
                  preserveaspectratio: 'preserveAspectRatio',
                  primitiveunits: 'primitiveUnits',
                  property: 'property',
                  r: 'r',
                  radius: 'radius',
                  refx: 'refX',
                  refy: 'refY',
                  renderingintent: 'renderingIntent',
                  'rendering-intent': 'renderingIntent',
                  repeatcount: 'repeatCount',
                  repeatdur: 'repeatDur',
                  requiredextensions: 'requiredExtensions',
                  requiredfeatures: 'requiredFeatures',
                  resource: 'resource',
                  restart: 'restart',
                  result: 'result',
                  results: 'results',
                  rotate: 'rotate',
                  rx: 'rx',
                  ry: 'ry',
                  scale: 'scale',
                  security: 'security',
                  seed: 'seed',
                  shaperendering: 'shapeRendering',
                  'shape-rendering': 'shapeRendering',
                  slope: 'slope',
                  spacing: 'spacing',
                  specularconstant: 'specularConstant',
                  specularexponent: 'specularExponent',
                  speed: 'speed',
                  spreadmethod: 'spreadMethod',
                  startoffset: 'startOffset',
                  stddeviation: 'stdDeviation',
                  stemh: 'stemh',
                  stemv: 'stemv',
                  stitchtiles: 'stitchTiles',
                  stopcolor: 'stopColor',
                  'stop-color': 'stopColor',
                  stopopacity: 'stopOpacity',
                  'stop-opacity': 'stopOpacity',
                  strikethroughposition: 'strikethroughPosition',
                  'strikethrough-position': 'strikethroughPosition',
                  strikethroughthickness: 'strikethroughThickness',
                  'strikethrough-thickness': 'strikethroughThickness',
                  string: 'string',
                  stroke: 'stroke',
                  strokedasharray: 'strokeDasharray',
                  'stroke-dasharray': 'strokeDasharray',
                  strokedashoffset: 'strokeDashoffset',
                  'stroke-dashoffset': 'strokeDashoffset',
                  strokelinecap: 'strokeLinecap',
                  'stroke-linecap': 'strokeLinecap',
                  strokelinejoin: 'strokeLinejoin',
                  'stroke-linejoin': 'strokeLinejoin',
                  strokemiterlimit: 'strokeMiterlimit',
                  'stroke-miterlimit': 'strokeMiterlimit',
                  strokewidth: 'strokeWidth',
                  'stroke-width': 'strokeWidth',
                  strokeopacity: 'strokeOpacity',
                  'stroke-opacity': 'strokeOpacity',
                  suppresscontenteditablewarning: 'suppressContentEditableWarning',
                  suppresshydrationwarning: 'suppressHydrationWarning',
                  surfacescale: 'surfaceScale',
                  systemlanguage: 'systemLanguage',
                  tablevalues: 'tableValues',
                  targetx: 'targetX',
                  targety: 'targetY',
                  textanchor: 'textAnchor',
                  'text-anchor': 'textAnchor',
                  textdecoration: 'textDecoration',
                  'text-decoration': 'textDecoration',
                  textlength: 'textLength',
                  textrendering: 'textRendering',
                  'text-rendering': 'textRendering',
                  to: 'to',
                  transform: 'transform',
                  typeof: 'typeof',
                  u1: 'u1',
                  u2: 'u2',
                  underlineposition: 'underlinePosition',
                  'underline-position': 'underlinePosition',
                  underlinethickness: 'underlineThickness',
                  'underline-thickness': 'underlineThickness',
                  unicode: 'unicode',
                  unicodebidi: 'unicodeBidi',
                  'unicode-bidi': 'unicodeBidi',
                  unicoderange: 'unicodeRange',
                  'unicode-range': 'unicodeRange',
                  unitsperem: 'unitsPerEm',
                  'units-per-em': 'unitsPerEm',
                  unselectable: 'unselectable',
                  valphabetic: 'vAlphabetic',
                  'v-alphabetic': 'vAlphabetic',
                  values: 'values',
                  vectoreffect: 'vectorEffect',
                  'vector-effect': 'vectorEffect',
                  version: 'version',
                  vertadvy: 'vertAdvY',
                  'vert-adv-y': 'vertAdvY',
                  vertoriginx: 'vertOriginX',
                  'vert-origin-x': 'vertOriginX',
                  vertoriginy: 'vertOriginY',
                  'vert-origin-y': 'vertOriginY',
                  vhanging: 'vHanging',
                  'v-hanging': 'vHanging',
                  videographic: 'vIdeographic',
                  'v-ideographic': 'vIdeographic',
                  viewbox: 'viewBox',
                  viewtarget: 'viewTarget',
                  visibility: 'visibility',
                  vmathematical: 'vMathematical',
                  'v-mathematical': 'vMathematical',
                  vocab: 'vocab',
                  widths: 'widths',
                  wordspacing: 'wordSpacing',
                  'word-spacing': 'wordSpacing',
                  writingmode: 'writingMode',
                  'writing-mode': 'writingMode',
                  x1: 'x1',
                  x2: 'x2',
                  x: 'x',
                  xchannelselector: 'xChannelSelector',
                  xheight: 'xHeight',
                  'x-height': 'xHeight',
                  xlinkactuate: 'xlinkActuate',
                  'xlink:actuate': 'xlinkActuate',
                  xlinkarcrole: 'xlinkArcrole',
                  'xlink:arcrole': 'xlinkArcrole',
                  xlinkhref: 'xlinkHref',
                  'xlink:href': 'xlinkHref',
                  xlinkrole: 'xlinkRole',
                  'xlink:role': 'xlinkRole',
                  xlinkshow: 'xlinkShow',
                  'xlink:show': 'xlinkShow',
                  xlinktitle: 'xlinkTitle',
                  'xlink:title': 'xlinkTitle',
                  xlinktype: 'xlinkType',
                  'xlink:type': 'xlinkType',
                  xmlbase: 'xmlBase',
                  'xml:base': 'xmlBase',
                  xmllang: 'xmlLang',
                  'xml:lang': 'xmlLang',
                  xmlns: 'xmlns',
                  'xml:space': 'xmlSpace',
                  xmlnsxlink: 'xmlnsXlink',
                  'xmlns:xlink': 'xmlnsXlink',
                  xmlspace: 'xmlSpace',
                  y1: 'y1',
                  y2: 'y2',
                  y: 'y',
                  ychannelselector: 'yChannelSelector',
                  z: 'z',
                  zoomandpan: 'zoomAndPan'
                };

                var ariaProperties = {
                  'aria-current': 0,
                  // state
                  'aria-details': 0,
                  'aria-disabled': 0,
                  // state
                  'aria-hidden': 0,
                  // state
                  'aria-invalid': 0,
                  // state
                  'aria-keyshortcuts': 0,
                  'aria-label': 0,
                  'aria-roledescription': 0,
                  // Widget Attributes
                  'aria-autocomplete': 0,
                  'aria-checked': 0,
                  'aria-expanded': 0,
                  'aria-haspopup': 0,
                  'aria-level': 0,
                  'aria-modal': 0,
                  'aria-multiline': 0,
                  'aria-multiselectable': 0,
                  'aria-orientation': 0,
                  'aria-placeholder': 0,
                  'aria-pressed': 0,
                  'aria-readonly': 0,
                  'aria-required': 0,
                  'aria-selected': 0,
                  'aria-sort': 0,
                  'aria-valuemax': 0,
                  'aria-valuemin': 0,
                  'aria-valuenow': 0,
                  'aria-valuetext': 0,
                  // Live Region Attributes
                  'aria-atomic': 0,
                  'aria-busy': 0,
                  'aria-live': 0,
                  'aria-relevant': 0,
                  // Drag-and-Drop Attributes
                  'aria-dropeffect': 0,
                  'aria-grabbed': 0,
                  // Relationship Attributes
                  'aria-activedescendant': 0,
                  'aria-colcount': 0,
                  'aria-colindex': 0,
                  'aria-colspan': 0,
                  'aria-controls': 0,
                  'aria-describedby': 0,
                  'aria-errormessage': 0,
                  'aria-flowto': 0,
                  'aria-labelledby': 0,
                  'aria-owns': 0,
                  'aria-posinset': 0,
                  'aria-rowcount': 0,
                  'aria-rowindex': 0,
                  'aria-rowspan': 0,
                  'aria-setsize': 0
                };

                var warnedProperties = {};
                var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
                var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
                var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

                function validateProperty(tagName, name) {
                  {
                    if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
                      return true;
                    }

                    if (rARIACamel.test(name)) {
                      var ariaName = 'aria-' + name.slice(4).toLowerCase();
                      var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
                      // DOM properties, then it is an invalid aria-* attribute.

                      if (correctName == null) {
                        error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);

                        warnedProperties[name] = true;
                        return true;
                      } // aria-* attributes should be lowercase; suggest the lowercase version.


                      if (name !== correctName) {
                        error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);

                        warnedProperties[name] = true;
                        return true;
                      }
                    }

                    if (rARIA.test(name)) {
                      var lowerCasedName = name.toLowerCase();
                      var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
                      // DOM properties, then it is an invalid aria-* attribute.

                      if (standardName == null) {
                        warnedProperties[name] = true;
                        return false;
                      } // aria-* attributes should be lowercase; suggest the lowercase version.


                      if (name !== standardName) {
                        error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);

                        warnedProperties[name] = true;
                        return true;
                      }
                    }
                  }

                  return true;
                }

                function warnInvalidARIAProps(type, props) {
                  {
                    var invalidProps = [];

                    for (var key in props) {
                      var isValid = validateProperty(type, key);

                      if (!isValid) {
                        invalidProps.push(key);
                      }
                    }

                    var unknownPropString = invalidProps.map(function (prop) {
                      return '`' + prop + '`';
                    }).join(', ');

                    if (invalidProps.length === 1) {
                      error('Invalid aria prop %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);
                    } else if (invalidProps.length > 1) {
                      error('Invalid aria props %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);
                    }
                  }
                }

                function validateProperties(type, props) {
                  if (isCustomComponent(type, props)) {
                    return;
                  }

                  warnInvalidARIAProps(type, props);
                }

                var didWarnValueNull = false;
                function validateProperties$1(type, props) {
                  {
                    if (type !== 'input' && type !== 'textarea' && type !== 'select') {
                      return;
                    }

                    if (props != null && props.value === null && !didWarnValueNull) {
                      didWarnValueNull = true;

                      if (type === 'select' && props.multiple) {
                        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
                      } else {
                        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
                      }
                    }
                  }
                }

                var validateProperty$1 = function () {};

                {
                  var warnedProperties$1 = {};
                  var _hasOwnProperty = Object.prototype.hasOwnProperty;
                  var EVENT_NAME_REGEX = /^on./;
                  var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
                  var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
                  var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

                  validateProperty$1 = function (tagName, name, value, eventRegistry) {
                    if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                      return true;
                    }

                    var lowerCasedName = name.toLowerCase();

                    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
                      error('React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');

                      warnedProperties$1[name] = true;
                      return true;
                    } // We can't rely on the event system being injected on the server.


                    if (eventRegistry != null) {
                      var registrationNameDependencies = eventRegistry.registrationNameDependencies,
                          possibleRegistrationNames = eventRegistry.possibleRegistrationNames;

                      if (registrationNameDependencies.hasOwnProperty(name)) {
                        return true;
                      }

                      var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;

                      if (registrationName != null) {
                        error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);

                        warnedProperties$1[name] = true;
                        return true;
                      }

                      if (EVENT_NAME_REGEX.test(name)) {
                        error('Unknown event handler property `%s`. It will be ignored.', name);

                        warnedProperties$1[name] = true;
                        return true;
                      }
                    } else if (EVENT_NAME_REGEX.test(name)) {
                      // If no event plugins have been injected, we are in a server environment.
                      // So we can't tell if the event name is correct for sure, but we can filter
                      // out known bad ones like `onclick`. We can't suggest a specific replacement though.
                      if (INVALID_EVENT_NAME_REGEX.test(name)) {
                        error('Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
                      }

                      warnedProperties$1[name] = true;
                      return true;
                    } // Let the ARIA attribute hook validate ARIA attributes


                    if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                      return true;
                    }

                    if (lowerCasedName === 'innerhtml') {
                      error('Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');

                      warnedProperties$1[name] = true;
                      return true;
                    }

                    if (lowerCasedName === 'aria') {
                      error('The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');

                      warnedProperties$1[name] = true;
                      return true;
                    }

                    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
                      error('Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);

                      warnedProperties$1[name] = true;
                      return true;
                    }

                    if (typeof value === 'number' && isNaN(value)) {
                      error('Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);

                      warnedProperties$1[name] = true;
                      return true;
                    }

                    var propertyInfo = getPropertyInfo(name);
                    var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.

                    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                      var standardName = possibleStandardNames[lowerCasedName];

                      if (standardName !== name) {
                        error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);

                        warnedProperties$1[name] = true;
                        return true;
                      }
                    } else if (!isReserved && name !== lowerCasedName) {
                      // Unknown attributes should have lowercase casing since that's how they
                      // will be cased anyway with server rendering.
                      error('React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);

                      warnedProperties$1[name] = true;
                      return true;
                    }

                    if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                      if (value) {
                        error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
                      } else {
                        error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                      }

                      warnedProperties$1[name] = true;
                      return true;
                    } // Now that we've validated casing, do not validate
                    // data types for reserved props


                    if (isReserved) {
                      return true;
                    } // Warn when a known attribute is a bad type


                    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                      warnedProperties$1[name] = true;
                      return false;
                    } // Warn when passing the strings 'false' or 'true' into a boolean prop


                    if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                      error('Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);

                      warnedProperties$1[name] = true;
                      return true;
                    }

                    return true;
                  };
                }

                var warnUnknownProperties = function (type, props, eventRegistry) {
                  {
                    var unknownProps = [];

                    for (var key in props) {
                      var isValid = validateProperty$1(type, key, props[key], eventRegistry);

                      if (!isValid) {
                        unknownProps.push(key);
                      }
                    }

                    var unknownPropString = unknownProps.map(function (prop) {
                      return '`' + prop + '`';
                    }).join(', ');

                    if (unknownProps.length === 1) {
                      error('Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);
                    } else if (unknownProps.length > 1) {
                      error('Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);
                    }
                  }
                };

                function validateProperties$2(type, props, eventRegistry) {
                  if (isCustomComponent(type, props)) {
                    return;
                  }

                  warnUnknownProperties(type, props, eventRegistry);
                }

                var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
                var IS_NON_DELEGATED = 1 << 1;
                var IS_CAPTURE_PHASE = 1 << 2;
                var IS_REPLAYED = 1 << 4;
                // set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when
                // we call willDeferLaterForLegacyFBSupport, thus not bailing out
                // will result in endless cycles like an infinite loop.
                // We also don't want to defer during event replaying.

                var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;

                /**
                 * Gets the target node from a native browser event by accounting for
                 * inconsistencies in browser DOM APIs.
                 *
                 * @param {object} nativeEvent Native browser event.
                 * @return {DOMEventTarget} Target node.
                 */

                function getEventTarget(nativeEvent) {
                  // Fallback to nativeEvent.srcElement for IE9
                  // https://github.com/facebook/react/issues/12506
                  var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963

                  if (target.correspondingUseElement) {
                    target = target.correspondingUseElement;
                  } // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
                  // @see http://www.quirksmode.org/js/events_properties.html


                  return target.nodeType === TEXT_NODE ? target.parentNode : target;
                }

                var restoreImpl = null;
                var restoreTarget = null;
                var restoreQueue = null;

                function restoreStateOfTarget(target) {
                  // We perform this translation at the end of the event loop so that we
                  // always receive the correct fiber here
                  var internalInstance = getInstanceFromNode(target);

                  if (!internalInstance) {
                    // Unmounted
                    return;
                  }

                  if (!(typeof restoreImpl === 'function')) {
                    {
                      throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }

                  var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.

                  if (stateNode) {
                    var _props = getFiberCurrentPropsFromNode(stateNode);

                    restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
                  }
                }

                function setRestoreImplementation(impl) {
                  restoreImpl = impl;
                }
                function enqueueStateRestore(target) {
                  if (restoreTarget) {
                    if (restoreQueue) {
                      restoreQueue.push(target);
                    } else {
                      restoreQueue = [target];
                    }
                  } else {
                    restoreTarget = target;
                  }
                }
                function needsStateRestore() {
                  return restoreTarget !== null || restoreQueue !== null;
                }
                function restoreStateIfNeeded() {
                  if (!restoreTarget) {
                    return;
                  }

                  var target = restoreTarget;
                  var queuedTargets = restoreQueue;
                  restoreTarget = null;
                  restoreQueue = null;
                  restoreStateOfTarget(target);

                  if (queuedTargets) {
                    for (var i = 0; i < queuedTargets.length; i++) {
                      restoreStateOfTarget(queuedTargets[i]);
                    }
                  }
                }

                // the renderer. Such as when we're dispatching events or if third party
                // libraries need to call batchedUpdates. Eventually, this API will go away when
                // everything is batched by default. We'll then have a similar API to opt-out of
                // scheduled work and instead do synchronous work.
                // Defaults

                var batchedUpdatesImpl = function (fn, bookkeeping) {
                  return fn(bookkeeping);
                };

                var discreteUpdatesImpl = function (fn, a, b, c, d) {
                  return fn(a, b, c, d);
                };

                var flushDiscreteUpdatesImpl = function () {};

                var batchedEventUpdatesImpl = batchedUpdatesImpl;
                var isInsideEventHandler = false;
                var isBatchingEventUpdates = false;

                function finishEventHandler() {
                  // Here we wait until all updates have propagated, which is important
                  // when using controlled components within layers:
                  // https://github.com/facebook/react/issues/1698
                  // Then we restore state of any controlled component.
                  var controlledComponentsHavePendingUpdates = needsStateRestore();

                  if (controlledComponentsHavePendingUpdates) {
                    // If a controlled event was fired, we may need to restore the state of
                    // the DOM node back to the controlled value. This is necessary when React
                    // bails out of the update without touching the DOM.
                    flushDiscreteUpdatesImpl();
                    restoreStateIfNeeded();
                  }
                }

                function batchedUpdates(fn, bookkeeping) {
                  if (isInsideEventHandler) {
                    // If we are currently inside another batch, we need to wait until it
                    // fully completes before restoring state.
                    return fn(bookkeeping);
                  }

                  isInsideEventHandler = true;

                  try {
                    return batchedUpdatesImpl(fn, bookkeeping);
                  } finally {
                    isInsideEventHandler = false;
                    finishEventHandler();
                  }
                }
                function batchedEventUpdates(fn, a, b) {
                  if (isBatchingEventUpdates) {
                    // If we are currently inside another batch, we need to wait until it
                    // fully completes before restoring state.
                    return fn(a, b);
                  }

                  isBatchingEventUpdates = true;

                  try {
                    return batchedEventUpdatesImpl(fn, a, b);
                  } finally {
                    isBatchingEventUpdates = false;
                    finishEventHandler();
                  }
                }
                function discreteUpdates(fn, a, b, c, d) {
                  var prevIsInsideEventHandler = isInsideEventHandler;
                  isInsideEventHandler = true;

                  try {
                    return discreteUpdatesImpl(fn, a, b, c, d);
                  } finally {
                    isInsideEventHandler = prevIsInsideEventHandler;

                    if (!isInsideEventHandler) {
                      finishEventHandler();
                    }
                  }
                }
                function flushDiscreteUpdatesIfNeeded(timeStamp) {
                  {
                    if (!isInsideEventHandler) {
                      flushDiscreteUpdatesImpl();
                    }
                  }
                }
                function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
                  batchedUpdatesImpl = _batchedUpdatesImpl;
                  discreteUpdatesImpl = _discreteUpdatesImpl;
                  flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
                  batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
                }

                function isInteractive(tag) {
                  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
                }

                function shouldPreventMouseEvent(name, type, props) {
                  switch (name) {
                    case 'onClick':
                    case 'onClickCapture':
                    case 'onDoubleClick':
                    case 'onDoubleClickCapture':
                    case 'onMouseDown':
                    case 'onMouseDownCapture':
                    case 'onMouseMove':
                    case 'onMouseMoveCapture':
                    case 'onMouseUp':
                    case 'onMouseUpCapture':
                    case 'onMouseEnter':
                      return !!(props.disabled && isInteractive(type));

                    default:
                      return false;
                  }
                }
                /**
                 * @param {object} inst The instance, which is the source of events.
                 * @param {string} registrationName Name of listener (e.g. `onClick`).
                 * @return {?function} The stored callback.
                 */

                function getListener(inst, registrationName) {
                  var stateNode = inst.stateNode;

                  if (stateNode === null) {
                    // Work in progress (ex: onload events in incremental mode).
                    return null;
                  }

                  var props = getFiberCurrentPropsFromNode(stateNode);

                  if (props === null) {
                    // Work in progress.
                    return null;
                  }

                  var listener = props[registrationName];

                  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
                    return null;
                  }

                  if (!(!listener || typeof listener === 'function')) {
                    {
                      throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
                    }
                  }

                  return listener;
                }

                var passiveBrowserEventsSupported = false; // Check if browser support events with passive listeners
                // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support

                if (canUseDOM) {
                  try {
                    var options = {}; // $FlowFixMe: Ignore Flow complaining about needing a value

                    Object.defineProperty(options, 'passive', {
                      get: function () {
                        passiveBrowserEventsSupported = true;
                      }
                    });
                    window.addEventListener('test', options, options);
                    window.removeEventListener('test', options, options);
                  } catch (e) {
                    passiveBrowserEventsSupported = false;
                  }
                }

                function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
                  var funcArgs = Array.prototype.slice.call(arguments, 3);

                  try {
                    func.apply(context, funcArgs);
                  } catch (error) {
                    this.onError(error);
                  }
                }

                var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;

                {
                  // In DEV mode, we swap out invokeGuardedCallback for a special version
                  // that plays more nicely with the browser's DevTools. The idea is to preserve
                  // "Pause on exceptions" behavior. Because React wraps all user-provided
                  // functions in invokeGuardedCallback, and the production version of
                  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
                  // like caught exceptions, and the DevTools won't pause unless the developer
                  // takes the extra step of enabling pause on caught exceptions. This is
                  // unintuitive, though, because even though React has caught the error, from
                  // the developer's perspective, the error is uncaught.
                  //
                  // To preserve the expected "Pause on exceptions" behavior, we don't use a
                  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
                  // DOM node, and call the user-provided callback from inside an event handler
                  // for that fake event. If the callback throws, the error is "captured" using
                  // a global event handler. But because the error happens in a different
                  // event loop context, it does not interrupt the normal program flow.
                  // Effectively, this gives us try-catch behavior without actually using
                  // try-catch. Neat!
                  // Check that the browser supports the APIs we need to implement our special
                  // DEV version of invokeGuardedCallback
                  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
                    var fakeNode = document.createElement('react');

                    invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
                      // If document doesn't exist we know for sure we will crash in this method
                      // when we call document.createEvent(). However this can cause confusing
                      // errors: https://github.com/facebookincubator/create-react-app/issues/3482
                      // So we preemptively throw with a better message instead.
                      if (!(typeof document !== 'undefined')) {
                        {
                          throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                        }
                      }

                      var evt = document.createEvent('Event');
                      var didCall = false; // Keeps track of whether the user-provided callback threw an error. We
                      // set this to true at the beginning, then set it to false right after
                      // calling the function. If the function errors, `didError` will never be
                      // set to false. This strategy works even if the browser is flaky and
                      // fails to call our global error handler, because it doesn't rely on
                      // the error event at all.

                      var didError = true; // Keeps track of the value of window.event so that we can reset it
                      // during the callback to let user code access window.event in the
                      // browsers that support it.

                      var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
                      // dispatching: https://github.com/facebook/react/issues/13688

                      var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');

                      function restoreAfterDispatch() {
                        // We immediately remove the callback from event listeners so that
                        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
                        // nested call would trigger the fake event handlers of any call higher
                        // in the stack.
                        fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
                        // window.event assignment in both IE <= 10 as they throw an error
                        // "Member not found" in strict mode, and in Firefox which does not
                        // support window.event.

                        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
                          window.event = windowEvent;
                        }
                      } // Create an event handler for our fake event. We will synchronously
                      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
                      // call the user-provided callback.


                      var funcArgs = Array.prototype.slice.call(arguments, 3);

                      function callCallback() {
                        didCall = true;
                        restoreAfterDispatch();
                        func.apply(context, funcArgs);
                        didError = false;
                      } // Create a global error event handler. We use this to capture the value
                      // that was thrown. It's possible that this error handler will fire more
                      // than once; for example, if non-React code also calls `dispatchEvent`
                      // and a handler for that event throws. We should be resilient to most of
                      // those cases. Even if our error event handler fires more than once, the
                      // last error event is always used. If the callback actually does error,
                      // we know that the last error event is the correct one, because it's not
                      // possible for anything else to have happened in between our callback
                      // erroring and the code that follows the `dispatchEvent` call below. If
                      // the callback doesn't error, but the error event was fired, we know to
                      // ignore it because `didError` will be false, as described above.


                      var error; // Use this to track whether the error event is ever called.

                      var didSetError = false;
                      var isCrossOriginError = false;

                      function handleWindowError(event) {
                        error = event.error;
                        didSetError = true;

                        if (error === null && event.colno === 0 && event.lineno === 0) {
                          isCrossOriginError = true;
                        }

                        if (event.defaultPrevented) {
                          // Some other error handler has prevented default.
                          // Browsers silence the error report if this happens.
                          // We'll remember this to later decide whether to log it or not.
                          if (error != null && typeof error === 'object') {
                            try {
                              error._suppressLogging = true;
                            } catch (inner) {// Ignore.
                            }
                          }
                        }
                      } // Create a fake event type.


                      var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers

                      window.addEventListener('error', handleWindowError);
                      fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
                      // errors, it will trigger our global error handler.

                      evt.initEvent(evtType, false, false);
                      fakeNode.dispatchEvent(evt);

                      if (windowEventDescriptor) {
                        Object.defineProperty(window, 'event', windowEventDescriptor);
                      }

                      if (didCall && didError) {
                        if (!didSetError) {
                          // The callback errored, but the error event never fired.
                          error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
                        } else if (isCrossOriginError) {
                          error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');
                        }

                        this.onError(error);
                      } // Remove our event listeners


                      window.removeEventListener('error', handleWindowError);

                      if (!didCall) {
                        // Something went really wrong, and our event was not dispatched.
                        // https://github.com/facebook/react/issues/16734
                        // https://github.com/facebook/react/issues/16585
                        // Fall back to the production implementation.
                        restoreAfterDispatch();
                        return invokeGuardedCallbackProd.apply(this, arguments);
                      }
                    };
                  }
                }

                var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;

                var hasError = false;
                var caughtError = null; // Used by event system to capture/rethrow the first error.

                var hasRethrowError = false;
                var rethrowError = null;
                var reporter = {
                  onError: function (error) {
                    hasError = true;
                    caughtError = error;
                  }
                };
                /**
                 * Call a function while guarding against errors that happens within it.
                 * Returns an error if it throws, otherwise null.
                 *
                 * In production, this is implemented using a try-catch. The reason we don't
                 * use a try-catch directly is so that we can swap out a different
                 * implementation in DEV mode.
                 *
                 * @param {String} name of the guard to use for logging or debugging
                 * @param {Function} func The function to invoke
                 * @param {*} context The context to use when calling the function
                 * @param {...*} args Arguments for function
                 */

                function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
                  hasError = false;
                  caughtError = null;
                  invokeGuardedCallbackImpl$1.apply(reporter, arguments);
                }
                /**
                 * Same as invokeGuardedCallback, but instead of returning an error, it stores
                 * it in a global so it can be rethrown by `rethrowCaughtError` later.
                 * TODO: See if caughtError and rethrowError can be unified.
                 *
                 * @param {String} name of the guard to use for logging or debugging
                 * @param {Function} func The function to invoke
                 * @param {*} context The context to use when calling the function
                 * @param {...*} args Arguments for function
                 */

                function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
                  invokeGuardedCallback.apply(this, arguments);

                  if (hasError) {
                    var error = clearCaughtError();

                    if (!hasRethrowError) {
                      hasRethrowError = true;
                      rethrowError = error;
                    }
                  }
                }
                /**
                 * During execution of guarded functions we will capture the first error which
                 * we will rethrow to be handled by the top level error handler.
                 */

                function rethrowCaughtError() {
                  if (hasRethrowError) {
                    var error = rethrowError;
                    hasRethrowError = false;
                    rethrowError = null;
                    throw error;
                  }
                }
                function hasCaughtError() {
                  return hasError;
                }
                function clearCaughtError() {
                  if (hasError) {
                    var error = caughtError;
                    hasError = false;
                    caughtError = null;
                    return error;
                  } else {
                    {
                      {
                        throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                  }
                }

                /**
                 * `ReactInstanceMap` maintains a mapping from a public facing stateful
                 * instance (key) and the internal representation (value). This allows public
                 * methods to accept the user facing instance as an argument and map them back
                 * to internal methods.
                 *
                 * Note that this module is currently shared and assumed to be stateless.
                 * If this becomes an actual Map, that will break.
                 */
                function get(key) {
                  return key._reactInternals;
                }
                function has(key) {
                  return key._reactInternals !== undefined;
                }
                function set(key, value) {
                  key._reactInternals = value;
                }

                // Don't change these two values. They're used by React Dev Tools.
                var NoFlags =
                /*                      */
                0;
                var PerformedWork =
                /*                */
                1; // You can change the rest (and add more).

                var Placement =
                /*                    */
                2;
                var Update =
                /*                       */
                4;
                var PlacementAndUpdate =
                /*           */
                6;
                var Deletion =
                /*                     */
                8;
                var ContentReset =
                /*                 */
                16;
                var Callback =
                /*                     */
                32;
                var DidCapture =
                /*                   */
                64;
                var Ref =
                /*                          */
                128;
                var Snapshot =
                /*                     */
                256;
                var Passive =
                /*                      */
                512; // TODO (effects) Remove this bit once the new reconciler is synced to the old.

                var PassiveUnmountPendingDev =
                /*     */
                8192;
                var Hydrating =
                /*                    */
                1024;
                var HydratingAndUpdate =
                /*           */
                1028; // Passive & Update & Callback & Ref & Snapshot

                var LifecycleEffectMask =
                /*          */
                932; // Union of all host effects

                var HostEffectMask =
                /*               */
                2047; // These are not really side effects, but we still reuse this field.

                var Incomplete =
                /*                   */
                2048;
                var ShouldCapture =
                /*                */
                4096;
                var ForceUpdateForLegacySuspense =
                /* */
                16384; // Static tags describe aspects of a fiber that are not specific to a render,

                var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
                function getNearestMountedFiber(fiber) {
                  var node = fiber;
                  var nearestMounted = fiber;

                  if (!fiber.alternate) {
                    // If there is no alternate, this might be a new tree that isn't inserted
                    // yet. If it is, then it will have a pending insertion effect on it.
                    var nextNode = node;

                    do {
                      node = nextNode;

                      if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                        // This is an insertion or in-progress hydration. The nearest possible
                        // mounted fiber is the parent but we need to continue to figure out
                        // if that one is still mounted.
                        nearestMounted = node.return;
                      }

                      nextNode = node.return;
                    } while (nextNode);
                  } else {
                    while (node.return) {
                      node = node.return;
                    }
                  }

                  if (node.tag === HostRoot) {
                    // TODO: Check if this was a nested HostRoot when used with
                    // renderContainerIntoSubtree.
                    return nearestMounted;
                  } // If we didn't hit the root, that means that we're in an disconnected tree
                  // that has been unmounted.


                  return null;
                }
                function getSuspenseInstanceFromFiber(fiber) {
                  if (fiber.tag === SuspenseComponent) {
                    var suspenseState = fiber.memoizedState;

                    if (suspenseState === null) {
                      var current = fiber.alternate;

                      if (current !== null) {
                        suspenseState = current.memoizedState;
                      }
                    }

                    if (suspenseState !== null) {
                      return suspenseState.dehydrated;
                    }
                  }

                  return null;
                }
                function getContainerFromFiber(fiber) {
                  return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
                }
                function isFiberMounted(fiber) {
                  return getNearestMountedFiber(fiber) === fiber;
                }
                function isMounted(component) {
                  {
                    var owner = ReactCurrentOwner.current;

                    if (owner !== null && owner.tag === ClassComponent) {
                      var ownerFiber = owner;
                      var instance = ownerFiber.stateNode;

                      if (!instance._warnedAboutRefsInRender) {
                        error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component');
                      }

                      instance._warnedAboutRefsInRender = true;
                    }
                  }

                  var fiber = get(component);

                  if (!fiber) {
                    return false;
                  }

                  return getNearestMountedFiber(fiber) === fiber;
                }

                function assertIsMounted(fiber) {
                  if (!(getNearestMountedFiber(fiber) === fiber)) {
                    {
                      throw Error("Unable to find node on an unmounted component.");
                    }
                  }
                }

                function findCurrentFiberUsingSlowPath(fiber) {
                  var alternate = fiber.alternate;

                  if (!alternate) {
                    // If there is no alternate, then we only need to check if it is mounted.
                    var nearestMounted = getNearestMountedFiber(fiber);

                    if (!(nearestMounted !== null)) {
                      {
                        throw Error("Unable to find node on an unmounted component.");
                      }
                    }

                    if (nearestMounted !== fiber) {
                      return null;
                    }

                    return fiber;
                  } // If we have two possible branches, we'll walk backwards up to the root
                  // to see what path the root points to. On the way we may hit one of the
                  // special cases and we'll deal with them.


                  var a = fiber;
                  var b = alternate;

                  while (true) {
                    var parentA = a.return;

                    if (parentA === null) {
                      // We're at the root.
                      break;
                    }

                    var parentB = parentA.alternate;

                    if (parentB === null) {
                      // There is no alternate. This is an unusual case. Currently, it only
                      // happens when a Suspense component is hidden. An extra fragment fiber
                      // is inserted in between the Suspense fiber and its children. Skip
                      // over this extra fragment fiber and proceed to the next parent.
                      var nextParent = parentA.return;

                      if (nextParent !== null) {
                        a = b = nextParent;
                        continue;
                      } // If there's no parent, we're at the root.


                      break;
                    } // If both copies of the parent fiber point to the same child, we can
                    // assume that the child is current. This happens when we bailout on low
                    // priority: the bailed out fiber's child reuses the current child.


                    if (parentA.child === parentB.child) {
                      var child = parentA.child;

                      while (child) {
                        if (child === a) {
                          // We've determined that A is the current branch.
                          assertIsMounted(parentA);
                          return fiber;
                        }

                        if (child === b) {
                          // We've determined that B is the current branch.
                          assertIsMounted(parentA);
                          return alternate;
                        }

                        child = child.sibling;
                      } // We should never have an alternate for any mounting node. So the only
                      // way this could possibly happen is if this was unmounted, if at all.


                      {
                        {
                          throw Error("Unable to find node on an unmounted component.");
                        }
                      }
                    }

                    if (a.return !== b.return) {
                      // The return pointer of A and the return pointer of B point to different
                      // fibers. We assume that return pointers never criss-cross, so A must
                      // belong to the child set of A.return, and B must belong to the child
                      // set of B.return.
                      a = parentA;
                      b = parentB;
                    } else {
                      // The return pointers point to the same fiber. We'll have to use the
                      // default, slow path: scan the child sets of each parent alternate to see
                      // which child belongs to which set.
                      //
                      // Search parent A's child set
                      var didFindChild = false;
                      var _child = parentA.child;

                      while (_child) {
                        if (_child === a) {
                          didFindChild = true;
                          a = parentA;
                          b = parentB;
                          break;
                        }

                        if (_child === b) {
                          didFindChild = true;
                          b = parentA;
                          a = parentB;
                          break;
                        }

                        _child = _child.sibling;
                      }

                      if (!didFindChild) {
                        // Search parent B's child set
                        _child = parentB.child;

                        while (_child) {
                          if (_child === a) {
                            didFindChild = true;
                            a = parentB;
                            b = parentA;
                            break;
                          }

                          if (_child === b) {
                            didFindChild = true;
                            b = parentB;
                            a = parentA;
                            break;
                          }

                          _child = _child.sibling;
                        }

                        if (!didFindChild) {
                          {
                            throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                          }
                        }
                      }
                    }

                    if (!(a.alternate === b)) {
                      {
                        throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                  } // If the root is not a host container, we're in a disconnected tree. I.e.
                  // unmounted.


                  if (!(a.tag === HostRoot)) {
                    {
                      throw Error("Unable to find node on an unmounted component.");
                    }
                  }

                  if (a.stateNode.current === a) {
                    // We've determined that A is the current branch.
                    return fiber;
                  } // Otherwise B has to be current branch.


                  return alternate;
                }
                function findCurrentHostFiber(parent) {
                  var currentParent = findCurrentFiberUsingSlowPath(parent);

                  if (!currentParent) {
                    return null;
                  } // Next we'll drill down this component to find the first HostComponent/Text.


                  var node = currentParent;

                  while (true) {
                    if (node.tag === HostComponent || node.tag === HostText) {
                      return node;
                    } else if (node.child) {
                      node.child.return = node;
                      node = node.child;
                      continue;
                    }

                    if (node === currentParent) {
                      return null;
                    }

                    while (!node.sibling) {
                      if (!node.return || node.return === currentParent) {
                        return null;
                      }

                      node = node.return;
                    }

                    node.sibling.return = node.return;
                    node = node.sibling;
                  } // Flow needs the return null here, but ESLint complains about it.
                  // eslint-disable-next-line no-unreachable


                  return null;
                }
                function findCurrentHostFiberWithNoPortals(parent) {
                  var currentParent = findCurrentFiberUsingSlowPath(parent);

                  if (!currentParent) {
                    return null;
                  } // Next we'll drill down this component to find the first HostComponent/Text.


                  var node = currentParent;

                  while (true) {
                    if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) {
                      return node;
                    } else if (node.child && node.tag !== HostPortal) {
                      node.child.return = node;
                      node = node.child;
                      continue;
                    }

                    if (node === currentParent) {
                      return null;
                    }

                    while (!node.sibling) {
                      if (!node.return || node.return === currentParent) {
                        return null;
                      }

                      node = node.return;
                    }

                    node.sibling.return = node.return;
                    node = node.sibling;
                  } // Flow needs the return null here, but ESLint complains about it.
                  // eslint-disable-next-line no-unreachable


                  return null;
                }
                function doesFiberContain(parentFiber, childFiber) {
                  var node = childFiber;
                  var parentFiberAlternate = parentFiber.alternate;

                  while (node !== null) {
                    if (node === parentFiber || node === parentFiberAlternate) {
                      return true;
                    }

                    node = node.return;
                  }

                  return false;
                }

                var attemptUserBlockingHydration;
                function setAttemptUserBlockingHydration(fn) {
                  attemptUserBlockingHydration = fn;
                }
                var attemptContinuousHydration;
                function setAttemptContinuousHydration(fn) {
                  attemptContinuousHydration = fn;
                }
                var attemptHydrationAtCurrentPriority;
                function setAttemptHydrationAtCurrentPriority(fn) {
                  attemptHydrationAtCurrentPriority = fn;
                }
                var attemptHydrationAtPriority;
                function setAttemptHydrationAtPriority(fn) {
                  attemptHydrationAtPriority = fn;
                } // TODO: Upgrade this definition once we're on a newer version of Flow that
                var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.

                var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
                // if the last target was dehydrated.

                var queuedFocus = null;
                var queuedDrag = null;
                var queuedMouse = null; // For pointer events there can be one latest event per pointerId.

                var queuedPointers = new Map();
                var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.

                var queuedExplicitHydrationTargets = [];
                function hasQueuedDiscreteEvents() {
                  return queuedDiscreteEvents.length > 0;
                }
                var discreteReplayableEvents = ['mousedown', 'mouseup', 'touchcancel', 'touchend', 'touchstart', 'auxclick', 'dblclick', 'pointercancel', 'pointerdown', 'pointerup', 'dragend', 'dragstart', 'drop', 'compositionend', 'compositionstart', 'keydown', 'keypress', 'keyup', 'input', 'textInput', // Intentionally camelCase
                'copy', 'cut', 'paste', 'click', 'change', 'contextmenu', 'reset', 'submit'];
                function isReplayableDiscreteEvent(eventType) {
                  return discreteReplayableEvents.indexOf(eventType) > -1;
                }

                function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
                  return {
                    blockedOn: blockedOn,
                    domEventName: domEventName,
                    eventSystemFlags: eventSystemFlags | IS_REPLAYED,
                    nativeEvent: nativeEvent,
                    targetContainers: [targetContainer]
                  };
                }

                function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
                  var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
                  queuedDiscreteEvents.push(queuedEvent);
                } // Resets the replaying for this type of continuous event to no event.

                function clearIfContinuousEvent(domEventName, nativeEvent) {
                  switch (domEventName) {
                    case 'focusin':
                    case 'focusout':
                      queuedFocus = null;
                      break;

                    case 'dragenter':
                    case 'dragleave':
                      queuedDrag = null;
                      break;

                    case 'mouseover':
                    case 'mouseout':
                      queuedMouse = null;
                      break;

                    case 'pointerover':
                    case 'pointerout':
                      {
                        var pointerId = nativeEvent.pointerId;
                        queuedPointers.delete(pointerId);
                        break;
                      }

                    case 'gotpointercapture':
                    case 'lostpointercapture':
                      {
                        var _pointerId = nativeEvent.pointerId;
                        queuedPointerCaptures.delete(_pointerId);
                        break;
                      }
                  }
                }

                function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
                  if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
                    var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);

                    if (blockedOn !== null) {
                      var _fiber2 = getInstanceFromNode(blockedOn);

                      if (_fiber2 !== null) {
                        // Attempt to increase the priority of this target.
                        attemptContinuousHydration(_fiber2);
                      }
                    }

                    return queuedEvent;
                  } // If we have already queued this exact event, then it's because
                  // the different event systems have different DOM event listeners.
                  // We can accumulate the flags, and the targetContainers, and
                  // store a single event to be replayed.


                  existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
                  var targetContainers = existingQueuedEvent.targetContainers;

                  if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
                    targetContainers.push(targetContainer);
                  }

                  return existingQueuedEvent;
                }

                function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
                  // These set relatedTarget to null because the replayed event will be treated as if we
                  // moved from outside the window (no target) onto the target once it hydrates.
                  // Instead of mutating we could clone the event.
                  switch (domEventName) {
                    case 'focusin':
                      {
                        var focusEvent = nativeEvent;
                        queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                        return true;
                      }

                    case 'dragenter':
                      {
                        var dragEvent = nativeEvent;
                        queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                        return true;
                      }

                    case 'mouseover':
                      {
                        var mouseEvent = nativeEvent;
                        queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                        return true;
                      }

                    case 'pointerover':
                      {
                        var pointerEvent = nativeEvent;
                        var pointerId = pointerEvent.pointerId;
                        queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                        return true;
                      }

                    case 'gotpointercapture':
                      {
                        var _pointerEvent = nativeEvent;
                        var _pointerId2 = _pointerEvent.pointerId;
                        queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                        return true;
                      }
                  }

                  return false;
                } // Check if this target is unblocked. Returns true if it's unblocked.

                function attemptExplicitHydrationTarget(queuedTarget) {
                  // TODO: This function shares a lot of logic with attemptToDispatchEvent.
                  // Try to unify them. It's a bit tricky since it would require two return
                  // values.
                  var targetInst = getClosestInstanceFromNode(queuedTarget.target);

                  if (targetInst !== null) {
                    var nearestMounted = getNearestMountedFiber(targetInst);

                    if (nearestMounted !== null) {
                      var tag = nearestMounted.tag;

                      if (tag === SuspenseComponent) {
                        var instance = getSuspenseInstanceFromFiber(nearestMounted);

                        if (instance !== null) {
                          // We're blocked on hydrating this boundary.
                          // Increase its priority.
                          queuedTarget.blockedOn = instance;
                          attemptHydrationAtPriority(queuedTarget.lanePriority, function () {
                            Scheduler.unstable_runWithPriority(queuedTarget.priority, function () {
                              attemptHydrationAtCurrentPriority(nearestMounted);
                            });
                          });
                          return;
                        }
                      } else if (tag === HostRoot) {
                        var root = nearestMounted.stateNode;

                        if (root.hydrate) {
                          queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
                          // a root other than sync.

                          return;
                        }
                      }
                    }
                  }

                  queuedTarget.blockedOn = null;
                }

                function attemptReplayContinuousQueuedEvent(queuedEvent) {
                  if (queuedEvent.blockedOn !== null) {
                    return false;
                  }

                  var targetContainers = queuedEvent.targetContainers;

                  while (targetContainers.length > 0) {
                    var targetContainer = targetContainers[0];
                    var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);

                    if (nextBlockedOn !== null) {
                      // We're still blocked. Try again later.
                      var _fiber3 = getInstanceFromNode(nextBlockedOn);

                      if (_fiber3 !== null) {
                        attemptContinuousHydration(_fiber3);
                      }

                      queuedEvent.blockedOn = nextBlockedOn;
                      return false;
                    } // This target container was successfully dispatched. Try the next.


                    targetContainers.shift();
                  }

                  return true;
                }

                function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
                  if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
                    map.delete(key);
                  }
                }

                function replayUnblockedEvents() {
                  hasScheduledReplayAttempt = false; // First replay discrete events.

                  while (queuedDiscreteEvents.length > 0) {
                    var nextDiscreteEvent = queuedDiscreteEvents[0];

                    if (nextDiscreteEvent.blockedOn !== null) {
                      // We're still blocked.
                      // Increase the priority of this boundary to unblock
                      // the next discrete event.
                      var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);

                      if (_fiber4 !== null) {
                        attemptUserBlockingHydration(_fiber4);
                      }

                      break;
                    }

                    var targetContainers = nextDiscreteEvent.targetContainers;

                    while (targetContainers.length > 0) {
                      var targetContainer = targetContainers[0];
                      var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);

                      if (nextBlockedOn !== null) {
                        // We're still blocked. Try again later.
                        nextDiscreteEvent.blockedOn = nextBlockedOn;
                        break;
                      } // This target container was successfully dispatched. Try the next.


                      targetContainers.shift();
                    }

                    if (nextDiscreteEvent.blockedOn === null) {
                      // We've successfully replayed the first event. Let's try the next one.
                      queuedDiscreteEvents.shift();
                    }
                  } // Next replay any continuous events.


                  if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
                    queuedFocus = null;
                  }

                  if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
                    queuedDrag = null;
                  }

                  if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
                    queuedMouse = null;
                  }

                  queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
                  queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
                }

                function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
                  if (queuedEvent.blockedOn === unblocked) {
                    queuedEvent.blockedOn = null;

                    if (!hasScheduledReplayAttempt) {
                      hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
                      // now unblocked. This first might not actually be unblocked yet.
                      // We could check it early to avoid scheduling an unnecessary callback.

                      Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
                    }
                  }
                }

                function retryIfBlockedOn(unblocked) {
                  // Mark anything that was blocked on this as no longer blocked
                  // and eligible for a replay.
                  if (queuedDiscreteEvents.length > 0) {
                    scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
                    // worth it because we expect very few discrete events to queue up and once
                    // we are actually fully unblocked it will be fast to replay them.

                    for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                      var queuedEvent = queuedDiscreteEvents[i];

                      if (queuedEvent.blockedOn === unblocked) {
                        queuedEvent.blockedOn = null;
                      }
                    }
                  }

                  if (queuedFocus !== null) {
                    scheduleCallbackIfUnblocked(queuedFocus, unblocked);
                  }

                  if (queuedDrag !== null) {
                    scheduleCallbackIfUnblocked(queuedDrag, unblocked);
                  }

                  if (queuedMouse !== null) {
                    scheduleCallbackIfUnblocked(queuedMouse, unblocked);
                  }

                  var unblock = function (queuedEvent) {
                    return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
                  };

                  queuedPointers.forEach(unblock);
                  queuedPointerCaptures.forEach(unblock);

                  for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
                    var queuedTarget = queuedExplicitHydrationTargets[_i];

                    if (queuedTarget.blockedOn === unblocked) {
                      queuedTarget.blockedOn = null;
                    }
                  }

                  while (queuedExplicitHydrationTargets.length > 0) {
                    var nextExplicitTarget = queuedExplicitHydrationTargets[0];

                    if (nextExplicitTarget.blockedOn !== null) {
                      // We're still blocked.
                      break;
                    } else {
                      attemptExplicitHydrationTarget(nextExplicitTarget);

                      if (nextExplicitTarget.blockedOn === null) {
                        // We're unblocked.
                        queuedExplicitHydrationTargets.shift();
                      }
                    }
                  }
                }

                var DiscreteEvent = 0;
                var UserBlockingEvent = 1;
                var ContinuousEvent = 2;

                /**
                 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
                 *
                 * @param {string} styleProp
                 * @param {string} eventName
                 * @returns {object}
                 */

                function makePrefixMap(styleProp, eventName) {
                  var prefixes = {};
                  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
                  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
                  prefixes['Moz' + styleProp] = 'moz' + eventName;
                  return prefixes;
                }
                /**
                 * A list of event names to a configurable list of vendor prefixes.
                 */

                var vendorPrefixes = {
                  animationend: makePrefixMap('Animation', 'AnimationEnd'),
                  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
                  animationstart: makePrefixMap('Animation', 'AnimationStart'),
                  transitionend: makePrefixMap('Transition', 'TransitionEnd')
                };
                /**
                 * Event names that have already been detected and prefixed (if applicable).
                 */

                var prefixedEventNames = {};
                /**
                 * Element to check for prefixes on.
                 */

                var style = {};
                /**
                 * Bootstrap if a DOM exists.
                 */

                if (canUseDOM) {
                  style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
                  // the un-prefixed "animation" and "transition" properties are defined on the
                  // style object but the events that fire will still be prefixed, so we need
                  // to check if the un-prefixed events are usable, and if not remove them from the map.

                  if (!('AnimationEvent' in window)) {
                    delete vendorPrefixes.animationend.animation;
                    delete vendorPrefixes.animationiteration.animation;
                    delete vendorPrefixes.animationstart.animation;
                  } // Same as above


                  if (!('TransitionEvent' in window)) {
                    delete vendorPrefixes.transitionend.transition;
                  }
                }
                /**
                 * Attempts to determine the correct vendor prefixed event name.
                 *
                 * @param {string} eventName
                 * @returns {string}
                 */

                function getVendorPrefixedEventName(eventName) {
                  if (prefixedEventNames[eventName]) {
                    return prefixedEventNames[eventName];
                  } else if (!vendorPrefixes[eventName]) {
                    return eventName;
                  }

                  var prefixMap = vendorPrefixes[eventName];

                  for (var styleProp in prefixMap) {
                    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                      return prefixedEventNames[eventName] = prefixMap[styleProp];
                    }
                  }

                  return eventName;
                }

                var ANIMATION_END = getVendorPrefixedEventName('animationend');
                var ANIMATION_ITERATION = getVendorPrefixedEventName('animationiteration');
                var ANIMATION_START = getVendorPrefixedEventName('animationstart');
                var TRANSITION_END = getVendorPrefixedEventName('transitionend');

                var topLevelEventsToReactNames = new Map();
                var eventPriorities = new Map(); // We store most of the events in this module in pairs of two strings so we can re-use
                // the code required to apply the same logic for event prioritization and that of the
                // SimpleEventPlugin. This complicates things slightly, but the aim is to reduce code
                // duplication (for which there would be quite a bit). For the events that are not needed
                // for the SimpleEventPlugin (otherDiscreteEvents) we process them separately as an
                // array of top level events.
                // Lastly, we ignore prettier so we can keep the formatting sane.
                // prettier-ignore

                var discreteEventPairsForSimpleEventPlugin = ['cancel', 'cancel', 'click', 'click', 'close', 'close', 'contextmenu', 'contextMenu', 'copy', 'copy', 'cut', 'cut', 'auxclick', 'auxClick', 'dblclick', 'doubleClick', // Careful!
                'dragend', 'dragEnd', 'dragstart', 'dragStart', 'drop', 'drop', 'focusin', 'focus', // Careful!
                'focusout', 'blur', // Careful!
                'input', 'input', 'invalid', 'invalid', 'keydown', 'keyDown', 'keypress', 'keyPress', 'keyup', 'keyUp', 'mousedown', 'mouseDown', 'mouseup', 'mouseUp', 'paste', 'paste', 'pause', 'pause', 'play', 'play', 'pointercancel', 'pointerCancel', 'pointerdown', 'pointerDown', 'pointerup', 'pointerUp', 'ratechange', 'rateChange', 'reset', 'reset', 'seeked', 'seeked', 'submit', 'submit', 'touchcancel', 'touchCancel', 'touchend', 'touchEnd', 'touchstart', 'touchStart', 'volumechange', 'volumeChange'];
                var otherDiscreteEvents = ['change', 'selectionchange', 'textInput', 'compositionstart', 'compositionend', 'compositionupdate'];

                var userBlockingPairsForSimpleEventPlugin = ['drag', 'drag', 'dragenter', 'dragEnter', 'dragexit', 'dragExit', 'dragleave', 'dragLeave', 'dragover', 'dragOver', 'mousemove', 'mouseMove', 'mouseout', 'mouseOut', 'mouseover', 'mouseOver', 'pointermove', 'pointerMove', 'pointerout', 'pointerOut', 'pointerover', 'pointerOver', 'scroll', 'scroll', 'toggle', 'toggle', 'touchmove', 'touchMove', 'wheel', 'wheel']; // prettier-ignore

                var continuousPairsForSimpleEventPlugin = ['abort', 'abort', ANIMATION_END, 'animationEnd', ANIMATION_ITERATION, 'animationIteration', ANIMATION_START, 'animationStart', 'canplay', 'canPlay', 'canplaythrough', 'canPlayThrough', 'durationchange', 'durationChange', 'emptied', 'emptied', 'encrypted', 'encrypted', 'ended', 'ended', 'error', 'error', 'gotpointercapture', 'gotPointerCapture', 'load', 'load', 'loadeddata', 'loadedData', 'loadedmetadata', 'loadedMetadata', 'loadstart', 'loadStart', 'lostpointercapture', 'lostPointerCapture', 'playing', 'playing', 'progress', 'progress', 'seeking', 'seeking', 'stalled', 'stalled', 'suspend', 'suspend', 'timeupdate', 'timeUpdate', TRANSITION_END, 'transitionEnd', 'waiting', 'waiting'];
                /**
                 * Turns
                 * ['abort', ...]
                 *
                 * into
                 *
                 * topLevelEventsToReactNames = new Map([
                 *   ['abort', 'onAbort'],
                 * ]);
                 *
                 * and registers them.
                 */

                function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
                  // As the event types are in pairs of two, we need to iterate
                  // through in twos. The events are in pairs of two to save code
                  // and improve init perf of processing this array, as it will
                  // result in far fewer object allocations and property accesses
                  // if we only use three arrays to process all the categories of
                  // instead of tuples.
                  for (var i = 0; i < eventTypes.length; i += 2) {
                    var topEvent = eventTypes[i];
                    var event = eventTypes[i + 1];
                    var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
                    var reactName = 'on' + capitalizedEvent;
                    eventPriorities.set(topEvent, priority);
                    topLevelEventsToReactNames.set(topEvent, reactName);
                    registerTwoPhaseEvent(reactName, [topEvent]);
                  }
                }

                function setEventPriorities(eventTypes, priority) {
                  for (var i = 0; i < eventTypes.length; i++) {
                    eventPriorities.set(eventTypes[i], priority);
                  }
                }

                function getEventPriorityForPluginSystem(domEventName) {
                  var priority = eventPriorities.get(domEventName); // Default to a ContinuousEvent. Note: we might
                  // want to warn if we can't detect the priority
                  // for the event.

                  return priority === undefined ? ContinuousEvent : priority;
                }
                function registerSimpleEvents() {
                  registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
                  registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
                  registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
                  setEventPriorities(otherDiscreteEvents, DiscreteEvent);
                }

                var Scheduler_now = Scheduler.unstable_now;

                {
                  // Provide explicit error message when production+profiling bundle of e.g.
                  // react-dom is used with production (non-profiling) bundle of
                  // scheduler/tracing
                  if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
                    {
                      throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
                    }
                  }
                }
                // ascending numbers so we can compare them like numbers. They start at 90 to
                // avoid clashing with Scheduler's priorities.

                var ImmediatePriority = 99;
                var UserBlockingPriority = 98;
                var NormalPriority = 97;
                var LowPriority = 96;
                var IdlePriority = 95; // NoPriority is the absence of priority. Also React-only.

                var NoPriority = 90;
                var initialTimeMs = Scheduler_now(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.

                var SyncLanePriority = 15;
                var SyncBatchedLanePriority = 14;
                var InputDiscreteHydrationLanePriority = 13;
                var InputDiscreteLanePriority = 12;
                var InputContinuousHydrationLanePriority = 11;
                var InputContinuousLanePriority = 10;
                var DefaultHydrationLanePriority = 9;
                var DefaultLanePriority = 8;
                var TransitionHydrationPriority = 7;
                var TransitionPriority = 6;
                var RetryLanePriority = 5;
                var SelectiveHydrationLanePriority = 4;
                var IdleHydrationLanePriority = 3;
                var IdleLanePriority = 2;
                var OffscreenLanePriority = 1;
                var NoLanePriority = 0;
                var TotalLanes = 31;
                var NoLanes =
                /*                        */
                0;
                var NoLane =
                /*                          */
                0;
                var SyncLane =
                /*                        */
                1;
                var SyncBatchedLane =
                /*                 */
                2;
                var InputDiscreteHydrationLane =
                /*      */
                4;
                var InputDiscreteLanes =
                /*                    */
                24;
                var InputContinuousHydrationLane =
                /*           */
                32;
                var InputContinuousLanes =
                /*                  */
                192;
                var DefaultHydrationLane =
                /*            */
                256;
                var DefaultLanes =
                /*                   */
                3584;
                var TransitionHydrationLane =
                /*                */
                4096;
                var TransitionLanes =
                /*                       */
                4186112;
                var RetryLanes =
                /*                            */
                62914560;
                var SomeRetryLane =
                /*                  */
                33554432;
                var SelectiveHydrationLane =
                /*          */
                67108864;
                var NonIdleLanes =
                /*                                 */
                134217727;
                var IdleHydrationLane =
                /*               */
                134217728;
                var IdleLanes =
                /*                             */
                805306368;
                var OffscreenLane =
                /*                   */
                1073741824;
                var NoTimestamp = -1;
                function setCurrentUpdateLanePriority(newLanePriority) {} // "Registers" used to "return" multiple values
                // Used by getHighestPriorityLanes and getNextLanes:

                var return_highestLanePriority = DefaultLanePriority;

                function getHighestPriorityLanes(lanes) {
                  if ((SyncLane & lanes) !== NoLanes) {
                    return_highestLanePriority = SyncLanePriority;
                    return SyncLane;
                  }

                  if ((SyncBatchedLane & lanes) !== NoLanes) {
                    return_highestLanePriority = SyncBatchedLanePriority;
                    return SyncBatchedLane;
                  }

                  if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
                    return_highestLanePriority = InputDiscreteHydrationLanePriority;
                    return InputDiscreteHydrationLane;
                  }

                  var inputDiscreteLanes = InputDiscreteLanes & lanes;

                  if (inputDiscreteLanes !== NoLanes) {
                    return_highestLanePriority = InputDiscreteLanePriority;
                    return inputDiscreteLanes;
                  }

                  if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
                    return_highestLanePriority = InputContinuousHydrationLanePriority;
                    return InputContinuousHydrationLane;
                  }

                  var inputContinuousLanes = InputContinuousLanes & lanes;

                  if (inputContinuousLanes !== NoLanes) {
                    return_highestLanePriority = InputContinuousLanePriority;
                    return inputContinuousLanes;
                  }

                  if ((lanes & DefaultHydrationLane) !== NoLanes) {
                    return_highestLanePriority = DefaultHydrationLanePriority;
                    return DefaultHydrationLane;
                  }

                  var defaultLanes = DefaultLanes & lanes;

                  if (defaultLanes !== NoLanes) {
                    return_highestLanePriority = DefaultLanePriority;
                    return defaultLanes;
                  }

                  if ((lanes & TransitionHydrationLane) !== NoLanes) {
                    return_highestLanePriority = TransitionHydrationPriority;
                    return TransitionHydrationLane;
                  }

                  var transitionLanes = TransitionLanes & lanes;

                  if (transitionLanes !== NoLanes) {
                    return_highestLanePriority = TransitionPriority;
                    return transitionLanes;
                  }

                  var retryLanes = RetryLanes & lanes;

                  if (retryLanes !== NoLanes) {
                    return_highestLanePriority = RetryLanePriority;
                    return retryLanes;
                  }

                  if (lanes & SelectiveHydrationLane) {
                    return_highestLanePriority = SelectiveHydrationLanePriority;
                    return SelectiveHydrationLane;
                  }

                  if ((lanes & IdleHydrationLane) !== NoLanes) {
                    return_highestLanePriority = IdleHydrationLanePriority;
                    return IdleHydrationLane;
                  }

                  var idleLanes = IdleLanes & lanes;

                  if (idleLanes !== NoLanes) {
                    return_highestLanePriority = IdleLanePriority;
                    return idleLanes;
                  }

                  if ((OffscreenLane & lanes) !== NoLanes) {
                    return_highestLanePriority = OffscreenLanePriority;
                    return OffscreenLane;
                  }

                  {
                    error('Should have found matching lanes. This is a bug in React.');
                  } // This shouldn't be reachable, but as a fallback, return the entire bitmask.


                  return_highestLanePriority = DefaultLanePriority;
                  return lanes;
                }

                function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
                  switch (schedulerPriorityLevel) {
                    case ImmediatePriority:
                      return SyncLanePriority;

                    case UserBlockingPriority:
                      return InputContinuousLanePriority;

                    case NormalPriority:
                    case LowPriority:
                      // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
                      return DefaultLanePriority;

                    case IdlePriority:
                      return IdleLanePriority;

                    default:
                      return NoLanePriority;
                  }
                }
                function lanePriorityToSchedulerPriority(lanePriority) {
                  switch (lanePriority) {
                    case SyncLanePriority:
                    case SyncBatchedLanePriority:
                      return ImmediatePriority;

                    case InputDiscreteHydrationLanePriority:
                    case InputDiscreteLanePriority:
                    case InputContinuousHydrationLanePriority:
                    case InputContinuousLanePriority:
                      return UserBlockingPriority;

                    case DefaultHydrationLanePriority:
                    case DefaultLanePriority:
                    case TransitionHydrationPriority:
                    case TransitionPriority:
                    case SelectiveHydrationLanePriority:
                    case RetryLanePriority:
                      return NormalPriority;

                    case IdleHydrationLanePriority:
                    case IdleLanePriority:
                    case OffscreenLanePriority:
                      return IdlePriority;

                    case NoLanePriority:
                      return NoPriority;

                    default:
                      {
                        {
                          throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
                        }
                      }

                  }
                }
                function getNextLanes(root, wipLanes) {
                  // Early bailout if there's no pending work left.
                  var pendingLanes = root.pendingLanes;

                  if (pendingLanes === NoLanes) {
                    return_highestLanePriority = NoLanePriority;
                    return NoLanes;
                  }

                  var nextLanes = NoLanes;
                  var nextLanePriority = NoLanePriority;
                  var expiredLanes = root.expiredLanes;
                  var suspendedLanes = root.suspendedLanes;
                  var pingedLanes = root.pingedLanes; // Check if any work has expired.

                  if (expiredLanes !== NoLanes) {
                    nextLanes = expiredLanes;
                    nextLanePriority = return_highestLanePriority = SyncLanePriority;
                  } else {
                    // Do not work on any idle work until all the non-idle work has finished,
                    // even if the work is suspended.
                    var nonIdlePendingLanes = pendingLanes & NonIdleLanes;

                    if (nonIdlePendingLanes !== NoLanes) {
                      var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;

                      if (nonIdleUnblockedLanes !== NoLanes) {
                        nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
                        nextLanePriority = return_highestLanePriority;
                      } else {
                        var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;

                        if (nonIdlePingedLanes !== NoLanes) {
                          nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                          nextLanePriority = return_highestLanePriority;
                        }
                      }
                    } else {
                      // The only remaining work is Idle.
                      var unblockedLanes = pendingLanes & ~suspendedLanes;

                      if (unblockedLanes !== NoLanes) {
                        nextLanes = getHighestPriorityLanes(unblockedLanes);
                        nextLanePriority = return_highestLanePriority;
                      } else {
                        if (pingedLanes !== NoLanes) {
                          nextLanes = getHighestPriorityLanes(pingedLanes);
                          nextLanePriority = return_highestLanePriority;
                        }
                      }
                    }
                  }

                  if (nextLanes === NoLanes) {
                    // This should only be reachable if we're suspended
                    // TODO: Consider warning in this path if a fallback timer is not scheduled.
                    return NoLanes;
                  } // If there are higher priority lanes, we'll include them even if they
                  // are suspended.


                  nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes); // If we're already in the middle of a render, switching lanes will interrupt
                  // it and we'll lose our progress. We should only do this if the new lanes are
                  // higher priority.

                  if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
                  // bother waiting until the root is complete.
                  (wipLanes & suspendedLanes) === NoLanes) {
                    getHighestPriorityLanes(wipLanes);
                    var wipLanePriority = return_highestLanePriority;

                    if (nextLanePriority <= wipLanePriority) {
                      return wipLanes;
                    } else {
                      return_highestLanePriority = nextLanePriority;
                    }
                  } // Check for entangled lanes and add them to the batch.
                  //
                  // A lane is said to be entangled with another when it's not allowed to render
                  // in a batch that does not also include the other lane. Typically we do this
                  // when multiple updates have the same source, and we only want to respond to
                  // the most recent event from that source.
                  //
                  // Note that we apply entanglements *after* checking for partial work above.
                  // This means that if a lane is entangled during an interleaved event while
                  // it's already rendering, we won't interrupt it. This is intentional, since
                  // entanglement is usually "best effort": we'll try our best to render the
                  // lanes in the same batch, but it's not worth throwing out partially
                  // completed work in order to do it.
                  //
                  // For those exceptions where entanglement is semantically important, like
                  // useMutableSource, we should ensure that there is no partial work at the
                  // time we apply the entanglement.


                  var entangledLanes = root.entangledLanes;

                  if (entangledLanes !== NoLanes) {
                    var entanglements = root.entanglements;
                    var lanes = nextLanes & entangledLanes;

                    while (lanes > 0) {
                      var index = pickArbitraryLaneIndex(lanes);
                      var lane = 1 << index;
                      nextLanes |= entanglements[index];
                      lanes &= ~lane;
                    }
                  }

                  return nextLanes;
                }
                function getMostRecentEventTime(root, lanes) {
                  var eventTimes = root.eventTimes;
                  var mostRecentEventTime = NoTimestamp;

                  while (lanes > 0) {
                    var index = pickArbitraryLaneIndex(lanes);
                    var lane = 1 << index;
                    var eventTime = eventTimes[index];

                    if (eventTime > mostRecentEventTime) {
                      mostRecentEventTime = eventTime;
                    }

                    lanes &= ~lane;
                  }

                  return mostRecentEventTime;
                }

                function computeExpirationTime(lane, currentTime) {
                  // TODO: Expiration heuristic is constant per lane, so could use a map.
                  getHighestPriorityLanes(lane);
                  var priority = return_highestLanePriority;

                  if (priority >= InputContinuousLanePriority) {
                    // User interactions should expire slightly more quickly.
                    //
                    // NOTE: This is set to the corresponding constant as in Scheduler.js. When
                    // we made it larger, a product metric in www regressed, suggesting there's
                    // a user interaction that's being starved by a series of synchronous
                    // updates. If that theory is correct, the proper solution is to fix the
                    // starvation. However, this scenario supports the idea that expiration
                    // times are an important safeguard when starvation does happen.
                    //
                    // Also note that, in the case of user input specifically, this will soon no
                    // longer be an issue because we plan to make user input synchronous by
                    // default (until you enter `startTransition`, of course.)
                    //
                    // If weren't planning to make these updates synchronous soon anyway, I
                    // would probably make this number a configurable parameter.
                    return currentTime + 250;
                  } else if (priority >= TransitionPriority) {
                    return currentTime + 5000;
                  } else {
                    // Anything idle priority or lower should never expire.
                    return NoTimestamp;
                  }
                }

                function markStarvedLanesAsExpired(root, currentTime) {
                  // TODO: This gets called every time we yield. We can optimize by storing
                  // the earliest expiration time on the root. Then use that to quickly bail out
                  // of this function.
                  var pendingLanes = root.pendingLanes;
                  var suspendedLanes = root.suspendedLanes;
                  var pingedLanes = root.pingedLanes;
                  var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their
                  // expiration time. If so, we'll assume the update is being starved and mark
                  // it as expired to force it to finish.

                  var lanes = pendingLanes;

                  while (lanes > 0) {
                    var index = pickArbitraryLaneIndex(lanes);
                    var lane = 1 << index;
                    var expirationTime = expirationTimes[index];

                    if (expirationTime === NoTimestamp) {
                      // Found a pending lane with no expiration time. If it's not suspended, or
                      // if it's pinged, assume it's CPU-bound. Compute a new expiration time
                      // using the current time.
                      if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                        // Assumes timestamps are monotonically increasing.
                        expirationTimes[index] = computeExpirationTime(lane, currentTime);
                      }
                    } else if (expirationTime <= currentTime) {
                      // This lane expired
                      root.expiredLanes |= lane;
                    }

                    lanes &= ~lane;
                  }
                } // This returns the highest priority pending lanes regardless of whether they
                function getLanesToRetrySynchronouslyOnError(root) {
                  var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;

                  if (everythingButOffscreen !== NoLanes) {
                    return everythingButOffscreen;
                  }

                  if (everythingButOffscreen & OffscreenLane) {
                    return OffscreenLane;
                  }

                  return NoLanes;
                }
                function returnNextLanesPriority() {
                  return return_highestLanePriority;
                }
                function includesNonIdleWork(lanes) {
                  return (lanes & NonIdleLanes) !== NoLanes;
                }
                function includesOnlyRetries(lanes) {
                  return (lanes & RetryLanes) === lanes;
                }
                function includesOnlyTransitions(lanes) {
                  return (lanes & TransitionLanes) === lanes;
                } // To ensure consistency across multiple updates in the same event, this should
                // be a pure function, so that it always returns the same lane for given inputs.

                function findUpdateLane(lanePriority, wipLanes) {
                  switch (lanePriority) {
                    case NoLanePriority:
                      break;

                    case SyncLanePriority:
                      return SyncLane;

                    case SyncBatchedLanePriority:
                      return SyncBatchedLane;

                    case InputDiscreteLanePriority:
                      {
                        var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);

                        if (_lane === NoLane) {
                          // Shift to the next priority level
                          return findUpdateLane(InputContinuousLanePriority, wipLanes);
                        }

                        return _lane;
                      }

                    case InputContinuousLanePriority:
                      {
                        var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);

                        if (_lane2 === NoLane) {
                          // Shift to the next priority level
                          return findUpdateLane(DefaultLanePriority, wipLanes);
                        }

                        return _lane2;
                      }

                    case DefaultLanePriority:
                      {
                        var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);

                        if (_lane3 === NoLane) {
                          // If all the default lanes are already being worked on, look for a
                          // lane in the transition range.
                          _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);

                          if (_lane3 === NoLane) {
                            // All the transition lanes are taken, too. This should be very
                            // rare, but as a last resort, pick a default lane. This will have
                            // the effect of interrupting the current work-in-progress render.
                            _lane3 = pickArbitraryLane(DefaultLanes);
                          }
                        }

                        return _lane3;
                      }

                    case TransitionPriority: // Should be handled by findTransitionLane instead

                    case RetryLanePriority:
                      // Should be handled by findRetryLane instead
                      break;

                    case IdleLanePriority:
                      var lane = pickArbitraryLane(IdleLanes & ~wipLanes);

                      if (lane === NoLane) {
                        lane = pickArbitraryLane(IdleLanes);
                      }

                      return lane;
                  }

                  {
                    {
                      throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
                    }
                  }
                } // To ensure consistency across multiple updates in the same event, this should
                // be pure function, so that it always returns the same lane for given inputs.

                function findTransitionLane(wipLanes, pendingLanes) {
                  // First look for lanes that are completely unclaimed, i.e. have no
                  // pending work.
                  var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);

                  if (lane === NoLane) {
                    // If all lanes have pending work, look for a lane that isn't currently
                    // being worked on.
                    lane = pickArbitraryLane(TransitionLanes & ~wipLanes);

                    if (lane === NoLane) {
                      // If everything is being worked on, pick any lane. This has the
                      // effect of interrupting the current work-in-progress.
                      lane = pickArbitraryLane(TransitionLanes);
                    }
                  }

                  return lane;
                } // To ensure consistency across multiple updates in the same event, this should
                // be pure function, so that it always returns the same lane for given inputs.

                function findRetryLane(wipLanes) {
                  // This is a fork of `findUpdateLane` designed specifically for Suspense
                  // "retries" — a special update that attempts to flip a Suspense boundary
                  // from its placeholder state to its primary/resolved state.
                  var lane = pickArbitraryLane(RetryLanes & ~wipLanes);

                  if (lane === NoLane) {
                    lane = pickArbitraryLane(RetryLanes);
                  }

                  return lane;
                }

                function getHighestPriorityLane(lanes) {
                  return lanes & -lanes;
                }

                function getLowestPriorityLane(lanes) {
                  // This finds the most significant non-zero bit.
                  var index = 31 - clz32(lanes);
                  return index < 0 ? NoLanes : 1 << index;
                }

                function getEqualOrHigherPriorityLanes(lanes) {
                  return (getLowestPriorityLane(lanes) << 1) - 1;
                }

                function pickArbitraryLane(lanes) {
                  // This wrapper function gets inlined. Only exists so to communicate that it
                  // doesn't matter which bit is selected; you can pick any bit without
                  // affecting the algorithms where its used. Here I'm using
                  // getHighestPriorityLane because it requires the fewest operations.
                  return getHighestPriorityLane(lanes);
                }

                function pickArbitraryLaneIndex(lanes) {
                  return 31 - clz32(lanes);
                }

                function laneToIndex(lane) {
                  return pickArbitraryLaneIndex(lane);
                }

                function includesSomeLane(a, b) {
                  return (a & b) !== NoLanes;
                }
                function isSubsetOfLanes(set, subset) {
                  return (set & subset) === subset;
                }
                function mergeLanes(a, b) {
                  return a | b;
                }
                function removeLanes(set, subset) {
                  return set & ~subset;
                } // Seems redundant, but it changes the type from a single lane (used for
                // updates) to a group of lanes (used for flushing work).

                function laneToLanes(lane) {
                  return lane;
                }
                function higherPriorityLane(a, b) {
                  // This works because the bit ranges decrease in priority as you go left.
                  return a !== NoLane && a < b ? a : b;
                }
                function createLaneMap(initial) {
                  // Intentionally pushing one by one.
                  // https://v8.dev/blog/elements-kinds#avoid-creating-holes
                  var laneMap = [];

                  for (var i = 0; i < TotalLanes; i++) {
                    laneMap.push(initial);
                  }

                  return laneMap;
                }
                function markRootUpdated(root, updateLane, eventTime) {
                  root.pendingLanes |= updateLane; // TODO: Theoretically, any update to any lane can unblock any other lane. But
                  // it's not practical to try every single possible combination. We need a
                  // heuristic to decide which lanes to attempt to render, and in which batches.
                  // For now, we use the same heuristic as in the old ExpirationTimes model:
                  // retry any lane at equal or lower priority, but don't try updates at higher
                  // priority without also including the lower priority updates. This works well
                  // when considering updates across different priority levels, but isn't
                  // sufficient for updates within the same priority, since we want to treat
                  // those updates as parallel.
                  // Unsuspend any update at equal or lower priority.

                  var higherPriorityLanes = updateLane - 1; // Turns 0b1000 into 0b0111

                  root.suspendedLanes &= higherPriorityLanes;
                  root.pingedLanes &= higherPriorityLanes;
                  var eventTimes = root.eventTimes;
                  var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most
                  // recent event, and we assume time is monotonically increasing.

                  eventTimes[index] = eventTime;
                }
                function markRootSuspended(root, suspendedLanes) {
                  root.suspendedLanes |= suspendedLanes;
                  root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.

                  var expirationTimes = root.expirationTimes;
                  var lanes = suspendedLanes;

                  while (lanes > 0) {
                    var index = pickArbitraryLaneIndex(lanes);
                    var lane = 1 << index;
                    expirationTimes[index] = NoTimestamp;
                    lanes &= ~lane;
                  }
                }
                function markRootPinged(root, pingedLanes, eventTime) {
                  root.pingedLanes |= root.suspendedLanes & pingedLanes;
                }
                function markDiscreteUpdatesExpired(root) {
                  root.expiredLanes |= InputDiscreteLanes & root.pendingLanes;
                }
                function hasDiscreteLanes(lanes) {
                  return (lanes & InputDiscreteLanes) !== NoLanes;
                }
                function markRootMutableRead(root, updateLane) {
                  root.mutableReadLanes |= updateLane & root.pendingLanes;
                }
                function markRootFinished(root, remainingLanes) {
                  var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
                  root.pendingLanes = remainingLanes; // Let's try everything again

                  root.suspendedLanes = 0;
                  root.pingedLanes = 0;
                  root.expiredLanes &= remainingLanes;
                  root.mutableReadLanes &= remainingLanes;
                  root.entangledLanes &= remainingLanes;
                  var entanglements = root.entanglements;
                  var eventTimes = root.eventTimes;
                  var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work

                  var lanes = noLongerPendingLanes;

                  while (lanes > 0) {
                    var index = pickArbitraryLaneIndex(lanes);
                    var lane = 1 << index;
                    entanglements[index] = NoLanes;
                    eventTimes[index] = NoTimestamp;
                    expirationTimes[index] = NoTimestamp;
                    lanes &= ~lane;
                  }
                }
                function markRootEntangled(root, entangledLanes) {
                  root.entangledLanes |= entangledLanes;
                  var entanglements = root.entanglements;
                  var lanes = entangledLanes;

                  while (lanes > 0) {
                    var index = pickArbitraryLaneIndex(lanes);
                    var lane = 1 << index;
                    entanglements[index] |= entangledLanes;
                    lanes &= ~lane;
                  }
                }
                var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros. Only used on lanes, so assume input is an integer.
                // Based on:
                // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

                var log = Math.log;
                var LN2 = Math.LN2;

                function clz32Fallback(lanes) {
                  if (lanes === 0) {
                    return 32;
                  }

                  return 31 - (log(lanes) / LN2 | 0) | 0;
                }

                // Intentionally not named imports because Rollup would use dynamic dispatch for
                var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority,
                    runWithPriority = Scheduler.unstable_runWithPriority; // TODO: can we stop exporting these?

                var _enabled = true; // This is exported in FB builds for use by legacy FB layer infra.
                // We'd like to remove this but it's not clear if this is safe.

                function setEnabled(enabled) {
                  _enabled = !!enabled;
                }
                function isEnabled() {
                  return _enabled;
                }
                function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
                  var eventPriority = getEventPriorityForPluginSystem(domEventName);
                  var listenerWrapper;

                  switch (eventPriority) {
                    case DiscreteEvent:
                      listenerWrapper = dispatchDiscreteEvent;
                      break;

                    case UserBlockingEvent:
                      listenerWrapper = dispatchUserBlockingUpdate;
                      break;

                    case ContinuousEvent:
                    default:
                      listenerWrapper = dispatchEvent;
                      break;
                  }

                  return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
                }

                function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
                  {
                    flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
                  }

                  discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
                }

                function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
                  {
                    runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
                  }
                }

                function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
                  if (!_enabled) {
                    return;
                  }

                  var allowReplay = true;

                  {
                    // TODO: replaying capture phase events is currently broken
                    // because we used to do it during top-level native bubble handlers
                    // but now we use different bubble and capture handlers.
                    // In eager mode, we attach capture listeners early, so we need
                    // to filter them out until we fix the logic to handle them correctly.
                    // This could've been outside the flag but I put it inside to reduce risk.
                    allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
                  }

                  if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
                    // If we already have a queue of discrete events, and this is another discrete
                    // event, then we can't dispatch it regardless of its target, since they
                    // need to dispatch in order.
                    queueDiscreteEvent(null, // Flags that we're not actually blocked on anything as far as we know.
                    domEventName, eventSystemFlags, targetContainer, nativeEvent);
                    return;
                  }

                  var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);

                  if (blockedOn === null) {
                    // We successfully dispatched this event.
                    if (allowReplay) {
                      clearIfContinuousEvent(domEventName, nativeEvent);
                    }

                    return;
                  }

                  if (allowReplay) {
                    if (isReplayableDiscreteEvent(domEventName)) {
                      // This this to be replayed later once the target is available.
                      queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
                      return;
                    }

                    if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
                      return;
                    } // We need to clear only if we didn't queue because
                    // queueing is accummulative.


                    clearIfContinuousEvent(domEventName, nativeEvent);
                  } // This is not replayable so we'll invoke it but without a target,
                  // in case the event system needs to trace it.


                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
                } // Attempt dispatching an event. Returns a SuspenseInstance or Container if it's blocked.

                function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
                  // TODO: Warn if _enabled is false.
                  var nativeEventTarget = getEventTarget(nativeEvent);
                  var targetInst = getClosestInstanceFromNode(nativeEventTarget);

                  if (targetInst !== null) {
                    var nearestMounted = getNearestMountedFiber(targetInst);

                    if (nearestMounted === null) {
                      // This tree has been unmounted already. Dispatch without a target.
                      targetInst = null;
                    } else {
                      var tag = nearestMounted.tag;

                      if (tag === SuspenseComponent) {
                        var instance = getSuspenseInstanceFromFiber(nearestMounted);

                        if (instance !== null) {
                          // Queue the event to be replayed later. Abort dispatching since we
                          // don't want this event dispatched twice through the event system.
                          // TODO: If this is the first discrete event in the queue. Schedule an increased
                          // priority for this boundary.
                          return instance;
                        } // This shouldn't happen, something went wrong but to avoid blocking
                        // the whole system, dispatch the event without a target.
                        // TODO: Warn.


                        targetInst = null;
                      } else if (tag === HostRoot) {
                        var root = nearestMounted.stateNode;

                        if (root.hydrate) {
                          // If this happens during a replay something went wrong and it might block
                          // the whole system.
                          return getContainerFromFiber(nearestMounted);
                        }

                        targetInst = null;
                      } else if (nearestMounted !== targetInst) {
                        // If we get an event (ex: img onload) before committing that
                        // component's mount, ignore it for now (that is, treat it as if it was an
                        // event on a non-React tree). We might also consider queueing events and
                        // dispatching them after the mount.
                        targetInst = null;
                      }
                    }
                  }

                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer); // We're not blocked on anything.

                  return null;
                }

                function addEventBubbleListener(target, eventType, listener) {
                  target.addEventListener(eventType, listener, false);
                  return listener;
                }
                function addEventCaptureListener(target, eventType, listener) {
                  target.addEventListener(eventType, listener, true);
                  return listener;
                }
                function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
                  target.addEventListener(eventType, listener, {
                    capture: true,
                    passive: passive
                  });
                  return listener;
                }
                function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
                  target.addEventListener(eventType, listener, {
                    passive: passive
                  });
                  return listener;
                }

                /**
                 * These variables store information about text content of a target node,
                 * allowing comparison of content before and after a given event.
                 *
                 * Identify the node where selection currently begins, then observe
                 * both its text content and its current position in the DOM. Since the
                 * browser may natively replace the target node during composition, we can
                 * use its position to find its replacement.
                 *
                 *
                 */
                var root = null;
                var startText = null;
                var fallbackText = null;
                function initialize(nativeEventTarget) {
                  root = nativeEventTarget;
                  startText = getText();
                  return true;
                }
                function reset() {
                  root = null;
                  startText = null;
                  fallbackText = null;
                }
                function getData() {
                  if (fallbackText) {
                    return fallbackText;
                  }

                  var start;
                  var startValue = startText;
                  var startLength = startValue.length;
                  var end;
                  var endValue = getText();
                  var endLength = endValue.length;

                  for (start = 0; start < startLength; start++) {
                    if (startValue[start] !== endValue[start]) {
                      break;
                    }
                  }

                  var minEnd = startLength - start;

                  for (end = 1; end <= minEnd; end++) {
                    if (startValue[startLength - end] !== endValue[endLength - end]) {
                      break;
                    }
                  }

                  var sliceTail = end > 1 ? 1 - end : undefined;
                  fallbackText = endValue.slice(start, sliceTail);
                  return fallbackText;
                }
                function getText() {
                  if ('value' in root) {
                    return root.value;
                  }

                  return root.textContent;
                }

                /**
                 * `charCode` represents the actual "character code" and is safe to use with
                 * `String.fromCharCode`. As such, only keys that correspond to printable
                 * characters produce a valid `charCode`, the only exception to this is Enter.
                 * The Tab-key is considered non-printable and does not have a `charCode`,
                 * presumably because it does not produce a tab-character in browsers.
                 *
                 * @param {object} nativeEvent Native browser event.
                 * @return {number} Normalized `charCode` property.
                 */
                function getEventCharCode(nativeEvent) {
                  var charCode;
                  var keyCode = nativeEvent.keyCode;

                  if ('charCode' in nativeEvent) {
                    charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.

                    if (charCode === 0 && keyCode === 13) {
                      charCode = 13;
                    }
                  } else {
                    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
                    charCode = keyCode;
                  } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
                  // report Enter as charCode 10 when ctrl is pressed.


                  if (charCode === 10) {
                    charCode = 13;
                  } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
                  // Must not discard the (non-)printable Enter-key.


                  if (charCode >= 32 || charCode === 13) {
                    return charCode;
                  }

                  return 0;
                }

                function functionThatReturnsTrue() {
                  return true;
                }

                function functionThatReturnsFalse() {
                  return false;
                } // This is intentionally a factory so that we have different returned constructors.
                // If we had a single constructor, it would be megamorphic and engines would deopt.


                function createSyntheticEvent(Interface) {
                  /**
                   * Synthetic events are dispatched by event plugins, typically in response to a
                   * top-level event delegation handler.
                   *
                   * These systems should generally use pooling to reduce the frequency of garbage
                   * collection. The system should check `isPersistent` to determine whether the
                   * event should be released into the pool after being dispatched. Users that
                   * need a persisted event should invoke `persist`.
                   *
                   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
                   * normalizing browser quirks. Subclasses do not necessarily have to implement a
                   * DOM interface; custom application-specific events can also subclass this.
                   */
                  function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
                    this._reactName = reactName;
                    this._targetInst = targetInst;
                    this.type = reactEventType;
                    this.nativeEvent = nativeEvent;
                    this.target = nativeEventTarget;
                    this.currentTarget = null;

                    for (var _propName in Interface) {
                      if (!Interface.hasOwnProperty(_propName)) {
                        continue;
                      }

                      var normalize = Interface[_propName];

                      if (normalize) {
                        this[_propName] = normalize(nativeEvent);
                      } else {
                        this[_propName] = nativeEvent[_propName];
                      }
                    }

                    var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

                    if (defaultPrevented) {
                      this.isDefaultPrevented = functionThatReturnsTrue;
                    } else {
                      this.isDefaultPrevented = functionThatReturnsFalse;
                    }

                    this.isPropagationStopped = functionThatReturnsFalse;
                    return this;
                  }

                  _assign(SyntheticBaseEvent.prototype, {
                    preventDefault: function () {
                      this.defaultPrevented = true;
                      var event = this.nativeEvent;

                      if (!event) {
                        return;
                      }

                      if (event.preventDefault) {
                        event.preventDefault(); // $FlowFixMe - flow is not aware of `unknown` in IE
                      } else if (typeof event.returnValue !== 'unknown') {
                        event.returnValue = false;
                      }

                      this.isDefaultPrevented = functionThatReturnsTrue;
                    },
                    stopPropagation: function () {
                      var event = this.nativeEvent;

                      if (!event) {
                        return;
                      }

                      if (event.stopPropagation) {
                        event.stopPropagation(); // $FlowFixMe - flow is not aware of `unknown` in IE
                      } else if (typeof event.cancelBubble !== 'unknown') {
                        // The ChangeEventPlugin registers a "propertychange" event for
                        // IE. This event does not support bubbling or cancelling, and
                        // any references to cancelBubble throw "Member not found".  A
                        // typeof check of "unknown" circumvents this issue (and is also
                        // IE specific).
                        event.cancelBubble = true;
                      }

                      this.isPropagationStopped = functionThatReturnsTrue;
                    },

                    /**
                     * We release all dispatched `SyntheticEvent`s after each event loop, adding
                     * them back into the pool. This allows a way to hold onto a reference that
                     * won't be added back into the pool.
                     */
                    persist: function () {// Modern event system doesn't use pooling.
                    },

                    /**
                     * Checks if this event should be released back into the pool.
                     *
                     * @return {boolean} True if this should not be released, false otherwise.
                     */
                    isPersistent: functionThatReturnsTrue
                  });

                  return SyntheticBaseEvent;
                }
                /**
                 * @interface Event
                 * @see http://www.w3.org/TR/DOM-Level-3-Events/
                 */

                var EventInterface = {
                  eventPhase: 0,
                  bubbles: 0,
                  cancelable: 0,
                  timeStamp: function (event) {
                    return event.timeStamp || Date.now();
                  },
                  defaultPrevented: 0,
                  isTrusted: 0
                };
                var SyntheticEvent = createSyntheticEvent(EventInterface);

                var UIEventInterface = _assign({}, EventInterface, {
                  view: 0,
                  detail: 0
                });

                var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
                var lastMovementX;
                var lastMovementY;
                var lastMouseEvent;

                function updateMouseMovementPolyfillState(event) {
                  if (event !== lastMouseEvent) {
                    if (lastMouseEvent && event.type === 'mousemove') {
                      lastMovementX = event.screenX - lastMouseEvent.screenX;
                      lastMovementY = event.screenY - lastMouseEvent.screenY;
                    } else {
                      lastMovementX = 0;
                      lastMovementY = 0;
                    }

                    lastMouseEvent = event;
                  }
                }
                /**
                 * @interface MouseEvent
                 * @see http://www.w3.org/TR/DOM-Level-3-Events/
                 */

                var MouseEventInterface = _assign({}, UIEventInterface, {
                  screenX: 0,
                  screenY: 0,
                  clientX: 0,
                  clientY: 0,
                  pageX: 0,
                  pageY: 0,
                  ctrlKey: 0,
                  shiftKey: 0,
                  altKey: 0,
                  metaKey: 0,
                  getModifierState: getEventModifierState,
                  button: 0,
                  buttons: 0,
                  relatedTarget: function (event) {
                    if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
                    return event.relatedTarget;
                  },
                  movementX: function (event) {
                    if ('movementX' in event) {
                      return event.movementX;
                    }

                    updateMouseMovementPolyfillState(event);
                    return lastMovementX;
                  },
                  movementY: function (event) {
                    if ('movementY' in event) {
                      return event.movementY;
                    } // Don't need to call updateMouseMovementPolyfillState() here
                    // because it's guaranteed to have already run when movementX
                    // was copied.


                    return lastMovementY;
                  }
                });

                var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
                /**
                 * @interface DragEvent
                 * @see http://www.w3.org/TR/DOM-Level-3-Events/
                 */

                var DragEventInterface = _assign({}, MouseEventInterface, {
                  dataTransfer: 0
                });

                var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
                /**
                 * @interface FocusEvent
                 * @see http://www.w3.org/TR/DOM-Level-3-Events/
                 */

                var FocusEventInterface = _assign({}, UIEventInterface, {
                  relatedTarget: 0
                });

                var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
                /**
                 * @interface Event
                 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
                 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
                 */

                var AnimationEventInterface = _assign({}, EventInterface, {
                  animationName: 0,
                  elapsedTime: 0,
                  pseudoElement: 0
                });

                var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
                /**
                 * @interface Event
                 * @see http://www.w3.org/TR/clipboard-apis/
                 */

                var ClipboardEventInterface = _assign({}, EventInterface, {
                  clipboardData: function (event) {
                    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
                  }
                });

                var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
                /**
                 * @interface Event
                 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
                 */

                var CompositionEventInterface = _assign({}, EventInterface, {
                  data: 0
                });

                var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
                /**
                 * @interface Event
                 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
                 *      /#events-inputevents
                 */
                // Happens to share the same list for now.

                var SyntheticInputEvent = SyntheticCompositionEvent;
                /**
                 * Normalization of deprecated HTML5 `key` values
                 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
                 */

                var normalizeKey = {
                  Esc: 'Escape',
                  Spacebar: ' ',
                  Left: 'ArrowLeft',
                  Up: 'ArrowUp',
                  Right: 'ArrowRight',
                  Down: 'ArrowDown',
                  Del: 'Delete',
                  Win: 'OS',
                  Menu: 'ContextMenu',
                  Apps: 'ContextMenu',
                  Scroll: 'ScrollLock',
                  MozPrintableKey: 'Unidentified'
                };
                /**
                 * Translation from legacy `keyCode` to HTML5 `key`
                 * Only special keys supported, all others depend on keyboard layout or browser
                 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
                 */

                var translateToKey = {
                  '8': 'Backspace',
                  '9': 'Tab',
                  '12': 'Clear',
                  '13': 'Enter',
                  '16': 'Shift',
                  '17': 'Control',
                  '18': 'Alt',
                  '19': 'Pause',
                  '20': 'CapsLock',
                  '27': 'Escape',
                  '32': ' ',
                  '33': 'PageUp',
                  '34': 'PageDown',
                  '35': 'End',
                  '36': 'Home',
                  '37': 'ArrowLeft',
                  '38': 'ArrowUp',
                  '39': 'ArrowRight',
                  '40': 'ArrowDown',
                  '45': 'Insert',
                  '46': 'Delete',
                  '112': 'F1',
                  '113': 'F2',
                  '114': 'F3',
                  '115': 'F4',
                  '116': 'F5',
                  '117': 'F6',
                  '118': 'F7',
                  '119': 'F8',
                  '120': 'F9',
                  '121': 'F10',
                  '122': 'F11',
                  '123': 'F12',
                  '144': 'NumLock',
                  '145': 'ScrollLock',
                  '224': 'Meta'
                };
                /**
                 * @param {object} nativeEvent Native browser event.
                 * @return {string} Normalized `key` property.
                 */

                function getEventKey(nativeEvent) {
                  if (nativeEvent.key) {
                    // Normalize inconsistent values reported by browsers due to
                    // implementations of a working draft specification.
                    // FireFox implements `key` but returns `MozPrintableKey` for all
                    // printable characters (normalized to `Unidentified`), ignore it.
                    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;

                    if (key !== 'Unidentified') {
                      return key;
                    }
                  } // Browser does not implement `key`, polyfill as much of it as we can.


                  if (nativeEvent.type === 'keypress') {
                    var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
                    // thus be captured by `keypress`, no other non-printable key should.

                    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
                  }

                  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
                    // While user keyboard layout determines the actual meaning of each
                    // `keyCode` value, almost all function keys have a universal value.
                    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
                  }

                  return '';
                }
                /**
                 * Translation from modifier key to the associated property in the event.
                 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
                 */

                var modifierKeyToProp = {
                  Alt: 'altKey',
                  Control: 'ctrlKey',
                  Meta: 'metaKey',
                  Shift: 'shiftKey'
                }; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
                // getModifierState. If getModifierState is not supported, we map it to a set of
                // modifier keys exposed by the event. In this case, Lock-keys are not supported.

                function modifierStateGetter(keyArg) {
                  var syntheticEvent = this;
                  var nativeEvent = syntheticEvent.nativeEvent;

                  if (nativeEvent.getModifierState) {
                    return nativeEvent.getModifierState(keyArg);
                  }

                  var keyProp = modifierKeyToProp[keyArg];
                  return keyProp ? !!nativeEvent[keyProp] : false;
                }

                function getEventModifierState(nativeEvent) {
                  return modifierStateGetter;
                }
                /**
                 * @interface KeyboardEvent
                 * @see http://www.w3.org/TR/DOM-Level-3-Events/
                 */

                var KeyboardEventInterface = _assign({}, UIEventInterface, {
                  key: getEventKey,
                  code: 0,
                  location: 0,
                  ctrlKey: 0,
                  shiftKey: 0,
                  altKey: 0,
                  metaKey: 0,
                  repeat: 0,
                  locale: 0,
                  getModifierState: getEventModifierState,
                  // Legacy Interface
                  charCode: function (event) {
                    // `charCode` is the result of a KeyPress event and represents the value of
                    // the actual printable character.
                    // KeyPress is deprecated, but its replacement is not yet final and not
                    // implemented in any major browser. Only KeyPress has charCode.
                    if (event.type === 'keypress') {
                      return getEventCharCode(event);
                    }

                    return 0;
                  },
                  keyCode: function (event) {
                    // `keyCode` is the result of a KeyDown/Up event and represents the value of
                    // physical keyboard key.
                    // The actual meaning of the value depends on the users' keyboard layout
                    // which cannot be detected. Assuming that it is a US keyboard layout
                    // provides a surprisingly accurate mapping for US and European users.
                    // Due to this, it is left to the user to implement at this time.
                    if (event.type === 'keydown' || event.type === 'keyup') {
                      return event.keyCode;
                    }

                    return 0;
                  },
                  which: function (event) {
                    // `which` is an alias for either `keyCode` or `charCode` depending on the
                    // type of the event.
                    if (event.type === 'keypress') {
                      return getEventCharCode(event);
                    }

                    if (event.type === 'keydown' || event.type === 'keyup') {
                      return event.keyCode;
                    }

                    return 0;
                  }
                });

                var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
                /**
                 * @interface PointerEvent
                 * @see http://www.w3.org/TR/pointerevents/
                 */

                var PointerEventInterface = _assign({}, MouseEventInterface, {
                  pointerId: 0,
                  width: 0,
                  height: 0,
                  pressure: 0,
                  tangentialPressure: 0,
                  tiltX: 0,
                  tiltY: 0,
                  twist: 0,
                  pointerType: 0,
                  isPrimary: 0
                });

                var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
                /**
                 * @interface TouchEvent
                 * @see http://www.w3.org/TR/touch-events/
                 */

                var TouchEventInterface = _assign({}, UIEventInterface, {
                  touches: 0,
                  targetTouches: 0,
                  changedTouches: 0,
                  altKey: 0,
                  metaKey: 0,
                  ctrlKey: 0,
                  shiftKey: 0,
                  getModifierState: getEventModifierState
                });

                var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
                /**
                 * @interface Event
                 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
                 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
                 */

                var TransitionEventInterface = _assign({}, EventInterface, {
                  propertyName: 0,
                  elapsedTime: 0,
                  pseudoElement: 0
                });

                var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
                /**
                 * @interface WheelEvent
                 * @see http://www.w3.org/TR/DOM-Level-3-Events/
                 */

                var WheelEventInterface = _assign({}, MouseEventInterface, {
                  deltaX: function (event) {
                    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
                  },
                  deltaY: function (event) {
                    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                    'wheelDelta' in event ? -event.wheelDelta : 0;
                  },
                  deltaZ: 0,
                  // Browsers without "deltaMode" is reporting in raw wheel delta where one
                  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
                  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
                  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
                  deltaMode: 0
                });

                var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);

                var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space

                var START_KEYCODE = 229;
                var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
                var documentMode = null;

                if (canUseDOM && 'documentMode' in document) {
                  documentMode = document.documentMode;
                } // Webkit offers a very useful `textInput` event that can be used to
                // directly represent `beforeInput`. The IE `textinput` event is not as
                // useful, so we don't use it.


                var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
                // by the native compositionend event may be incorrect. Japanese ideographic
                // spaces, for instance (\u3000) are not recorded correctly.

                var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
                var SPACEBAR_CODE = 32;
                var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

                function registerEvents() {
                  registerTwoPhaseEvent('onBeforeInput', ['compositionend', 'keypress', 'textInput', 'paste']);
                  registerTwoPhaseEvent('onCompositionEnd', ['compositionend', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
                  registerTwoPhaseEvent('onCompositionStart', ['compositionstart', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
                  registerTwoPhaseEvent('onCompositionUpdate', ['compositionupdate', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
                } // Track whether we've ever handled a keypress on the space key.


                var hasSpaceKeypress = false;
                /**
                 * Return whether a native keypress event is assumed to be a command.
                 * This is required because Firefox fires `keypress` events for key commands
                 * (cut, copy, select-all, etc.) even though no character is inserted.
                 */

                function isKeypressCommand(nativeEvent) {
                  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
                  !(nativeEvent.ctrlKey && nativeEvent.altKey);
                }
                /**
                 * Translate native top level events into event types.
                 */

                function getCompositionEventType(domEventName) {
                  switch (domEventName) {
                    case 'compositionstart':
                      return 'onCompositionStart';

                    case 'compositionend':
                      return 'onCompositionEnd';

                    case 'compositionupdate':
                      return 'onCompositionUpdate';
                  }
                }
                /**
                 * Does our fallback best-guess model think this event signifies that
                 * composition has begun?
                 */

                function isFallbackCompositionStart(domEventName, nativeEvent) {
                  return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;
                }
                /**
                 * Does our fallback mode think that this event is the end of composition?
                 */

                function isFallbackCompositionEnd(domEventName, nativeEvent) {
                  switch (domEventName) {
                    case 'keyup':
                      // Command keys insert or clear IME input.
                      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;

                    case 'keydown':
                      // Expect IME keyCode on each keydown. If we get any other
                      // code we must have exited earlier.
                      return nativeEvent.keyCode !== START_KEYCODE;

                    case 'keypress':
                    case 'mousedown':
                    case 'focusout':
                      // Events are not possible without cancelling IME.
                      return true;

                    default:
                      return false;
                  }
                }
                /**
                 * Google Input Tools provides composition data via a CustomEvent,
                 * with the `data` property populated in the `detail` object. If this
                 * is available on the event object, use it. If not, this is a plain
                 * composition event and we have nothing special to extract.
                 *
                 * @param {object} nativeEvent
                 * @return {?string}
                 */

                function getDataFromCustomEvent(nativeEvent) {
                  var detail = nativeEvent.detail;

                  if (typeof detail === 'object' && 'data' in detail) {
                    return detail.data;
                  }

                  return null;
                }
                /**
                 * Check if a composition event was triggered by Korean IME.
                 * Our fallback mode does not work well with IE's Korean IME,
                 * so just use native composition events when Korean IME is used.
                 * Although CompositionEvent.locale property is deprecated,
                 * it is available in IE, where our fallback mode is enabled.
                 *
                 * @param {object} nativeEvent
                 * @return {boolean}
                 */

                function isUsingKoreanIME(nativeEvent) {
                  return nativeEvent.locale === 'ko';
                } // Track the current IME composition status, if any.


                var isComposing = false;
                /**
                 * @return {?object} A SyntheticCompositionEvent.
                 */

                function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
                  var eventType;
                  var fallbackData;

                  if (canUseCompositionEvent) {
                    eventType = getCompositionEventType(domEventName);
                  } else if (!isComposing) {
                    if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                      eventType = 'onCompositionStart';
                    }
                  } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
                    eventType = 'onCompositionEnd';
                  }

                  if (!eventType) {
                    return null;
                  }

                  if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
                    // The current composition is stored statically and must not be
                    // overwritten while composition continues.
                    if (!isComposing && eventType === 'onCompositionStart') {
                      isComposing = initialize(nativeEventTarget);
                    } else if (eventType === 'onCompositionEnd') {
                      if (isComposing) {
                        fallbackData = getData();
                      }
                    }
                  }

                  var listeners = accumulateTwoPhaseListeners(targetInst, eventType);

                  if (listeners.length > 0) {
                    var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
                    dispatchQueue.push({
                      event: event,
                      listeners: listeners
                    });

                    if (fallbackData) {
                      // Inject data generated from fallback path into the synthetic event.
                      // This matches the property of native CompositionEventInterface.
                      event.data = fallbackData;
                    } else {
                      var customData = getDataFromCustomEvent(nativeEvent);

                      if (customData !== null) {
                        event.data = customData;
                      }
                    }
                  }
                }

                function getNativeBeforeInputChars(domEventName, nativeEvent) {
                  switch (domEventName) {
                    case 'compositionend':
                      return getDataFromCustomEvent(nativeEvent);

                    case 'keypress':
                      /**
                       * If native `textInput` events are available, our goal is to make
                       * use of them. However, there is a special case: the spacebar key.
                       * In Webkit, preventing default on a spacebar `textInput` event
                       * cancels character insertion, but it *also* causes the browser
                       * to fall back to its default spacebar behavior of scrolling the
                       * page.
                       *
                       * Tracking at:
                       * https://code.google.com/p/chromium/issues/detail?id=355103
                       *
                       * To avoid this issue, use the keypress event as if no `textInput`
                       * event is available.
                       */
                      var which = nativeEvent.which;

                      if (which !== SPACEBAR_CODE) {
                        return null;
                      }

                      hasSpaceKeypress = true;
                      return SPACEBAR_CHAR;

                    case 'textInput':
                      // Record the characters to be added to the DOM.
                      var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
                      // it at the keypress level and bail immediately. Android Chrome
                      // doesn't give us keycodes, so we need to ignore it.

                      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                        return null;
                      }

                      return chars;

                    default:
                      // For other native event types, do nothing.
                      return null;
                  }
                }
                /**
                 * For browsers that do not provide the `textInput` event, extract the
                 * appropriate string to use for SyntheticInputEvent.
                 */

                function getFallbackBeforeInputChars(domEventName, nativeEvent) {
                  // If we are currently composing (IME) and using a fallback to do so,
                  // try to extract the composed characters from the fallback object.
                  // If composition event is available, we extract a string only at
                  // compositionevent, otherwise extract it at fallback events.
                  if (isComposing) {
                    if (domEventName === 'compositionend' || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                      var chars = getData();
                      reset();
                      isComposing = false;
                      return chars;
                    }

                    return null;
                  }

                  switch (domEventName) {
                    case 'paste':
                      // If a paste event occurs after a keypress, throw out the input
                      // chars. Paste events should not lead to BeforeInput events.
                      return null;

                    case 'keypress':
                      /**
                       * As of v27, Firefox may fire keypress events even when no character
                       * will be inserted. A few possibilities:
                       *
                       * - `which` is `0`. Arrow keys, Esc key, etc.
                       *
                       * - `which` is the pressed key code, but no char is available.
                       *   Ex: 'AltGr + d` in Polish. There is no modified character for
                       *   this key combination and no character is inserted into the
                       *   document, but FF fires the keypress for char code `100` anyway.
                       *   No `input` event will occur.
                       *
                       * - `which` is the pressed key code, but a command combination is
                       *   being used. Ex: `Cmd+C`. No character is inserted, and no
                       *   `input` event will occur.
                       */
                      if (!isKeypressCommand(nativeEvent)) {
                        // IE fires the `keypress` event when a user types an emoji via
                        // Touch keyboard of Windows.  In such a case, the `char` property
                        // holds an emoji character like `\uD83D\uDE0A`.  Because its length
                        // is 2, the property `which` does not represent an emoji correctly.
                        // In such a case, we directly return the `char` property instead of
                        // using `which`.
                        if (nativeEvent.char && nativeEvent.char.length > 1) {
                          return nativeEvent.char;
                        } else if (nativeEvent.which) {
                          return String.fromCharCode(nativeEvent.which);
                        }
                      }

                      return null;

                    case 'compositionend':
                      return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;

                    default:
                      return null;
                  }
                }
                /**
                 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
                 * `textInput` or fallback behavior.
                 *
                 * @return {?object} A SyntheticInputEvent.
                 */

                function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
                  var chars;

                  if (canUseTextInputEvent) {
                    chars = getNativeBeforeInputChars(domEventName, nativeEvent);
                  } else {
                    chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
                  } // If no characters are being inserted, no BeforeInput event should
                  // be fired.


                  if (!chars) {
                    return null;
                  }

                  var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');

                  if (listeners.length > 0) {
                    var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);
                    dispatchQueue.push({
                      event: event,
                      listeners: listeners
                    });
                    event.data = chars;
                  }
                }
                /**
                 * Create an `onBeforeInput` event to match
                 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
                 *
                 * This event plugin is based on the native `textInput` event
                 * available in Chrome, Safari, Opera, and IE. This event fires after
                 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
                 *
                 * `beforeInput` is spec'd but not implemented in any browsers, and
                 * the `input` event does not provide any useful information about what has
                 * actually been added, contrary to the spec. Thus, `textInput` is the best
                 * available event to identify the characters that have actually been inserted
                 * into the target node.
                 *
                 * This plugin is also responsible for emitting `composition` events, thus
                 * allowing us to share composition fallback code for both `beforeInput` and
                 * `composition` event types.
                 */

                function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
                  extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
                  extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
                }

                /**
                 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
                 */
                var supportedInputTypes = {
                  color: true,
                  date: true,
                  datetime: true,
                  'datetime-local': true,
                  email: true,
                  month: true,
                  number: true,
                  password: true,
                  range: true,
                  search: true,
                  tel: true,
                  text: true,
                  time: true,
                  url: true,
                  week: true
                };

                function isTextInputElement(elem) {
                  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

                  if (nodeName === 'input') {
                    return !!supportedInputTypes[elem.type];
                  }

                  if (nodeName === 'textarea') {
                    return true;
                  }

                  return false;
                }

                /**
                 * Checks if an event is supported in the current execution environment.
                 *
                 * NOTE: This will not work correctly for non-generic events such as `change`,
                 * `reset`, `load`, `error`, and `select`.
                 *
                 * Borrows from Modernizr.
                 *
                 * @param {string} eventNameSuffix Event name, e.g. "click".
                 * @return {boolean} True if the event is supported.
                 * @internal
                 * @license Modernizr 3.0.0pre (Custom Build) | MIT
                 */

                function isEventSupported(eventNameSuffix) {
                  if (!canUseDOM) {
                    return false;
                  }

                  var eventName = 'on' + eventNameSuffix;
                  var isSupported = eventName in document;

                  if (!isSupported) {
                    var element = document.createElement('div');
                    element.setAttribute(eventName, 'return;');
                    isSupported = typeof element[eventName] === 'function';
                  }

                  return isSupported;
                }

                function registerEvents$1() {
                  registerTwoPhaseEvent('onChange', ['change', 'click', 'focusin', 'focusout', 'input', 'keydown', 'keyup', 'selectionchange']);
                }

                function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
                  // Flag this event loop as needing state restore.
                  enqueueStateRestore(target);
                  var listeners = accumulateTwoPhaseListeners(inst, 'onChange');

                  if (listeners.length > 0) {
                    var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);
                    dispatchQueue.push({
                      event: event,
                      listeners: listeners
                    });
                  }
                }
                /**
                 * For IE shims
                 */

                var activeElement = null;
                var activeElementInst = null;
                /**
                 * SECTION: handle `change` event
                 */

                function shouldUseChangeEvent(elem) {
                  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
                  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
                }

                function manualDispatchChangeEvent(nativeEvent) {
                  var dispatchQueue = [];
                  createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
                  // other events and have it go through ReactBrowserEventEmitter. Since it
                  // doesn't, we manually listen for the events and so we have to enqueue and
                  // process the abstract event manually.
                  //
                  // Batching is necessary here in order to ensure that all event handlers run
                  // before the next rerender (including event handlers attached to ancestor
                  // elements instead of directly on the input). Without this, controlled
                  // components don't work properly in conjunction with event bubbling because
                  // the component is rerendered and the value reverted before all the event
                  // handlers can run. See https://github.com/facebook/react/issues/708.

                  batchedUpdates(runEventInBatch, dispatchQueue);
                }

                function runEventInBatch(dispatchQueue) {
                  processDispatchQueue(dispatchQueue, 0);
                }

                function getInstIfValueChanged(targetInst) {
                  var targetNode = getNodeFromInstance(targetInst);

                  if (updateValueIfChanged(targetNode)) {
                    return targetInst;
                  }
                }

                function getTargetInstForChangeEvent(domEventName, targetInst) {
                  if (domEventName === 'change') {
                    return targetInst;
                  }
                }
                /**
                 * SECTION: handle `input` event
                 */

                var isInputEventSupported = false;

                if (canUseDOM) {
                  // IE9 claims to support the input event but fails to trigger it when
                  // deleting text, so we ignore its input events.
                  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
                }
                /**
                 * (For IE <=9) Starts tracking propertychange events on the passed-in element
                 * and override the value property so that we can distinguish user events from
                 * value changes in JS.
                 */

                function startWatchingForValueChange(target, targetInst) {
                  activeElement = target;
                  activeElementInst = targetInst;
                  activeElement.attachEvent('onpropertychange', handlePropertyChange);
                }
                /**
                 * (For IE <=9) Removes the event listeners from the currently-tracked element,
                 * if any exists.
                 */

                function stopWatchingForValueChange() {
                  if (!activeElement) {
                    return;
                  }

                  activeElement.detachEvent('onpropertychange', handlePropertyChange);
                  activeElement = null;
                  activeElementInst = null;
                }
                /**
                 * (For IE <=9) Handles a propertychange event, sending a `change` event if
                 * the value of the active element has changed.
                 */

                function handlePropertyChange(nativeEvent) {
                  if (nativeEvent.propertyName !== 'value') {
                    return;
                  }

                  if (getInstIfValueChanged(activeElementInst)) {
                    manualDispatchChangeEvent(nativeEvent);
                  }
                }

                function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
                  if (domEventName === 'focusin') {
                    // In IE9, propertychange fires for most input events but is buggy and
                    // doesn't fire when text is deleted, but conveniently, selectionchange
                    // appears to fire in all of the remaining cases so we catch those and
                    // forward the event if the value has changed
                    // In either case, we don't want to call the event handler if the value
                    // is changed from JS so we redefine a setter for `.value` that updates
                    // our activeElementValue variable, allowing us to ignore those changes
                    //
                    // stopWatching() should be a noop here but we call it just in case we
                    // missed a blur event somehow.
                    stopWatchingForValueChange();
                    startWatchingForValueChange(target, targetInst);
                  } else if (domEventName === 'focusout') {
                    stopWatchingForValueChange();
                  }
                } // For IE8 and IE9.


                function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
                  if (domEventName === 'selectionchange' || domEventName === 'keyup' || domEventName === 'keydown') {
                    // On the selectionchange event, the target is just document which isn't
                    // helpful for us so just check activeElement instead.
                    //
                    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
                    // propertychange on the first input event after setting `value` from a
                    // script and fires only keydown, keypress, keyup. Catching keyup usually
                    // gets it and catching keydown lets us fire an event for the first
                    // keystroke if user does a key repeat (it'll be a little delayed: right
                    // before the second keystroke). Other input methods (e.g., paste) seem to
                    // fire selectionchange normally.
                    return getInstIfValueChanged(activeElementInst);
                  }
                }
                /**
                 * SECTION: handle `click` event
                 */

                function shouldUseClickEvent(elem) {
                  // Use the `click` event to detect changes to checkbox and radio inputs.
                  // This approach works across all browsers, whereas `change` does not fire
                  // until `blur` in IE8.
                  var nodeName = elem.nodeName;
                  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
                }

                function getTargetInstForClickEvent(domEventName, targetInst) {
                  if (domEventName === 'click') {
                    return getInstIfValueChanged(targetInst);
                  }
                }

                function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
                  if (domEventName === 'input' || domEventName === 'change') {
                    return getInstIfValueChanged(targetInst);
                  }
                }

                function handleControlledInputBlur(node) {
                  var state = node._wrapperState;

                  if (!state || !state.controlled || node.type !== 'number') {
                    return;
                  }

                  {
                    // If controlled, assign the value attribute to the current value on blur
                    setDefaultValue(node, 'number', node.value);
                  }
                }
                /**
                 * This plugin creates an `onChange` event that normalizes change events
                 * across form elements. This event fires at a time when it's possible to
                 * change the element's value without seeing a flicker.
                 *
                 * Supported elements are:
                 * - input (see `isTextInputElement`)
                 * - textarea
                 * - select
                 */

                function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
                  var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
                  var getTargetInstFunc, handleEventFunc;

                  if (shouldUseChangeEvent(targetNode)) {
                    getTargetInstFunc = getTargetInstForChangeEvent;
                  } else if (isTextInputElement(targetNode)) {
                    if (isInputEventSupported) {
                      getTargetInstFunc = getTargetInstForInputOrChangeEvent;
                    } else {
                      getTargetInstFunc = getTargetInstForInputEventPolyfill;
                      handleEventFunc = handleEventsForInputEventPolyfill;
                    }
                  } else if (shouldUseClickEvent(targetNode)) {
                    getTargetInstFunc = getTargetInstForClickEvent;
                  }

                  if (getTargetInstFunc) {
                    var inst = getTargetInstFunc(domEventName, targetInst);

                    if (inst) {
                      createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                      return;
                    }
                  }

                  if (handleEventFunc) {
                    handleEventFunc(domEventName, targetNode, targetInst);
                  } // When blurring, set the value attribute for number inputs


                  if (domEventName === 'focusout') {
                    handleControlledInputBlur(targetNode);
                  }
                }

                function registerEvents$2() {
                  registerDirectEvent('onMouseEnter', ['mouseout', 'mouseover']);
                  registerDirectEvent('onMouseLeave', ['mouseout', 'mouseover']);
                  registerDirectEvent('onPointerEnter', ['pointerout', 'pointerover']);
                  registerDirectEvent('onPointerLeave', ['pointerout', 'pointerover']);
                }
                /**
                 * For almost every interaction we care about, there will be both a top-level
                 * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
                 * we do not extract duplicate events. However, moving the mouse into the
                 * browser from outside will not fire a `mouseout` event. In this case, we use
                 * the `mouseover` top-level event.
                 */

                function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
                  var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';
                  var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';

                  if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
                    // If this is an over event with a target, we might have already dispatched
                    // the event in the out event of the other target. If this is replayed,
                    // then it's because we couldn't dispatch against this target previously
                    // so we have to do it now instead.
                    var related = nativeEvent.relatedTarget || nativeEvent.fromElement;

                    if (related) {
                      // If the related node is managed by React, we can assume that we have
                      // already dispatched the corresponding events during its mouseout.
                      if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                        return;
                      }
                    }
                  }

                  if (!isOutEvent && !isOverEvent) {
                    // Must not be a mouse or pointer in or out - ignoring.
                    return;
                  }

                  var win; // TODO: why is this nullable in the types but we read from it?

                  if (nativeEventTarget.window === nativeEventTarget) {
                    // `nativeEventTarget` is probably a window object.
                    win = nativeEventTarget;
                  } else {
                    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
                    var doc = nativeEventTarget.ownerDocument;

                    if (doc) {
                      win = doc.defaultView || doc.parentWindow;
                    } else {
                      win = window;
                    }
                  }

                  var from;
                  var to;

                  if (isOutEvent) {
                    var _related = nativeEvent.relatedTarget || nativeEvent.toElement;

                    from = targetInst;
                    to = _related ? getClosestInstanceFromNode(_related) : null;

                    if (to !== null) {
                      var nearestMounted = getNearestMountedFiber(to);

                      if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                        to = null;
                      }
                    }
                  } else {
                    // Moving to a node from outside the window.
                    from = null;
                    to = targetInst;
                  }

                  if (from === to) {
                    // Nothing pertains to our managed components.
                    return;
                  }

                  var SyntheticEventCtor = SyntheticMouseEvent;
                  var leaveEventType = 'onMouseLeave';
                  var enterEventType = 'onMouseEnter';
                  var eventTypePrefix = 'mouse';

                  if (domEventName === 'pointerout' || domEventName === 'pointerover') {
                    SyntheticEventCtor = SyntheticPointerEvent;
                    leaveEventType = 'onPointerLeave';
                    enterEventType = 'onPointerEnter';
                    eventTypePrefix = 'pointer';
                  }

                  var fromNode = from == null ? win : getNodeFromInstance(from);
                  var toNode = to == null ? win : getNodeFromInstance(to);
                  var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);
                  leave.target = fromNode;
                  leave.relatedTarget = toNode;
                  var enter = null; // We should only process this nativeEvent if we are processing
                  // the first ancestor. Next time, we will ignore the event.

                  var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);

                  if (nativeTargetInst === targetInst) {
                    var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);
                    enterEvent.target = toNode;
                    enterEvent.relatedTarget = fromNode;
                    enter = enterEvent;
                  }

                  accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
                }

                /**
                 * inlined Object.is polyfill to avoid requiring consumers ship their own
                 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
                 */
                function is(x, y) {
                  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
                  ;
                }

                var objectIs = typeof Object.is === 'function' ? Object.is : is;

                var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
                /**
                 * Performs equality by iterating through keys on an object and returning false
                 * when any key has values which are not strictly equal between the arguments.
                 * Returns true when the values of all keys are strictly equal.
                 */

                function shallowEqual(objA, objB) {
                  if (objectIs(objA, objB)) {
                    return true;
                  }

                  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
                    return false;
                  }

                  var keysA = Object.keys(objA);
                  var keysB = Object.keys(objB);

                  if (keysA.length !== keysB.length) {
                    return false;
                  } // Test for A's keys different from B.


                  for (var i = 0; i < keysA.length; i++) {
                    if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
                      return false;
                    }
                  }

                  return true;
                }

                /**
                 * Given any node return the first leaf node without children.
                 *
                 * @param {DOMElement|DOMTextNode} node
                 * @return {DOMElement|DOMTextNode}
                 */

                function getLeafNode(node) {
                  while (node && node.firstChild) {
                    node = node.firstChild;
                  }

                  return node;
                }
                /**
                 * Get the next sibling within a container. This will walk up the
                 * DOM if a node's siblings have been exhausted.
                 *
                 * @param {DOMElement|DOMTextNode} node
                 * @return {?DOMElement|DOMTextNode}
                 */

                function getSiblingNode(node) {
                  while (node) {
                    if (node.nextSibling) {
                      return node.nextSibling;
                    }

                    node = node.parentNode;
                  }
                }
                /**
                 * Get object describing the nodes which contain characters at offset.
                 *
                 * @param {DOMElement|DOMTextNode} root
                 * @param {number} offset
                 * @return {?object}
                 */

                function getNodeForCharacterOffset(root, offset) {
                  var node = getLeafNode(root);
                  var nodeStart = 0;
                  var nodeEnd = 0;

                  while (node) {
                    if (node.nodeType === TEXT_NODE) {
                      nodeEnd = nodeStart + node.textContent.length;

                      if (nodeStart <= offset && nodeEnd >= offset) {
                        return {
                          node: node,
                          offset: offset - nodeStart
                        };
                      }

                      nodeStart = nodeEnd;
                    }

                    node = getLeafNode(getSiblingNode(node));
                  }
                }

                /**
                 * @param {DOMElement} outerNode
                 * @return {?object}
                 */

                function getOffsets(outerNode) {
                  var ownerDocument = outerNode.ownerDocument;
                  var win = ownerDocument && ownerDocument.defaultView || window;
                  var selection = win.getSelection && win.getSelection();

                  if (!selection || selection.rangeCount === 0) {
                    return null;
                  }

                  var anchorNode = selection.anchorNode,
                      anchorOffset = selection.anchorOffset,
                      focusNode = selection.focusNode,
                      focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
                  // up/down buttons on an <input type="number">. Anonymous divs do not seem to
                  // expose properties, triggering a "Permission denied error" if any of its
                  // properties are accessed. The only seemingly possible way to avoid erroring
                  // is to access a property that typically works for non-anonymous divs and
                  // catch any error that may otherwise arise. See
                  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

                  try {
                    /* eslint-disable no-unused-expressions */
                    anchorNode.nodeType;
                    focusNode.nodeType;
                    /* eslint-enable no-unused-expressions */
                  } catch (e) {
                    return null;
                  }

                  return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
                }
                /**
                 * Returns {start, end} where `start` is the character/codepoint index of
                 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
                 * `end` is the index of (focusNode, focusOffset).
                 *
                 * Returns null if you pass in garbage input but we should probably just crash.
                 *
                 * Exported only for testing.
                 */

                function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
                  var length = 0;
                  var start = -1;
                  var end = -1;
                  var indexWithinAnchor = 0;
                  var indexWithinFocus = 0;
                  var node = outerNode;
                  var parentNode = null;

                  outer: while (true) {
                    var next = null;

                    while (true) {
                      if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                        start = length + anchorOffset;
                      }

                      if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                        end = length + focusOffset;
                      }

                      if (node.nodeType === TEXT_NODE) {
                        length += node.nodeValue.length;
                      }

                      if ((next = node.firstChild) === null) {
                        break;
                      } // Moving from `node` to its first child `next`.


                      parentNode = node;
                      node = next;
                    }

                    while (true) {
                      if (node === outerNode) {
                        // If `outerNode` has children, this is always the second time visiting
                        // it. If it has no children, this is still the first loop, and the only
                        // valid selection is anchorNode and focusNode both equal to this node
                        // and both offsets 0, in which case we will have handled above.
                        break outer;
                      }

                      if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                        start = length;
                      }

                      if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                        end = length;
                      }

                      if ((next = node.nextSibling) !== null) {
                        break;
                      }

                      node = parentNode;
                      parentNode = node.parentNode;
                    } // Moving from `node` to its next sibling `next`.


                    node = next;
                  }

                  if (start === -1 || end === -1) {
                    // This should never happen. (Would happen if the anchor/focus nodes aren't
                    // actually inside the passed-in node.)
                    return null;
                  }

                  return {
                    start: start,
                    end: end
                  };
                }
                /**
                 * In modern non-IE browsers, we can support both forward and backward
                 * selections.
                 *
                 * Note: IE10+ supports the Selection object, but it does not support
                 * the `extend` method, which means that even in modern IE, it's not possible
                 * to programmatically create a backward selection. Thus, for all IE
                 * versions, we use the old IE API to create our selections.
                 *
                 * @param {DOMElement|DOMTextNode} node
                 * @param {object} offsets
                 */

                function setOffsets(node, offsets) {
                  var doc = node.ownerDocument || document;
                  var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
                  // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
                  // fails when pasting 100+ items)

                  if (!win.getSelection) {
                    return;
                  }

                  var selection = win.getSelection();
                  var length = node.textContent.length;
                  var start = Math.min(offsets.start, length);
                  var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
                  // Flip backward selections, so we can set with a single range.

                  if (!selection.extend && start > end) {
                    var temp = end;
                    end = start;
                    start = temp;
                  }

                  var startMarker = getNodeForCharacterOffset(node, start);
                  var endMarker = getNodeForCharacterOffset(node, end);

                  if (startMarker && endMarker) {
                    if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                      return;
                    }

                    var range = doc.createRange();
                    range.setStart(startMarker.node, startMarker.offset);
                    selection.removeAllRanges();

                    if (start > end) {
                      selection.addRange(range);
                      selection.extend(endMarker.node, endMarker.offset);
                    } else {
                      range.setEnd(endMarker.node, endMarker.offset);
                      selection.addRange(range);
                    }
                  }
                }

                function isTextNode(node) {
                  return node && node.nodeType === TEXT_NODE;
                }

                function containsNode(outerNode, innerNode) {
                  if (!outerNode || !innerNode) {
                    return false;
                  } else if (outerNode === innerNode) {
                    return true;
                  } else if (isTextNode(outerNode)) {
                    return false;
                  } else if (isTextNode(innerNode)) {
                    return containsNode(outerNode, innerNode.parentNode);
                  } else if ('contains' in outerNode) {
                    return outerNode.contains(innerNode);
                  } else if (outerNode.compareDocumentPosition) {
                    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
                  } else {
                    return false;
                  }
                }

                function isInDocument(node) {
                  return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
                }

                function isSameOriginFrame(iframe) {
                  try {
                    // Accessing the contentDocument of a HTMLIframeElement can cause the browser
                    // to throw, e.g. if it has a cross-origin src attribute.
                    // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
                    // iframe.contentDocument.defaultView;
                    // A safety way is to access one of the cross origin properties: Window or Location
                    // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
                    // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
                    return typeof iframe.contentWindow.location.href === 'string';
                  } catch (err) {
                    return false;
                  }
                }

                function getActiveElementDeep() {
                  var win = window;
                  var element = getActiveElement();

                  while (element instanceof win.HTMLIFrameElement) {
                    if (isSameOriginFrame(element)) {
                      win = element.contentWindow;
                    } else {
                      return element;
                    }

                    element = getActiveElement(win.document);
                  }

                  return element;
                }
                /**
                 * @ReactInputSelection: React input selection module. Based on Selection.js,
                 * but modified to be suitable for react and has a couple of bug fixes (doesn't
                 * assume buttons have range selections allowed).
                 * Input selection module for React.
                 */

                /**
                 * @hasSelectionCapabilities: we get the element types that support selection
                 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
                 * and `selectionEnd` rows.
                 */

                function hasSelectionCapabilities(elem) {
                  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
                  return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
                }
                function getSelectionInformation() {
                  var focusedElem = getActiveElementDeep();
                  return {
                    focusedElem: focusedElem,
                    selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
                  };
                }
                /**
                 * @restoreSelection: If any selection information was potentially lost,
                 * restore it. This is useful when performing operations that could remove dom
                 * nodes and place them back in, resulting in focus being lost.
                 */

                function restoreSelection(priorSelectionInformation) {
                  var curFocusedElem = getActiveElementDeep();
                  var priorFocusedElem = priorSelectionInformation.focusedElem;
                  var priorSelectionRange = priorSelectionInformation.selectionRange;

                  if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
                    if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                      setSelection(priorFocusedElem, priorSelectionRange);
                    } // Focusing a node can change the scroll position, which is undesirable


                    var ancestors = [];
                    var ancestor = priorFocusedElem;

                    while (ancestor = ancestor.parentNode) {
                      if (ancestor.nodeType === ELEMENT_NODE) {
                        ancestors.push({
                          element: ancestor,
                          left: ancestor.scrollLeft,
                          top: ancestor.scrollTop
                        });
                      }
                    }

                    if (typeof priorFocusedElem.focus === 'function') {
                      priorFocusedElem.focus();
                    }

                    for (var i = 0; i < ancestors.length; i++) {
                      var info = ancestors[i];
                      info.element.scrollLeft = info.left;
                      info.element.scrollTop = info.top;
                    }
                  }
                }
                /**
                 * @getSelection: Gets the selection bounds of a focused textarea, input or
                 * contentEditable node.
                 * -@input: Look up selection bounds of this input
                 * -@return {start: selectionStart, end: selectionEnd}
                 */

                function getSelection(input) {
                  var selection;

                  if ('selectionStart' in input) {
                    // Modern browser with input or textarea.
                    selection = {
                      start: input.selectionStart,
                      end: input.selectionEnd
                    };
                  } else {
                    // Content editable or old IE textarea.
                    selection = getOffsets(input);
                  }

                  return selection || {
                    start: 0,
                    end: 0
                  };
                }
                /**
                 * @setSelection: Sets the selection bounds of a textarea or input and focuses
                 * the input.
                 * -@input     Set selection bounds of this input or textarea
                 * -@offsets   Object of same form that is returned from get*
                 */

                function setSelection(input, offsets) {
                  var start = offsets.start;
                  var end = offsets.end;

                  if (end === undefined) {
                    end = start;
                  }

                  if ('selectionStart' in input) {
                    input.selectionStart = start;
                    input.selectionEnd = Math.min(end, input.value.length);
                  } else {
                    setOffsets(input, offsets);
                  }
                }

                var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;

                function registerEvents$3() {
                  registerTwoPhaseEvent('onSelect', ['focusout', 'contextmenu', 'dragend', 'focusin', 'keydown', 'keyup', 'mousedown', 'mouseup', 'selectionchange']);
                }

                var activeElement$1 = null;
                var activeElementInst$1 = null;
                var lastSelection = null;
                var mouseDown = false;
                /**
                 * Get an object which is a unique representation of the current selection.
                 *
                 * The return value will not be consistent across nodes or browsers, but
                 * two identical selections on the same node will return identical objects.
                 */

                function getSelection$1(node) {
                  if ('selectionStart' in node && hasSelectionCapabilities(node)) {
                    return {
                      start: node.selectionStart,
                      end: node.selectionEnd
                    };
                  } else {
                    var win = node.ownerDocument && node.ownerDocument.defaultView || window;
                    var selection = win.getSelection();
                    return {
                      anchorNode: selection.anchorNode,
                      anchorOffset: selection.anchorOffset,
                      focusNode: selection.focusNode,
                      focusOffset: selection.focusOffset
                    };
                  }
                }
                /**
                 * Get document associated with the event target.
                 */

                function getEventTargetDocument(eventTarget) {
                  return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
                }
                /**
                 * Poll selection to see whether it's changed.
                 *
                 * @param {object} nativeEvent
                 * @param {object} nativeEventTarget
                 * @return {?SyntheticEvent}
                 */

                function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
                  // Ensure we have the right element, and that the user is not dragging a
                  // selection (this matches native `select` event behavior). In HTML5, select
                  // fires only on input and textarea thus if there's no focused element we
                  // won't dispatch.
                  var doc = getEventTargetDocument(nativeEventTarget);

                  if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
                    return;
                  } // Only fire when selection has actually changed.


                  var currentSelection = getSelection$1(activeElement$1);

                  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
                    lastSelection = currentSelection;
                    var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');

                    if (listeners.length > 0) {
                      var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);
                      dispatchQueue.push({
                        event: event,
                        listeners: listeners
                      });
                      event.target = activeElement$1;
                    }
                  }
                }
                /**
                 * This plugin creates an `onSelect` event that normalizes select events
                 * across form elements.
                 *
                 * Supported elements are:
                 * - input (see `isTextInputElement`)
                 * - textarea
                 * - contentEditable
                 *
                 * This differs from native browser implementations in the following ways:
                 * - Fires on contentEditable fields as well as inputs.
                 * - Fires for collapsed selection.
                 * - Fires after user input.
                 */

                function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {

                  var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;

                  switch (domEventName) {
                    // Track the input node that has focus.
                    case 'focusin':
                      if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
                        activeElement$1 = targetNode;
                        activeElementInst$1 = targetInst;
                        lastSelection = null;
                      }

                      break;

                    case 'focusout':
                      activeElement$1 = null;
                      activeElementInst$1 = null;
                      lastSelection = null;
                      break;
                    // Don't fire the event while the user is dragging. This matches the
                    // semantics of the native select event.

                    case 'mousedown':
                      mouseDown = true;
                      break;

                    case 'contextmenu':
                    case 'mouseup':
                    case 'dragend':
                      mouseDown = false;
                      constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                      break;
                    // Chrome and IE fire non-standard event when selection is changed (and
                    // sometimes when it hasn't). IE's event fires out of order with respect
                    // to key and input events on deletion, so we discard it.
                    //
                    // Firefox doesn't support selectionchange, so check selection status
                    // after each key entry. The selection changes after keydown and before
                    // keyup, but we check on keydown as well in the case of holding down a
                    // key, when multiple keydown events are fired but only one keyup is.
                    // This is also our approach for IE handling, for the reason above.

                    case 'selectionchange':
                      if (skipSelectionChangeEvent) {
                        break;
                      }

                    // falls through

                    case 'keydown':
                    case 'keyup':
                      constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                  }
                }

                function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
                  var reactName = topLevelEventsToReactNames.get(domEventName);

                  if (reactName === undefined) {
                    return;
                  }

                  var SyntheticEventCtor = SyntheticEvent;
                  var reactEventType = domEventName;

                  switch (domEventName) {
                    case 'keypress':
                      // Firefox creates a keypress event for function keys too. This removes
                      // the unwanted keypress events. Enter is however both printable and
                      // non-printable. One would expect Tab to be as well (but it isn't).
                      if (getEventCharCode(nativeEvent) === 0) {
                        return;
                      }

                    /* falls through */

                    case 'keydown':
                    case 'keyup':
                      SyntheticEventCtor = SyntheticKeyboardEvent;
                      break;

                    case 'focusin':
                      reactEventType = 'focus';
                      SyntheticEventCtor = SyntheticFocusEvent;
                      break;

                    case 'focusout':
                      reactEventType = 'blur';
                      SyntheticEventCtor = SyntheticFocusEvent;
                      break;

                    case 'beforeblur':
                    case 'afterblur':
                      SyntheticEventCtor = SyntheticFocusEvent;
                      break;

                    case 'click':
                      // Firefox creates a click event on right mouse clicks. This removes the
                      // unwanted click events.
                      if (nativeEvent.button === 2) {
                        return;
                      }

                    /* falls through */

                    case 'auxclick':
                    case 'dblclick':
                    case 'mousedown':
                    case 'mousemove':
                    case 'mouseup': // TODO: Disabled elements should not respond to mouse events

                    /* falls through */

                    case 'mouseout':
                    case 'mouseover':
                    case 'contextmenu':
                      SyntheticEventCtor = SyntheticMouseEvent;
                      break;

                    case 'drag':
                    case 'dragend':
                    case 'dragenter':
                    case 'dragexit':
                    case 'dragleave':
                    case 'dragover':
                    case 'dragstart':
                    case 'drop':
                      SyntheticEventCtor = SyntheticDragEvent;
                      break;

                    case 'touchcancel':
                    case 'touchend':
                    case 'touchmove':
                    case 'touchstart':
                      SyntheticEventCtor = SyntheticTouchEvent;
                      break;

                    case ANIMATION_END:
                    case ANIMATION_ITERATION:
                    case ANIMATION_START:
                      SyntheticEventCtor = SyntheticAnimationEvent;
                      break;

                    case TRANSITION_END:
                      SyntheticEventCtor = SyntheticTransitionEvent;
                      break;

                    case 'scroll':
                      SyntheticEventCtor = SyntheticUIEvent;
                      break;

                    case 'wheel':
                      SyntheticEventCtor = SyntheticWheelEvent;
                      break;

                    case 'copy':
                    case 'cut':
                    case 'paste':
                      SyntheticEventCtor = SyntheticClipboardEvent;
                      break;

                    case 'gotpointercapture':
                    case 'lostpointercapture':
                    case 'pointercancel':
                    case 'pointerdown':
                    case 'pointermove':
                    case 'pointerout':
                    case 'pointerover':
                    case 'pointerup':
                      SyntheticEventCtor = SyntheticPointerEvent;
                      break;
                  }

                  var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;

                  {
                    // Some events don't bubble in the browser.
                    // In the past, React has always bubbled them, but this can be surprising.
                    // We're going to try aligning closer to the browser behavior by not bubbling
                    // them in React either. We'll start by not bubbling onScroll, and then expand.
                    var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
                    // nonDelegatedEvents list in DOMPluginEventSystem.
                    // Then we can remove this special list.
                    // This is a breaking change that can wait until React 18.
                    domEventName === 'scroll';

                    var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);

                    if (_listeners.length > 0) {
                      // Intentionally create event lazily.
                      var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);

                      dispatchQueue.push({
                        event: _event,
                        listeners: _listeners
                      });
                    }
                  }
                }

                // TODO: remove top-level side effect.
                registerSimpleEvents();
                registerEvents$2();
                registerEvents$1();
                registerEvents$3();
                registerEvents();

                function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
                  // TODO: we should remove the concept of a "SimpleEventPlugin".
                  // This is the basic functionality of the event system. All
                  // the other plugins are essentially polyfills. So the plugin
                  // should probably be inlined somewhere and have its logic
                  // be core the to event system. This would potentially allow
                  // us to ship builds of React without the polyfilled plugins below.
                  extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
                  var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0; // We don't process these events unless we are in the
                  // event's native "bubble" phase, which means that we're
                  // not in the capture phase. That's because we emulate
                  // the capture phase here still. This is a trade-off,
                  // because in an ideal world we would not emulate and use
                  // the phases properly, like we do with the SimpleEvent
                  // plugin. However, the plugins below either expect
                  // emulation (EnterLeave) or use state localized to that
                  // plugin (BeforeInput, Change, Select). The state in
                  // these modules complicates things, as you'll essentially
                  // get the case where the capture phase event might change
                  // state, only for the following bubble event to come in
                  // later and not trigger anything as the state now
                  // invalidates the heuristics of the event plugin. We
                  // could alter all these plugins to work in such ways, but
                  // that might cause other unknown side-effects that we
                  // can't forsee right now.

                  if (shouldProcessPolyfillPlugins) {
                    extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
                    extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
                    extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
                    extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
                  }
                } // List of events that need to be individually attached to media elements.


                var mediaEventTypes = ['abort', 'canplay', 'canplaythrough', 'durationchange', 'emptied', 'encrypted', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart', 'pause', 'play', 'playing', 'progress', 'ratechange', 'seeked', 'seeking', 'stalled', 'suspend', 'timeupdate', 'volumechange', 'waiting']; // We should not delegate these events to the container, but rather
                // set them on the actual target element itself. This is primarily
                // because these events do not consistently bubble in the DOM.

                var nonDelegatedEvents = new Set(['cancel', 'close', 'invalid', 'load', 'scroll', 'toggle'].concat(mediaEventTypes));

                function executeDispatch(event, listener, currentTarget) {
                  var type = event.type || 'unknown-event';
                  event.currentTarget = currentTarget;
                  invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
                  event.currentTarget = null;
                }

                function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
                  var previousInstance;

                  if (inCapturePhase) {
                    for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                      var _dispatchListeners$i = dispatchListeners[i],
                          instance = _dispatchListeners$i.instance,
                          currentTarget = _dispatchListeners$i.currentTarget,
                          listener = _dispatchListeners$i.listener;

                      if (instance !== previousInstance && event.isPropagationStopped()) {
                        return;
                      }

                      executeDispatch(event, listener, currentTarget);
                      previousInstance = instance;
                    }
                  } else {
                    for (var _i = 0; _i < dispatchListeners.length; _i++) {
                      var _dispatchListeners$_i = dispatchListeners[_i],
                          _instance = _dispatchListeners$_i.instance,
                          _currentTarget = _dispatchListeners$_i.currentTarget,
                          _listener = _dispatchListeners$_i.listener;

                      if (_instance !== previousInstance && event.isPropagationStopped()) {
                        return;
                      }

                      executeDispatch(event, _listener, _currentTarget);
                      previousInstance = _instance;
                    }
                  }
                }

                function processDispatchQueue(dispatchQueue, eventSystemFlags) {
                  var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;

                  for (var i = 0; i < dispatchQueue.length; i++) {
                    var _dispatchQueue$i = dispatchQueue[i],
                        event = _dispatchQueue$i.event,
                        listeners = _dispatchQueue$i.listeners;
                    processDispatchQueueItemsInOrder(event, listeners, inCapturePhase); //  event system doesn't use pooling.
                  } // This would be a good time to rethrow if any of the event handlers threw.


                  rethrowCaughtError();
                }

                function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
                  var nativeEventTarget = getEventTarget(nativeEvent);
                  var dispatchQueue = [];
                  extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
                  processDispatchQueue(dispatchQueue, eventSystemFlags);
                }

                function listenToNonDelegatedEvent(domEventName, targetElement) {
                  var isCapturePhaseListener = false;
                  var listenerSet = getEventListenerSet(targetElement);
                  var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);

                  if (!listenerSet.has(listenerSetKey)) {
                    addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
                    listenerSet.add(listenerSetKey);
                  }
                }
                var listeningMarker = '_reactListening' + Math.random().toString(36).slice(2);
                function listenToAllSupportedEvents(rootContainerElement) {
                  {
                    if (rootContainerElement[listeningMarker]) {
                      // Performance optimization: don't iterate through events
                      // for the same portal container or root node more than once.
                      // TODO: once we remove the flag, we may be able to also
                      // remove some of the bookkeeping maps used for laziness.
                      return;
                    }

                    rootContainerElement[listeningMarker] = true;
                    allNativeEvents.forEach(function (domEventName) {
                      if (!nonDelegatedEvents.has(domEventName)) {
                        listenToNativeEvent(domEventName, false, rootContainerElement, null);
                      }

                      listenToNativeEvent(domEventName, true, rootContainerElement, null);
                    });
                  }
                }
                function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
                  var eventSystemFlags = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
                  var target = rootContainerElement; // selectionchange needs to be attached to the document
                  // otherwise it won't capture incoming events that are only
                  // triggered on the document directly.

                  if (domEventName === 'selectionchange' && rootContainerElement.nodeType !== DOCUMENT_NODE) {
                    target = rootContainerElement.ownerDocument;
                  } // If the event can be delegated (or is capture phase), we can
                  // register it to the root container. Otherwise, we should
                  // register the event to the target element and mark it as
                  // a non-delegated event.


                  if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
                    // For all non-delegated events, apart from scroll, we attach
                    // their event listeners to the respective elements that their
                    // events fire on. That means we can skip this step, as event
                    // listener has already been added previously. However, we
                    // special case the scroll event because the reality is that any
                    // element can scroll.
                    // TODO: ideally, we'd eventually apply the same logic to all
                    // events from the nonDelegatedEvents list. Then we can remove
                    // this special case and use the same logic for all events.
                    if (domEventName !== 'scroll') {
                      return;
                    }

                    eventSystemFlags |= IS_NON_DELEGATED;
                    target = targetElement;
                  }

                  var listenerSet = getEventListenerSet(target);
                  var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener); // If the listener entry is empty or we should upgrade, then
                  // we need to trap an event listener onto the target.

                  if (!listenerSet.has(listenerSetKey)) {
                    if (isCapturePhaseListener) {
                      eventSystemFlags |= IS_CAPTURE_PHASE;
                    }

                    addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
                    listenerSet.add(listenerSetKey);
                  }
                }

                function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
                  var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags); // If passive option is not supported, then the event will be
                  // active and not passive.

                  var isPassiveListener = undefined;

                  if (passiveBrowserEventsSupported) {
                    // Browsers introduced an intervention, making these events
                    // passive by default on document. React doesn't bind them
                    // to document anymore, but changing this now would undo
                    // the performance wins from the change. So we emulate
                    // the existing behavior manually on the roots now.
                    // https://github.com/facebook/react/issues/19651
                    if (domEventName === 'touchstart' || domEventName === 'touchmove' || domEventName === 'wheel') {
                      isPassiveListener = true;
                    }
                  }

                  targetContainer = targetContainer;
                  var unsubscribeListener; // When legacyFBSupport is enabled, it's for when we


                  if (isCapturePhaseListener) {
                    if (isPassiveListener !== undefined) {
                      unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
                    } else {
                      unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
                    }
                  } else {
                    if (isPassiveListener !== undefined) {
                      unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
                    } else {
                      unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
                    }
                  }
                }

                function isMatchingRootContainer(grandContainer, targetContainer) {
                  return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
                }

                function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
                  var ancestorInst = targetInst;

                  if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
                    var targetContainerNode = targetContainer; // If we are using the legacy FB support flag, we

                    if (targetInst !== null) {
                      // The below logic attempts to work out if we need to change
                      // the target fiber to a different ancestor. We had similar logic
                      // in the legacy event system, except the big difference between
                      // systems is that the modern event system now has an event listener
                      // attached to each React Root and React Portal Root. Together,
                      // the DOM nodes representing these roots are the "rootContainer".
                      // To figure out which ancestor instance we should use, we traverse
                      // up the fiber tree from the target instance and attempt to find
                      // root boundaries that match that of our current "rootContainer".
                      // If we find that "rootContainer", we find the parent fiber
                      // sub-tree for that root and make that our ancestor instance.
                      var node = targetInst;

                      mainLoop: while (true) {
                        if (node === null) {
                          return;
                        }

                        var nodeTag = node.tag;

                        if (nodeTag === HostRoot || nodeTag === HostPortal) {
                          var container = node.stateNode.containerInfo;

                          if (isMatchingRootContainer(container, targetContainerNode)) {
                            break;
                          }

                          if (nodeTag === HostPortal) {
                            // The target is a portal, but it's not the rootContainer we're looking for.
                            // Normally portals handle their own events all the way down to the root.
                            // So we should be able to stop now. However, we don't know if this portal
                            // was part of *our* root.
                            var grandNode = node.return;

                            while (grandNode !== null) {
                              var grandTag = grandNode.tag;

                              if (grandTag === HostRoot || grandTag === HostPortal) {
                                var grandContainer = grandNode.stateNode.containerInfo;

                                if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                                  // This is the rootContainer we're looking for and we found it as
                                  // a parent of the Portal. That means we can ignore it because the
                                  // Portal will bubble through to us.
                                  return;
                                }
                              }

                              grandNode = grandNode.return;
                            }
                          } // Now we need to find it's corresponding host fiber in the other
                          // tree. To do this we can use getClosestInstanceFromNode, but we
                          // need to validate that the fiber is a host instance, otherwise
                          // we need to traverse up through the DOM till we find the correct
                          // node that is from the other tree.


                          while (container !== null) {
                            var parentNode = getClosestInstanceFromNode(container);

                            if (parentNode === null) {
                              return;
                            }

                            var parentTag = parentNode.tag;

                            if (parentTag === HostComponent || parentTag === HostText) {
                              node = ancestorInst = parentNode;
                              continue mainLoop;
                            }

                            container = container.parentNode;
                          }
                        }

                        node = node.return;
                      }
                    }
                  }

                  batchedEventUpdates(function () {
                    return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
                  });
                }

                function createDispatchListener(instance, listener, currentTarget) {
                  return {
                    instance: instance,
                    listener: listener,
                    currentTarget: currentTarget
                  };
                }

                function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
                  var captureName = reactName !== null ? reactName + 'Capture' : null;
                  var reactEventName = inCapturePhase ? captureName : reactName;
                  var listeners = [];
                  var instance = targetFiber;
                  var lastHostComponent = null; // Accumulate all instances and listeners via the target -> root path.

                  while (instance !== null) {
                    var _instance2 = instance,
                        stateNode = _instance2.stateNode,
                        tag = _instance2.tag; // Handle listeners that are on HostComponents (i.e. <div>)

                    if (tag === HostComponent && stateNode !== null) {
                      lastHostComponent = stateNode; // createEventHandle listeners


                      if (reactEventName !== null) {
                        var listener = getListener(instance, reactEventName);

                        if (listener != null) {
                          listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                        }
                      }
                    } // If we are only accumulating events for the target, then we don't
                    // continue to propagate through the React fiber tree to find other
                    // listeners.


                    if (accumulateTargetOnly) {
                      break;
                    }

                    instance = instance.return;
                  }

                  return listeners;
                } // We should only use this function for:
                // - BeforeInputEventPlugin
                // - ChangeEventPlugin
                // - SelectEventPlugin
                // This is because we only process these plugins
                // in the bubble phase, so we need to accumulate two
                // phase event listeners (via emulation).

                function accumulateTwoPhaseListeners(targetFiber, reactName) {
                  var captureName = reactName + 'Capture';
                  var listeners = [];
                  var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.

                  while (instance !== null) {
                    var _instance3 = instance,
                        stateNode = _instance3.stateNode,
                        tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)

                    if (tag === HostComponent && stateNode !== null) {
                      var currentTarget = stateNode;
                      var captureListener = getListener(instance, captureName);

                      if (captureListener != null) {
                        listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                      }

                      var bubbleListener = getListener(instance, reactName);

                      if (bubbleListener != null) {
                        listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                      }
                    }

                    instance = instance.return;
                  }

                  return listeners;
                }

                function getParent(inst) {
                  if (inst === null) {
                    return null;
                  }

                  do {
                    inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
                    // That is depending on if we want nested subtrees (layers) to bubble
                    // events to their parent. We could also go through parentNode on the
                    // host node but that wouldn't work for React Native and doesn't let us
                    // do the portal feature.
                  } while (inst && inst.tag !== HostComponent);

                  if (inst) {
                    return inst;
                  }

                  return null;
                }
                /**
                 * Return the lowest common ancestor of A and B, or null if they are in
                 * different trees.
                 */

                function getLowestCommonAncestor(instA, instB) {
                  var nodeA = instA;
                  var nodeB = instB;
                  var depthA = 0;

                  for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
                    depthA++;
                  }

                  var depthB = 0;

                  for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
                    depthB++;
                  } // If A is deeper, crawl up.


                  while (depthA - depthB > 0) {
                    nodeA = getParent(nodeA);
                    depthA--;
                  } // If B is deeper, crawl up.


                  while (depthB - depthA > 0) {
                    nodeB = getParent(nodeB);
                    depthB--;
                  } // Walk in lockstep until we find a match.


                  var depth = depthA;

                  while (depth--) {
                    if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                      return nodeA;
                    }

                    nodeA = getParent(nodeA);
                    nodeB = getParent(nodeB);
                  }

                  return null;
                }

                function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
                  var registrationName = event._reactName;
                  var listeners = [];
                  var instance = target;

                  while (instance !== null) {
                    if (instance === common) {
                      break;
                    }

                    var _instance4 = instance,
                        alternate = _instance4.alternate,
                        stateNode = _instance4.stateNode,
                        tag = _instance4.tag;

                    if (alternate !== null && alternate === common) {
                      break;
                    }

                    if (tag === HostComponent && stateNode !== null) {
                      var currentTarget = stateNode;

                      if (inCapturePhase) {
                        var captureListener = getListener(instance, registrationName);

                        if (captureListener != null) {
                          listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                        }
                      } else if (!inCapturePhase) {
                        var bubbleListener = getListener(instance, registrationName);

                        if (bubbleListener != null) {
                          listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                        }
                      }
                    }

                    instance = instance.return;
                  }

                  if (listeners.length !== 0) {
                    dispatchQueue.push({
                      event: event,
                      listeners: listeners
                    });
                  }
                } // We should only use this function for:
                // - EnterLeaveEventPlugin
                // This is because we only process this plugin
                // in the bubble phase, so we need to accumulate two
                // phase event listeners.


                function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
                  var common = from && to ? getLowestCommonAncestor(from, to) : null;

                  if (from !== null) {
                    accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
                  }

                  if (to !== null && enterEvent !== null) {
                    accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
                  }
                }
                function getListenerSetKey(domEventName, capture) {
                  return domEventName + "__" + (capture ? 'capture' : 'bubble');
                }

                var didWarnInvalidHydration = false;
                var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
                var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
                var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
                var AUTOFOCUS = 'autoFocus';
                var CHILDREN = 'children';
                var STYLE = 'style';
                var HTML$1 = '__html';
                var HTML_NAMESPACE$1 = Namespaces.html;
                var warnedUnknownTags;
                var suppressHydrationWarning;
                var validatePropertiesInDevelopment;
                var warnForTextDifference;
                var warnForPropDifference;
                var warnForExtraAttributes;
                var warnForInvalidEventListener;
                var canDiffStyleForHydrationWarning;
                var normalizeMarkupForTextOrAttribute;
                var normalizeHTML;

                {
                  warnedUnknownTags = {
                    // There are working polyfills for <dialog>. Let people use it.
                    dialog: true,
                    // Electron ships a custom <webview> tag to display external web content in
                    // an isolated frame and process.
                    // This tag is not present in non Electron environments such as JSDom which
                    // is often used for testing purposes.
                    // @see https://electronjs.org/docs/api/webview-tag
                    webview: true
                  };

                  validatePropertiesInDevelopment = function (type, props) {
                    validateProperties(type, props);
                    validateProperties$1(type, props);
                    validateProperties$2(type, props, {
                      registrationNameDependencies: registrationNameDependencies,
                      possibleRegistrationNames: possibleRegistrationNames
                    });
                  }; // IE 11 parses & normalizes the style attribute as opposed to other
                  // browsers. It adds spaces and sorts the properties in some
                  // non-alphabetical order. Handling that would require sorting CSS
                  // properties in the client & server versions or applying
                  // `expectedStyle` to a temporary DOM node to read its `style` attribute
                  // normalized. Since it only affects IE, we're skipping style warnings
                  // in that browser completely in favor of doing all that work.
                  // See https://github.com/facebook/react/issues/11807


                  canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode; // HTML parsing normalizes CR and CRLF to LF.
                  // It also can turn \u0000 into \uFFFD inside attributes.
                  // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
                  // If we have a mismatch, it might be caused by that.
                  // We will still patch up in this case but not fire the warning.

                  var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
                  var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

                  normalizeMarkupForTextOrAttribute = function (markup) {
                    var markupString = typeof markup === 'string' ? markup : '' + markup;
                    return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
                  };

                  warnForTextDifference = function (serverText, clientText) {
                    if (didWarnInvalidHydration) {
                      return;
                    }

                    var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
                    var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);

                    if (normalizedServerText === normalizedClientText) {
                      return;
                    }

                    didWarnInvalidHydration = true;

                    error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                  };

                  warnForPropDifference = function (propName, serverValue, clientValue) {
                    if (didWarnInvalidHydration) {
                      return;
                    }

                    var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
                    var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);

                    if (normalizedServerValue === normalizedClientValue) {
                      return;
                    }

                    didWarnInvalidHydration = true;

                    error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
                  };

                  warnForExtraAttributes = function (attributeNames) {
                    if (didWarnInvalidHydration) {
                      return;
                    }

                    didWarnInvalidHydration = true;
                    var names = [];
                    attributeNames.forEach(function (name) {
                      names.push(name);
                    });

                    error('Extra attributes from the server: %s', names);
                  };

                  warnForInvalidEventListener = function (registrationName, listener) {
                    if (listener === false) {
                      error('Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
                    } else {
                      error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
                    }
                  }; // Parse the HTML and read it back to normalize the HTML string so that it
                  // can be used for comparison.


                  normalizeHTML = function (parent, html) {
                    // We could have created a separate document here to avoid
                    // re-initializing custom elements if they exist. But this breaks
                    // how <noscript> is being handled. So we use the same document.
                    // See the discussion in https://github.com/facebook/react/pull/11157.
                    var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
                    testElement.innerHTML = html;
                    return testElement.innerHTML;
                  };
                }

                function getOwnerDocumentFromRootContainer(rootContainerElement) {
                  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
                }

                function noop() {}

                function trapClickOnNonInteractiveElement(node) {
                  // Mobile Safari does not fire properly bubble click events on
                  // non-interactive elements, which means delegated click listeners do not
                  // fire. The workaround for this bug involves attaching an empty click
                  // listener on the target node.
                  // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
                  // Just set it using the onclick property so that we don't have to manage any
                  // bookkeeping for it. Not sure if we need to clear it when the listener is
                  // removed.
                  // TODO: Only do this for the relevant Safaris maybe?
                  node.onclick = noop;
                }

                function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
                  for (var propKey in nextProps) {
                    if (!nextProps.hasOwnProperty(propKey)) {
                      continue;
                    }

                    var nextProp = nextProps[propKey];

                    if (propKey === STYLE) {
                      {
                        if (nextProp) {
                          // Freeze the next style object so that we can assume it won't be
                          // mutated. We have already warned for this in the past.
                          Object.freeze(nextProp);
                        }
                      } // Relies on `updateStylesByID` not mutating `styleUpdates`.


                      setValueForStyles(domElement, nextProp);
                    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;

                      if (nextHtml != null) {
                        setInnerHTML(domElement, nextHtml);
                      }
                    } else if (propKey === CHILDREN) {
                      if (typeof nextProp === 'string') {
                        // Avoid setting initial textContent when the text is empty. In IE11 setting
                        // textContent on a <textarea> will cause the placeholder to not
                        // show within the <textarea> until it has been focused and blurred again.
                        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
                        var canSetTextContent = tag !== 'textarea' || nextProp !== '';

                        if (canSetTextContent) {
                          setTextContent(domElement, nextProp);
                        }
                      } else if (typeof nextProp === 'number') {
                        setTextContent(domElement, '' + nextProp);
                      }
                    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;else if (propKey === AUTOFOCUS) ;else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                      if (nextProp != null) {
                        if (typeof nextProp !== 'function') {
                          warnForInvalidEventListener(propKey, nextProp);
                        }

                        if (propKey === 'onScroll') {
                          listenToNonDelegatedEvent('scroll', domElement);
                        }
                      }
                    } else if (nextProp != null) {
                      setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
                    }
                  }
                }

                function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
                  // TODO: Handle wasCustomComponentTag
                  for (var i = 0; i < updatePayload.length; i += 2) {
                    var propKey = updatePayload[i];
                    var propValue = updatePayload[i + 1];

                    if (propKey === STYLE) {
                      setValueForStyles(domElement, propValue);
                    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                      setInnerHTML(domElement, propValue);
                    } else if (propKey === CHILDREN) {
                      setTextContent(domElement, propValue);
                    } else {
                      setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
                    }
                  }
                }

                function createElement(type, props, rootContainerElement, parentNamespace) {
                  var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
                  // tags get no namespace.

                  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
                  var domElement;
                  var namespaceURI = parentNamespace;

                  if (namespaceURI === HTML_NAMESPACE$1) {
                    namespaceURI = getIntrinsicNamespace(type);
                  }

                  if (namespaceURI === HTML_NAMESPACE$1) {
                    {
                      isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
                      // allow <SVG> or <mATH>.

                      if (!isCustomComponentTag && type !== type.toLowerCase()) {
                        error('<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type);
                      }
                    }

                    if (type === 'script') {
                      // Create the script via .innerHTML so its "parser-inserted" flag is
                      // set to true and it does not execute
                      var div = ownerDocument.createElement('div');

                      div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
                      // This is guaranteed to yield a script element.

                      var firstChild = div.firstChild;
                      domElement = div.removeChild(firstChild);
                    } else if (typeof props.is === 'string') {
                      // $FlowIssue `createElement` should be updated for Web Components
                      domElement = ownerDocument.createElement(type, {
                        is: props.is
                      });
                    } else {
                      // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
                      // See discussion in https://github.com/facebook/react/pull/6896
                      // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
                      domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
                      // attributes on `select`s needs to be added before `option`s are inserted.
                      // This prevents:
                      // - a bug where the `select` does not scroll to the correct option because singular
                      //  `select` elements automatically pick the first item #13222
                      // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
                      // See https://github.com/facebook/react/issues/13222
                      // and https://github.com/facebook/react/issues/14239

                      if (type === 'select') {
                        var node = domElement;

                        if (props.multiple) {
                          node.multiple = true;
                        } else if (props.size) {
                          // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
                          // it is possible that no option is selected.
                          //
                          // This is only necessary when a select in "single selection mode".
                          node.size = props.size;
                        }
                      }
                    }
                  } else {
                    domElement = ownerDocument.createElementNS(namespaceURI, type);
                  }

                  {
                    if (namespaceURI === HTML_NAMESPACE$1) {
                      if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                        warnedUnknownTags[type] = true;

                        error('The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
                      }
                    }
                  }

                  return domElement;
                }
                function createTextNode(text, rootContainerElement) {
                  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
                }
                function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
                  var isCustomComponentTag = isCustomComponent(tag, rawProps);

                  {
                    validatePropertiesInDevelopment(tag, rawProps);
                  } // TODO: Make sure that we check isMounted before firing any of these events.


                  var props;

                  switch (tag) {
                    case 'dialog':
                      listenToNonDelegatedEvent('cancel', domElement);
                      listenToNonDelegatedEvent('close', domElement);
                      props = rawProps;
                      break;

                    case 'iframe':
                    case 'object':
                    case 'embed':
                      // We listen to this event in case to ensure emulated bubble
                      // listeners still fire for the load event.
                      listenToNonDelegatedEvent('load', domElement);
                      props = rawProps;
                      break;

                    case 'video':
                    case 'audio':
                      // We listen to these events in case to ensure emulated bubble
                      // listeners still fire for all the media events.
                      for (var i = 0; i < mediaEventTypes.length; i++) {
                        listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                      }

                      props = rawProps;
                      break;

                    case 'source':
                      // We listen to this event in case to ensure emulated bubble
                      // listeners still fire for the error event.
                      listenToNonDelegatedEvent('error', domElement);
                      props = rawProps;
                      break;

                    case 'img':
                    case 'image':
                    case 'link':
                      // We listen to these events in case to ensure emulated bubble
                      // listeners still fire for error and load events.
                      listenToNonDelegatedEvent('error', domElement);
                      listenToNonDelegatedEvent('load', domElement);
                      props = rawProps;
                      break;

                    case 'details':
                      // We listen to this event in case to ensure emulated bubble
                      // listeners still fire for the toggle event.
                      listenToNonDelegatedEvent('toggle', domElement);
                      props = rawProps;
                      break;

                    case 'input':
                      initWrapperState(domElement, rawProps);
                      props = getHostProps(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                      // listeners still fire for the invalid event.

                      listenToNonDelegatedEvent('invalid', domElement);

                      break;

                    case 'option':
                      validateProps(domElement, rawProps);
                      props = getHostProps$1(domElement, rawProps);
                      break;

                    case 'select':
                      initWrapperState$1(domElement, rawProps);
                      props = getHostProps$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                      // listeners still fire for the invalid event.

                      listenToNonDelegatedEvent('invalid', domElement);

                      break;

                    case 'textarea':
                      initWrapperState$2(domElement, rawProps);
                      props = getHostProps$3(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                      // listeners still fire for the invalid event.

                      listenToNonDelegatedEvent('invalid', domElement);

                      break;

                    default:
                      props = rawProps;
                  }

                  assertValidProps(tag, props);
                  setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

                  switch (tag) {
                    case 'input':
                      // TODO: Make sure we check if this is still unmounted or do any clean
                      // up necessary since we never stop tracking anymore.
                      track(domElement);
                      postMountWrapper(domElement, rawProps, false);
                      break;

                    case 'textarea':
                      // TODO: Make sure we check if this is still unmounted or do any clean
                      // up necessary since we never stop tracking anymore.
                      track(domElement);
                      postMountWrapper$3(domElement);
                      break;

                    case 'option':
                      postMountWrapper$1(domElement, rawProps);
                      break;

                    case 'select':
                      postMountWrapper$2(domElement, rawProps);
                      break;

                    default:
                      if (typeof props.onClick === 'function') {
                        // TODO: This cast may not be sound for SVG, MathML or custom elements.
                        trapClickOnNonInteractiveElement(domElement);
                      }

                      break;
                  }
                } // Calculate the diff between the two objects.

                function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
                  {
                    validatePropertiesInDevelopment(tag, nextRawProps);
                  }

                  var updatePayload = null;
                  var lastProps;
                  var nextProps;

                  switch (tag) {
                    case 'input':
                      lastProps = getHostProps(domElement, lastRawProps);
                      nextProps = getHostProps(domElement, nextRawProps);
                      updatePayload = [];
                      break;

                    case 'option':
                      lastProps = getHostProps$1(domElement, lastRawProps);
                      nextProps = getHostProps$1(domElement, nextRawProps);
                      updatePayload = [];
                      break;

                    case 'select':
                      lastProps = getHostProps$2(domElement, lastRawProps);
                      nextProps = getHostProps$2(domElement, nextRawProps);
                      updatePayload = [];
                      break;

                    case 'textarea':
                      lastProps = getHostProps$3(domElement, lastRawProps);
                      nextProps = getHostProps$3(domElement, nextRawProps);
                      updatePayload = [];
                      break;

                    default:
                      lastProps = lastRawProps;
                      nextProps = nextRawProps;

                      if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
                        // TODO: This cast may not be sound for SVG, MathML or custom elements.
                        trapClickOnNonInteractiveElement(domElement);
                      }

                      break;
                  }

                  assertValidProps(tag, nextProps);
                  var propKey;
                  var styleName;
                  var styleUpdates = null;

                  for (propKey in lastProps) {
                    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                      continue;
                    }

                    if (propKey === STYLE) {
                      var lastStyle = lastProps[propKey];

                      for (styleName in lastStyle) {
                        if (lastStyle.hasOwnProperty(styleName)) {
                          if (!styleUpdates) {
                            styleUpdates = {};
                          }

                          styleUpdates[styleName] = '';
                        }
                      }
                    } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;else if (propKey === AUTOFOCUS) ;else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                      // This is a special case. If any listener updates we need to ensure
                      // that the "current" fiber pointer gets updated so we need a commit
                      // to update this element.
                      if (!updatePayload) {
                        updatePayload = [];
                      }
                    } else {
                      // For all other deleted properties we add it to the queue. We use
                      // the allowed property list in the commit phase instead.
                      (updatePayload = updatePayload || []).push(propKey, null);
                    }
                  }

                  for (propKey in nextProps) {
                    var nextProp = nextProps[propKey];
                    var lastProp = lastProps != null ? lastProps[propKey] : undefined;

                    if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                      continue;
                    }

                    if (propKey === STYLE) {
                      {
                        if (nextProp) {
                          // Freeze the next style object so that we can assume it won't be
                          // mutated. We have already warned for this in the past.
                          Object.freeze(nextProp);
                        }
                      }

                      if (lastProp) {
                        // Unset styles on `lastProp` but not on `nextProp`.
                        for (styleName in lastProp) {
                          if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                            if (!styleUpdates) {
                              styleUpdates = {};
                            }

                            styleUpdates[styleName] = '';
                          }
                        } // Update styles that changed since `lastProp`.


                        for (styleName in nextProp) {
                          if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                            if (!styleUpdates) {
                              styleUpdates = {};
                            }

                            styleUpdates[styleName] = nextProp[styleName];
                          }
                        }
                      } else {
                        // Relies on `updateStylesByID` not mutating `styleUpdates`.
                        if (!styleUpdates) {
                          if (!updatePayload) {
                            updatePayload = [];
                          }

                          updatePayload.push(propKey, styleUpdates);
                        }

                        styleUpdates = nextProp;
                      }
                    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                      var lastHtml = lastProp ? lastProp[HTML$1] : undefined;

                      if (nextHtml != null) {
                        if (lastHtml !== nextHtml) {
                          (updatePayload = updatePayload || []).push(propKey, nextHtml);
                        }
                      }
                    } else if (propKey === CHILDREN) {
                      if (typeof nextProp === 'string' || typeof nextProp === 'number') {
                        (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
                      }
                    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                      if (nextProp != null) {
                        // We eagerly listen to this even though we haven't committed yet.
                        if (typeof nextProp !== 'function') {
                          warnForInvalidEventListener(propKey, nextProp);
                        }

                        if (propKey === 'onScroll') {
                          listenToNonDelegatedEvent('scroll', domElement);
                        }
                      }

                      if (!updatePayload && lastProp !== nextProp) {
                        // This is a special case. If any listener updates we need to ensure
                        // that the "current" props pointer gets updated so we need a commit
                        // to update this element.
                        updatePayload = [];
                      }
                    } else if (typeof nextProp === 'object' && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) {
                      // If we encounter useOpaqueReference's opaque object, this means we are hydrating.
                      // In this case, call the opaque object's toString function which generates a new client
                      // ID so client and server IDs match and throws to rerender.
                      nextProp.toString();
                    } else {
                      // For any other property we always add it to the queue and then we
                      // filter it out using the allowed property list during the commit.
                      (updatePayload = updatePayload || []).push(propKey, nextProp);
                    }
                  }

                  if (styleUpdates) {
                    {
                      validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
                    }

                    (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
                  }

                  return updatePayload;
                } // Apply the diff.

                function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
                  // Update checked *before* name.
                  // In the middle of an update, it is possible to have multiple checked.
                  // When a checked radio tries to change name, browser makes another radio's checked false.
                  if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
                    updateChecked(domElement, nextRawProps);
                  }

                  var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
                  var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.

                  updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
                  // changed.

                  switch (tag) {
                    case 'input':
                      // Update the wrapper around inputs *after* updating props. This has to
                      // happen after `updateDOMProperties`. Otherwise HTML5 input validations
                      // raise warnings and prevent the new value from being assigned.
                      updateWrapper(domElement, nextRawProps);
                      break;

                    case 'textarea':
                      updateWrapper$1(domElement, nextRawProps);
                      break;

                    case 'select':
                      // <select> value update needs to occur after <option> children
                      // reconciliation
                      postUpdateWrapper(domElement, nextRawProps);
                      break;
                  }
                }

                function getPossibleStandardName(propName) {
                  {
                    var lowerCasedName = propName.toLowerCase();

                    if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                      return null;
                    }

                    return possibleStandardNames[lowerCasedName] || null;
                  }
                }

                function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
                  var isCustomComponentTag;
                  var extraAttributeNames;

                  {
                    suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
                    isCustomComponentTag = isCustomComponent(tag, rawProps);
                    validatePropertiesInDevelopment(tag, rawProps);
                  } // TODO: Make sure that we check isMounted before firing any of these events.


                  switch (tag) {
                    case 'dialog':
                      listenToNonDelegatedEvent('cancel', domElement);
                      listenToNonDelegatedEvent('close', domElement);
                      break;

                    case 'iframe':
                    case 'object':
                    case 'embed':
                      // We listen to this event in case to ensure emulated bubble
                      // listeners still fire for the load event.
                      listenToNonDelegatedEvent('load', domElement);
                      break;

                    case 'video':
                    case 'audio':
                      // We listen to these events in case to ensure emulated bubble
                      // listeners still fire for all the media events.
                      for (var i = 0; i < mediaEventTypes.length; i++) {
                        listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                      }

                      break;

                    case 'source':
                      // We listen to this event in case to ensure emulated bubble
                      // listeners still fire for the error event.
                      listenToNonDelegatedEvent('error', domElement);
                      break;

                    case 'img':
                    case 'image':
                    case 'link':
                      // We listen to these events in case to ensure emulated bubble
                      // listeners still fire for error and load events.
                      listenToNonDelegatedEvent('error', domElement);
                      listenToNonDelegatedEvent('load', domElement);
                      break;

                    case 'details':
                      // We listen to this event in case to ensure emulated bubble
                      // listeners still fire for the toggle event.
                      listenToNonDelegatedEvent('toggle', domElement);
                      break;

                    case 'input':
                      initWrapperState(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                      // listeners still fire for the invalid event.

                      listenToNonDelegatedEvent('invalid', domElement);

                      break;

                    case 'option':
                      validateProps(domElement, rawProps);
                      break;

                    case 'select':
                      initWrapperState$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                      // listeners still fire for the invalid event.

                      listenToNonDelegatedEvent('invalid', domElement);

                      break;

                    case 'textarea':
                      initWrapperState$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                      // listeners still fire for the invalid event.

                      listenToNonDelegatedEvent('invalid', domElement);

                      break;
                  }

                  assertValidProps(tag, rawProps);

                  {
                    extraAttributeNames = new Set();
                    var attributes = domElement.attributes;

                    for (var _i = 0; _i < attributes.length; _i++) {
                      var name = attributes[_i].name.toLowerCase();

                      switch (name) {
                        // Built-in SSR attribute is allowed
                        case 'data-reactroot':
                          break;
                        // Controlled attributes are not validated
                        // TODO: Only ignore them on controlled tags.

                        case 'value':
                          break;

                        case 'checked':
                          break;

                        case 'selected':
                          break;

                        default:
                          // Intentionally use the original name.
                          // See discussion in https://github.com/facebook/react/pull/10676.
                          extraAttributeNames.add(attributes[_i].name);
                      }
                    }
                  }

                  var updatePayload = null;

                  for (var propKey in rawProps) {
                    if (!rawProps.hasOwnProperty(propKey)) {
                      continue;
                    }

                    var nextProp = rawProps[propKey];

                    if (propKey === CHILDREN) {
                      // For text content children we compare against textContent. This
                      // might match additional HTML that is hidden when we read it using
                      // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
                      // satisfies our requirement. Our requirement is not to produce perfect
                      // HTML and attributes. Ideally we should preserve structure but it's
                      // ok not to if the visible content is still enough to indicate what
                      // even listeners these nodes might be wired up to.
                      // TODO: Warn if there is more than a single textNode as a child.
                      // TODO: Should we use domElement.firstChild.nodeValue to compare?
                      if (typeof nextProp === 'string') {
                        if (domElement.textContent !== nextProp) {
                          if (!suppressHydrationWarning) {
                            warnForTextDifference(domElement.textContent, nextProp);
                          }

                          updatePayload = [CHILDREN, nextProp];
                        }
                      } else if (typeof nextProp === 'number') {
                        if (domElement.textContent !== '' + nextProp) {
                          if (!suppressHydrationWarning) {
                            warnForTextDifference(domElement.textContent, nextProp);
                          }

                          updatePayload = [CHILDREN, '' + nextProp];
                        }
                      }
                    } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                      if (nextProp != null) {
                        if (typeof nextProp !== 'function') {
                          warnForInvalidEventListener(propKey, nextProp);
                        }

                        if (propKey === 'onScroll') {
                          listenToNonDelegatedEvent('scroll', domElement);
                        }
                      }
                    } else if ( // Convince Flow we've calculated it (it's DEV-only in this method.)
                    typeof isCustomComponentTag === 'boolean') {
                      // Validate that the properties correspond to their expected values.
                      var serverValue = void 0;
                      var propertyInfo = getPropertyInfo(propKey);

                      if (suppressHydrationWarning) ;else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                      // TODO: Only ignore them on controlled tags.
                      propKey === 'value' || propKey === 'checked' || propKey === 'selected') ;else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                        var serverHTML = domElement.innerHTML;
                        var nextHtml = nextProp ? nextProp[HTML$1] : undefined;

                        if (nextHtml != null) {
                          var expectedHTML = normalizeHTML(domElement, nextHtml);

                          if (expectedHTML !== serverHTML) {
                            warnForPropDifference(propKey, serverHTML, expectedHTML);
                          }
                        }
                      } else if (propKey === STYLE) {
                        // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propKey);

                        if (canDiffStyleForHydrationWarning) {
                          var expectedStyle = createDangerousStringForStyles(nextProp);
                          serverValue = domElement.getAttribute('style');

                          if (expectedStyle !== serverValue) {
                            warnForPropDifference(propKey, serverValue, expectedStyle);
                          }
                        }
                      } else if (isCustomComponentTag) {
                        // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propKey.toLowerCase());
                        serverValue = getValueForAttribute(domElement, propKey, nextProp);

                        if (nextProp !== serverValue) {
                          warnForPropDifference(propKey, serverValue, nextProp);
                        }
                      } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                        var isMismatchDueToBadCasing = false;

                        if (propertyInfo !== null) {
                          // $FlowFixMe - Should be inferred as not undefined.
                          extraAttributeNames.delete(propertyInfo.attributeName);
                          serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                        } else {
                          var ownNamespace = parentNamespace;

                          if (ownNamespace === HTML_NAMESPACE$1) {
                            ownNamespace = getIntrinsicNamespace(tag);
                          }

                          if (ownNamespace === HTML_NAMESPACE$1) {
                            // $FlowFixMe - Should be inferred as not undefined.
                            extraAttributeNames.delete(propKey.toLowerCase());
                          } else {
                            var standardName = getPossibleStandardName(propKey);

                            if (standardName !== null && standardName !== propKey) {
                              // If an SVG prop is supplied with bad casing, it will
                              // be successfully parsed from HTML, but will produce a mismatch
                              // (and would be incorrectly rendered on the client).
                              // However, we already warn about bad casing elsewhere.
                              // So we'll skip the misleading extra mismatch warning in this case.
                              isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.

                              extraAttributeNames.delete(standardName);
                            } // $FlowFixMe - Should be inferred as not undefined.


                            extraAttributeNames.delete(propKey);
                          }

                          serverValue = getValueForAttribute(domElement, propKey, nextProp);
                        }

                        if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                          warnForPropDifference(propKey, serverValue, nextProp);
                        }
                      }
                    }
                  }

                  {
                    // $FlowFixMe - Should be inferred as not undefined.
                    if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
                      // $FlowFixMe - Should be inferred as not undefined.
                      warnForExtraAttributes(extraAttributeNames);
                    }
                  }

                  switch (tag) {
                    case 'input':
                      // TODO: Make sure we check if this is still unmounted or do any clean
                      // up necessary since we never stop tracking anymore.
                      track(domElement);
                      postMountWrapper(domElement, rawProps, true);
                      break;

                    case 'textarea':
                      // TODO: Make sure we check if this is still unmounted or do any clean
                      // up necessary since we never stop tracking anymore.
                      track(domElement);
                      postMountWrapper$3(domElement);
                      break;

                    case 'select':
                    case 'option':
                      // For input and textarea we current always set the value property at
                      // post mount to force it to diverge from attributes. However, for
                      // option and select we don't quite do the same thing and select
                      // is not resilient to the DOM state changing so we don't do that here.
                      // TODO: Consider not doing this for input and textarea.
                      break;

                    default:
                      if (typeof rawProps.onClick === 'function') {
                        // TODO: This cast may not be sound for SVG, MathML or custom elements.
                        trapClickOnNonInteractiveElement(domElement);
                      }

                      break;
                  }

                  return updatePayload;
                }
                function diffHydratedText(textNode, text) {
                  var isDifferent = textNode.nodeValue !== text;
                  return isDifferent;
                }
                function warnForUnmatchedText(textNode, text) {
                  {
                    warnForTextDifference(textNode.nodeValue, text);
                  }
                }
                function warnForDeletedHydratableElement(parentNode, child) {
                  {
                    if (didWarnInvalidHydration) {
                      return;
                    }

                    didWarnInvalidHydration = true;

                    error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
                  }
                }
                function warnForDeletedHydratableText(parentNode, child) {
                  {
                    if (didWarnInvalidHydration) {
                      return;
                    }

                    didWarnInvalidHydration = true;

                    error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
                  }
                }
                function warnForInsertedHydratedElement(parentNode, tag, props) {
                  {
                    if (didWarnInvalidHydration) {
                      return;
                    }

                    didWarnInvalidHydration = true;

                    error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
                  }
                }
                function warnForInsertedHydratedText(parentNode, text) {
                  {
                    if (text === '') {
                      // We expect to insert empty text nodes since they're not represented in
                      // the HTML.
                      // TODO: Remove this special case if we can just avoid inserting empty
                      // text nodes.
                      return;
                    }

                    if (didWarnInvalidHydration) {
                      return;
                    }

                    didWarnInvalidHydration = true;

                    error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
                  }
                }
                function restoreControlledState$3(domElement, tag, props) {
                  switch (tag) {
                    case 'input':
                      restoreControlledState(domElement, props);
                      return;

                    case 'textarea':
                      restoreControlledState$2(domElement, props);
                      return;

                    case 'select':
                      restoreControlledState$1(domElement, props);
                      return;
                  }
                }

                var validateDOMNesting = function () {};

                var updatedAncestorInfo = function () {};

                {
                  // This validation code was written based on the HTML5 parsing spec:
                  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
                  //
                  // Note: this does not catch all invalid nesting, nor does it try to (as it's
                  // not clear what practical benefit doing so provides); instead, we warn only
                  // for cases where the parser will give a parse tree differing from what React
                  // intended. For example, <b><div></div></b> is invalid but we don't warn
                  // because it still parses correctly; we do warn for other cases like nested
                  // <p> tags where the beginning of the second element implicitly closes the
                  // first, causing a confusing mess.
                  // https://html.spec.whatwg.org/multipage/syntax.html#special
                  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope

                  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template', // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
                  // TODO: Distinguish by namespace here -- for <title>, including it here
                  // errs on the side of fewer warnings
                  'foreignObject', 'desc', 'title']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope

                  var buttonScopeTags = inScopeTags.concat(['button']); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags

                  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
                  var emptyAncestorInfo = {
                    current: null,
                    formTag: null,
                    aTagInScope: null,
                    buttonTagInScope: null,
                    nobrTagInScope: null,
                    pTagInButtonScope: null,
                    listItemTagAutoclosing: null,
                    dlItemTagAutoclosing: null
                  };

                  updatedAncestorInfo = function (oldInfo, tag) {
                    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);

                    var info = {
                      tag: tag
                    };

                    if (inScopeTags.indexOf(tag) !== -1) {
                      ancestorInfo.aTagInScope = null;
                      ancestorInfo.buttonTagInScope = null;
                      ancestorInfo.nobrTagInScope = null;
                    }

                    if (buttonScopeTags.indexOf(tag) !== -1) {
                      ancestorInfo.pTagInButtonScope = null;
                    } // See rules for 'li', 'dd', 'dt' start tags in
                    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


                    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
                      ancestorInfo.listItemTagAutoclosing = null;
                      ancestorInfo.dlItemTagAutoclosing = null;
                    }

                    ancestorInfo.current = info;

                    if (tag === 'form') {
                      ancestorInfo.formTag = info;
                    }

                    if (tag === 'a') {
                      ancestorInfo.aTagInScope = info;
                    }

                    if (tag === 'button') {
                      ancestorInfo.buttonTagInScope = info;
                    }

                    if (tag === 'nobr') {
                      ancestorInfo.nobrTagInScope = info;
                    }

                    if (tag === 'p') {
                      ancestorInfo.pTagInButtonScope = info;
                    }

                    if (tag === 'li') {
                      ancestorInfo.listItemTagAutoclosing = info;
                    }

                    if (tag === 'dd' || tag === 'dt') {
                      ancestorInfo.dlItemTagAutoclosing = info;
                    }

                    return ancestorInfo;
                  };
                  /**
                   * Returns whether
                   */

                  var isTagValidWithParent = function (tag, parentTag) {
                    // First, let's check if we're in an unusual parsing mode...
                    switch (parentTag) {
                      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
                      case 'select':
                        return tag === 'option' || tag === 'optgroup' || tag === '#text';

                      case 'optgroup':
                        return tag === 'option' || tag === '#text';
                      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
                      // but

                      case 'option':
                        return tag === '#text';
                      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
                      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
                      // No special behavior since these rules fall back to "in body" mode for
                      // all except special table nodes which cause bad parsing behavior anyway.
                      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr

                      case 'tr':
                        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
                      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody

                      case 'tbody':
                      case 'thead':
                      case 'tfoot':
                        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
                      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup

                      case 'colgroup':
                        return tag === 'col' || tag === 'template';
                      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable

                      case 'table':
                        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
                      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead

                      case 'head':
                        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
                      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element

                      case 'html':
                        return tag === 'head' || tag === 'body' || tag === 'frameset';

                      case 'frameset':
                        return tag === 'frame';

                      case '#document':
                        return tag === 'html';
                    } // Probably in the "in body" parsing mode, so we outlaw only tag combos
                    // where the parsing rules cause implicit opens or closes to be added.
                    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


                    switch (tag) {
                      case 'h1':
                      case 'h2':
                      case 'h3':
                      case 'h4':
                      case 'h5':
                      case 'h6':
                        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

                      case 'rp':
                      case 'rt':
                        return impliedEndTags.indexOf(parentTag) === -1;

                      case 'body':
                      case 'caption':
                      case 'col':
                      case 'colgroup':
                      case 'frameset':
                      case 'frame':
                      case 'head':
                      case 'html':
                      case 'tbody':
                      case 'td':
                      case 'tfoot':
                      case 'th':
                      case 'thead':
                      case 'tr':
                        // These tags are only valid with a few parents that have special child
                        // parsing rules -- if we're down here, then none of those matched and
                        // so we allow it only if we don't know what the parent is, as all other
                        // cases are invalid.
                        return parentTag == null;
                    }

                    return true;
                  };
                  /**
                   * Returns whether
                   */

                  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
                    switch (tag) {
                      case 'address':
                      case 'article':
                      case 'aside':
                      case 'blockquote':
                      case 'center':
                      case 'details':
                      case 'dialog':
                      case 'dir':
                      case 'div':
                      case 'dl':
                      case 'fieldset':
                      case 'figcaption':
                      case 'figure':
                      case 'footer':
                      case 'header':
                      case 'hgroup':
                      case 'main':
                      case 'menu':
                      case 'nav':
                      case 'ol':
                      case 'p':
                      case 'section':
                      case 'summary':
                      case 'ul':
                      case 'pre':
                      case 'listing':
                      case 'table':
                      case 'hr':
                      case 'xmp':
                      case 'h1':
                      case 'h2':
                      case 'h3':
                      case 'h4':
                      case 'h5':
                      case 'h6':
                        return ancestorInfo.pTagInButtonScope;

                      case 'form':
                        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

                      case 'li':
                        return ancestorInfo.listItemTagAutoclosing;

                      case 'dd':
                      case 'dt':
                        return ancestorInfo.dlItemTagAutoclosing;

                      case 'button':
                        return ancestorInfo.buttonTagInScope;

                      case 'a':
                        // Spec says something about storing a list of markers, but it sounds
                        // equivalent to this check.
                        return ancestorInfo.aTagInScope;

                      case 'nobr':
                        return ancestorInfo.nobrTagInScope;
                    }

                    return null;
                  };

                  var didWarn$1 = {};

                  validateDOMNesting = function (childTag, childText, ancestorInfo) {
                    ancestorInfo = ancestorInfo || emptyAncestorInfo;
                    var parentInfo = ancestorInfo.current;
                    var parentTag = parentInfo && parentInfo.tag;

                    if (childText != null) {
                      if (childTag != null) {
                        error('validateDOMNesting: when childText is passed, childTag should be null');
                      }

                      childTag = '#text';
                    }

                    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
                    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
                    var invalidParentOrAncestor = invalidParent || invalidAncestor;

                    if (!invalidParentOrAncestor) {
                      return;
                    }

                    var ancestorTag = invalidParentOrAncestor.tag;
                    var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag;

                    if (didWarn$1[warnKey]) {
                      return;
                    }

                    didWarn$1[warnKey] = true;
                    var tagDisplayName = childTag;
                    var whitespaceInfo = '';

                    if (childTag === '#text') {
                      if (/\S/.test(childText)) {
                        tagDisplayName = 'Text nodes';
                      } else {
                        tagDisplayName = 'Whitespace text nodes';
                        whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
                      }
                    } else {
                      tagDisplayName = '<' + childTag + '>';
                    }

                    if (invalidParent) {
                      var info = '';

                      if (ancestorTag === 'table' && childTag === 'tr') {
                        info += ' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by ' + 'the browser.';
                      }

                      error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
                    } else {
                      error('validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.', tagDisplayName, ancestorTag);
                    }
                  };
                }

                var SUPPRESS_HYDRATION_WARNING$1;

                {
                  SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
                }

                var SUSPENSE_START_DATA = '$';
                var SUSPENSE_END_DATA = '/$';
                var SUSPENSE_PENDING_START_DATA = '$?';
                var SUSPENSE_FALLBACK_START_DATA = '$!';
                var STYLE$1 = 'style';
                var eventsEnabled = null;
                var selectionInformation = null;

                function shouldAutoFocusHostComponent(type, props) {
                  switch (type) {
                    case 'button':
                    case 'input':
                    case 'select':
                    case 'textarea':
                      return !!props.autoFocus;
                  }

                  return false;
                }
                function getRootHostContext(rootContainerInstance) {
                  var type;
                  var namespace;
                  var nodeType = rootContainerInstance.nodeType;

                  switch (nodeType) {
                    case DOCUMENT_NODE:
                    case DOCUMENT_FRAGMENT_NODE:
                      {
                        type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
                        var root = rootContainerInstance.documentElement;
                        namespace = root ? root.namespaceURI : getChildNamespace(null, '');
                        break;
                      }

                    default:
                      {
                        var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                        var ownNamespace = container.namespaceURI || null;
                        type = container.tagName;
                        namespace = getChildNamespace(ownNamespace, type);
                        break;
                      }
                  }

                  {
                    var validatedTag = type.toLowerCase();
                    var ancestorInfo = updatedAncestorInfo(null, validatedTag);
                    return {
                      namespace: namespace,
                      ancestorInfo: ancestorInfo
                    };
                  }
                }
                function getChildHostContext(parentHostContext, type, rootContainerInstance) {
                  {
                    var parentHostContextDev = parentHostContext;
                    var namespace = getChildNamespace(parentHostContextDev.namespace, type);
                    var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
                    return {
                      namespace: namespace,
                      ancestorInfo: ancestorInfo
                    };
                  }
                }
                function getPublicInstance(instance) {
                  return instance;
                }
                function prepareForCommit(containerInfo) {
                  eventsEnabled = isEnabled();
                  selectionInformation = getSelectionInformation();
                  var activeInstance = null;

                  setEnabled(false);
                  return activeInstance;
                }
                function resetAfterCommit(containerInfo) {
                  restoreSelection(selectionInformation);
                  setEnabled(eventsEnabled);
                  eventsEnabled = null;
                  selectionInformation = null;
                }
                function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
                  var parentNamespace;

                  {
                    // TODO: take namespace into account when validating.
                    var hostContextDev = hostContext;
                    validateDOMNesting(type, null, hostContextDev.ancestorInfo);

                    if (typeof props.children === 'string' || typeof props.children === 'number') {
                      var string = '' + props.children;
                      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                      validateDOMNesting(null, string, ownAncestorInfo);
                    }

                    parentNamespace = hostContextDev.namespace;
                  }

                  var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
                  precacheFiberNode(internalInstanceHandle, domElement);
                  updateFiberProps(domElement, props);
                  return domElement;
                }
                function appendInitialChild(parentInstance, child) {
                  parentInstance.appendChild(child);
                }
                function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
                  setInitialProperties(domElement, type, props, rootContainerInstance);
                  return shouldAutoFocusHostComponent(type, props);
                }
                function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
                  {
                    var hostContextDev = hostContext;

                    if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
                      var string = '' + newProps.children;
                      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                      validateDOMNesting(null, string, ownAncestorInfo);
                    }
                  }

                  return diffProperties(domElement, type, oldProps, newProps);
                }
                function shouldSetTextContent(type, props) {
                  return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
                }
                function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
                  {
                    var hostContextDev = hostContext;
                    validateDOMNesting(null, text, hostContextDev.ancestorInfo);
                  }

                  var textNode = createTextNode(text, rootContainerInstance);
                  precacheFiberNode(internalInstanceHandle, textNode);
                  return textNode;
                }
                // if a component just imports ReactDOM (e.g. for findDOMNode).
                // Some environments might not have setTimeout or clearTimeout.

                var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
                var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
                var noTimeout = -1; // -------------------
                function commitMount(domElement, type, newProps, internalInstanceHandle) {
                  // Despite the naming that might imply otherwise, this method only
                  // fires if there is an `Update` effect scheduled during mounting.
                  // This happens if `finalizeInitialChildren` returns `true` (which it
                  // does to implement the `autoFocus` attribute on the client). But
                  // there are also other cases when this might happen (such as patching
                  // up text content during hydration mismatch). So we'll check this again.
                  if (shouldAutoFocusHostComponent(type, newProps)) {
                    domElement.focus();
                  }
                }
                function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
                  // Update the props handle so that we know which props are the ones with
                  // with current event handlers.
                  updateFiberProps(domElement, newProps); // Apply the diff to the DOM node.

                  updateProperties(domElement, updatePayload, type, oldProps, newProps);
                }
                function resetTextContent(domElement) {
                  setTextContent(domElement, '');
                }
                function commitTextUpdate(textInstance, oldText, newText) {
                  textInstance.nodeValue = newText;
                }
                function appendChild(parentInstance, child) {
                  parentInstance.appendChild(child);
                }
                function appendChildToContainer(container, child) {
                  var parentNode;

                  if (container.nodeType === COMMENT_NODE) {
                    parentNode = container.parentNode;
                    parentNode.insertBefore(child, container);
                  } else {
                    parentNode = container;
                    parentNode.appendChild(child);
                  } // This container might be used for a portal.
                  // If something inside a portal is clicked, that click should bubble
                  // through the React tree. However, on Mobile Safari the click would
                  // never bubble through the *DOM* tree unless an ancestor with onclick
                  // event exists. So we wouldn't see it and dispatch it.
                  // This is why we ensure that non React root containers have inline onclick
                  // defined.
                  // https://github.com/facebook/react/issues/11918


                  var reactRootContainer = container._reactRootContainer;

                  if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
                    // TODO: This cast may not be sound for SVG, MathML or custom elements.
                    trapClickOnNonInteractiveElement(parentNode);
                  }
                }
                function insertBefore(parentInstance, child, beforeChild) {
                  parentInstance.insertBefore(child, beforeChild);
                }
                function insertInContainerBefore(container, child, beforeChild) {
                  if (container.nodeType === COMMENT_NODE) {
                    container.parentNode.insertBefore(child, beforeChild);
                  } else {
                    container.insertBefore(child, beforeChild);
                  }
                }

                function removeChild(parentInstance, child) {
                  parentInstance.removeChild(child);
                }
                function removeChildFromContainer(container, child) {
                  if (container.nodeType === COMMENT_NODE) {
                    container.parentNode.removeChild(child);
                  } else {
                    container.removeChild(child);
                  }
                }
                function hideInstance(instance) {
                  // TODO: Does this work for all element types? What about MathML? Should we
                  // pass host context to this method?
                  instance = instance;
                  var style = instance.style;

                  if (typeof style.setProperty === 'function') {
                    style.setProperty('display', 'none', 'important');
                  } else {
                    style.display = 'none';
                  }
                }
                function hideTextInstance(textInstance) {
                  textInstance.nodeValue = '';
                }
                function unhideInstance(instance, props) {
                  instance = instance;
                  var styleProp = props[STYLE$1];
                  var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
                  instance.style.display = dangerousStyleValue('display', display);
                }
                function unhideTextInstance(textInstance, text) {
                  textInstance.nodeValue = text;
                }
                function clearContainer(container) {
                  if (container.nodeType === ELEMENT_NODE) {
                    container.textContent = '';
                  } else if (container.nodeType === DOCUMENT_NODE) {
                    var body = container.body;

                    if (body != null) {
                      body.textContent = '';
                    }
                  }
                } // -------------------
                function canHydrateInstance(instance, type, props) {
                  if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
                    return null;
                  } // This has now been refined to an element node.


                  return instance;
                }
                function canHydrateTextInstance(instance, text) {
                  if (text === '' || instance.nodeType !== TEXT_NODE) {
                    // Empty strings are not parsed by HTML so there won't be a correct match here.
                    return null;
                  } // This has now been refined to a text node.


                  return instance;
                }
                function isSuspenseInstancePending(instance) {
                  return instance.data === SUSPENSE_PENDING_START_DATA;
                }
                function isSuspenseInstanceFallback(instance) {
                  return instance.data === SUSPENSE_FALLBACK_START_DATA;
                }

                function getNextHydratable(node) {
                  // Skip non-hydratable nodes.
                  for (; node != null; node = node.nextSibling) {
                    var nodeType = node.nodeType;

                    if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                      break;
                    }
                  }

                  return node;
                }

                function getNextHydratableSibling(instance) {
                  return getNextHydratable(instance.nextSibling);
                }
                function getFirstHydratableChild(parentInstance) {
                  return getNextHydratable(parentInstance.firstChild);
                }
                function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
                  precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
                  // get attached.

                  updateFiberProps(instance, props);
                  var parentNamespace;

                  {
                    var hostContextDev = hostContext;
                    parentNamespace = hostContextDev.namespace;
                  }

                  return diffHydratedProperties(instance, type, props, parentNamespace);
                }
                function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
                  precacheFiberNode(internalInstanceHandle, textInstance);
                  return diffHydratedText(textInstance, text);
                }
                function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
                  var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
                  // There might be nested nodes so we need to keep track of how
                  // deep we are and only break out when we're back on top.

                  var depth = 0;

                  while (node) {
                    if (node.nodeType === COMMENT_NODE) {
                      var data = node.data;

                      if (data === SUSPENSE_END_DATA) {
                        if (depth === 0) {
                          return getNextHydratableSibling(node);
                        } else {
                          depth--;
                        }
                      } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                        depth++;
                      }
                    }

                    node = node.nextSibling;
                  } // TODO: Warn, we didn't find the end comment boundary.


                  return null;
                } // Returns the SuspenseInstance if this node is a direct child of a
                // SuspenseInstance. I.e. if its previous sibling is a Comment with
                // SUSPENSE_x_START_DATA. Otherwise, null.

                function getParentSuspenseInstance(targetInstance) {
                  var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
                  // There might be nested nodes so we need to keep track of how
                  // deep we are and only break out when we're back on top.

                  var depth = 0;

                  while (node) {
                    if (node.nodeType === COMMENT_NODE) {
                      var data = node.data;

                      if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                        if (depth === 0) {
                          return node;
                        } else {
                          depth--;
                        }
                      } else if (data === SUSPENSE_END_DATA) {
                        depth++;
                      }
                    }

                    node = node.previousSibling;
                  }

                  return null;
                }
                function commitHydratedContainer(container) {
                  // Retry if any event replaying was blocked on this.
                  retryIfBlockedOn(container);
                }
                function commitHydratedSuspenseInstance(suspenseInstance) {
                  // Retry if any event replaying was blocked on this.
                  retryIfBlockedOn(suspenseInstance);
                }
                function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
                  {
                    warnForUnmatchedText(textInstance, text);
                  }
                }
                function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
                  if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                    warnForUnmatchedText(textInstance, text);
                  }
                }
                function didNotHydrateContainerInstance(parentContainer, instance) {
                  {
                    if (instance.nodeType === ELEMENT_NODE) {
                      warnForDeletedHydratableElement(parentContainer, instance);
                    } else if (instance.nodeType === COMMENT_NODE) ;else {
                      warnForDeletedHydratableText(parentContainer, instance);
                    }
                  }
                }
                function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
                  if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                    if (instance.nodeType === ELEMENT_NODE) {
                      warnForDeletedHydratableElement(parentInstance, instance);
                    } else if (instance.nodeType === COMMENT_NODE) ;else {
                      warnForDeletedHydratableText(parentInstance, instance);
                    }
                  }
                }
                function didNotFindHydratableContainerInstance(parentContainer, type, props) {
                  {
                    warnForInsertedHydratedElement(parentContainer, type);
                  }
                }
                function didNotFindHydratableContainerTextInstance(parentContainer, text) {
                  {
                    warnForInsertedHydratedText(parentContainer, text);
                  }
                }
                function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
                  if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                    warnForInsertedHydratedElement(parentInstance, type);
                  }
                }
                function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
                  if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                    warnForInsertedHydratedText(parentInstance, text);
                  }
                }
                function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
                  if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) ;
                }
                var clientId = 0;
                function makeClientIdInDEV(warnOnAccessInDEV) {
                  var id = 'r:' + (clientId++).toString(36);
                  return {
                    toString: function () {
                      warnOnAccessInDEV();
                      return id;
                    },
                    valueOf: function () {
                      warnOnAccessInDEV();
                      return id;
                    }
                  };
                }
                function isOpaqueHydratingObject(value) {
                  return value !== null && typeof value === 'object' && value.$$typeof === REACT_OPAQUE_ID_TYPE;
                }
                function makeOpaqueHydratingObject(attemptToReadValue) {
                  return {
                    $$typeof: REACT_OPAQUE_ID_TYPE,
                    toString: attemptToReadValue,
                    valueOf: attemptToReadValue
                  };
                }
                function preparePortalMount(portalInstance) {
                  {
                    listenToAllSupportedEvents(portalInstance);
                  }
                }

                var randomKey = Math.random().toString(36).slice(2);
                var internalInstanceKey = '__reactFiber$' + randomKey;
                var internalPropsKey = '__reactProps$' + randomKey;
                var internalContainerInstanceKey = '__reactContainer$' + randomKey;
                var internalEventHandlersKey = '__reactEvents$' + randomKey;
                function precacheFiberNode(hostInst, node) {
                  node[internalInstanceKey] = hostInst;
                }
                function markContainerAsRoot(hostRoot, node) {
                  node[internalContainerInstanceKey] = hostRoot;
                }
                function unmarkContainerAsRoot(node) {
                  node[internalContainerInstanceKey] = null;
                }
                function isContainerMarkedAsRoot(node) {
                  return !!node[internalContainerInstanceKey];
                } // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
                // If the target node is part of a hydrated or not yet rendered subtree, then
                // this may also return a SuspenseComponent or HostRoot to indicate that.
                // Conceptually the HostRoot fiber is a child of the Container node. So if you
                // pass the Container node as the targetNode, you will not actually get the
                // HostRoot back. To get to the HostRoot, you need to pass a child of it.
                // The same thing applies to Suspense boundaries.

                function getClosestInstanceFromNode(targetNode) {
                  var targetInst = targetNode[internalInstanceKey];

                  if (targetInst) {
                    // Don't return HostRoot or SuspenseComponent here.
                    return targetInst;
                  } // If the direct event target isn't a React owned DOM node, we need to look
                  // to see if one of its parents is a React owned DOM node.


                  var parentNode = targetNode.parentNode;

                  while (parentNode) {
                    // We'll check if this is a container root that could include
                    // React nodes in the future. We need to check this first because
                    // if we're a child of a dehydrated container, we need to first
                    // find that inner container before moving on to finding the parent
                    // instance. Note that we don't check this field on  the targetNode
                    // itself because the fibers are conceptually between the container
                    // node and the first child. It isn't surrounding the container node.
                    // If it's not a container, we check if it's an instance.
                    targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];

                    if (targetInst) {
                      // Since this wasn't the direct target of the event, we might have
                      // stepped past dehydrated DOM nodes to get here. However they could
                      // also have been non-React nodes. We need to answer which one.
                      // If we the instance doesn't have any children, then there can't be
                      // a nested suspense boundary within it. So we can use this as a fast
                      // bailout. Most of the time, when people add non-React children to
                      // the tree, it is using a ref to a child-less DOM node.
                      // Normally we'd only need to check one of the fibers because if it
                      // has ever gone from having children to deleting them or vice versa
                      // it would have deleted the dehydrated boundary nested inside already.
                      // However, since the HostRoot starts out with an alternate it might
                      // have one on the alternate so we need to check in case this was a
                      // root.
                      var alternate = targetInst.alternate;

                      if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                        // Next we need to figure out if the node that skipped past is
                        // nested within a dehydrated boundary and if so, which one.
                        var suspenseInstance = getParentSuspenseInstance(targetNode);

                        while (suspenseInstance !== null) {
                          // We found a suspense instance. That means that we haven't
                          // hydrated it yet. Even though we leave the comments in the
                          // DOM after hydrating, and there are boundaries in the DOM
                          // that could already be hydrated, we wouldn't have found them
                          // through this pass since if the target is hydrated it would
                          // have had an internalInstanceKey on it.
                          // Let's get the fiber associated with the SuspenseComponent
                          // as the deepest instance.
                          var targetSuspenseInst = suspenseInstance[internalInstanceKey];

                          if (targetSuspenseInst) {
                            return targetSuspenseInst;
                          } // If we don't find a Fiber on the comment, it might be because
                          // we haven't gotten to hydrate it yet. There might still be a
                          // parent boundary that hasn't above this one so we need to find
                          // the outer most that is known.


                          suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
                          // host component also hasn't hydrated yet. We can return it
                          // below since it will bail out on the isMounted check later.
                        }
                      }

                      return targetInst;
                    }

                    targetNode = parentNode;
                    parentNode = targetNode.parentNode;
                  }

                  return null;
                }
                /**
                 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
                 * instance, or null if the node was not rendered by this React.
                 */

                function getInstanceFromNode(node) {
                  var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];

                  if (inst) {
                    if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                      return inst;
                    } else {
                      return null;
                    }
                  }

                  return null;
                }
                /**
                 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
                 * DOM node.
                 */

                function getNodeFromInstance(inst) {
                  if (inst.tag === HostComponent || inst.tag === HostText) {
                    // In Fiber this, is just the state node right now. We assume it will be
                    // a host component or host text.
                    return inst.stateNode;
                  } // Without this first invariant, passing a non-DOM-component triggers the next
                  // invariant for a missing parent, which is super confusing.


                  {
                    {
                      throw Error("getNodeFromInstance: Invalid argument.");
                    }
                  }
                }
                function getFiberCurrentPropsFromNode(node) {
                  return node[internalPropsKey] || null;
                }
                function updateFiberProps(node, props) {
                  node[internalPropsKey] = props;
                }
                function getEventListenerSet(node) {
                  var elementListenerSet = node[internalEventHandlersKey];

                  if (elementListenerSet === undefined) {
                    elementListenerSet = node[internalEventHandlersKey] = new Set();
                  }

                  return elementListenerSet;
                }

                var loggedTypeFailures = {};
                var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

                function setCurrentlyValidatingElement(element) {
                  {
                    if (element) {
                      var owner = element._owner;
                      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
                    } else {
                      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
                    }
                  }
                }

                function checkPropTypes(typeSpecs, values, location, componentName, element) {
                  {
                    // $FlowFixMe This is okay but Flow doesn't know it.
                    var has = Function.call.bind(Object.prototype.hasOwnProperty);

                    for (var typeSpecName in typeSpecs) {
                      if (has(typeSpecs, typeSpecName)) {
                        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
                        // fail the render phase where it didn't fail before. So we log it.
                        // After these have been cleaned up, we'll let them throw.

                        try {
                          // This is intentionally an invariant that gets caught. It's the same
                          // behavior as without this statement except with a better message.
                          if (typeof typeSpecs[typeSpecName] !== 'function') {
                            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                            err.name = 'Invariant Violation';
                            throw err;
                          }

                          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
                        } catch (ex) {
                          error$1 = ex;
                        }

                        if (error$1 && !(error$1 instanceof Error)) {
                          setCurrentlyValidatingElement(element);

                          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

                          setCurrentlyValidatingElement(null);
                        }

                        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                          // Only monitor this failure once because there tends to be a lot of the
                          // same error.
                          loggedTypeFailures[error$1.message] = true;
                          setCurrentlyValidatingElement(element);

                          error('Failed %s type: %s', location, error$1.message);

                          setCurrentlyValidatingElement(null);
                        }
                      }
                    }
                  }
                }

                var valueStack = [];
                var fiberStack;

                {
                  fiberStack = [];
                }

                var index = -1;

                function createCursor(defaultValue) {
                  return {
                    current: defaultValue
                  };
                }

                function pop(cursor, fiber) {
                  if (index < 0) {
                    {
                      error('Unexpected pop.');
                    }

                    return;
                  }

                  {
                    if (fiber !== fiberStack[index]) {
                      error('Unexpected Fiber popped.');
                    }
                  }

                  cursor.current = valueStack[index];
                  valueStack[index] = null;

                  {
                    fiberStack[index] = null;
                  }

                  index--;
                }

                function push(cursor, value, fiber) {
                  index++;
                  valueStack[index] = cursor.current;

                  {
                    fiberStack[index] = fiber;
                  }

                  cursor.current = value;
                }

                var warnedAboutMissingGetChildContext;

                {
                  warnedAboutMissingGetChildContext = {};
                }

                var emptyContextObject = {};

                {
                  Object.freeze(emptyContextObject);
                } // A cursor to the current merged context object on the stack.


                var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.

                var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
                // We use this to get access to the parent context after we have already
                // pushed the next context provider, and now need to merge their contexts.

                var previousContext = emptyContextObject;

                function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
                  {
                    if (didPushOwnContextIfProvider && isContextProvider(Component)) {
                      // If the fiber is a context provider itself, when we read its context
                      // we may have already pushed its own child context on the stack. A context
                      // provider should not "see" its own child context. Therefore we read the
                      // previous (parent) context instead for a context provider.
                      return previousContext;
                    }

                    return contextStackCursor.current;
                  }
                }

                function cacheContext(workInProgress, unmaskedContext, maskedContext) {
                  {
                    var instance = workInProgress.stateNode;
                    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
                    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
                  }
                }

                function getMaskedContext(workInProgress, unmaskedContext) {
                  {
                    var type = workInProgress.type;
                    var contextTypes = type.contextTypes;

                    if (!contextTypes) {
                      return emptyContextObject;
                    } // Avoid recreating masked context unless unmasked context has changed.
                    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
                    // This may trigger infinite loops if componentWillReceiveProps calls setState.


                    var instance = workInProgress.stateNode;

                    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                      return instance.__reactInternalMemoizedMaskedChildContext;
                    }

                    var context = {};

                    for (var key in contextTypes) {
                      context[key] = unmaskedContext[key];
                    }

                    {
                      var name = getComponentName(type) || 'Unknown';
                      checkPropTypes(contextTypes, context, 'context', name);
                    } // Cache unmasked context so we can avoid recreating masked context unless necessary.
                    // Context is created before the class component is instantiated so check for instance.


                    if (instance) {
                      cacheContext(workInProgress, unmaskedContext, context);
                    }

                    return context;
                  }
                }

                function hasContextChanged() {
                  {
                    return didPerformWorkStackCursor.current;
                  }
                }

                function isContextProvider(type) {
                  {
                    var childContextTypes = type.childContextTypes;
                    return childContextTypes !== null && childContextTypes !== undefined;
                  }
                }

                function popContext(fiber) {
                  {
                    pop(didPerformWorkStackCursor, fiber);
                    pop(contextStackCursor, fiber);
                  }
                }

                function popTopLevelContextObject(fiber) {
                  {
                    pop(didPerformWorkStackCursor, fiber);
                    pop(contextStackCursor, fiber);
                  }
                }

                function pushTopLevelContextObject(fiber, context, didChange) {
                  {
                    if (!(contextStackCursor.current === emptyContextObject)) {
                      {
                        throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }

                    push(contextStackCursor, context, fiber);
                    push(didPerformWorkStackCursor, didChange, fiber);
                  }
                }

                function processChildContext(fiber, type, parentContext) {
                  {
                    var instance = fiber.stateNode;
                    var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
                    // It has only been added in Fiber to match the (unintentional) behavior in Stack.

                    if (typeof instance.getChildContext !== 'function') {
                      {
                        var componentName = getComponentName(type) || 'Unknown';

                        if (!warnedAboutMissingGetChildContext[componentName]) {
                          warnedAboutMissingGetChildContext[componentName] = true;

                          error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
                        }
                      }

                      return parentContext;
                    }

                    var childContext = instance.getChildContext();

                    for (var contextKey in childContext) {
                      if (!(contextKey in childContextTypes)) {
                        {
                          throw Error((getComponentName(type) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes.");
                        }
                      }
                    }

                    {
                      var name = getComponentName(type) || 'Unknown';
                      checkPropTypes(childContextTypes, childContext, 'child context', name);
                    }

                    return _assign({}, parentContext, childContext);
                  }
                }

                function pushContextProvider(workInProgress) {
                  {
                    var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
                    // If the instance does not exist yet, we will push null at first,
                    // and replace it on the stack later when invalidating the context.

                    var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
                    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

                    previousContext = contextStackCursor.current;
                    push(contextStackCursor, memoizedMergedChildContext, workInProgress);
                    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
                    return true;
                  }
                }

                function invalidateContextProvider(workInProgress, type, didChange) {
                  {
                    var instance = workInProgress.stateNode;

                    if (!instance) {
                      {
                        throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }

                    if (didChange) {
                      // Merge parent and own context.
                      // Skip this if we're not updating due to sCU.
                      // This avoids unnecessarily recomputing memoized values.
                      var mergedContext = processChildContext(workInProgress, type, previousContext);
                      instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
                      // It is important to unwind the context in the reverse order.

                      pop(didPerformWorkStackCursor, workInProgress);
                      pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.

                      push(contextStackCursor, mergedContext, workInProgress);
                      push(didPerformWorkStackCursor, didChange, workInProgress);
                    } else {
                      pop(didPerformWorkStackCursor, workInProgress);
                      push(didPerformWorkStackCursor, didChange, workInProgress);
                    }
                  }
                }

                function findCurrentUnmaskedContext(fiber) {
                  {
                    // Currently this is only used with renderSubtreeIntoContainer; not sure if it
                    // makes sense elsewhere
                    if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
                      {
                        throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }

                    var node = fiber;

                    do {
                      switch (node.tag) {
                        case HostRoot:
                          return node.stateNode.context;

                        case ClassComponent:
                          {
                            var Component = node.type;

                            if (isContextProvider(Component)) {
                              return node.stateNode.__reactInternalMemoizedMergedChildContext;
                            }

                            break;
                          }
                      }

                      node = node.return;
                    } while (node !== null);

                    {
                      {
                        throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                  }
                }

                var LegacyRoot = 0;
                var BlockingRoot = 1;
                var ConcurrentRoot = 2;

                var rendererID = null;
                var injectedHook = null;
                var hasLoggedError = false;
                var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
                function injectInternals(internals) {
                  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
                    // No DevTools
                    return false;
                  }

                  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

                  if (hook.isDisabled) {
                    // This isn't a real property on the hook, but it can be set to opt out
                    // of DevTools integration and associated warnings and logs.
                    // https://github.com/facebook/react/issues/3877
                    return true;
                  }

                  if (!hook.supportsFiber) {
                    {
                      error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://reactjs.org/link/react-devtools');
                    } // DevTools exists, even though it doesn't support Fiber.


                    return true;
                  }

                  try {
                    rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.

                    injectedHook = hook;
                  } catch (err) {
                    // Catch all errors because it is unsafe to throw during initialization.
                    {
                      error('React instrumentation encountered an error: %s.', err);
                    }
                  } // DevTools exists


                  return true;
                }
                function onScheduleRoot(root, children) {
                  {
                    if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') {
                      try {
                        injectedHook.onScheduleFiberRoot(rendererID, root, children);
                      } catch (err) {
                        if (!hasLoggedError) {
                          hasLoggedError = true;

                          error('React instrumentation encountered an error: %s', err);
                        }
                      }
                    }
                  }
                }
                function onCommitRoot(root, priorityLevel) {
                  if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {
                    try {
                      var didError = (root.current.flags & DidCapture) === DidCapture;

                      if (enableProfilerTimer) {
                        injectedHook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
                      } else {
                        injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);
                      }
                    } catch (err) {
                      {
                        if (!hasLoggedError) {
                          hasLoggedError = true;

                          error('React instrumentation encountered an error: %s', err);
                        }
                      }
                    }
                  }
                }
                function onCommitUnmount(fiber) {
                  if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {
                    try {
                      injectedHook.onCommitFiberUnmount(rendererID, fiber);
                    } catch (err) {
                      {
                        if (!hasLoggedError) {
                          hasLoggedError = true;

                          error('React instrumentation encountered an error: %s', err);
                        }
                      }
                    }
                  }
                }

                var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority,
                    Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback,
                    Scheduler_cancelCallback = Scheduler.unstable_cancelCallback,
                    Scheduler_shouldYield = Scheduler.unstable_shouldYield,
                    Scheduler_requestPaint = Scheduler.unstable_requestPaint,
                    Scheduler_now$1 = Scheduler.unstable_now,
                    Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel,
                    Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority,
                    Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
                    Scheduler_NormalPriority = Scheduler.unstable_NormalPriority,
                    Scheduler_LowPriority = Scheduler.unstable_LowPriority,
                    Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;

                {
                  // Provide explicit error message when production+profiling bundle of e.g.
                  // react-dom is used with production (non-profiling) bundle of
                  // scheduler/tracing
                  if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
                    {
                      throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
                    }
                  }
                }

                var fakeCallbackNode = {}; // Except for NoPriority, these correspond to Scheduler priorities. We use
                // ascending numbers so we can compare them like numbers. They start at 90 to
                // avoid clashing with Scheduler's priorities.

                var ImmediatePriority$1 = 99;
                var UserBlockingPriority$2 = 98;
                var NormalPriority$1 = 97;
                var LowPriority$1 = 96;
                var IdlePriority$1 = 95; // NoPriority is the absence of priority. Also React-only.

                var NoPriority$1 = 90;
                var shouldYield = Scheduler_shouldYield;
                var requestPaint = // Fall back gracefully if we're running an older version of Scheduler.
                Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function () {};
                var syncQueue = null;
                var immediateQueueCallbackNode = null;
                var isFlushingSyncQueue = false;
                var initialTimeMs$1 = Scheduler_now$1(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
                // This will be the case for modern browsers that support `performance.now`. In
                // older browsers, Scheduler falls back to `Date.now`, which returns a Unix
                // timestamp. In that case, subtract the module initialization time to simulate
                // the behavior of performance.now and keep our times small enough to fit
                // within 32 bits.
                // TODO: Consider lifting this into Scheduler.

                var now = initialTimeMs$1 < 10000 ? Scheduler_now$1 : function () {
                  return Scheduler_now$1() - initialTimeMs$1;
                };
                function getCurrentPriorityLevel() {
                  switch (Scheduler_getCurrentPriorityLevel()) {
                    case Scheduler_ImmediatePriority:
                      return ImmediatePriority$1;

                    case Scheduler_UserBlockingPriority:
                      return UserBlockingPriority$2;

                    case Scheduler_NormalPriority:
                      return NormalPriority$1;

                    case Scheduler_LowPriority:
                      return LowPriority$1;

                    case Scheduler_IdlePriority:
                      return IdlePriority$1;

                    default:
                      {
                        {
                          throw Error("Unknown priority level.");
                        }
                      }

                  }
                }

                function reactPriorityToSchedulerPriority(reactPriorityLevel) {
                  switch (reactPriorityLevel) {
                    case ImmediatePriority$1:
                      return Scheduler_ImmediatePriority;

                    case UserBlockingPriority$2:
                      return Scheduler_UserBlockingPriority;

                    case NormalPriority$1:
                      return Scheduler_NormalPriority;

                    case LowPriority$1:
                      return Scheduler_LowPriority;

                    case IdlePriority$1:
                      return Scheduler_IdlePriority;

                    default:
                      {
                        {
                          throw Error("Unknown priority level.");
                        }
                      }

                  }
                }

                function runWithPriority$1(reactPriorityLevel, fn) {
                  var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
                  return Scheduler_runWithPriority(priorityLevel, fn);
                }
                function scheduleCallback(reactPriorityLevel, callback, options) {
                  var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
                  return Scheduler_scheduleCallback(priorityLevel, callback, options);
                }
                function scheduleSyncCallback(callback) {
                  // Push this callback into an internal queue. We'll flush these either in
                  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
                  if (syncQueue === null) {
                    syncQueue = [callback]; // Flush the queue in the next tick, at the earliest.

                    immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
                  } else {
                    // Push onto existing queue. Don't need to schedule a callback because
                    // we already scheduled one when we created the queue.
                    syncQueue.push(callback);
                  }

                  return fakeCallbackNode;
                }
                function cancelCallback(callbackNode) {
                  if (callbackNode !== fakeCallbackNode) {
                    Scheduler_cancelCallback(callbackNode);
                  }
                }
                function flushSyncCallbackQueue() {
                  if (immediateQueueCallbackNode !== null) {
                    var node = immediateQueueCallbackNode;
                    immediateQueueCallbackNode = null;
                    Scheduler_cancelCallback(node);
                  }

                  flushSyncCallbackQueueImpl();
                }

                function flushSyncCallbackQueueImpl() {
                  if (!isFlushingSyncQueue && syncQueue !== null) {
                    // Prevent re-entrancy.
                    isFlushingSyncQueue = true;
                    var i = 0;

                    {
                      try {
                        var _isSync2 = true;
                        var _queue = syncQueue;
                        runWithPriority$1(ImmediatePriority$1, function () {
                          for (; i < _queue.length; i++) {
                            var callback = _queue[i];

                            do {
                              callback = callback(_isSync2);
                            } while (callback !== null);
                          }
                        });
                        syncQueue = null;
                      } catch (error) {
                        // If something throws, leave the remaining callbacks on the queue.
                        if (syncQueue !== null) {
                          syncQueue = syncQueue.slice(i + 1);
                        } // Resume flushing in the next tick


                        Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                        throw error;
                      } finally {
                        isFlushingSyncQueue = false;
                      }
                    }
                  }
                }

                // TODO: this is special because it gets imported during build.
                var ReactVersion = '17.0.2';

                var NoMode = 0;
                var StrictMode = 1; // TODO: Remove BlockingMode and ConcurrentMode by reading from the root
                // tag instead

                var BlockingMode = 2;
                var ConcurrentMode = 4;
                var ProfileMode = 8;
                var DebugTracingMode = 16;

                var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
                var NoTransition = 0;
                function requestCurrentTransition() {
                  return ReactCurrentBatchConfig.transition;
                }

                var ReactStrictModeWarnings = {
                  recordUnsafeLifecycleWarnings: function (fiber, instance) {},
                  flushPendingUnsafeLifecycleWarnings: function () {},
                  recordLegacyContextWarning: function (fiber, instance) {},
                  flushLegacyContextWarning: function () {},
                  discardPendingWarnings: function () {}
                };

                {
                  var findStrictRoot = function (fiber) {
                    var maybeStrictRoot = null;
                    var node = fiber;

                    while (node !== null) {
                      if (node.mode & StrictMode) {
                        maybeStrictRoot = node;
                      }

                      node = node.return;
                    }

                    return maybeStrictRoot;
                  };

                  var setToSortedString = function (set) {
                    var array = [];
                    set.forEach(function (value) {
                      array.push(value);
                    });
                    return array.sort().join(', ');
                  };

                  var pendingComponentWillMountWarnings = [];
                  var pendingUNSAFE_ComponentWillMountWarnings = [];
                  var pendingComponentWillReceivePropsWarnings = [];
                  var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
                  var pendingComponentWillUpdateWarnings = [];
                  var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.

                  var didWarnAboutUnsafeLifecycles = new Set();

                  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
                    // Dedup strategy: Warn once per component.
                    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                      return;
                    }

                    if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.
                    instance.componentWillMount.__suppressDeprecationWarning !== true) {
                      pendingComponentWillMountWarnings.push(fiber);
                    }

                    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') {
                      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
                    }

                    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                      pendingComponentWillReceivePropsWarnings.push(fiber);
                    }

                    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
                      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
                    }

                    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                      pendingComponentWillUpdateWarnings.push(fiber);
                    }

                    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {
                      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
                    }
                  };

                  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
                    // We do an initial pass to gather component names
                    var componentWillMountUniqueNames = new Set();

                    if (pendingComponentWillMountWarnings.length > 0) {
                      pendingComponentWillMountWarnings.forEach(function (fiber) {
                        componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
                        didWarnAboutUnsafeLifecycles.add(fiber.type);
                      });
                      pendingComponentWillMountWarnings = [];
                    }

                    var UNSAFE_componentWillMountUniqueNames = new Set();

                    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                      pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
                        UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
                        didWarnAboutUnsafeLifecycles.add(fiber.type);
                      });
                      pendingUNSAFE_ComponentWillMountWarnings = [];
                    }

                    var componentWillReceivePropsUniqueNames = new Set();

                    if (pendingComponentWillReceivePropsWarnings.length > 0) {
                      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
                        componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
                        didWarnAboutUnsafeLifecycles.add(fiber.type);
                      });
                      pendingComponentWillReceivePropsWarnings = [];
                    }

                    var UNSAFE_componentWillReceivePropsUniqueNames = new Set();

                    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
                        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
                        didWarnAboutUnsafeLifecycles.add(fiber.type);
                      });
                      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
                    }

                    var componentWillUpdateUniqueNames = new Set();

                    if (pendingComponentWillUpdateWarnings.length > 0) {
                      pendingComponentWillUpdateWarnings.forEach(function (fiber) {
                        componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
                        didWarnAboutUnsafeLifecycles.add(fiber.type);
                      });
                      pendingComponentWillUpdateWarnings = [];
                    }

                    var UNSAFE_componentWillUpdateUniqueNames = new Set();

                    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
                        UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
                        didWarnAboutUnsafeLifecycles.add(fiber.type);
                      });
                      pendingUNSAFE_ComponentWillUpdateWarnings = [];
                    } // Finally, we flush all the warnings
                    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'


                    if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                      var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);

                      error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '\nPlease update the following components: %s', sortedNames);
                    }

                    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                      var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);

                      error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, " + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '\nPlease update the following components: %s', _sortedNames);
                    }

                    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                      var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);

                      error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '\nPlease update the following components: %s', _sortedNames2);
                    }

                    if (componentWillMountUniqueNames.size > 0) {
                      var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);

                      warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames3);
                    }

                    if (componentWillReceivePropsUniqueNames.size > 0) {
                      var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);

                      warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, refactor your " + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames4);
                    }

                    if (componentWillUpdateUniqueNames.size > 0) {
                      var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);

                      warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames5);
                    }
                  };

                  var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.

                  var didWarnAboutLegacyContext = new Set();

                  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
                    var strictRoot = findStrictRoot(fiber);

                    if (strictRoot === null) {
                      error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');

                      return;
                    } // Dedup strategy: Warn once per component.


                    if (didWarnAboutLegacyContext.has(fiber.type)) {
                      return;
                    }

                    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

                    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
                      if (warningsForRoot === undefined) {
                        warningsForRoot = [];
                        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                      }

                      warningsForRoot.push(fiber);
                    }
                  };

                  ReactStrictModeWarnings.flushLegacyContextWarning = function () {
                    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
                      if (fiberArray.length === 0) {
                        return;
                      }

                      var firstFiber = fiberArray[0];
                      var uniqueNames = new Set();
                      fiberArray.forEach(function (fiber) {
                        uniqueNames.add(getComponentName(fiber.type) || 'Component');
                        didWarnAboutLegacyContext.add(fiber.type);
                      });
                      var sortedNames = setToSortedString(uniqueNames);

                      try {
                        setCurrentFiber(firstFiber);

                        error('Legacy context API has been detected within a strict-mode tree.' + '\n\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context', sortedNames);
                      } finally {
                        resetCurrentFiber();
                      }
                    });
                  };

                  ReactStrictModeWarnings.discardPendingWarnings = function () {
                    pendingComponentWillMountWarnings = [];
                    pendingUNSAFE_ComponentWillMountWarnings = [];
                    pendingComponentWillReceivePropsWarnings = [];
                    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
                    pendingComponentWillUpdateWarnings = [];
                    pendingUNSAFE_ComponentWillUpdateWarnings = [];
                    pendingLegacyContextWarning = new Map();
                  };
                }

                function resolveDefaultProps(Component, baseProps) {
                  if (Component && Component.defaultProps) {
                    // Resolve default props. Taken from ReactElement
                    var props = _assign({}, baseProps);

                    var defaultProps = Component.defaultProps;

                    for (var propName in defaultProps) {
                      if (props[propName] === undefined) {
                        props[propName] = defaultProps[propName];
                      }
                    }

                    return props;
                  }

                  return baseProps;
                }

                // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
                // Math.pow(2, 30) - 1
                // 0b111111111111111111111111111111
                var MAX_SIGNED_31_BIT_INT = 1073741823;

                var valueCursor = createCursor(null);
                var rendererSigil;

                {
                  // Use this to detect multiple renderers using the same context
                  rendererSigil = {};
                }

                var currentlyRenderingFiber = null;
                var lastContextDependency = null;
                var lastContextWithAllBitsObserved = null;
                var isDisallowedContextReadInDEV = false;
                function resetContextDependencies() {
                  // This is called right before React yields execution, to ensure `readContext`
                  // cannot be called outside the render phase.
                  currentlyRenderingFiber = null;
                  lastContextDependency = null;
                  lastContextWithAllBitsObserved = null;

                  {
                    isDisallowedContextReadInDEV = false;
                  }
                }
                function enterDisallowedContextReadInDEV() {
                  {
                    isDisallowedContextReadInDEV = true;
                  }
                }
                function exitDisallowedContextReadInDEV() {
                  {
                    isDisallowedContextReadInDEV = false;
                  }
                }
                function pushProvider(providerFiber, nextValue) {
                  var context = providerFiber.type._context;

                  {
                    push(valueCursor, context._currentValue, providerFiber);
                    context._currentValue = nextValue;

                    {
                      if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');
                      }

                      context._currentRenderer = rendererSigil;
                    }
                  }
                }
                function popProvider(providerFiber) {
                  var currentValue = valueCursor.current;
                  pop(valueCursor, providerFiber);
                  var context = providerFiber.type._context;

                  {
                    context._currentValue = currentValue;
                  }
                }
                function calculateChangedBits(context, newValue, oldValue) {
                  if (objectIs(oldValue, newValue)) {
                    // No change
                    return 0;
                  } else {
                    var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;

                    {
                      if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
                        error('calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits);
                      }
                    }

                    return changedBits | 0;
                  }
                }
                function scheduleWorkOnParentPath(parent, renderLanes) {
                  // Update the child lanes of all the ancestors, including the alternates.
                  var node = parent;

                  while (node !== null) {
                    var alternate = node.alternate;

                    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
                      node.childLanes = mergeLanes(node.childLanes, renderLanes);

                      if (alternate !== null) {
                        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
                      }
                    } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {
                      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
                    } else {
                      // Neither alternate was updated, which means the rest of the
                      // ancestor path already has sufficient priority.
                      break;
                    }

                    node = node.return;
                  }
                }
                function propagateContextChange(workInProgress, context, changedBits, renderLanes) {
                  var fiber = workInProgress.child;

                  if (fiber !== null) {
                    // Set the return pointer of the child to the work-in-progress fiber.
                    fiber.return = workInProgress;
                  }

                  while (fiber !== null) {
                    var nextFiber = void 0; // Visit this fiber.

                    var list = fiber.dependencies;

                    if (list !== null) {
                      nextFiber = fiber.child;
                      var dependency = list.firstContext;

                      while (dependency !== null) {
                        // Check if the context matches.
                        if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                          // Match! Schedule an update on this fiber.
                          if (fiber.tag === ClassComponent) {
                            // Schedule a force update on the work-in-progress.
                            var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes));
                            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
                            // update to the current fiber, too, which means it will persist even if
                            // this render is thrown away. Since it's a race condition, not sure it's
                            // worth fixing.

                            enqueueUpdate(fiber, update);
                          }

                          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
                          var alternate = fiber.alternate;

                          if (alternate !== null) {
                            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
                          }

                          scheduleWorkOnParentPath(fiber.return, renderLanes); // Mark the updated lanes on the list, too.

                          list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the
                          // dependency list.

                          break;
                        }

                        dependency = dependency.next;
                      }
                    } else if (fiber.tag === ContextProvider) {
                      // Don't scan deeper if this is a matching provider
                      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
                    } else {
                      // Traverse down.
                      nextFiber = fiber.child;
                    }

                    if (nextFiber !== null) {
                      // Set the return pointer of the child to the work-in-progress fiber.
                      nextFiber.return = fiber;
                    } else {
                      // No child. Traverse to next sibling.
                      nextFiber = fiber;

                      while (nextFiber !== null) {
                        if (nextFiber === workInProgress) {
                          // We're back to the root of this subtree. Exit.
                          nextFiber = null;
                          break;
                        }

                        var sibling = nextFiber.sibling;

                        if (sibling !== null) {
                          // Set the return pointer of the sibling to the work-in-progress fiber.
                          sibling.return = nextFiber.return;
                          nextFiber = sibling;
                          break;
                        } // No more siblings. Traverse up.


                        nextFiber = nextFiber.return;
                      }
                    }

                    fiber = nextFiber;
                  }
                }
                function prepareToReadContext(workInProgress, renderLanes) {
                  currentlyRenderingFiber = workInProgress;
                  lastContextDependency = null;
                  lastContextWithAllBitsObserved = null;
                  var dependencies = workInProgress.dependencies;

                  if (dependencies !== null) {
                    var firstContext = dependencies.firstContext;

                    if (firstContext !== null) {
                      if (includesSomeLane(dependencies.lanes, renderLanes)) {
                        // Context list has a pending update. Mark that this fiber performed work.
                        markWorkInProgressReceivedUpdate();
                      } // Reset the work-in-progress list


                      dependencies.firstContext = null;
                    }
                  }
                }
                function readContext(context, observedBits) {
                  {
                    // This warning would fire if you read context inside a Hook like useMemo.
                    // Unlike the class check below, it's not enforced in production for perf.
                    if (isDisallowedContextReadInDEV) {
                      error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
                    }
                  }

                  if (lastContextWithAllBitsObserved === context) ;else if (observedBits === false || observedBits === 0) ;else {
                    var resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.

                    if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
                      // Observe all updates.
                      lastContextWithAllBitsObserved = context;
                      resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
                    } else {
                      resolvedObservedBits = observedBits;
                    }

                    var contextItem = {
                      context: context,
                      observedBits: resolvedObservedBits,
                      next: null
                    };

                    if (lastContextDependency === null) {
                      if (!(currentlyRenderingFiber !== null)) {
                        {
                          throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                        }
                      } // This is the first dependency for this component. Create a new list.


                      lastContextDependency = contextItem;
                      currentlyRenderingFiber.dependencies = {
                        lanes: NoLanes,
                        firstContext: contextItem,
                        responders: null
                      };
                    } else {
                      // Append a new context item.
                      lastContextDependency = lastContextDependency.next = contextItem;
                    }
                  }

                  return context._currentValue;
                }

                var UpdateState = 0;
                var ReplaceState = 1;
                var ForceUpdate = 2;
                var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
                // It should only be read right after calling `processUpdateQueue`, via
                // `checkHasForceUpdateAfterProcessing`.

                var hasForceUpdate = false;
                var didWarnUpdateInsideUpdate;
                var currentlyProcessingQueue;

                {
                  didWarnUpdateInsideUpdate = false;
                  currentlyProcessingQueue = null;
                }

                function initializeUpdateQueue(fiber) {
                  var queue = {
                    baseState: fiber.memoizedState,
                    firstBaseUpdate: null,
                    lastBaseUpdate: null,
                    shared: {
                      pending: null
                    },
                    effects: null
                  };
                  fiber.updateQueue = queue;
                }
                function cloneUpdateQueue(current, workInProgress) {
                  // Clone the update queue from current. Unless it's already a clone.
                  var queue = workInProgress.updateQueue;
                  var currentQueue = current.updateQueue;

                  if (queue === currentQueue) {
                    var clone = {
                      baseState: currentQueue.baseState,
                      firstBaseUpdate: currentQueue.firstBaseUpdate,
                      lastBaseUpdate: currentQueue.lastBaseUpdate,
                      shared: currentQueue.shared,
                      effects: currentQueue.effects
                    };
                    workInProgress.updateQueue = clone;
                  }
                }
                function createUpdate(eventTime, lane) {
                  var update = {
                    eventTime: eventTime,
                    lane: lane,
                    tag: UpdateState,
                    payload: null,
                    callback: null,
                    next: null
                  };
                  return update;
                }
                function enqueueUpdate(fiber, update) {
                  var updateQueue = fiber.updateQueue;

                  if (updateQueue === null) {
                    // Only occurs if the fiber has been unmounted.
                    return;
                  }

                  var sharedQueue = updateQueue.shared;
                  var pending = sharedQueue.pending;

                  if (pending === null) {
                    // This is the first update. Create a circular list.
                    update.next = update;
                  } else {
                    update.next = pending.next;
                    pending.next = update;
                  }

                  sharedQueue.pending = update;

                  {
                    if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                      error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');

                      didWarnUpdateInsideUpdate = true;
                    }
                  }
                }
                function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
                  // Captured updates are updates that are thrown by a child during the render
                  // phase. They should be discarded if the render is aborted. Therefore,
                  // we should only put them on the work-in-progress queue, not the current one.
                  var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.

                  var current = workInProgress.alternate;

                  if (current !== null) {
                    var currentQueue = current.updateQueue;

                    if (queue === currentQueue) {
                      // The work-in-progress queue is the same as current. This happens when
                      // we bail out on a parent fiber that then captures an error thrown by
                      // a child. Since we want to append the update only to the work-in
                      // -progress queue, we need to clone the updates. We usually clone during
                      // processUpdateQueue, but that didn't happen in this case because we
                      // skipped over the parent when we bailed out.
                      var newFirst = null;
                      var newLast = null;
                      var firstBaseUpdate = queue.firstBaseUpdate;

                      if (firstBaseUpdate !== null) {
                        // Loop through the updates and clone them.
                        var update = firstBaseUpdate;

                        do {
                          var clone = {
                            eventTime: update.eventTime,
                            lane: update.lane,
                            tag: update.tag,
                            payload: update.payload,
                            callback: update.callback,
                            next: null
                          };

                          if (newLast === null) {
                            newFirst = newLast = clone;
                          } else {
                            newLast.next = clone;
                            newLast = clone;
                          }

                          update = update.next;
                        } while (update !== null); // Append the captured update the end of the cloned list.


                        if (newLast === null) {
                          newFirst = newLast = capturedUpdate;
                        } else {
                          newLast.next = capturedUpdate;
                          newLast = capturedUpdate;
                        }
                      } else {
                        // There are no base updates.
                        newFirst = newLast = capturedUpdate;
                      }

                      queue = {
                        baseState: currentQueue.baseState,
                        firstBaseUpdate: newFirst,
                        lastBaseUpdate: newLast,
                        shared: currentQueue.shared,
                        effects: currentQueue.effects
                      };
                      workInProgress.updateQueue = queue;
                      return;
                    }
                  } // Append the update to the end of the list.


                  var lastBaseUpdate = queue.lastBaseUpdate;

                  if (lastBaseUpdate === null) {
                    queue.firstBaseUpdate = capturedUpdate;
                  } else {
                    lastBaseUpdate.next = capturedUpdate;
                  }

                  queue.lastBaseUpdate = capturedUpdate;
                }

                function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
                  switch (update.tag) {
                    case ReplaceState:
                      {
                        var payload = update.payload;

                        if (typeof payload === 'function') {
                          // Updater function
                          {
                            enterDisallowedContextReadInDEV();
                          }

                          var nextState = payload.call(instance, prevState, nextProps);

                          {
                            if (workInProgress.mode & StrictMode) {
                              disableLogs();

                              try {
                                payload.call(instance, prevState, nextProps);
                              } finally {
                                reenableLogs();
                              }
                            }

                            exitDisallowedContextReadInDEV();
                          }

                          return nextState;
                        } // State object


                        return payload;
                      }

                    case CaptureUpdate:
                      {
                        workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
                      }
                    // Intentional fallthrough

                    case UpdateState:
                      {
                        var _payload = update.payload;
                        var partialState;

                        if (typeof _payload === 'function') {
                          // Updater function
                          {
                            enterDisallowedContextReadInDEV();
                          }

                          partialState = _payload.call(instance, prevState, nextProps);

                          {
                            if (workInProgress.mode & StrictMode) {
                              disableLogs();

                              try {
                                _payload.call(instance, prevState, nextProps);
                              } finally {
                                reenableLogs();
                              }
                            }

                            exitDisallowedContextReadInDEV();
                          }
                        } else {
                          // Partial state object
                          partialState = _payload;
                        }

                        if (partialState === null || partialState === undefined) {
                          // Null and undefined are treated as no-ops.
                          return prevState;
                        } // Merge the partial state and the previous state.


                        return _assign({}, prevState, partialState);
                      }

                    case ForceUpdate:
                      {
                        hasForceUpdate = true;
                        return prevState;
                      }
                  }

                  return prevState;
                }

                function processUpdateQueue(workInProgress, props, instance, renderLanes) {
                  // This is always non-null on a ClassComponent or HostRoot
                  var queue = workInProgress.updateQueue;
                  hasForceUpdate = false;

                  {
                    currentlyProcessingQueue = queue.shared;
                  }

                  var firstBaseUpdate = queue.firstBaseUpdate;
                  var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.

                  var pendingQueue = queue.shared.pending;

                  if (pendingQueue !== null) {
                    queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first
                    // and last so that it's non-circular.

                    var lastPendingUpdate = pendingQueue;
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = null; // Append pending updates to base queue

                    if (lastBaseUpdate === null) {
                      firstBaseUpdate = firstPendingUpdate;
                    } else {
                      lastBaseUpdate.next = firstPendingUpdate;
                    }

                    lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then
                    // we need to transfer the updates to that queue, too. Because the base
                    // queue is a singly-linked list with no cycles, we can append to both
                    // lists and take advantage of structural sharing.
                    // TODO: Pass `current` as argument

                    var current = workInProgress.alternate;

                    if (current !== null) {
                      // This is always non-null on a ClassComponent or HostRoot
                      var currentQueue = current.updateQueue;
                      var currentLastBaseUpdate = currentQueue.lastBaseUpdate;

                      if (currentLastBaseUpdate !== lastBaseUpdate) {
                        if (currentLastBaseUpdate === null) {
                          currentQueue.firstBaseUpdate = firstPendingUpdate;
                        } else {
                          currentLastBaseUpdate.next = firstPendingUpdate;
                        }

                        currentQueue.lastBaseUpdate = lastPendingUpdate;
                      }
                    }
                  } // These values may change as we process the queue.


                  if (firstBaseUpdate !== null) {
                    // Iterate through the list of updates to compute the result.
                    var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes
                    // from the original lanes.

                    var newLanes = NoLanes;
                    var newBaseState = null;
                    var newFirstBaseUpdate = null;
                    var newLastBaseUpdate = null;
                    var update = firstBaseUpdate;

                    do {
                      var updateLane = update.lane;
                      var updateEventTime = update.eventTime;

                      if (!isSubsetOfLanes(renderLanes, updateLane)) {
                        // Priority is insufficient. Skip this update. If this is the first
                        // skipped update, the previous update/state is the new base
                        // update/state.
                        var clone = {
                          eventTime: updateEventTime,
                          lane: updateLane,
                          tag: update.tag,
                          payload: update.payload,
                          callback: update.callback,
                          next: null
                        };

                        if (newLastBaseUpdate === null) {
                          newFirstBaseUpdate = newLastBaseUpdate = clone;
                          newBaseState = newState;
                        } else {
                          newLastBaseUpdate = newLastBaseUpdate.next = clone;
                        } // Update the remaining priority in the queue.


                        newLanes = mergeLanes(newLanes, updateLane);
                      } else {
                        // This update does have sufficient priority.
                        if (newLastBaseUpdate !== null) {
                          var _clone = {
                            eventTime: updateEventTime,
                            // This update is going to be committed so we never want uncommit
                            // it. Using NoLane works because 0 is a subset of all bitmasks, so
                            // this will never be skipped by the check above.
                            lane: NoLane,
                            tag: update.tag,
                            payload: update.payload,
                            callback: update.callback,
                            next: null
                          };
                          newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                        } // Process this update.


                        newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
                        var callback = update.callback;

                        if (callback !== null) {
                          workInProgress.flags |= Callback;
                          var effects = queue.effects;

                          if (effects === null) {
                            queue.effects = [update];
                          } else {
                            effects.push(update);
                          }
                        }
                      }

                      update = update.next;

                      if (update === null) {
                        pendingQueue = queue.shared.pending;

                        if (pendingQueue === null) {
                          break;
                        } else {
                          // An update was scheduled from inside a reducer. Add the new
                          // pending updates to the end of the list and keep processing.
                          var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we
                          // unravel them when transferring them to the base queue.

                          var _firstPendingUpdate = _lastPendingUpdate.next;
                          _lastPendingUpdate.next = null;
                          update = _firstPendingUpdate;
                          queue.lastBaseUpdate = _lastPendingUpdate;
                          queue.shared.pending = null;
                        }
                      }
                    } while (true);

                    if (newLastBaseUpdate === null) {
                      newBaseState = newState;
                    }

                    queue.baseState = newBaseState;
                    queue.firstBaseUpdate = newFirstBaseUpdate;
                    queue.lastBaseUpdate = newLastBaseUpdate; // Set the remaining expiration time to be whatever is remaining in the queue.
                    // This should be fine because the only two other things that contribute to
                    // expiration time are props and context. We're already in the middle of the
                    // begin phase by the time we start processing the queue, so we've already
                    // dealt with the props. Context in components that specify
                    // shouldComponentUpdate is tricky; but we'll have to account for
                    // that regardless.

                    markSkippedUpdateLanes(newLanes);
                    workInProgress.lanes = newLanes;
                    workInProgress.memoizedState = newState;
                  }

                  {
                    currentlyProcessingQueue = null;
                  }
                }

                function callCallback(callback, context) {
                  if (!(typeof callback === 'function')) {
                    {
                      throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
                    }
                  }

                  callback.call(context);
                }

                function resetHasForceUpdateBeforeProcessing() {
                  hasForceUpdate = false;
                }
                function checkHasForceUpdateAfterProcessing() {
                  return hasForceUpdate;
                }
                function commitUpdateQueue(finishedWork, finishedQueue, instance) {
                  // Commit the effects
                  var effects = finishedQueue.effects;
                  finishedQueue.effects = null;

                  if (effects !== null) {
                    for (var i = 0; i < effects.length; i++) {
                      var effect = effects[i];
                      var callback = effect.callback;

                      if (callback !== null) {
                        effect.callback = null;
                        callCallback(callback, instance);
                      }
                    }
                  }
                }

                var fakeInternalInstance = {};
                var isArray = Array.isArray; // React.Component uses a shared frozen object by default.
                // We'll use it to determine whether we need to initialize legacy refs.

                var emptyRefsObject = new React.Component().refs;
                var didWarnAboutStateAssignmentForComponent;
                var didWarnAboutUninitializedState;
                var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
                var didWarnAboutLegacyLifecyclesAndDerivedState;
                var didWarnAboutUndefinedDerivedState;
                var warnOnUndefinedDerivedState;
                var warnOnInvalidCallback;
                var didWarnAboutDirectlyAssigningPropsToState;
                var didWarnAboutContextTypeAndContextTypes;
                var didWarnAboutInvalidateContextType;

                {
                  didWarnAboutStateAssignmentForComponent = new Set();
                  didWarnAboutUninitializedState = new Set();
                  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
                  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
                  didWarnAboutDirectlyAssigningPropsToState = new Set();
                  didWarnAboutUndefinedDerivedState = new Set();
                  didWarnAboutContextTypeAndContextTypes = new Set();
                  didWarnAboutInvalidateContextType = new Set();
                  var didWarnOnInvalidCallback = new Set();

                  warnOnInvalidCallback = function (callback, callerName) {
                    if (callback === null || typeof callback === 'function') {
                      return;
                    }

                    var key = callerName + '_' + callback;

                    if (!didWarnOnInvalidCallback.has(key)) {
                      didWarnOnInvalidCallback.add(key);

                      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
                    }
                  };

                  warnOnUndefinedDerivedState = function (type, partialState) {
                    if (partialState === undefined) {
                      var componentName = getComponentName(type) || 'Component';

                      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                        didWarnAboutUndefinedDerivedState.add(componentName);

                        error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
                      }
                    }
                  }; // This is so gross but it's at least non-critical and can be removed if
                  // it causes problems. This is meant to give a nicer error message for
                  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
                  // ...)) which otherwise throws a "_processChildContext is not a function"
                  // exception.


                  Object.defineProperty(fakeInternalInstance, '_processChildContext', {
                    enumerable: false,
                    value: function () {
                      {
                        {
                          throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
                        }
                      }
                    }
                  });
                  Object.freeze(fakeInternalInstance);
                }

                function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
                  var prevState = workInProgress.memoizedState;

                  {
                    if (workInProgress.mode & StrictMode) {
                      disableLogs();

                      try {
                        // Invoke the function an extra time to help detect side-effects.
                        getDerivedStateFromProps(nextProps, prevState);
                      } finally {
                        reenableLogs();
                      }
                    }
                  }

                  var partialState = getDerivedStateFromProps(nextProps, prevState);

                  {
                    warnOnUndefinedDerivedState(ctor, partialState);
                  } // Merge the partial state and the previous state.


                  var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
                  workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
                  // base state.

                  if (workInProgress.lanes === NoLanes) {
                    // Queue is always non-null for classes
                    var updateQueue = workInProgress.updateQueue;
                    updateQueue.baseState = memoizedState;
                  }
                }
                var classComponentUpdater = {
                  isMounted: isMounted,
                  enqueueSetState: function (inst, payload, callback) {
                    var fiber = get(inst);
                    var eventTime = requestEventTime();
                    var lane = requestUpdateLane(fiber);
                    var update = createUpdate(eventTime, lane);
                    update.payload = payload;

                    if (callback !== undefined && callback !== null) {
                      {
                        warnOnInvalidCallback(callback, 'setState');
                      }

                      update.callback = callback;
                    }

                    enqueueUpdate(fiber, update);
                    scheduleUpdateOnFiber(fiber, lane, eventTime);
                  },
                  enqueueReplaceState: function (inst, payload, callback) {
                    var fiber = get(inst);
                    var eventTime = requestEventTime();
                    var lane = requestUpdateLane(fiber);
                    var update = createUpdate(eventTime, lane);
                    update.tag = ReplaceState;
                    update.payload = payload;

                    if (callback !== undefined && callback !== null) {
                      {
                        warnOnInvalidCallback(callback, 'replaceState');
                      }

                      update.callback = callback;
                    }

                    enqueueUpdate(fiber, update);
                    scheduleUpdateOnFiber(fiber, lane, eventTime);
                  },
                  enqueueForceUpdate: function (inst, callback) {
                    var fiber = get(inst);
                    var eventTime = requestEventTime();
                    var lane = requestUpdateLane(fiber);
                    var update = createUpdate(eventTime, lane);
                    update.tag = ForceUpdate;

                    if (callback !== undefined && callback !== null) {
                      {
                        warnOnInvalidCallback(callback, 'forceUpdate');
                      }

                      update.callback = callback;
                    }

                    enqueueUpdate(fiber, update);
                    scheduleUpdateOnFiber(fiber, lane, eventTime);
                  }
                };

                function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
                  var instance = workInProgress.stateNode;

                  if (typeof instance.shouldComponentUpdate === 'function') {
                    {
                      if (workInProgress.mode & StrictMode) {
                        disableLogs();

                        try {
                          // Invoke the function an extra time to help detect side-effects.
                          instance.shouldComponentUpdate(newProps, newState, nextContext);
                        } finally {
                          reenableLogs();
                        }
                      }
                    }

                    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);

                    {
                      if (shouldUpdate === undefined) {
                        error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component');
                      }
                    }

                    return shouldUpdate;
                  }

                  if (ctor.prototype && ctor.prototype.isPureReactComponent) {
                    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
                  }

                  return true;
                }

                function checkClassInstance(workInProgress, ctor, newProps) {
                  var instance = workInProgress.stateNode;

                  {
                    var name = getComponentName(ctor) || 'Component';
                    var renderPresent = instance.render;

                    if (!renderPresent) {
                      if (ctor.prototype && typeof ctor.prototype.render === 'function') {
                        error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
                      } else {
                        error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
                      }
                    }

                    if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                      error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
                    }

                    if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                      error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
                    }

                    if (instance.propTypes) {
                      error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
                    }

                    if (instance.contextType) {
                      error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);
                    }

                    {
                      if (instance.contextTypes) {
                        error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
                      }

                      if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                        didWarnAboutContextTypeAndContextTypes.add(ctor);

                        error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
                      }
                    }

                    if (typeof instance.componentShouldUpdate === 'function') {
                      error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);
                    }

                    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
                      error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
                    }

                    if (typeof instance.componentDidUnmount === 'function') {
                      error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
                    }

                    if (typeof instance.componentDidReceiveProps === 'function') {
                      error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);
                    }

                    if (typeof instance.componentWillRecieveProps === 'function') {
                      error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
                    }

                    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {
                      error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);
                    }

                    var hasMutatedProps = instance.props !== newProps;

                    if (instance.props !== undefined && hasMutatedProps) {
                      error('%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name);
                    }

                    if (instance.defaultProps) {
                      error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
                    }

                    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);

                      error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
                    }

                    if (typeof instance.getDerivedStateFromProps === 'function') {
                      error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
                    }

                    if (typeof instance.getDerivedStateFromError === 'function') {
                      error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
                    }

                    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {
                      error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);
                    }

                    var _state = instance.state;

                    if (_state && (typeof _state !== 'object' || isArray(_state))) {
                      error('%s.state: must be set to an object or null', name);
                    }

                    if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {
                      error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);
                    }
                  }
                }

                function adoptClassInstance(workInProgress, instance) {
                  instance.updater = classComponentUpdater;
                  workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates

                  set(instance, workInProgress);

                  {
                    instance._reactInternalInstance = fakeInternalInstance;
                  }
                }

                function constructClassInstance(workInProgress, ctor, props) {
                  var isLegacyContextConsumer = false;
                  var unmaskedContext = emptyContextObject;
                  var context = emptyContextObject;
                  var contextType = ctor.contextType;

                  {
                    if ('contextType' in ctor) {
                      var isValid = // Allow null for conditional declaration
                      contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>

                      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                        didWarnAboutInvalidateContextType.add(ctor);
                        var addendum = '';

                        if (contextType === undefined) {
                          addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
                        } else if (typeof contextType !== 'object') {
                          addendum = ' However, it is set to a ' + typeof contextType + '.';
                        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                          addendum = ' Did you accidentally pass the Context.Provider instead?';
                        } else if (contextType._context !== undefined) {
                          // <Context.Consumer>
                          addendum = ' Did you accidentally pass the Context.Consumer instead?';
                        } else {
                          addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
                        }

                        error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentName(ctor) || 'Component', addendum);
                      }
                    }
                  }

                  if (typeof contextType === 'object' && contextType !== null) {
                    context = readContext(contextType);
                  } else {
                    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
                    var contextTypes = ctor.contextTypes;
                    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
                    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
                  } // Instantiate twice to help detect side-effects.


                  {
                    if (workInProgress.mode & StrictMode) {
                      disableLogs();

                      try {
                        new ctor(props, context); // eslint-disable-line no-new
                      } finally {
                        reenableLogs();
                      }
                    }
                  }

                  var instance = new ctor(props, context);
                  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
                  adoptClassInstance(workInProgress, instance);

                  {
                    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
                      var componentName = getComponentName(ctor) || 'Component';

                      if (!didWarnAboutUninitializedState.has(componentName)) {
                        didWarnAboutUninitializedState.add(componentName);

                        error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
                      }
                    } // If new component APIs are defined, "unsafe" lifecycles won't be called.
                    // Warn about these lifecycles if they are present.
                    // Don't warn about react-lifecycles-compat polyfilled methods though.


                    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
                      var foundWillMountName = null;
                      var foundWillReceivePropsName = null;
                      var foundWillUpdateName = null;

                      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                        foundWillMountName = 'componentWillMount';
                      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
                        foundWillMountName = 'UNSAFE_componentWillMount';
                      }

                      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                        foundWillReceivePropsName = 'componentWillReceiveProps';
                      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
                        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
                      }

                      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                        foundWillUpdateName = 'componentWillUpdate';
                      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
                        foundWillUpdateName = 'UNSAFE_componentWillUpdate';
                      }

                      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                        var _componentName = getComponentName(ctor) || 'Component';

                        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';

                        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);

                          error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://reactjs.org/link/unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
                        }
                      }
                    }
                  } // Cache unmasked context so we can avoid recreating masked context unless necessary.
                  // ReactFiberContext usually updates this cache but can't for newly-created instances.


                  if (isLegacyContextConsumer) {
                    cacheContext(workInProgress, unmaskedContext, context);
                  }

                  return instance;
                }

                function callComponentWillMount(workInProgress, instance) {
                  var oldState = instance.state;

                  if (typeof instance.componentWillMount === 'function') {
                    instance.componentWillMount();
                  }

                  if (typeof instance.UNSAFE_componentWillMount === 'function') {
                    instance.UNSAFE_componentWillMount();
                  }

                  if (oldState !== instance.state) {
                    {
                      error('%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
                    }

                    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
                  }
                }

                function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
                  var oldState = instance.state;

                  if (typeof instance.componentWillReceiveProps === 'function') {
                    instance.componentWillReceiveProps(newProps, nextContext);
                  }

                  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
                    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
                  }

                  if (instance.state !== oldState) {
                    {
                      var componentName = getComponentName(workInProgress.type) || 'Component';

                      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                        didWarnAboutStateAssignmentForComponent.add(componentName);

                        error('%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
                      }
                    }

                    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
                  }
                } // Invokes the mount life-cycles on a previously never rendered instance.


                function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
                  {
                    checkClassInstance(workInProgress, ctor, newProps);
                  }

                  var instance = workInProgress.stateNode;
                  instance.props = newProps;
                  instance.state = workInProgress.memoizedState;
                  instance.refs = emptyRefsObject;
                  initializeUpdateQueue(workInProgress);
                  var contextType = ctor.contextType;

                  if (typeof contextType === 'object' && contextType !== null) {
                    instance.context = readContext(contextType);
                  } else {
                    var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
                    instance.context = getMaskedContext(workInProgress, unmaskedContext);
                  }

                  {
                    if (instance.state === newProps) {
                      var componentName = getComponentName(ctor) || 'Component';

                      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                        didWarnAboutDirectlyAssigningPropsToState.add(componentName);

                        error('%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
                      }
                    }

                    if (workInProgress.mode & StrictMode) {
                      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
                    }

                    {
                      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
                    }
                  }

                  processUpdateQueue(workInProgress, newProps, instance, renderLanes);
                  instance.state = workInProgress.memoizedState;
                  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

                  if (typeof getDerivedStateFromProps === 'function') {
                    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
                    instance.state = workInProgress.memoizedState;
                  } // In order to support react-lifecycles-compat polyfilled components,
                  // Unsafe lifecycles should not be invoked for components using the new APIs.


                  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
                    callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
                    // process them now.

                    processUpdateQueue(workInProgress, newProps, instance, renderLanes);
                    instance.state = workInProgress.memoizedState;
                  }

                  if (typeof instance.componentDidMount === 'function') {
                    workInProgress.flags |= Update;
                  }
                }

                function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
                  var instance = workInProgress.stateNode;
                  var oldProps = workInProgress.memoizedProps;
                  instance.props = oldProps;
                  var oldContext = instance.context;
                  var contextType = ctor.contextType;
                  var nextContext = emptyContextObject;

                  if (typeof contextType === 'object' && contextType !== null) {
                    nextContext = readContext(contextType);
                  } else {
                    var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
                    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
                  }

                  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
                  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
                  // ever the previously attempted to render - not the "current". However,
                  // during componentDidUpdate we pass the "current" props.
                  // In order to support react-lifecycles-compat polyfilled components,
                  // Unsafe lifecycles should not be invoked for components using the new APIs.

                  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
                    if (oldProps !== newProps || oldContext !== nextContext) {
                      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
                    }
                  }

                  resetHasForceUpdateBeforeProcessing();
                  var oldState = workInProgress.memoizedState;
                  var newState = instance.state = oldState;
                  processUpdateQueue(workInProgress, newProps, instance, renderLanes);
                  newState = workInProgress.memoizedState;

                  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
                    // If an update was already in progress, we should schedule an Update
                    // effect even though we're bailing out, so that cWU/cDU are called.
                    if (typeof instance.componentDidMount === 'function') {
                      workInProgress.flags |= Update;
                    }

                    return false;
                  }

                  if (typeof getDerivedStateFromProps === 'function') {
                    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
                    newState = workInProgress.memoizedState;
                  }

                  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

                  if (shouldUpdate) {
                    // In order to support react-lifecycles-compat polyfilled components,
                    // Unsafe lifecycles should not be invoked for components using the new APIs.
                    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
                      if (typeof instance.componentWillMount === 'function') {
                        instance.componentWillMount();
                      }

                      if (typeof instance.UNSAFE_componentWillMount === 'function') {
                        instance.UNSAFE_componentWillMount();
                      }
                    }

                    if (typeof instance.componentDidMount === 'function') {
                      workInProgress.flags |= Update;
                    }
                  } else {
                    // If an update was already in progress, we should schedule an Update
                    // effect even though we're bailing out, so that cWU/cDU are called.
                    if (typeof instance.componentDidMount === 'function') {
                      workInProgress.flags |= Update;
                    } // If shouldComponentUpdate returned false, we should still update the
                    // memoized state to indicate that this work can be reused.


                    workInProgress.memoizedProps = newProps;
                    workInProgress.memoizedState = newState;
                  } // Update the existing instance's state, props, and context pointers even
                  // if shouldComponentUpdate returns false.


                  instance.props = newProps;
                  instance.state = newState;
                  instance.context = nextContext;
                  return shouldUpdate;
                } // Invokes the update life-cycles and returns false if it shouldn't rerender.


                function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {
                  var instance = workInProgress.stateNode;
                  cloneUpdateQueue(current, workInProgress);
                  var unresolvedOldProps = workInProgress.memoizedProps;
                  var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
                  instance.props = oldProps;
                  var unresolvedNewProps = workInProgress.pendingProps;
                  var oldContext = instance.context;
                  var contextType = ctor.contextType;
                  var nextContext = emptyContextObject;

                  if (typeof contextType === 'object' && contextType !== null) {
                    nextContext = readContext(contextType);
                  } else {
                    var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
                    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
                  }

                  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
                  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
                  // ever the previously attempted to render - not the "current". However,
                  // during componentDidUpdate we pass the "current" props.
                  // In order to support react-lifecycles-compat polyfilled components,
                  // Unsafe lifecycles should not be invoked for components using the new APIs.

                  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
                    if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
                    }
                  }

                  resetHasForceUpdateBeforeProcessing();
                  var oldState = workInProgress.memoizedState;
                  var newState = instance.state = oldState;
                  processUpdateQueue(workInProgress, newProps, instance, renderLanes);
                  newState = workInProgress.memoizedState;

                  if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
                    // If an update was already in progress, we should schedule an Update
                    // effect even though we're bailing out, so that cWU/cDU are called.
                    if (typeof instance.componentDidUpdate === 'function') {
                      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                        workInProgress.flags |= Update;
                      }
                    }

                    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                        workInProgress.flags |= Snapshot;
                      }
                    }

                    return false;
                  }

                  if (typeof getDerivedStateFromProps === 'function') {
                    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
                    newState = workInProgress.memoizedState;
                  }

                  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

                  if (shouldUpdate) {
                    // In order to support react-lifecycles-compat polyfilled components,
                    // Unsafe lifecycles should not be invoked for components using the new APIs.
                    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
                      if (typeof instance.componentWillUpdate === 'function') {
                        instance.componentWillUpdate(newProps, newState, nextContext);
                      }

                      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
                        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                      }
                    }

                    if (typeof instance.componentDidUpdate === 'function') {
                      workInProgress.flags |= Update;
                    }

                    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                      workInProgress.flags |= Snapshot;
                    }
                  } else {
                    // If an update was already in progress, we should schedule an Update
                    // effect even though we're bailing out, so that cWU/cDU are called.
                    if (typeof instance.componentDidUpdate === 'function') {
                      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                        workInProgress.flags |= Update;
                      }
                    }

                    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                        workInProgress.flags |= Snapshot;
                      }
                    } // If shouldComponentUpdate returned false, we should still update the
                    // memoized props/state to indicate that this work can be reused.


                    workInProgress.memoizedProps = newProps;
                    workInProgress.memoizedState = newState;
                  } // Update the existing instance's state, props, and context pointers even
                  // if shouldComponentUpdate returns false.


                  instance.props = newProps;
                  instance.state = newState;
                  instance.context = nextContext;
                  return shouldUpdate;
                }

                var didWarnAboutMaps;
                var didWarnAboutGenerators;
                var didWarnAboutStringRefs;
                var ownerHasKeyUseWarning;
                var ownerHasFunctionTypeWarning;

                var warnForMissingKey = function (child, returnFiber) {};

                {
                  didWarnAboutMaps = false;
                  didWarnAboutGenerators = false;
                  didWarnAboutStringRefs = {};
                  /**
                   * Warn if there's no key explicitly set on dynamic arrays of children or
                   * object keys are not valid. This allows us to keep track of children between
                   * updates.
                   */

                  ownerHasKeyUseWarning = {};
                  ownerHasFunctionTypeWarning = {};

                  warnForMissingKey = function (child, returnFiber) {
                    if (child === null || typeof child !== 'object') {
                      return;
                    }

                    if (!child._store || child._store.validated || child.key != null) {
                      return;
                    }

                    if (!(typeof child._store === 'object')) {
                      {
                        throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }

                    child._store.validated = true;
                    var componentName = getComponentName(returnFiber.type) || 'Component';

                    if (ownerHasKeyUseWarning[componentName]) {
                      return;
                    }

                    ownerHasKeyUseWarning[componentName] = true;

                    error('Each child in a list should have a unique ' + '"key" prop. See https://reactjs.org/link/warning-keys for ' + 'more information.');
                  };
                }

                var isArray$1 = Array.isArray;

                function coerceRef(returnFiber, current, element) {
                  var mixedRef = element.ref;

                  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
                    {
                      // TODO: Clean this up once we turn on the string ref warning for
                      // everyone, because the strict mode case will no longer be relevant
                      if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                      // because these cannot be automatically converted to an arrow function
                      // using a codemod. Therefore, we don't have to warn about string refs again.
                      !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                        var componentName = getComponentName(returnFiber.type) || 'Component';

                        if (!didWarnAboutStringRefs[componentName]) {
                          {
                            error('A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                          }

                          didWarnAboutStringRefs[componentName] = true;
                        }
                      }
                    }

                    if (element._owner) {
                      var owner = element._owner;
                      var inst;

                      if (owner) {
                        var ownerFiber = owner;

                        if (!(ownerFiber.tag === ClassComponent)) {
                          {
                            throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                          }
                        }

                        inst = ownerFiber.stateNode;
                      }

                      if (!inst) {
                        {
                          throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                        }
                      }

                      var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref

                      if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {
                        return current.ref;
                      }

                      var ref = function (value) {
                        var refs = inst.refs;

                        if (refs === emptyRefsObject) {
                          // This is a lazy pooled frozen object, so we need to initialize.
                          refs = inst.refs = {};
                        }

                        if (value === null) {
                          delete refs[stringRef];
                        } else {
                          refs[stringRef] = value;
                        }
                      };

                      ref._stringRef = stringRef;
                      return ref;
                    } else {
                      if (!(typeof mixedRef === 'string')) {
                        {
                          throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                        }
                      }

                      if (!element._owner) {
                        {
                          throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                        }
                      }
                    }
                  }

                  return mixedRef;
                }

                function throwOnInvalidObjectType(returnFiber, newChild) {
                  if (returnFiber.type !== 'textarea') {
                    {
                      {
                        throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild) + "). If you meant to render a collection of children, use an array instead.");
                      }
                    }
                  }
                }

                function warnOnFunctionType(returnFiber) {
                  {
                    var componentName = getComponentName(returnFiber.type) || 'Component';

                    if (ownerHasFunctionTypeWarning[componentName]) {
                      return;
                    }

                    ownerHasFunctionTypeWarning[componentName] = true;

                    error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
                  }
                } // We avoid inlining this to avoid potential deopts from using try/catch.
                // to be able to optimize each path individually by branching early. This needs
                // a compiler or we can do it manually. Helpers that don't need this branching
                // live outside of this function.


                function ChildReconciler(shouldTrackSideEffects) {
                  function deleteChild(returnFiber, childToDelete) {
                    if (!shouldTrackSideEffects) {
                      // Noop.
                      return;
                    } // Deletions are added in reversed order so we add it to the front.
                    // At this point, the return fiber's effect list is empty except for
                    // deletions, so we can just append the deletion to the list. The remaining
                    // effects aren't added until the complete phase. Once we implement
                    // resuming, this may not be true.


                    var last = returnFiber.lastEffect;

                    if (last !== null) {
                      last.nextEffect = childToDelete;
                      returnFiber.lastEffect = childToDelete;
                    } else {
                      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
                    }

                    childToDelete.nextEffect = null;
                    childToDelete.flags = Deletion;
                  }

                  function deleteRemainingChildren(returnFiber, currentFirstChild) {
                    if (!shouldTrackSideEffects) {
                      // Noop.
                      return null;
                    } // TODO: For the shouldClone case, this could be micro-optimized a bit by
                    // assuming that after the first child we've already added everything.


                    var childToDelete = currentFirstChild;

                    while (childToDelete !== null) {
                      deleteChild(returnFiber, childToDelete);
                      childToDelete = childToDelete.sibling;
                    }

                    return null;
                  }

                  function mapRemainingChildren(returnFiber, currentFirstChild) {
                    // Add the remaining children to a temporary map so that we can find them by
                    // keys quickly. Implicit (null) keys get added to this set with their index
                    // instead.
                    var existingChildren = new Map();
                    var existingChild = currentFirstChild;

                    while (existingChild !== null) {
                      if (existingChild.key !== null) {
                        existingChildren.set(existingChild.key, existingChild);
                      } else {
                        existingChildren.set(existingChild.index, existingChild);
                      }

                      existingChild = existingChild.sibling;
                    }

                    return existingChildren;
                  }

                  function useFiber(fiber, pendingProps) {
                    // We currently set sibling to null and index to 0 here because it is easy
                    // to forget to do before returning it. E.g. for the single child case.
                    var clone = createWorkInProgress(fiber, pendingProps);
                    clone.index = 0;
                    clone.sibling = null;
                    return clone;
                  }

                  function placeChild(newFiber, lastPlacedIndex, newIndex) {
                    newFiber.index = newIndex;

                    if (!shouldTrackSideEffects) {
                      // Noop.
                      return lastPlacedIndex;
                    }

                    var current = newFiber.alternate;

                    if (current !== null) {
                      var oldIndex = current.index;

                      if (oldIndex < lastPlacedIndex) {
                        // This is a move.
                        newFiber.flags = Placement;
                        return lastPlacedIndex;
                      } else {
                        // This item can stay in place.
                        return oldIndex;
                      }
                    } else {
                      // This is an insertion.
                      newFiber.flags = Placement;
                      return lastPlacedIndex;
                    }
                  }

                  function placeSingleChild(newFiber) {
                    // This is simpler for the single child case. We only need to do a
                    // placement for inserting new children.
                    if (shouldTrackSideEffects && newFiber.alternate === null) {
                      newFiber.flags = Placement;
                    }

                    return newFiber;
                  }

                  function updateTextNode(returnFiber, current, textContent, lanes) {
                    if (current === null || current.tag !== HostText) {
                      // Insert
                      var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                      created.return = returnFiber;
                      return created;
                    } else {
                      // Update
                      var existing = useFiber(current, textContent);
                      existing.return = returnFiber;
                      return existing;
                    }
                  }

                  function updateElement(returnFiber, current, element, lanes) {
                    if (current !== null) {
                      if (current.elementType === element.type || // Keep this check inline so it only runs on the false path:
                      isCompatibleFamilyForHotReloading(current, element)) {
                        // Move based on index
                        var existing = useFiber(current, element.props);
                        existing.ref = coerceRef(returnFiber, current, element);
                        existing.return = returnFiber;

                        {
                          existing._debugSource = element._source;
                          existing._debugOwner = element._owner;
                        }

                        return existing;
                      }
                    } // Insert


                    var created = createFiberFromElement(element, returnFiber.mode, lanes);
                    created.ref = coerceRef(returnFiber, current, element);
                    created.return = returnFiber;
                    return created;
                  }

                  function updatePortal(returnFiber, current, portal, lanes) {
                    if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
                      // Insert
                      var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                      created.return = returnFiber;
                      return created;
                    } else {
                      // Update
                      var existing = useFiber(current, portal.children || []);
                      existing.return = returnFiber;
                      return existing;
                    }
                  }

                  function updateFragment(returnFiber, current, fragment, lanes, key) {
                    if (current === null || current.tag !== Fragment) {
                      // Insert
                      var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                      created.return = returnFiber;
                      return created;
                    } else {
                      // Update
                      var existing = useFiber(current, fragment);
                      existing.return = returnFiber;
                      return existing;
                    }
                  }

                  function createChild(returnFiber, newChild, lanes) {
                    if (typeof newChild === 'string' || typeof newChild === 'number') {
                      // Text nodes don't have keys. If the previous node is implicitly keyed
                      // we can continue to replace it without aborting even if it is not a text
                      // node.
                      var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);
                      created.return = returnFiber;
                      return created;
                    }

                    if (typeof newChild === 'object' && newChild !== null) {
                      switch (newChild.$$typeof) {
                        case REACT_ELEMENT_TYPE:
                          {
                            var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);

                            _created.ref = coerceRef(returnFiber, null, newChild);
                            _created.return = returnFiber;
                            return _created;
                          }

                        case REACT_PORTAL_TYPE:
                          {
                            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);

                            _created2.return = returnFiber;
                            return _created2;
                          }
                      }

                      if (isArray$1(newChild) || getIteratorFn(newChild)) {
                        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);

                        _created3.return = returnFiber;
                        return _created3;
                      }

                      throwOnInvalidObjectType(returnFiber, newChild);
                    }

                    {
                      if (typeof newChild === 'function') {
                        warnOnFunctionType(returnFiber);
                      }
                    }

                    return null;
                  }

                  function updateSlot(returnFiber, oldFiber, newChild, lanes) {
                    // Update the fiber if the keys match, otherwise return null.
                    var key = oldFiber !== null ? oldFiber.key : null;

                    if (typeof newChild === 'string' || typeof newChild === 'number') {
                      // Text nodes don't have keys. If the previous node is implicitly keyed
                      // we can continue to replace it without aborting even if it is not a text
                      // node.
                      if (key !== null) {
                        return null;
                      }

                      return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);
                    }

                    if (typeof newChild === 'object' && newChild !== null) {
                      switch (newChild.$$typeof) {
                        case REACT_ELEMENT_TYPE:
                          {
                            if (newChild.key === key) {
                              if (newChild.type === REACT_FRAGMENT_TYPE) {
                                return updateFragment(returnFiber, oldFiber, newChild.props.children, lanes, key);
                              }

                              return updateElement(returnFiber, oldFiber, newChild, lanes);
                            } else {
                              return null;
                            }
                          }

                        case REACT_PORTAL_TYPE:
                          {
                            if (newChild.key === key) {
                              return updatePortal(returnFiber, oldFiber, newChild, lanes);
                            } else {
                              return null;
                            }
                          }
                      }

                      if (isArray$1(newChild) || getIteratorFn(newChild)) {
                        if (key !== null) {
                          return null;
                        }

                        return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
                      }

                      throwOnInvalidObjectType(returnFiber, newChild);
                    }

                    {
                      if (typeof newChild === 'function') {
                        warnOnFunctionType(returnFiber);
                      }
                    }

                    return null;
                  }

                  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
                    if (typeof newChild === 'string' || typeof newChild === 'number') {
                      // Text nodes don't have keys, so we neither have to check the old nor
                      // new node for the key. If both are text nodes, they match.
                      var matchedFiber = existingChildren.get(newIdx) || null;
                      return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);
                    }

                    if (typeof newChild === 'object' && newChild !== null) {
                      switch (newChild.$$typeof) {
                        case REACT_ELEMENT_TYPE:
                          {
                            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                            if (newChild.type === REACT_FRAGMENT_TYPE) {
                              return updateFragment(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                            }

                            return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                          }

                        case REACT_PORTAL_TYPE:
                          {
                            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                            return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                          }

                      }

                      if (isArray$1(newChild) || getIteratorFn(newChild)) {
                        var _matchedFiber3 = existingChildren.get(newIdx) || null;

                        return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
                      }

                      throwOnInvalidObjectType(returnFiber, newChild);
                    }

                    {
                      if (typeof newChild === 'function') {
                        warnOnFunctionType(returnFiber);
                      }
                    }

                    return null;
                  }
                  /**
                   * Warns if there is a duplicate or missing key
                   */

                  function warnOnInvalidKey(child, knownKeys, returnFiber) {
                    {
                      if (typeof child !== 'object' || child === null) {
                        return knownKeys;
                      }

                      switch (child.$$typeof) {
                        case REACT_ELEMENT_TYPE:
                        case REACT_PORTAL_TYPE:
                          warnForMissingKey(child, returnFiber);
                          var key = child.key;

                          if (typeof key !== 'string') {
                            break;
                          }

                          if (knownKeys === null) {
                            knownKeys = new Set();
                            knownKeys.add(key);
                            break;
                          }

                          if (!knownKeys.has(key)) {
                            knownKeys.add(key);
                            break;
                          }

                          error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);

                          break;
                      }
                    }

                    return knownKeys;
                  }

                  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
                    // This algorithm can't optimize by searching from both ends since we
                    // don't have backpointers on fibers. I'm trying to see how far we can get
                    // with that model. If it ends up not being worth the tradeoffs, we can
                    // add it later.
                    // Even with a two ended optimization, we'd want to optimize for the case
                    // where there are few changes and brute force the comparison instead of
                    // going for the Map. It'd like to explore hitting that path first in
                    // forward-only mode and only go for the Map once we notice that we need
                    // lots of look ahead. This doesn't handle reversal as well as two ended
                    // search but that's unusual. Besides, for the two ended optimization to
                    // work on Iterables, we'd need to copy the whole set.
                    // In this first iteration, we'll just live with hitting the bad case
                    // (adding everything to a Map) in for every insert/move.
                    // If you change this code, also update reconcileChildrenIterator() which
                    // uses the same algorithm.
                    {
                      // First, validate keys.
                      var knownKeys = null;

                      for (var i = 0; i < newChildren.length; i++) {
                        var child = newChildren[i];
                        knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                      }
                    }

                    var resultingFirstChild = null;
                    var previousNewFiber = null;
                    var oldFiber = currentFirstChild;
                    var lastPlacedIndex = 0;
                    var newIdx = 0;
                    var nextOldFiber = null;

                    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                      if (oldFiber.index > newIdx) {
                        nextOldFiber = oldFiber;
                        oldFiber = null;
                      } else {
                        nextOldFiber = oldFiber.sibling;
                      }

                      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);

                      if (newFiber === null) {
                        // TODO: This breaks on empty slots like null children. That's
                        // unfortunate because it triggers the slow path all the time. We need
                        // a better way to communicate whether this was a miss or null,
                        // boolean, undefined, etc.
                        if (oldFiber === null) {
                          oldFiber = nextOldFiber;
                        }

                        break;
                      }

                      if (shouldTrackSideEffects) {
                        if (oldFiber && newFiber.alternate === null) {
                          // We matched the slot, but we didn't reuse the existing fiber, so we
                          // need to delete the existing child.
                          deleteChild(returnFiber, oldFiber);
                        }
                      }

                      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

                      if (previousNewFiber === null) {
                        // TODO: Move out of the loop. This only happens for the first run.
                        resultingFirstChild = newFiber;
                      } else {
                        // TODO: Defer siblings if we're not at the right index for this slot.
                        // I.e. if we had null values before, then we want to defer this
                        // for each null value. However, we also don't want to call updateSlot
                        // with the previous one.
                        previousNewFiber.sibling = newFiber;
                      }

                      previousNewFiber = newFiber;
                      oldFiber = nextOldFiber;
                    }

                    if (newIdx === newChildren.length) {
                      // We've reached the end of the new children. We can delete the rest.
                      deleteRemainingChildren(returnFiber, oldFiber);
                      return resultingFirstChild;
                    }

                    if (oldFiber === null) {
                      // If we don't have any more existing children we can choose a fast path
                      // since the rest will all be insertions.
                      for (; newIdx < newChildren.length; newIdx++) {
                        var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);

                        if (_newFiber === null) {
                          continue;
                        }

                        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

                        if (previousNewFiber === null) {
                          // TODO: Move out of the loop. This only happens for the first run.
                          resultingFirstChild = _newFiber;
                        } else {
                          previousNewFiber.sibling = _newFiber;
                        }

                        previousNewFiber = _newFiber;
                      }

                      return resultingFirstChild;
                    } // Add all children to a key map for quick lookups.


                    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

                    for (; newIdx < newChildren.length; newIdx++) {
                      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);

                      if (_newFiber2 !== null) {
                        if (shouldTrackSideEffects) {
                          if (_newFiber2.alternate !== null) {
                            // The new fiber is a work in progress, but if there exists a
                            // current, that means that we reused the fiber. We need to delete
                            // it from the child list so that we don't add it to the deletion
                            // list.
                            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                          }
                        }

                        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

                        if (previousNewFiber === null) {
                          resultingFirstChild = _newFiber2;
                        } else {
                          previousNewFiber.sibling = _newFiber2;
                        }

                        previousNewFiber = _newFiber2;
                      }
                    }

                    if (shouldTrackSideEffects) {
                      // Any existing children that weren't consumed above were deleted. We need
                      // to add them to the deletion list.
                      existingChildren.forEach(function (child) {
                        return deleteChild(returnFiber, child);
                      });
                    }

                    return resultingFirstChild;
                  }

                  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
                    // This is the same implementation as reconcileChildrenArray(),
                    // but using the iterator instead.
                    var iteratorFn = getIteratorFn(newChildrenIterable);

                    if (!(typeof iteratorFn === 'function')) {
                      {
                        throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }

                    {
                      // We don't support rendering Generators because it's a mutation.
                      // See https://github.com/facebook/react/issues/12995
                      if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
                      newChildrenIterable[Symbol.toStringTag] === 'Generator') {
                        if (!didWarnAboutGenerators) {
                          error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');
                        }

                        didWarnAboutGenerators = true;
                      } // Warn about using Maps as children


                      if (newChildrenIterable.entries === iteratorFn) {
                        if (!didWarnAboutMaps) {
                          error('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
                        }

                        didWarnAboutMaps = true;
                      } // First, validate keys.
                      // We'll get a different iterator later for the main pass.


                      var _newChildren = iteratorFn.call(newChildrenIterable);

                      if (_newChildren) {
                        var knownKeys = null;

                        var _step = _newChildren.next();

                        for (; !_step.done; _step = _newChildren.next()) {
                          var child = _step.value;
                          knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                        }
                      }
                    }

                    var newChildren = iteratorFn.call(newChildrenIterable);

                    if (!(newChildren != null)) {
                      {
                        throw Error("An iterable object provided no iterator.");
                      }
                    }

                    var resultingFirstChild = null;
                    var previousNewFiber = null;
                    var oldFiber = currentFirstChild;
                    var lastPlacedIndex = 0;
                    var newIdx = 0;
                    var nextOldFiber = null;
                    var step = newChildren.next();

                    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                      if (oldFiber.index > newIdx) {
                        nextOldFiber = oldFiber;
                        oldFiber = null;
                      } else {
                        nextOldFiber = oldFiber.sibling;
                      }

                      var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);

                      if (newFiber === null) {
                        // TODO: This breaks on empty slots like null children. That's
                        // unfortunate because it triggers the slow path all the time. We need
                        // a better way to communicate whether this was a miss or null,
                        // boolean, undefined, etc.
                        if (oldFiber === null) {
                          oldFiber = nextOldFiber;
                        }

                        break;
                      }

                      if (shouldTrackSideEffects) {
                        if (oldFiber && newFiber.alternate === null) {
                          // We matched the slot, but we didn't reuse the existing fiber, so we
                          // need to delete the existing child.
                          deleteChild(returnFiber, oldFiber);
                        }
                      }

                      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

                      if (previousNewFiber === null) {
                        // TODO: Move out of the loop. This only happens for the first run.
                        resultingFirstChild = newFiber;
                      } else {
                        // TODO: Defer siblings if we're not at the right index for this slot.
                        // I.e. if we had null values before, then we want to defer this
                        // for each null value. However, we also don't want to call updateSlot
                        // with the previous one.
                        previousNewFiber.sibling = newFiber;
                      }

                      previousNewFiber = newFiber;
                      oldFiber = nextOldFiber;
                    }

                    if (step.done) {
                      // We've reached the end of the new children. We can delete the rest.
                      deleteRemainingChildren(returnFiber, oldFiber);
                      return resultingFirstChild;
                    }

                    if (oldFiber === null) {
                      // If we don't have any more existing children we can choose a fast path
                      // since the rest will all be insertions.
                      for (; !step.done; newIdx++, step = newChildren.next()) {
                        var _newFiber3 = createChild(returnFiber, step.value, lanes);

                        if (_newFiber3 === null) {
                          continue;
                        }

                        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

                        if (previousNewFiber === null) {
                          // TODO: Move out of the loop. This only happens for the first run.
                          resultingFirstChild = _newFiber3;
                        } else {
                          previousNewFiber.sibling = _newFiber3;
                        }

                        previousNewFiber = _newFiber3;
                      }

                      return resultingFirstChild;
                    } // Add all children to a key map for quick lookups.


                    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

                    for (; !step.done; newIdx++, step = newChildren.next()) {
                      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);

                      if (_newFiber4 !== null) {
                        if (shouldTrackSideEffects) {
                          if (_newFiber4.alternate !== null) {
                            // The new fiber is a work in progress, but if there exists a
                            // current, that means that we reused the fiber. We need to delete
                            // it from the child list so that we don't add it to the deletion
                            // list.
                            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                          }
                        }

                        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

                        if (previousNewFiber === null) {
                          resultingFirstChild = _newFiber4;
                        } else {
                          previousNewFiber.sibling = _newFiber4;
                        }

                        previousNewFiber = _newFiber4;
                      }
                    }

                    if (shouldTrackSideEffects) {
                      // Any existing children that weren't consumed above were deleted. We need
                      // to add them to the deletion list.
                      existingChildren.forEach(function (child) {
                        return deleteChild(returnFiber, child);
                      });
                    }

                    return resultingFirstChild;
                  }

                  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
                    // There's no need to check for keys on text nodes since we don't have a
                    // way to define them.
                    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                      // We already have an existing node so let's just update it and delete
                      // the rest.
                      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                      var existing = useFiber(currentFirstChild, textContent);
                      existing.return = returnFiber;
                      return existing;
                    } // The existing first child is not a text node so we need to create one
                    // and delete the existing ones.


                    deleteRemainingChildren(returnFiber, currentFirstChild);
                    var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                    created.return = returnFiber;
                    return created;
                  }

                  function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
                    var key = element.key;
                    var child = currentFirstChild;

                    while (child !== null) {
                      // TODO: If key === null and child.key === null, then this only applies to
                      // the first item in the list.
                      if (child.key === key) {
                        switch (child.tag) {
                          case Fragment:
                            {
                              if (element.type === REACT_FRAGMENT_TYPE) {
                                deleteRemainingChildren(returnFiber, child.sibling);
                                var existing = useFiber(child, element.props.children);
                                existing.return = returnFiber;

                                {
                                  existing._debugSource = element._source;
                                  existing._debugOwner = element._owner;
                                }

                                return existing;
                              }

                              break;
                            }

                          case Block:

                          // We intentionally fallthrough here if enableBlocksAPI is not on.
                          // eslint-disable-next-lined no-fallthrough

                          default:
                            {
                              if (child.elementType === element.type || // Keep this check inline so it only runs on the false path:
                              isCompatibleFamilyForHotReloading(child, element)) {
                                deleteRemainingChildren(returnFiber, child.sibling);

                                var _existing3 = useFiber(child, element.props);

                                _existing3.ref = coerceRef(returnFiber, child, element);
                                _existing3.return = returnFiber;

                                {
                                  _existing3._debugSource = element._source;
                                  _existing3._debugOwner = element._owner;
                                }

                                return _existing3;
                              }

                              break;
                            }
                        } // Didn't match.


                        deleteRemainingChildren(returnFiber, child);
                        break;
                      } else {
                        deleteChild(returnFiber, child);
                      }

                      child = child.sibling;
                    }

                    if (element.type === REACT_FRAGMENT_TYPE) {
                      var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                      created.return = returnFiber;
                      return created;
                    } else {
                      var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);

                      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                      _created4.return = returnFiber;
                      return _created4;
                    }
                  }

                  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
                    var key = portal.key;
                    var child = currentFirstChild;

                    while (child !== null) {
                      // TODO: If key === null and child.key === null, then this only applies to
                      // the first item in the list.
                      if (child.key === key) {
                        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                          deleteRemainingChildren(returnFiber, child.sibling);
                          var existing = useFiber(child, portal.children || []);
                          existing.return = returnFiber;
                          return existing;
                        } else {
                          deleteRemainingChildren(returnFiber, child);
                          break;
                        }
                      } else {
                        deleteChild(returnFiber, child);
                      }

                      child = child.sibling;
                    }

                    var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                    created.return = returnFiber;
                    return created;
                  } // This API will tag the children with the side-effect of the reconciliation
                  // itself. They will be added to the side-effect list as we pass through the
                  // children and the parent.


                  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
                    // This function is not recursive.
                    // If the top level item is an array, we treat it as a set of children,
                    // not as a fragment. Nested arrays on the other hand will be treated as
                    // fragment nodes. Recursion happens at the normal flow.
                    // Handle top level unkeyed fragments as if they were arrays.
                    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
                    // We treat the ambiguous cases above the same.
                    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

                    if (isUnkeyedTopLevelFragment) {
                      newChild = newChild.props.children;
                    } // Handle object types


                    var isObject = typeof newChild === 'object' && newChild !== null;

                    if (isObject) {
                      switch (newChild.$$typeof) {
                        case REACT_ELEMENT_TYPE:
                          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));

                        case REACT_PORTAL_TYPE:
                          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));

                      }
                    }

                    if (typeof newChild === 'string' || typeof newChild === 'number') {
                      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));
                    }

                    if (isArray$1(newChild)) {
                      return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                    }

                    if (getIteratorFn(newChild)) {
                      return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                    }

                    if (isObject) {
                      throwOnInvalidObjectType(returnFiber, newChild);
                    }

                    {
                      if (typeof newChild === 'function') {
                        warnOnFunctionType(returnFiber);
                      }
                    }

                    if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
                      // If the new child is undefined, and the return fiber is a composite
                      // component, throw an error. If Fiber return types are disabled,
                      // we already threw above.
                      switch (returnFiber.tag) {
                        case ClassComponent:
                          {
                            {
                              var instance = returnFiber.stateNode;

                              if (instance.render._isMockFunction) {
                                // We allow auto-mocks to proceed as if they're returning null.
                                break;
                              }
                            }
                          }
                        // Intentionally fall through to the next case, which handles both
                        // functions and classes
                        // eslint-disable-next-lined no-fallthrough

                        case Block:
                        case FunctionComponent:
                        case ForwardRef:
                        case SimpleMemoComponent:
                          {
                            {
                              {
                                throw Error((getComponentName(returnFiber.type) || 'Component') + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                              }
                            }
                          }
                      }
                    } // Remaining cases are all treated as empty.


                    return deleteRemainingChildren(returnFiber, currentFirstChild);
                  }

                  return reconcileChildFibers;
                }

                var reconcileChildFibers = ChildReconciler(true);
                var mountChildFibers = ChildReconciler(false);
                function cloneChildFibers(current, workInProgress) {
                  if (!(current === null || workInProgress.child === current.child)) {
                    {
                      throw Error("Resuming work not yet implemented.");
                    }
                  }

                  if (workInProgress.child === null) {
                    return;
                  }

                  var currentChild = workInProgress.child;
                  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
                  workInProgress.child = newChild;
                  newChild.return = workInProgress;

                  while (currentChild.sibling !== null) {
                    currentChild = currentChild.sibling;
                    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
                    newChild.return = workInProgress;
                  }

                  newChild.sibling = null;
                } // Reset a workInProgress child set to prepare it for a second pass.

                function resetChildFibers(workInProgress, lanes) {
                  var child = workInProgress.child;

                  while (child !== null) {
                    resetWorkInProgress(child, lanes);
                    child = child.sibling;
                  }
                }

                var NO_CONTEXT = {};
                var contextStackCursor$1 = createCursor(NO_CONTEXT);
                var contextFiberStackCursor = createCursor(NO_CONTEXT);
                var rootInstanceStackCursor = createCursor(NO_CONTEXT);

                function requiredContext(c) {
                  if (!(c !== NO_CONTEXT)) {
                    {
                      throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }

                  return c;
                }

                function getRootHostContainer() {
                  var rootInstance = requiredContext(rootInstanceStackCursor.current);
                  return rootInstance;
                }

                function pushHostContainer(fiber, nextRootInstance) {
                  // Push current root instance onto the stack;
                  // This allows us to reset root when portals are popped.
                  push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
                  // This enables us to pop only Fibers that provide unique contexts.

                  push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
                  // However, we can't just call getRootHostContext() and push it because
                  // we'd have a different number of entries on the stack depending on
                  // whether getRootHostContext() throws somewhere in renderer code or not.
                  // So we push an empty value first. This lets us safely unwind on errors.

                  push(contextStackCursor$1, NO_CONTEXT, fiber);
                  var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.

                  pop(contextStackCursor$1, fiber);
                  push(contextStackCursor$1, nextRootContext, fiber);
                }

                function popHostContainer(fiber) {
                  pop(contextStackCursor$1, fiber);
                  pop(contextFiberStackCursor, fiber);
                  pop(rootInstanceStackCursor, fiber);
                }

                function getHostContext() {
                  var context = requiredContext(contextStackCursor$1.current);
                  return context;
                }

                function pushHostContext(fiber) {
                  var rootInstance = requiredContext(rootInstanceStackCursor.current);
                  var context = requiredContext(contextStackCursor$1.current);
                  var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.

                  if (context === nextContext) {
                    return;
                  } // Track the context and the Fiber that provided it.
                  // This enables us to pop only Fibers that provide unique contexts.


                  push(contextFiberStackCursor, fiber, fiber);
                  push(contextStackCursor$1, nextContext, fiber);
                }

                function popHostContext(fiber) {
                  // Do not pop unless this Fiber provided the current context.
                  // pushHostContext() only pushes Fibers that provide unique contexts.
                  if (contextFiberStackCursor.current !== fiber) {
                    return;
                  }

                  pop(contextStackCursor$1, fiber);
                  pop(contextFiberStackCursor, fiber);
                }

                var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
                // inherited deeply down the subtree. The upper bits only affect
                // this immediate suspense boundary and gets reset each new
                // boundary or suspense list.

                var SubtreeSuspenseContextMask = 1; // Subtree Flags:
                // InvisibleParentSuspenseContext indicates that one of our parent Suspense
                // boundaries is not currently showing visible main content.
                // Either because it is already showing a fallback or is not mounted at all.
                // We can use this to determine if it is desirable to trigger a fallback at
                // the parent. If not, then we might need to trigger undesirable boundaries
                // and/or suspend the commit to avoid hiding the parent content.

                var InvisibleParentSuspenseContext = 1; // Shallow Flags:
                // ForceSuspenseFallback can be used by SuspenseList to force newly added
                // items into their fallback state during one of the render passes.

                var ForceSuspenseFallback = 2;
                var suspenseStackCursor = createCursor(DefaultSuspenseContext);
                function hasSuspenseContext(parentContext, flag) {
                  return (parentContext & flag) !== 0;
                }
                function setDefaultShallowSuspenseContext(parentContext) {
                  return parentContext & SubtreeSuspenseContextMask;
                }
                function setShallowSuspenseContext(parentContext, shallowContext) {
                  return parentContext & SubtreeSuspenseContextMask | shallowContext;
                }
                function addSubtreeSuspenseContext(parentContext, subtreeContext) {
                  return parentContext | subtreeContext;
                }
                function pushSuspenseContext(fiber, newContext) {
                  push(suspenseStackCursor, newContext, fiber);
                }
                function popSuspenseContext(fiber) {
                  pop(suspenseStackCursor, fiber);
                }

                function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
                  // If it was the primary children that just suspended, capture and render the
                  // fallback. Otherwise, don't capture and bubble to the next boundary.
                  var nextState = workInProgress.memoizedState;

                  if (nextState !== null) {
                    if (nextState.dehydrated !== null) {
                      // A dehydrated boundary always captures.
                      return true;
                    }

                    return false;
                  }

                  var props = workInProgress.memoizedProps; // In order to capture, the Suspense component must have a fallback prop.

                  if (props.fallback === undefined) {
                    return false;
                  } // Regular boundaries always capture.


                  if (props.unstable_avoidThisFallback !== true) {
                    return true;
                  } // If it's a boundary we should avoid, then we prefer to bubble up to the
                  // parent boundary if it is currently invisible.


                  if (hasInvisibleParent) {
                    return false;
                  } // If the parent is not able to handle it, we must handle it.


                  return true;
                }
                function findFirstSuspended(row) {
                  var node = row;

                  while (node !== null) {
                    if (node.tag === SuspenseComponent) {
                      var state = node.memoizedState;

                      if (state !== null) {
                        var dehydrated = state.dehydrated;

                        if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                          return node;
                        }
                      }
                    } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
                    // keep track of whether it suspended or not.
                    node.memoizedProps.revealOrder !== undefined) {
                      var didSuspend = (node.flags & DidCapture) !== NoFlags;

                      if (didSuspend) {
                        return node;
                      }
                    } else if (node.child !== null) {
                      node.child.return = node;
                      node = node.child;
                      continue;
                    }

                    if (node === row) {
                      return null;
                    }

                    while (node.sibling === null) {
                      if (node.return === null || node.return === row) {
                        return null;
                      }

                      node = node.return;
                    }

                    node.sibling.return = node.return;
                    node = node.sibling;
                  }

                  return null;
                }

                var NoFlags$1 =
                /*  */
                0; // Represents whether effect should fire.

                var HasEffect =
                /* */
                1; // Represents the phase in which the effect (not the clean-up) fires.

                var Layout =
                /*    */
                2;
                var Passive$1 =
                /*   */
                4;

                // This may have been an insertion or a hydration.

                var hydrationParentFiber = null;
                var nextHydratableInstance = null;
                var isHydrating = false;

                function enterHydrationState(fiber) {

                  var parentInstance = fiber.stateNode.containerInfo;
                  nextHydratableInstance = getFirstHydratableChild(parentInstance);
                  hydrationParentFiber = fiber;
                  isHydrating = true;
                  return true;
                }

                function deleteHydratableInstance(returnFiber, instance) {
                  {
                    switch (returnFiber.tag) {
                      case HostRoot:
                        didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                        break;

                      case HostComponent:
                        didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                        break;
                    }
                  }

                  var childToDelete = createFiberFromHostInstanceForDeletion();
                  childToDelete.stateNode = instance;
                  childToDelete.return = returnFiber;
                  childToDelete.flags = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
                  // these children are not part of the reconciliation list of children.
                  // Even if we abort and rereconcile the children, that will try to hydrate
                  // again and the nodes are still in the host tree so these will be
                  // recreated.

                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = childToDelete;
                    returnFiber.lastEffect = childToDelete;
                  } else {
                    returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
                  }
                }

                function insertNonHydratedInstance(returnFiber, fiber) {
                  fiber.flags = fiber.flags & ~Hydrating | Placement;

                  {
                    switch (returnFiber.tag) {
                      case HostRoot:
                        {
                          var parentContainer = returnFiber.stateNode.containerInfo;

                          switch (fiber.tag) {
                            case HostComponent:
                              var type = fiber.type;
                              var props = fiber.pendingProps;
                              didNotFindHydratableContainerInstance(parentContainer, type);
                              break;

                            case HostText:
                              var text = fiber.pendingProps;
                              didNotFindHydratableContainerTextInstance(parentContainer, text);
                              break;
                          }

                          break;
                        }

                      case HostComponent:
                        {
                          var parentType = returnFiber.type;
                          var parentProps = returnFiber.memoizedProps;
                          var parentInstance = returnFiber.stateNode;

                          switch (fiber.tag) {
                            case HostComponent:
                              var _type = fiber.type;
                              var _props = fiber.pendingProps;
                              didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                              break;

                            case HostText:
                              var _text = fiber.pendingProps;
                              didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                              break;

                            case SuspenseComponent:
                              didNotFindHydratableSuspenseInstance(parentType, parentProps);
                              break;
                          }

                          break;
                        }

                      default:
                        return;
                    }
                  }
                }

                function tryHydrate(fiber, nextInstance) {
                  switch (fiber.tag) {
                    case HostComponent:
                      {
                        var type = fiber.type;
                        var props = fiber.pendingProps;
                        var instance = canHydrateInstance(nextInstance, type);

                        if (instance !== null) {
                          fiber.stateNode = instance;
                          return true;
                        }

                        return false;
                      }

                    case HostText:
                      {
                        var text = fiber.pendingProps;
                        var textInstance = canHydrateTextInstance(nextInstance, text);

                        if (textInstance !== null) {
                          fiber.stateNode = textInstance;
                          return true;
                        }

                        return false;
                      }

                    case SuspenseComponent:
                      {

                        return false;
                      }

                    default:
                      return false;
                  }
                }

                function tryToClaimNextHydratableInstance(fiber) {
                  if (!isHydrating) {
                    return;
                  }

                  var nextInstance = nextHydratableInstance;

                  if (!nextInstance) {
                    // Nothing to hydrate. Make it an insertion.
                    insertNonHydratedInstance(hydrationParentFiber, fiber);
                    isHydrating = false;
                    hydrationParentFiber = fiber;
                    return;
                  }

                  var firstAttemptedInstance = nextInstance;

                  if (!tryHydrate(fiber, nextInstance)) {
                    // If we can't hydrate this instance let's try the next one.
                    // We use this as a heuristic. It's based on intuition and not data so it
                    // might be flawed or unnecessary.
                    nextInstance = getNextHydratableSibling(firstAttemptedInstance);

                    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                      // Nothing to hydrate. Make it an insertion.
                      insertNonHydratedInstance(hydrationParentFiber, fiber);
                      isHydrating = false;
                      hydrationParentFiber = fiber;
                      return;
                    } // We matched the next one, we'll now assume that the first one was
                    // superfluous and we'll delete it. Since we can't eagerly delete it
                    // we'll have to schedule a deletion. To do that, this node needs a dummy
                    // fiber associated with it.


                    deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
                  }

                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(nextInstance);
                }

                function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {

                  var instance = fiber.stateNode;
                  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.

                  fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
                  // is a new ref we mark this as an update.

                  if (updatePayload !== null) {
                    return true;
                  }

                  return false;
                }

                function prepareToHydrateHostTextInstance(fiber) {

                  var textInstance = fiber.stateNode;
                  var textContent = fiber.memoizedProps;
                  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);

                  {
                    if (shouldUpdate) {
                      // We assume that prepareToHydrateHostTextInstance is called in a context where the
                      // hydration parent is the parent host component of this host text.
                      var returnFiber = hydrationParentFiber;

                      if (returnFiber !== null) {
                        switch (returnFiber.tag) {
                          case HostRoot:
                            {
                              var parentContainer = returnFiber.stateNode.containerInfo;
                              didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                              break;
                            }

                          case HostComponent:
                            {
                              var parentType = returnFiber.type;
                              var parentProps = returnFiber.memoizedProps;
                              var parentInstance = returnFiber.stateNode;
                              didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                              break;
                            }
                        }
                      }
                    }
                  }

                  return shouldUpdate;
                }

                function skipPastDehydratedSuspenseInstance(fiber) {

                  var suspenseState = fiber.memoizedState;
                  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

                  if (!suspenseInstance) {
                    {
                      throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }

                  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
                }

                function popToNextHostParent(fiber) {
                  var parent = fiber.return;

                  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
                    parent = parent.return;
                  }

                  hydrationParentFiber = parent;
                }

                function popHydrationState(fiber) {

                  if (fiber !== hydrationParentFiber) {
                    // We're deeper than the current hydration context, inside an inserted
                    // tree.
                    return false;
                  }

                  if (!isHydrating) {
                    // If we're not currently hydrating but we're in a hydration context, then
                    // we were an insertion and now need to pop up reenter hydration of our
                    // siblings.
                    popToNextHostParent(fiber);
                    isHydrating = true;
                    return false;
                  }

                  var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.
                  // We only do this deeper than head and body since they tend to have random
                  // other nodes in them. We also ignore components with pure text content in
                  // side of them.
                  // TODO: Better heuristic.

                  if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
                    var nextInstance = nextHydratableInstance;

                    while (nextInstance) {
                      deleteHydratableInstance(fiber, nextInstance);
                      nextInstance = getNextHydratableSibling(nextInstance);
                    }
                  }

                  popToNextHostParent(fiber);

                  if (fiber.tag === SuspenseComponent) {
                    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
                  } else {
                    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
                  }

                  return true;
                }

                function resetHydrationState() {

                  hydrationParentFiber = null;
                  nextHydratableInstance = null;
                  isHydrating = false;
                }

                function getIsHydrating() {
                  return isHydrating;
                }

                // and should be reset before starting a new render.
                // This tracks which mutable sources need to be reset after a render.

                var workInProgressSources = [];
                var rendererSigil$1;

                {
                  // Used to detect multiple renderers using the same mutable source.
                  rendererSigil$1 = {};
                }

                function markSourceAsDirty(mutableSource) {
                  workInProgressSources.push(mutableSource);
                }
                function resetWorkInProgressVersions() {
                  for (var i = 0; i < workInProgressSources.length; i++) {
                    var mutableSource = workInProgressSources[i];

                    {
                      mutableSource._workInProgressVersionPrimary = null;
                    }
                  }

                  workInProgressSources.length = 0;
                }
                function getWorkInProgressVersion(mutableSource) {
                  {
                    return mutableSource._workInProgressVersionPrimary;
                  }
                }
                function setWorkInProgressVersion(mutableSource, version) {
                  {
                    mutableSource._workInProgressVersionPrimary = version;
                  }

                  workInProgressSources.push(mutableSource);
                }
                function warnAboutMultipleRenderersDEV(mutableSource) {
                  {
                    {
                      if (mutableSource._currentPrimaryRenderer == null) {
                        mutableSource._currentPrimaryRenderer = rendererSigil$1;
                      } else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
                        error('Detected multiple renderers concurrently rendering the ' + 'same mutable source. This is currently unsupported.');
                      }
                    }
                  }
                } // Eager reads the version of a mutable source and stores it on the root.

                var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
                    ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
                var didWarnAboutMismatchedHooksForComponent;
                var didWarnAboutUseOpaqueIdentifier;

                {
                  didWarnAboutUseOpaqueIdentifier = {};
                  didWarnAboutMismatchedHooksForComponent = new Set();
                }

                // These are set right before calling the component.
                var renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from
                // the work-in-progress hook.

                var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
                // current hook list is the list that belongs to the current fiber. The
                // work-in-progress hook list is a new list that will be added to the
                // work-in-progress fiber.

                var currentHook = null;
                var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
                // does not get reset if we do another render pass; only when we're completely
                // finished evaluating this component. This is an optimization so we know
                // whether we need to clear render phase updates after a throw.

                var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This
                // gets reset after each attempt.
                // TODO: Maybe there's some way to consolidate this with
                // `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.

                var didScheduleRenderPhaseUpdateDuringThisPass = false;
                var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook

                var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
                // The list stores the order of hooks used during the initial render (mount).
                // Subsequent renders (updates) reference this list.

                var hookTypesDev = null;
                var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
                // the dependencies for Hooks that need them (e.g. useEffect or useMemo).
                // When true, such Hooks will always be "remounted". Only used during hot reload.

                var ignorePreviousDependencies = false;

                function mountHookTypesDev() {
                  {
                    var hookName = currentHookNameInDev;

                    if (hookTypesDev === null) {
                      hookTypesDev = [hookName];
                    } else {
                      hookTypesDev.push(hookName);
                    }
                  }
                }

                function updateHookTypesDev() {
                  {
                    var hookName = currentHookNameInDev;

                    if (hookTypesDev !== null) {
                      hookTypesUpdateIndexDev++;

                      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                        warnOnHookMismatchInDev(hookName);
                      }
                    }
                  }
                }

                function checkDepsAreArrayDev(deps) {
                  {
                    if (deps !== undefined && deps !== null && !Array.isArray(deps)) {
                      // Verify deps, but only on mount to avoid extra checks.
                      // It's unlikely their type would change as usually you define them inline.
                      error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);
                    }
                  }
                }

                function warnOnHookMismatchInDev(currentHookName) {
                  {
                    var componentName = getComponentName(currentlyRenderingFiber$1.type);

                    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                      didWarnAboutMismatchedHooksForComponent.add(componentName);

                      if (hookTypesDev !== null) {
                        var table = '';
                        var secondColumnStart = 30;

                        for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                          var oldHookName = hookTypesDev[i];
                          var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                          var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
                          // lol @ IE not supporting String#repeat

                          while (row.length < secondColumnStart) {
                            row += ' ';
                          }

                          row += newHookName + '\n';
                          table += row;
                        }

                        error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
                      }
                    }
                  }
                }

                function throwInvalidHookError() {
                  {
                    {
                      throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
                    }
                  }
                }

                function areHookInputsEqual(nextDeps, prevDeps) {
                  {
                    if (ignorePreviousDependencies) {
                      // Only true when this component is being hot reloaded.
                      return false;
                    }
                  }

                  if (prevDeps === null) {
                    {
                      error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
                    }

                    return false;
                  }

                  {
                    // Don't bother comparing lengths in prod because these arrays should be
                    // passed inline.
                    if (nextDeps.length !== prevDeps.length) {
                      error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
                    }
                  }

                  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
                    if (objectIs(nextDeps[i], prevDeps[i])) {
                      continue;
                    }

                    return false;
                  }

                  return true;
                }

                function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
                  renderLanes = nextRenderLanes;
                  currentlyRenderingFiber$1 = workInProgress;

                  {
                    hookTypesDev = current !== null ? current._debugHookTypes : null;
                    hookTypesUpdateIndexDev = -1; // Used for hot reloading:

                    ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
                  }

                  workInProgress.memoizedState = null;
                  workInProgress.updateQueue = null;
                  workInProgress.lanes = NoLanes; // The following should have already been reset
                  // currentHook = null;
                  // workInProgressHook = null;
                  // didScheduleRenderPhaseUpdate = false;
                  // TODO Warn if no hooks are used at all during mount, then some are used during update.
                  // Currently we will identify the update render as a mount because memoizedState === null.
                  // This is tricky because it's valid for certain types of components (e.g. React.lazy)
                  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.
                  // Non-stateful hooks (e.g. context) don't get added to memoizedState,
                  // so memoizedState would be null during updates and mounts.

                  {
                    if (current !== null && current.memoizedState !== null) {
                      ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
                    } else if (hookTypesDev !== null) {
                      // This dispatcher handles an edge case where a component is updating,
                      // but no stateful hooks have been used.
                      // We want to match the production code behavior (which will use HooksDispatcherOnMount),
                      // but with the extra DEV validation to ensure hooks ordering hasn't changed.
                      // This dispatcher does that.
                      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
                    } else {
                      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
                    }
                  }

                  var children = Component(props, secondArg); // Check if there was a render phase update

                  if (didScheduleRenderPhaseUpdateDuringThisPass) {
                    // Keep rendering in a loop for as long as render phase updates continue to
                    // be scheduled. Use a counter to prevent infinite loops.
                    var numberOfReRenders = 0;

                    do {
                      didScheduleRenderPhaseUpdateDuringThisPass = false;

                      if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
                        {
                          throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                        }
                      }

                      numberOfReRenders += 1;

                      {
                        // Even when hot reloading, allow dependencies to stabilize
                        // after first render to prevent infinite render phase updates.
                        ignorePreviousDependencies = false;
                      } // Start over from the beginning of the list


                      currentHook = null;
                      workInProgressHook = null;
                      workInProgress.updateQueue = null;

                      {
                        // Also validate hook order for cascading updates.
                        hookTypesUpdateIndexDev = -1;
                      }

                      ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                      children = Component(props, secondArg);
                    } while (didScheduleRenderPhaseUpdateDuringThisPass);
                  } // We can assume the previous dispatcher is always this one, since we set it
                  // at the beginning of the render phase and there's no re-entrancy.


                  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

                  {
                    workInProgress._debugHookTypes = hookTypesDev;
                  } // This check uses currentHook so that it works the same in DEV and prod bundles.
                  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.


                  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
                  renderLanes = NoLanes;
                  currentlyRenderingFiber$1 = null;
                  currentHook = null;
                  workInProgressHook = null;

                  {
                    currentHookNameInDev = null;
                    hookTypesDev = null;
                    hookTypesUpdateIndexDev = -1;
                  }

                  didScheduleRenderPhaseUpdate = false;

                  if (!!didRenderTooFewHooks) {
                    {
                      throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
                    }
                  }

                  return children;
                }
                function bailoutHooks(current, workInProgress, lanes) {
                  workInProgress.updateQueue = current.updateQueue;
                  workInProgress.flags &= ~(Passive | Update);
                  current.lanes = removeLanes(current.lanes, lanes);
                }
                function resetHooksAfterThrow() {
                  // We can assume the previous dispatcher is always this one, since we set it
                  // at the beginning of the render phase and there's no re-entrancy.
                  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

                  if (didScheduleRenderPhaseUpdate) {
                    // There were render phase updates. These are only valid for this render
                    // phase, which we are now aborting. Remove the updates from the queues so
                    // they do not persist to the next render. Do not remove updates from hooks
                    // that weren't processed.
                    //
                    // Only reset the updates from the queue if it has a clone. If it does
                    // not have a clone, that means it wasn't processed, and the updates were
                    // scheduled before we entered the render phase.
                    var hook = currentlyRenderingFiber$1.memoizedState;

                    while (hook !== null) {
                      var queue = hook.queue;

                      if (queue !== null) {
                        queue.pending = null;
                      }

                      hook = hook.next;
                    }

                    didScheduleRenderPhaseUpdate = false;
                  }

                  renderLanes = NoLanes;
                  currentlyRenderingFiber$1 = null;
                  currentHook = null;
                  workInProgressHook = null;

                  {
                    hookTypesDev = null;
                    hookTypesUpdateIndexDev = -1;
                    currentHookNameInDev = null;
                    isUpdatingOpaqueValueInRenderPhase = false;
                  }

                  didScheduleRenderPhaseUpdateDuringThisPass = false;
                }

                function mountWorkInProgressHook() {
                  var hook = {
                    memoizedState: null,
                    baseState: null,
                    baseQueue: null,
                    queue: null,
                    next: null
                  };

                  if (workInProgressHook === null) {
                    // This is the first hook in the list
                    currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
                  } else {
                    // Append to the end of the list
                    workInProgressHook = workInProgressHook.next = hook;
                  }

                  return workInProgressHook;
                }

                function updateWorkInProgressHook() {
                  // This function is used both for updates and for re-renders triggered by a
                  // render phase update. It assumes there is either a current hook we can
                  // clone, or a work-in-progress hook from a previous render pass that we can
                  // use as a base. When we reach the end of the base list, we must switch to
                  // the dispatcher used for mounts.
                  var nextCurrentHook;

                  if (currentHook === null) {
                    var current = currentlyRenderingFiber$1.alternate;

                    if (current !== null) {
                      nextCurrentHook = current.memoizedState;
                    } else {
                      nextCurrentHook = null;
                    }
                  } else {
                    nextCurrentHook = currentHook.next;
                  }

                  var nextWorkInProgressHook;

                  if (workInProgressHook === null) {
                    nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
                  } else {
                    nextWorkInProgressHook = workInProgressHook.next;
                  }

                  if (nextWorkInProgressHook !== null) {
                    // There's already a work-in-progress. Reuse it.
                    workInProgressHook = nextWorkInProgressHook;
                    nextWorkInProgressHook = workInProgressHook.next;
                    currentHook = nextCurrentHook;
                  } else {
                    // Clone from the current hook.
                    if (!(nextCurrentHook !== null)) {
                      {
                        throw Error("Rendered more hooks than during the previous render.");
                      }
                    }

                    currentHook = nextCurrentHook;
                    var newHook = {
                      memoizedState: currentHook.memoizedState,
                      baseState: currentHook.baseState,
                      baseQueue: currentHook.baseQueue,
                      queue: currentHook.queue,
                      next: null
                    };

                    if (workInProgressHook === null) {
                      // This is the first hook in the list.
                      currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
                    } else {
                      // Append to the end of the list.
                      workInProgressHook = workInProgressHook.next = newHook;
                    }
                  }

                  return workInProgressHook;
                }

                function createFunctionComponentUpdateQueue() {
                  return {
                    lastEffect: null
                  };
                }

                function basicStateReducer(state, action) {
                  // $FlowFixMe: Flow doesn't like mixed types
                  return typeof action === 'function' ? action(state) : action;
                }

                function mountReducer(reducer, initialArg, init) {
                  var hook = mountWorkInProgressHook();
                  var initialState;

                  if (init !== undefined) {
                    initialState = init(initialArg);
                  } else {
                    initialState = initialArg;
                  }

                  hook.memoizedState = hook.baseState = initialState;
                  var queue = hook.queue = {
                    pending: null,
                    dispatch: null,
                    lastRenderedReducer: reducer,
                    lastRenderedState: initialState
                  };
                  var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
                  return [hook.memoizedState, dispatch];
                }

                function updateReducer(reducer, initialArg, init) {
                  var hook = updateWorkInProgressHook();
                  var queue = hook.queue;

                  if (!(queue !== null)) {
                    {
                      throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
                    }
                  }

                  queue.lastRenderedReducer = reducer;
                  var current = currentHook; // The last rebase update that is NOT part of the base state.

                  var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.

                  var pendingQueue = queue.pending;

                  if (pendingQueue !== null) {
                    // We have new updates that haven't been processed yet.
                    // We'll add them to the base queue.
                    if (baseQueue !== null) {
                      // Merge the pending queue and the base queue.
                      var baseFirst = baseQueue.next;
                      var pendingFirst = pendingQueue.next;
                      baseQueue.next = pendingFirst;
                      pendingQueue.next = baseFirst;
                    }

                    {
                      if (current.baseQueue !== baseQueue) {
                        // Internal invariant that should never happen, but feasibly could in
                        // the future if we implement resuming, or some form of that.
                        error('Internal error: Expected work-in-progress queue to be a clone. ' + 'This is a bug in React.');
                      }
                    }

                    current.baseQueue = baseQueue = pendingQueue;
                    queue.pending = null;
                  }

                  if (baseQueue !== null) {
                    // We have a queue to process.
                    var first = baseQueue.next;
                    var newState = current.baseState;
                    var newBaseState = null;
                    var newBaseQueueFirst = null;
                    var newBaseQueueLast = null;
                    var update = first;

                    do {
                      var updateLane = update.lane;

                      if (!isSubsetOfLanes(renderLanes, updateLane)) {
                        // Priority is insufficient. Skip this update. If this is the first
                        // skipped update, the previous update/state is the new base
                        // update/state.
                        var clone = {
                          lane: updateLane,
                          action: update.action,
                          eagerReducer: update.eagerReducer,
                          eagerState: update.eagerState,
                          next: null
                        };

                        if (newBaseQueueLast === null) {
                          newBaseQueueFirst = newBaseQueueLast = clone;
                          newBaseState = newState;
                        } else {
                          newBaseQueueLast = newBaseQueueLast.next = clone;
                        } // Update the remaining priority in the queue.
                        // TODO: Don't need to accumulate this. Instead, we can remove
                        // renderLanes from the original lanes.


                        currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                        markSkippedUpdateLanes(updateLane);
                      } else {
                        // This update does have sufficient priority.
                        if (newBaseQueueLast !== null) {
                          var _clone = {
                            // This update is going to be committed so we never want uncommit
                            // it. Using NoLane works because 0 is a subset of all bitmasks, so
                            // this will never be skipped by the check above.
                            lane: NoLane,
                            action: update.action,
                            eagerReducer: update.eagerReducer,
                            eagerState: update.eagerState,
                            next: null
                          };
                          newBaseQueueLast = newBaseQueueLast.next = _clone;
                        } // Process this update.


                        if (update.eagerReducer === reducer) {
                          // If this update was processed eagerly, and its reducer matches the
                          // current reducer, we can use the eagerly computed state.
                          newState = update.eagerState;
                        } else {
                          var action = update.action;
                          newState = reducer(newState, action);
                        }
                      }

                      update = update.next;
                    } while (update !== null && update !== first);

                    if (newBaseQueueLast === null) {
                      newBaseState = newState;
                    } else {
                      newBaseQueueLast.next = newBaseQueueFirst;
                    } // Mark that the fiber performed work, but only if the new state is
                    // different from the current state.


                    if (!objectIs(newState, hook.memoizedState)) {
                      markWorkInProgressReceivedUpdate();
                    }

                    hook.memoizedState = newState;
                    hook.baseState = newBaseState;
                    hook.baseQueue = newBaseQueueLast;
                    queue.lastRenderedState = newState;
                  }

                  var dispatch = queue.dispatch;
                  return [hook.memoizedState, dispatch];
                }

                function rerenderReducer(reducer, initialArg, init) {
                  var hook = updateWorkInProgressHook();
                  var queue = hook.queue;

                  if (!(queue !== null)) {
                    {
                      throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
                    }
                  }

                  queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
                  // work-in-progress hook.

                  var dispatch = queue.dispatch;
                  var lastRenderPhaseUpdate = queue.pending;
                  var newState = hook.memoizedState;

                  if (lastRenderPhaseUpdate !== null) {
                    // The queue doesn't persist past this render pass.
                    queue.pending = null;
                    var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
                    var update = firstRenderPhaseUpdate;

                    do {
                      // Process this render phase update. We don't have to check the
                      // priority because it will always be the same as the current
                      // render's.
                      var action = update.action;
                      newState = reducer(newState, action);
                      update = update.next;
                    } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is
                    // different from the current state.


                    if (!objectIs(newState, hook.memoizedState)) {
                      markWorkInProgressReceivedUpdate();
                    }

                    hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
                    // the base state unless the queue is empty.
                    // TODO: Not sure if this is the desired semantics, but it's what we
                    // do for gDSFP. I can't remember why.

                    if (hook.baseQueue === null) {
                      hook.baseState = newState;
                    }

                    queue.lastRenderedState = newState;
                  }

                  return [newState, dispatch];
                }

                function readFromUnsubcribedMutableSource(root, source, getSnapshot) {
                  {
                    warnAboutMultipleRenderersDEV(source);
                  }

                  var getVersion = source._getVersion;
                  var version = getVersion(source._source); // Is it safe for this component to read from this source during the current render?

                  var isSafeToReadFromSource = false; // Check the version first.
                  // If this render has already been started with a specific version,
                  // we can use it alone to determine if we can safely read from the source.

                  var currentRenderVersion = getWorkInProgressVersion(source);

                  if (currentRenderVersion !== null) {
                    // It's safe to read if the store hasn't been mutated since the last time
                    // we read something.
                    isSafeToReadFromSource = currentRenderVersion === version;
                  } else {
                    // If there's no version, then this is the first time we've read from the
                    // source during the current render pass, so we need to do a bit more work.
                    // What we need to determine is if there are any hooks that already
                    // subscribed to the source, and if so, whether there are any pending
                    // mutations that haven't been synchronized yet.
                    //
                    // If there are no pending mutations, then `root.mutableReadLanes` will be
                    // empty, and we know we can safely read.
                    //
                    // If there *are* pending mutations, we may still be able to safely read
                    // if the currently rendering lanes are inclusive of the pending mutation
                    // lanes, since that guarantees that the value we're about to read from
                    // the source is consistent with the values that we read during the most
                    // recent mutation.
                    isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root.mutableReadLanes);

                    if (isSafeToReadFromSource) {
                      // If it's safe to read from this source during the current render,
                      // store the version in case other components read from it.
                      // A changed version number will let those components know to throw and restart the render.
                      setWorkInProgressVersion(source, version);
                    }
                  }

                  if (isSafeToReadFromSource) {
                    var snapshot = getSnapshot(source._source);

                    {
                      if (typeof snapshot === 'function') {
                        error('Mutable source should not return a function as the snapshot value. ' + 'Functions may close over mutable values and cause tearing.');
                      }
                    }

                    return snapshot;
                  } else {
                    // This handles the special case of a mutable source being shared between renderers.
                    // In that case, if the source is mutated between the first and second renderer,
                    // The second renderer don't know that it needs to reset the WIP version during unwind,
                    // (because the hook only marks sources as dirty if it's written to their WIP version).
                    // That would cause this tear check to throw again and eventually be visible to the user.
                    // We can avoid this infinite loop by explicitly marking the source as dirty.
                    //
                    // This can lead to tearing in the first renderer when it resumes,
                    // but there's nothing we can do about that (short of throwing here and refusing to continue the render).
                    markSourceAsDirty(source);

                    {
                      {
                        throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
                      }
                    }
                  }
                }

                function useMutableSource(hook, source, getSnapshot, subscribe) {
                  var root = getWorkInProgressRoot();

                  if (!(root !== null)) {
                    {
                      throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
                    }
                  }

                  var getVersion = source._getVersion;
                  var version = getVersion(source._source);
                  var dispatcher = ReactCurrentDispatcher$1.current; // eslint-disable-next-line prefer-const

                  var _dispatcher$useState = dispatcher.useState(function () {
                    return readFromUnsubcribedMutableSource(root, source, getSnapshot);
                  }),
                      currentSnapshot = _dispatcher$useState[0],
                      setSnapshot = _dispatcher$useState[1];

                  var snapshot = currentSnapshot; // Grab a handle to the state hook as well.
                  // We use it to clear the pending update queue if we have a new source.

                  var stateHook = workInProgressHook;
                  var memoizedState = hook.memoizedState;
                  var refs = memoizedState.refs;
                  var prevGetSnapshot = refs.getSnapshot;
                  var prevSource = memoizedState.source;
                  var prevSubscribe = memoizedState.subscribe;
                  var fiber = currentlyRenderingFiber$1;
                  hook.memoizedState = {
                    refs: refs,
                    source: source,
                    subscribe: subscribe
                  }; // Sync the values needed by our subscription handler after each commit.

                  dispatcher.useEffect(function () {
                    refs.getSnapshot = getSnapshot; // Normally the dispatch function for a state hook never changes,
                    // but this hook recreates the queue in certain cases  to avoid updates from stale sources.
                    // handleChange() below needs to reference the dispatch function without re-subscribing,
                    // so we use a ref to ensure that it always has the latest version.

                    refs.setSnapshot = setSnapshot; // Check for a possible change between when we last rendered now.

                    var maybeNewVersion = getVersion(source._source);

                    if (!objectIs(version, maybeNewVersion)) {
                      var maybeNewSnapshot = getSnapshot(source._source);

                      {
                        if (typeof maybeNewSnapshot === 'function') {
                          error('Mutable source should not return a function as the snapshot value. ' + 'Functions may close over mutable values and cause tearing.');
                        }
                      }

                      if (!objectIs(snapshot, maybeNewSnapshot)) {
                        setSnapshot(maybeNewSnapshot);
                        var lane = requestUpdateLane(fiber);
                        markRootMutableRead(root, lane);
                      } // If the source mutated between render and now,
                      // there may be state updates already scheduled from the old source.
                      // Entangle the updates so that they render in the same batch.


                      markRootEntangled(root, root.mutableReadLanes);
                    }
                  }, [getSnapshot, source, subscribe]); // If we got a new source or subscribe function, re-subscribe in a passive effect.

                  dispatcher.useEffect(function () {
                    var handleChange = function () {
                      var latestGetSnapshot = refs.getSnapshot;
                      var latestSetSnapshot = refs.setSnapshot;

                      try {
                        latestSetSnapshot(latestGetSnapshot(source._source)); // Record a pending mutable source update with the same expiration time.

                        var lane = requestUpdateLane(fiber);
                        markRootMutableRead(root, lane);
                      } catch (error) {
                        // A selector might throw after a source mutation.
                        // e.g. it might try to read from a part of the store that no longer exists.
                        // In this case we should still schedule an update with React.
                        // Worst case the selector will throw again and then an error boundary will handle it.
                        latestSetSnapshot(function () {
                          throw error;
                        });
                      }
                    };

                    var unsubscribe = subscribe(source._source, handleChange);

                    {
                      if (typeof unsubscribe !== 'function') {
                        error('Mutable source subscribe function must return an unsubscribe function.');
                      }
                    }

                    return unsubscribe;
                  }, [source, subscribe]); // If any of the inputs to useMutableSource change, reading is potentially unsafe.
                  //
                  // If either the source or the subscription have changed we can't can't trust the update queue.
                  // Maybe the source changed in a way that the old subscription ignored but the new one depends on.
                  //
                  // If the getSnapshot function changed, we also shouldn't rely on the update queue.
                  // It's possible that the underlying source was mutated between the when the last "change" event fired,
                  // and when the current render (with the new getSnapshot function) is processed.
                  //
                  // In both cases, we need to throw away pending updates (since they are no longer relevant)
                  // and treat reading from the source as we do in the mount case.

                  if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
                    // Create a new queue and setState method,
                    // So if there are interleaved updates, they get pushed to the older queue.
                    // When this becomes current, the previous queue and dispatch method will be discarded,
                    // including any interleaving updates that occur.
                    var newQueue = {
                      pending: null,
                      dispatch: null,
                      lastRenderedReducer: basicStateReducer,
                      lastRenderedState: snapshot
                    };
                    newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
                    stateHook.queue = newQueue;
                    stateHook.baseQueue = null;
                    snapshot = readFromUnsubcribedMutableSource(root, source, getSnapshot);
                    stateHook.memoizedState = stateHook.baseState = snapshot;
                  }

                  return snapshot;
                }

                function mountMutableSource(source, getSnapshot, subscribe) {
                  var hook = mountWorkInProgressHook();
                  hook.memoizedState = {
                    refs: {
                      getSnapshot: getSnapshot,
                      setSnapshot: null
                    },
                    source: source,
                    subscribe: subscribe
                  };
                  return useMutableSource(hook, source, getSnapshot, subscribe);
                }

                function updateMutableSource(source, getSnapshot, subscribe) {
                  var hook = updateWorkInProgressHook();
                  return useMutableSource(hook, source, getSnapshot, subscribe);
                }

                function mountState(initialState) {
                  var hook = mountWorkInProgressHook();

                  if (typeof initialState === 'function') {
                    // $FlowFixMe: Flow doesn't like mixed types
                    initialState = initialState();
                  }

                  hook.memoizedState = hook.baseState = initialState;
                  var queue = hook.queue = {
                    pending: null,
                    dispatch: null,
                    lastRenderedReducer: basicStateReducer,
                    lastRenderedState: initialState
                  };
                  var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
                  return [hook.memoizedState, dispatch];
                }

                function updateState(initialState) {
                  return updateReducer(basicStateReducer);
                }

                function rerenderState(initialState) {
                  return rerenderReducer(basicStateReducer);
                }

                function pushEffect(tag, create, destroy, deps) {
                  var effect = {
                    tag: tag,
                    create: create,
                    destroy: destroy,
                    deps: deps,
                    // Circular
                    next: null
                  };
                  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;

                  if (componentUpdateQueue === null) {
                    componentUpdateQueue = createFunctionComponentUpdateQueue();
                    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
                    componentUpdateQueue.lastEffect = effect.next = effect;
                  } else {
                    var lastEffect = componentUpdateQueue.lastEffect;

                    if (lastEffect === null) {
                      componentUpdateQueue.lastEffect = effect.next = effect;
                    } else {
                      var firstEffect = lastEffect.next;
                      lastEffect.next = effect;
                      effect.next = firstEffect;
                      componentUpdateQueue.lastEffect = effect;
                    }
                  }

                  return effect;
                }

                function mountRef(initialValue) {
                  var hook = mountWorkInProgressHook();
                  var ref = {
                    current: initialValue
                  };

                  {
                    Object.seal(ref);
                  }

                  hook.memoizedState = ref;
                  return ref;
                }

                function updateRef(initialValue) {
                  var hook = updateWorkInProgressHook();
                  return hook.memoizedState;
                }

                function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
                  var hook = mountWorkInProgressHook();
                  var nextDeps = deps === undefined ? null : deps;
                  currentlyRenderingFiber$1.flags |= fiberFlags;
                  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
                }

                function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
                  var hook = updateWorkInProgressHook();
                  var nextDeps = deps === undefined ? null : deps;
                  var destroy = undefined;

                  if (currentHook !== null) {
                    var prevEffect = currentHook.memoizedState;
                    destroy = prevEffect.destroy;

                    if (nextDeps !== null) {
                      var prevDeps = prevEffect.deps;

                      if (areHookInputsEqual(nextDeps, prevDeps)) {
                        pushEffect(hookFlags, create, destroy, nextDeps);
                        return;
                      }
                    }
                  }

                  currentlyRenderingFiber$1.flags |= fiberFlags;
                  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
                }

                function mountEffect(create, deps) {
                  {
                    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
                    if ('undefined' !== typeof jest) {
                      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
                    }
                  }

                  return mountEffectImpl(Update | Passive, Passive$1, create, deps);
                }

                function updateEffect(create, deps) {
                  {
                    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
                    if ('undefined' !== typeof jest) {
                      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
                    }
                  }

                  return updateEffectImpl(Update | Passive, Passive$1, create, deps);
                }

                function mountLayoutEffect(create, deps) {
                  return mountEffectImpl(Update, Layout, create, deps);
                }

                function updateLayoutEffect(create, deps) {
                  return updateEffectImpl(Update, Layout, create, deps);
                }

                function imperativeHandleEffect(create, ref) {
                  if (typeof ref === 'function') {
                    var refCallback = ref;

                    var _inst = create();

                    refCallback(_inst);
                    return function () {
                      refCallback(null);
                    };
                  } else if (ref !== null && ref !== undefined) {
                    var refObject = ref;

                    {
                      if (!refObject.hasOwnProperty('current')) {
                        error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
                      }
                    }

                    var _inst2 = create();

                    refObject.current = _inst2;
                    return function () {
                      refObject.current = null;
                    };
                  }
                }

                function mountImperativeHandle(ref, create, deps) {
                  {
                    if (typeof create !== 'function') {
                      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
                    }
                  } // TODO: If deps are provided, should we skip comparing the ref itself?


                  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
                  return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
                }

                function updateImperativeHandle(ref, create, deps) {
                  {
                    if (typeof create !== 'function') {
                      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
                    }
                  } // TODO: If deps are provided, should we skip comparing the ref itself?


                  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
                  return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
                }

                function mountDebugValue(value, formatterFn) {// This hook is normally a no-op.
                  // The react-debug-hooks package injects its own implementation
                  // so that e.g. DevTools can display custom hook values.
                }

                var updateDebugValue = mountDebugValue;

                function mountCallback(callback, deps) {
                  var hook = mountWorkInProgressHook();
                  var nextDeps = deps === undefined ? null : deps;
                  hook.memoizedState = [callback, nextDeps];
                  return callback;
                }

                function updateCallback(callback, deps) {
                  var hook = updateWorkInProgressHook();
                  var nextDeps = deps === undefined ? null : deps;
                  var prevState = hook.memoizedState;

                  if (prevState !== null) {
                    if (nextDeps !== null) {
                      var prevDeps = prevState[1];

                      if (areHookInputsEqual(nextDeps, prevDeps)) {
                        return prevState[0];
                      }
                    }
                  }

                  hook.memoizedState = [callback, nextDeps];
                  return callback;
                }

                function mountMemo(nextCreate, deps) {
                  var hook = mountWorkInProgressHook();
                  var nextDeps = deps === undefined ? null : deps;
                  var nextValue = nextCreate();
                  hook.memoizedState = [nextValue, nextDeps];
                  return nextValue;
                }

                function updateMemo(nextCreate, deps) {
                  var hook = updateWorkInProgressHook();
                  var nextDeps = deps === undefined ? null : deps;
                  var prevState = hook.memoizedState;

                  if (prevState !== null) {
                    // Assume these are defined. If they're not, areHookInputsEqual will warn.
                    if (nextDeps !== null) {
                      var prevDeps = prevState[1];

                      if (areHookInputsEqual(nextDeps, prevDeps)) {
                        return prevState[0];
                      }
                    }
                  }

                  var nextValue = nextCreate();
                  hook.memoizedState = [nextValue, nextDeps];
                  return nextValue;
                }

                function mountDeferredValue(value) {
                  var _mountState = mountState(value),
                      prevValue = _mountState[0],
                      setValue = _mountState[1];

                  mountEffect(function () {
                    var prevTransition = ReactCurrentBatchConfig$1.transition;
                    ReactCurrentBatchConfig$1.transition = 1;

                    try {
                      setValue(value);
                    } finally {
                      ReactCurrentBatchConfig$1.transition = prevTransition;
                    }
                  }, [value]);
                  return prevValue;
                }

                function updateDeferredValue(value) {
                  var _updateState = updateState(),
                      prevValue = _updateState[0],
                      setValue = _updateState[1];

                  updateEffect(function () {
                    var prevTransition = ReactCurrentBatchConfig$1.transition;
                    ReactCurrentBatchConfig$1.transition = 1;

                    try {
                      setValue(value);
                    } finally {
                      ReactCurrentBatchConfig$1.transition = prevTransition;
                    }
                  }, [value]);
                  return prevValue;
                }

                function rerenderDeferredValue(value) {
                  var _rerenderState = rerenderState(),
                      prevValue = _rerenderState[0],
                      setValue = _rerenderState[1];

                  updateEffect(function () {
                    var prevTransition = ReactCurrentBatchConfig$1.transition;
                    ReactCurrentBatchConfig$1.transition = 1;

                    try {
                      setValue(value);
                    } finally {
                      ReactCurrentBatchConfig$1.transition = prevTransition;
                    }
                  }, [value]);
                  return prevValue;
                }

                function startTransition(setPending, callback) {
                  var priorityLevel = getCurrentPriorityLevel();

                  {
                    runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function () {
                      setPending(true);
                    });
                    runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function () {
                      var prevTransition = ReactCurrentBatchConfig$1.transition;
                      ReactCurrentBatchConfig$1.transition = 1;

                      try {
                        setPending(false);
                        callback();
                      } finally {
                        ReactCurrentBatchConfig$1.transition = prevTransition;
                      }
                    });
                  }
                }

                function mountTransition() {
                  var _mountState2 = mountState(false),
                      isPending = _mountState2[0],
                      setPending = _mountState2[1]; // The `start` method can be stored on a ref, since `setPending`
                  // never changes.


                  var start = startTransition.bind(null, setPending);
                  mountRef(start);
                  return [start, isPending];
                }

                function updateTransition() {
                  var _updateState2 = updateState(),
                      isPending = _updateState2[0];

                  var startRef = updateRef();
                  var start = startRef.current;
                  return [start, isPending];
                }

                function rerenderTransition() {
                  var _rerenderState2 = rerenderState(),
                      isPending = _rerenderState2[0];

                  var startRef = updateRef();
                  var start = startRef.current;
                  return [start, isPending];
                }

                var isUpdatingOpaqueValueInRenderPhase = false;
                function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
                  {
                    return isUpdatingOpaqueValueInRenderPhase;
                  }
                }

                function warnOnOpaqueIdentifierAccessInDEV(fiber) {
                  {
                    // TODO: Should warn in effects and callbacks, too
                    var name = getComponentName(fiber.type) || 'Unknown';

                    if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
                      error('The object passed back from useOpaqueIdentifier is meant to be ' + 'passed through to attributes only. Do not read the ' + 'value directly.');

                      didWarnAboutUseOpaqueIdentifier[name] = true;
                    }
                  }
                }

                function mountOpaqueIdentifier() {
                  var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));

                  if (getIsHydrating()) {
                    var didUpgrade = false;
                    var fiber = currentlyRenderingFiber$1;

                    var readValue = function () {
                      if (!didUpgrade) {
                        // Only upgrade once. This works even inside the render phase because
                        // the update is added to a shared queue, which outlasts the
                        // in-progress render.
                        didUpgrade = true;

                        {
                          isUpdatingOpaqueValueInRenderPhase = true;
                          setId(makeId());
                          isUpdatingOpaqueValueInRenderPhase = false;
                          warnOnOpaqueIdentifierAccessInDEV(fiber);
                        }
                      }

                      {
                        {
                          throw Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                        }
                      }
                    };

                    var id = makeOpaqueHydratingObject(readValue);
                    var setId = mountState(id)[1];

                    if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
                      currentlyRenderingFiber$1.flags |= Update | Passive;
                      pushEffect(HasEffect | Passive$1, function () {
                        setId(makeId());
                      }, undefined, null);
                    }

                    return id;
                  } else {
                    var _id = makeId();

                    mountState(_id);
                    return _id;
                  }
                }

                function updateOpaqueIdentifier() {
                  var id = updateState()[0];
                  return id;
                }

                function rerenderOpaqueIdentifier() {
                  var id = rerenderState()[0];
                  return id;
                }

                function dispatchAction(fiber, queue, action) {
                  {
                    if (typeof arguments[3] === 'function') {
                      error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
                    }
                  }

                  var eventTime = requestEventTime();
                  var lane = requestUpdateLane(fiber);
                  var update = {
                    lane: lane,
                    action: action,
                    eagerReducer: null,
                    eagerState: null,
                    next: null
                  }; // Append the update to the end of the list.

                  var pending = queue.pending;

                  if (pending === null) {
                    // This is the first update. Create a circular list.
                    update.next = update;
                  } else {
                    update.next = pending.next;
                    pending.next = update;
                  }

                  queue.pending = update;
                  var alternate = fiber.alternate;

                  if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
                    // This is a render phase update. Stash it in a lazily-created map of
                    // queue -> linked list of updates. After this render pass, we'll restart
                    // and apply the stashed updates on top of the work-in-progress hook.
                    didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
                  } else {
                    if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                      // The queue is currently empty, which means we can eagerly compute the
                      // next state before entering the render phase. If the new state is the
                      // same as the current state, we may be able to bail out entirely.
                      var lastRenderedReducer = queue.lastRenderedReducer;

                      if (lastRenderedReducer !== null) {
                        var prevDispatcher;

                        {
                          prevDispatcher = ReactCurrentDispatcher$1.current;
                          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                        }

                        try {
                          var currentState = queue.lastRenderedState;
                          var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
                          // it, on the update object. If the reducer hasn't changed by the
                          // time we enter the render phase, then the eager state can be used
                          // without calling the reducer again.

                          update.eagerReducer = lastRenderedReducer;
                          update.eagerState = eagerState;

                          if (objectIs(eagerState, currentState)) {
                            // Fast path. We can bail out without scheduling React to re-render.
                            // It's still possible that we'll need to rebase this update later,
                            // if the component re-renders for a different reason and by that
                            // time the reducer has changed.
                            return;
                          }
                        } catch (error) {// Suppress the error. It will throw again in the render phase.
                        } finally {
                          {
                            ReactCurrentDispatcher$1.current = prevDispatcher;
                          }
                        }
                      }
                    }

                    {
                      // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
                      if ('undefined' !== typeof jest) {
                        warnIfNotScopedWithMatchingAct(fiber);
                        warnIfNotCurrentlyActingUpdatesInDev(fiber);
                      }
                    }

                    scheduleUpdateOnFiber(fiber, lane, eventTime);
                  }
                }

                var ContextOnlyDispatcher = {
                  readContext: readContext,
                  useCallback: throwInvalidHookError,
                  useContext: throwInvalidHookError,
                  useEffect: throwInvalidHookError,
                  useImperativeHandle: throwInvalidHookError,
                  useLayoutEffect: throwInvalidHookError,
                  useMemo: throwInvalidHookError,
                  useReducer: throwInvalidHookError,
                  useRef: throwInvalidHookError,
                  useState: throwInvalidHookError,
                  useDebugValue: throwInvalidHookError,
                  useDeferredValue: throwInvalidHookError,
                  useTransition: throwInvalidHookError,
                  useMutableSource: throwInvalidHookError,
                  useOpaqueIdentifier: throwInvalidHookError,
                  unstable_isNewReconciler: enableNewReconciler
                };
                var HooksDispatcherOnMountInDEV = null;
                var HooksDispatcherOnMountWithHookTypesInDEV = null;
                var HooksDispatcherOnUpdateInDEV = null;
                var HooksDispatcherOnRerenderInDEV = null;
                var InvalidNestedHooksDispatcherOnMountInDEV = null;
                var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
                var InvalidNestedHooksDispatcherOnRerenderInDEV = null;

                {
                  var warnInvalidContextAccess = function () {
                    error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
                  };

                  var warnInvalidHookAccess = function () {
                    error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://reactjs.org/link/rules-of-hooks');
                  };

                  HooksDispatcherOnMountInDEV = {
                    readContext: function (context, observedBits) {
                      return readContext(context, observedBits);
                    },
                    useCallback: function (callback, deps) {
                      currentHookNameInDev = 'useCallback';
                      mountHookTypesDev();
                      checkDepsAreArrayDev(deps);
                      return mountCallback(callback, deps);
                    },
                    useContext: function (context, observedBits) {
                      currentHookNameInDev = 'useContext';
                      mountHookTypesDev();
                      return readContext(context, observedBits);
                    },
                    useEffect: function (create, deps) {
                      currentHookNameInDev = 'useEffect';
                      mountHookTypesDev();
                      checkDepsAreArrayDev(deps);
                      return mountEffect(create, deps);
                    },
                    useImperativeHandle: function (ref, create, deps) {
                      currentHookNameInDev = 'useImperativeHandle';
                      mountHookTypesDev();
                      checkDepsAreArrayDev(deps);
                      return mountImperativeHandle(ref, create, deps);
                    },
                    useLayoutEffect: function (create, deps) {
                      currentHookNameInDev = 'useLayoutEffect';
                      mountHookTypesDev();
                      checkDepsAreArrayDev(deps);
                      return mountLayoutEffect(create, deps);
                    },
                    useMemo: function (create, deps) {
                      currentHookNameInDev = 'useMemo';
                      mountHookTypesDev();
                      checkDepsAreArrayDev(deps);
                      var prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

                      try {
                        return mountMemo(create, deps);
                      } finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    },
                    useReducer: function (reducer, initialArg, init) {
                      currentHookNameInDev = 'useReducer';
                      mountHookTypesDev();
                      var prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

                      try {
                        return mountReducer(reducer, initialArg, init);
                      } finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    },
                    useRef: function (initialValue) {
                      currentHookNameInDev = 'useRef';
                      mountHookTypesDev();
                      return mountRef(initialValue);
                    },
                    useState: function (initialState) {
                      currentHookNameInDev = 'useState';
                      mountHookTypesDev();
                      var prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

                      try {
                        return mountState(initialState);
                      } finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    },
                    useDebugValue: function (value, formatterFn) {
                      currentHookNameInDev = 'useDebugValue';
                      mountHookTypesDev();
                      return mountDebugValue();
                    },
                    useDeferredValue: function (value) {
                      currentHookNameInDev = 'useDeferredValue';
                      mountHookTypesDev();
                      return mountDeferredValue(value);
                    },
                    useTransition: function () {
                      currentHookNameInDev = 'useTransition';
                      mountHookTypesDev();
                      return mountTransition();
                    },
                    useMutableSource: function (source, getSnapshot, subscribe) {
                      currentHookNameInDev = 'useMutableSource';
                      mountHookTypesDev();
                      return mountMutableSource(source, getSnapshot, subscribe);
                    },
                    useOpaqueIdentifier: function () {
                      currentHookNameInDev = 'useOpaqueIdentifier';
                      mountHookTypesDev();
                      return mountOpaqueIdentifier();
                    },
                    unstable_isNewReconciler: enableNewReconciler
                  };
                  HooksDispatcherOnMountWithHookTypesInDEV = {
                    readContext: function (context, observedBits) {
                      return readContext(context, observedBits);
                    },
                    useCallback: function (callback, deps) {
                      currentHookNameInDev = 'useCallback';
                      updateHookTypesDev();
                      return mountCallback(callback, deps);
                    },
                    useContext: function (context, observedBits) {
                      currentHookNameInDev = 'useContext';
                      updateHookTypesDev();
                      return readContext(context, observedBits);
                    },
                    useEffect: function (create, deps) {
                      currentHookNameInDev = 'useEffect';
                      updateHookTypesDev();
                      return mountEffect(create, deps);
                    },
                    useImperativeHandle: function (ref, create, deps) {
                      currentHookNameInDev = 'useImperativeHandle';
                      updateHookTypesDev();
                      return mountImperativeHandle(ref, create, deps);
                    },
                    useLayoutEffect: function (create, deps) {
                      currentHookNameInDev = 'useLayoutEffect';
                      updateHookTypesDev();
                      return mountLayoutEffect(create, deps);
                    },
                    useMemo: function (create, deps) {
                      currentHookNameInDev = 'useMemo';
                      updateHookTypesDev();
                      var prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

                      try {
                        return mountMemo(create, deps);
                      } finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    },
                    useReducer: function (reducer, initialArg, init) {
                      currentHookNameInDev = 'useReducer';
                      updateHookTypesDev();
                      var prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

                      try {
                        return mountReducer(reducer, initialArg, init);
                      } finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    },
                    useRef: function (initialValue) {
                      currentHookNameInDev = 'useRef';
                      updateHookTypesDev();
                      return mountRef(initialValue);
                    },
                    useState: function (initialState) {
                      currentHookNameInDev = 'useState';
                      updateHookTypesDev();
                      var prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

                      try {
                        return mountState(initialState);
                      } finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    },
                    useDebugValue: function (value, formatterFn) {
                      currentHookNameInDev = 'useDebugValue';
                      updateHookTypesDev();
                      return mountDebugValue();
                    },
                    useDeferredValue: function (value) {
                      currentHookNameInDev = 'useDeferredValue';
                      updateHookTypesDev();
                      return mountDeferredValue(value);
                    },
                    useTransition: function () {
                      currentHookNameInDev = 'useTransition';
                      updateHookTypesDev();
                      return mountTransition();
                    },
                    useMutableSource: function (source, getSnapshot, subscribe) {
                      currentHookNameInDev = 'useMutableSource';
                      updateHookTypesDev();
                      return mountMutableSource(source, getSnapshot, subscribe);
                    },
                    useOpaqueIdentifier: function () {
                      currentHookNameInDev = 'useOpaqueIdentifier';
                      updateHookTypesDev();
                      return mountOpaqueIdentifier();
                    },
                    unstable_isNewReconciler: enableNewReconciler
                  };
                  HooksDispatcherOnUpdateInDEV = {
                    readContext: function (context, observedBits) {
                      return readContext(context, observedBits);
                    },
                    useCallback: function (callback, deps) {
                      currentHookNameInDev = 'useCallback';
                      updateHookTypesDev();
                      return updateCallback(callback, deps);
                    },
                    useContext: function (context, observedBits) {
                      currentHookNameInDev = 'useContext';
                      updateHookTypesDev();
                      return readContext(context, observedBits);
                    },
                    useEffect: function (create, deps) {
                      currentHookNameInDev = 'useEffect';
                      updateHookTypesDev();
                      return updateEffect(create, deps);
                    },
                    useImperativeHandle: function (ref, create, deps) {
                      currentHookNameInDev = 'useImperativeHandle';
                      updateHookTypesDev();
                      return updateImperativeHandle(ref, create, deps);
                    },
                    useLayoutEffect: function (create, deps) {
                      currentHookNameInDev = 'useLayoutEffect';
                      updateHookTypesDev();
                      return updateLayoutEffect(create, deps);
                    },
                    useMemo: function (create, deps) {
                      currentHookNameInDev = 'useMemo';
                      updateHookTypesDev();
                      var prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

                      try {
                        return updateMemo(create, deps);
                      } finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    },
                    useReducer: function (reducer, initialArg, init) {
                      currentHookNameInDev = 'useReducer';
                      updateHookTypesDev();
                      var prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

                      try {
                        return updateReducer(reducer, initialArg, init);
                      } finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    },
                    useRef: function (initialValue) {
                      currentHookNameInDev = 'useRef';
                      updateHookTypesDev();
                      return updateRef();
                    },
                    useState: function (initialState) {
                      currentHookNameInDev = 'useState';
                      updateHookTypesDev();
                      var prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

                      try {
                        return updateState(initialState);
                      } finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    },
                    useDebugValue: function (value, formatterFn) {
                      currentHookNameInDev = 'useDebugValue';
                      updateHookTypesDev();
                      return updateDebugValue();
                    },
                    useDeferredValue: function (value) {
                      currentHookNameInDev = 'useDeferredValue';
                      updateHookTypesDev();
                      return updateDeferredValue(value);
                    },
                    useTransition: function () {
                      currentHookNameInDev = 'useTransition';
                      updateHookTypesDev();
                      return updateTransition();
                    },
                    useMutableSource: function (source, getSnapshot, subscribe) {
                      currentHookNameInDev = 'useMutableSource';
                      updateHookTypesDev();
                      return updateMutableSource(source, getSnapshot, subscribe);
                    },
                    useOpaqueIdentifier: function () {
                      currentHookNameInDev = 'useOpaqueIdentifier';
                      updateHookTypesDev();
                      return updateOpaqueIdentifier();
                    },
                    unstable_isNewReconciler: enableNewReconciler
                  };
                  HooksDispatcherOnRerenderInDEV = {
                    readContext: function (context, observedBits) {
                      return readContext(context, observedBits);
                    },
                    useCallback: function (callback, deps) {
                      currentHookNameInDev = 'useCallback';
                      updateHookTypesDev();
                      return updateCallback(callback, deps);
                    },
                    useContext: function (context, observedBits) {
                      currentHookNameInDev = 'useContext';
                      updateHookTypesDev();
                      return readContext(context, observedBits);
                    },
                    useEffect: function (create, deps) {
                      currentHookNameInDev = 'useEffect';
                      updateHookTypesDev();
                      return updateEffect(create, deps);
                    },
                    useImperativeHandle: function (ref, create, deps) {
                      currentHookNameInDev = 'useImperativeHandle';
                      updateHookTypesDev();
                      return updateImperativeHandle(ref, create, deps);
                    },
                    useLayoutEffect: function (create, deps) {
                      currentHookNameInDev = 'useLayoutEffect';
                      updateHookTypesDev();
                      return updateLayoutEffect(create, deps);
                    },
                    useMemo: function (create, deps) {
                      currentHookNameInDev = 'useMemo';
                      updateHookTypesDev();
                      var prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

                      try {
                        return updateMemo(create, deps);
                      } finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    },
                    useReducer: function (reducer, initialArg, init) {
                      currentHookNameInDev = 'useReducer';
                      updateHookTypesDev();
                      var prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

                      try {
                        return rerenderReducer(reducer, initialArg, init);
                      } finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    },
                    useRef: function (initialValue) {
                      currentHookNameInDev = 'useRef';
                      updateHookTypesDev();
                      return updateRef();
                    },
                    useState: function (initialState) {
                      currentHookNameInDev = 'useState';
                      updateHookTypesDev();
                      var prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

                      try {
                        return rerenderState(initialState);
                      } finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    },
                    useDebugValue: function (value, formatterFn) {
                      currentHookNameInDev = 'useDebugValue';
                      updateHookTypesDev();
                      return updateDebugValue();
                    },
                    useDeferredValue: function (value) {
                      currentHookNameInDev = 'useDeferredValue';
                      updateHookTypesDev();
                      return rerenderDeferredValue(value);
                    },
                    useTransition: function () {
                      currentHookNameInDev = 'useTransition';
                      updateHookTypesDev();
                      return rerenderTransition();
                    },
                    useMutableSource: function (source, getSnapshot, subscribe) {
                      currentHookNameInDev = 'useMutableSource';
                      updateHookTypesDev();
                      return updateMutableSource(source, getSnapshot, subscribe);
                    },
                    useOpaqueIdentifier: function () {
                      currentHookNameInDev = 'useOpaqueIdentifier';
                      updateHookTypesDev();
                      return rerenderOpaqueIdentifier();
                    },
                    unstable_isNewReconciler: enableNewReconciler
                  };
                  InvalidNestedHooksDispatcherOnMountInDEV = {
                    readContext: function (context, observedBits) {
                      warnInvalidContextAccess();
                      return readContext(context, observedBits);
                    },
                    useCallback: function (callback, deps) {
                      currentHookNameInDev = 'useCallback';
                      warnInvalidHookAccess();
                      mountHookTypesDev();
                      return mountCallback(callback, deps);
                    },
                    useContext: function (context, observedBits) {
                      currentHookNameInDev = 'useContext';
                      warnInvalidHookAccess();
                      mountHookTypesDev();
                      return readContext(context, observedBits);
                    },
                    useEffect: function (create, deps) {
                      currentHookNameInDev = 'useEffect';
                      warnInvalidHookAccess();
                      mountHookTypesDev();
                      return mountEffect(create, deps);
                    },
                    useImperativeHandle: function (ref, create, deps) {
                      currentHookNameInDev = 'useImperativeHandle';
                      warnInvalidHookAccess();
                      mountHookTypesDev();
                      return mountImperativeHandle(ref, create, deps);
                    },
                    useLayoutEffect: function (create, deps) {
                      currentHookNameInDev = 'useLayoutEffect';
                      warnInvalidHookAccess();
                      mountHookTypesDev();
                      return mountLayoutEffect(create, deps);
                    },
                    useMemo: function (create, deps) {
                      currentHookNameInDev = 'useMemo';
                      warnInvalidHookAccess();
                      mountHookTypesDev();
                      var prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

                      try {
                        return mountMemo(create, deps);
                      } finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    },
                    useReducer: function (reducer, initialArg, init) {
                      currentHookNameInDev = 'useReducer';
                      warnInvalidHookAccess();
                      mountHookTypesDev();
                      var prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

                      try {
                        return mountReducer(reducer, initialArg, init);
                      } finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    },
                    useRef: function (initialValue) {
                      currentHookNameInDev = 'useRef';
                      warnInvalidHookAccess();
                      mountHookTypesDev();
                      return mountRef(initialValue);
                    },
                    useState: function (initialState) {
                      currentHookNameInDev = 'useState';
                      warnInvalidHookAccess();
                      mountHookTypesDev();
                      var prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

                      try {
                        return mountState(initialState);
                      } finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    },
                    useDebugValue: function (value, formatterFn) {
                      currentHookNameInDev = 'useDebugValue';
                      warnInvalidHookAccess();
                      mountHookTypesDev();
                      return mountDebugValue();
                    },
                    useDeferredValue: function (value) {
                      currentHookNameInDev = 'useDeferredValue';
                      warnInvalidHookAccess();
                      mountHookTypesDev();
                      return mountDeferredValue(value);
                    },
                    useTransition: function () {
                      currentHookNameInDev = 'useTransition';
                      warnInvalidHookAccess();
                      mountHookTypesDev();
                      return mountTransition();
                    },
                    useMutableSource: function (source, getSnapshot, subscribe) {
                      currentHookNameInDev = 'useMutableSource';
                      warnInvalidHookAccess();
                      mountHookTypesDev();
                      return mountMutableSource(source, getSnapshot, subscribe);
                    },
                    useOpaqueIdentifier: function () {
                      currentHookNameInDev = 'useOpaqueIdentifier';
                      warnInvalidHookAccess();
                      mountHookTypesDev();
                      return mountOpaqueIdentifier();
                    },
                    unstable_isNewReconciler: enableNewReconciler
                  };
                  InvalidNestedHooksDispatcherOnUpdateInDEV = {
                    readContext: function (context, observedBits) {
                      warnInvalidContextAccess();
                      return readContext(context, observedBits);
                    },
                    useCallback: function (callback, deps) {
                      currentHookNameInDev = 'useCallback';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      return updateCallback(callback, deps);
                    },
                    useContext: function (context, observedBits) {
                      currentHookNameInDev = 'useContext';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      return readContext(context, observedBits);
                    },
                    useEffect: function (create, deps) {
                      currentHookNameInDev = 'useEffect';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      return updateEffect(create, deps);
                    },
                    useImperativeHandle: function (ref, create, deps) {
                      currentHookNameInDev = 'useImperativeHandle';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      return updateImperativeHandle(ref, create, deps);
                    },
                    useLayoutEffect: function (create, deps) {
                      currentHookNameInDev = 'useLayoutEffect';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      return updateLayoutEffect(create, deps);
                    },
                    useMemo: function (create, deps) {
                      currentHookNameInDev = 'useMemo';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      var prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

                      try {
                        return updateMemo(create, deps);
                      } finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    },
                    useReducer: function (reducer, initialArg, init) {
                      currentHookNameInDev = 'useReducer';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      var prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

                      try {
                        return updateReducer(reducer, initialArg, init);
                      } finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    },
                    useRef: function (initialValue) {
                      currentHookNameInDev = 'useRef';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      return updateRef();
                    },
                    useState: function (initialState) {
                      currentHookNameInDev = 'useState';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      var prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

                      try {
                        return updateState(initialState);
                      } finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    },
                    useDebugValue: function (value, formatterFn) {
                      currentHookNameInDev = 'useDebugValue';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      return updateDebugValue();
                    },
                    useDeferredValue: function (value) {
                      currentHookNameInDev = 'useDeferredValue';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      return updateDeferredValue(value);
                    },
                    useTransition: function () {
                      currentHookNameInDev = 'useTransition';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      return updateTransition();
                    },
                    useMutableSource: function (source, getSnapshot, subscribe) {
                      currentHookNameInDev = 'useMutableSource';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      return updateMutableSource(source, getSnapshot, subscribe);
                    },
                    useOpaqueIdentifier: function () {
                      currentHookNameInDev = 'useOpaqueIdentifier';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      return updateOpaqueIdentifier();
                    },
                    unstable_isNewReconciler: enableNewReconciler
                  };
                  InvalidNestedHooksDispatcherOnRerenderInDEV = {
                    readContext: function (context, observedBits) {
                      warnInvalidContextAccess();
                      return readContext(context, observedBits);
                    },
                    useCallback: function (callback, deps) {
                      currentHookNameInDev = 'useCallback';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      return updateCallback(callback, deps);
                    },
                    useContext: function (context, observedBits) {
                      currentHookNameInDev = 'useContext';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      return readContext(context, observedBits);
                    },
                    useEffect: function (create, deps) {
                      currentHookNameInDev = 'useEffect';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      return updateEffect(create, deps);
                    },
                    useImperativeHandle: function (ref, create, deps) {
                      currentHookNameInDev = 'useImperativeHandle';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      return updateImperativeHandle(ref, create, deps);
                    },
                    useLayoutEffect: function (create, deps) {
                      currentHookNameInDev = 'useLayoutEffect';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      return updateLayoutEffect(create, deps);
                    },
                    useMemo: function (create, deps) {
                      currentHookNameInDev = 'useMemo';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      var prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

                      try {
                        return updateMemo(create, deps);
                      } finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    },
                    useReducer: function (reducer, initialArg, init) {
                      currentHookNameInDev = 'useReducer';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      var prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

                      try {
                        return rerenderReducer(reducer, initialArg, init);
                      } finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    },
                    useRef: function (initialValue) {
                      currentHookNameInDev = 'useRef';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      return updateRef();
                    },
                    useState: function (initialState) {
                      currentHookNameInDev = 'useState';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      var prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

                      try {
                        return rerenderState(initialState);
                      } finally {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    },
                    useDebugValue: function (value, formatterFn) {
                      currentHookNameInDev = 'useDebugValue';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      return updateDebugValue();
                    },
                    useDeferredValue: function (value) {
                      currentHookNameInDev = 'useDeferredValue';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      return rerenderDeferredValue(value);
                    },
                    useTransition: function () {
                      currentHookNameInDev = 'useTransition';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      return rerenderTransition();
                    },
                    useMutableSource: function (source, getSnapshot, subscribe) {
                      currentHookNameInDev = 'useMutableSource';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      return updateMutableSource(source, getSnapshot, subscribe);
                    },
                    useOpaqueIdentifier: function () {
                      currentHookNameInDev = 'useOpaqueIdentifier';
                      warnInvalidHookAccess();
                      updateHookTypesDev();
                      return rerenderOpaqueIdentifier();
                    },
                    unstable_isNewReconciler: enableNewReconciler
                  };
                }

                var now$1 = Scheduler.unstable_now;
                var commitTime = 0;
                var profilerStartTime = -1;

                function getCommitTime() {
                  return commitTime;
                }

                function recordCommitTime() {

                  commitTime = now$1();
                }

                function startProfilerTimer(fiber) {

                  profilerStartTime = now$1();

                  if (fiber.actualStartTime < 0) {
                    fiber.actualStartTime = now$1();
                  }
                }

                function stopProfilerTimerIfRunning(fiber) {

                  profilerStartTime = -1;
                }

                function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {

                  if (profilerStartTime >= 0) {
                    var elapsedTime = now$1() - profilerStartTime;
                    fiber.actualDuration += elapsedTime;

                    if (overrideBaseTime) {
                      fiber.selfBaseDuration = elapsedTime;
                    }

                    profilerStartTime = -1;
                  }
                }

                function transferActualDuration(fiber) {
                  // Transfer time spent rendering these children so we don't lose it
                  // after we rerender. This is used as a helper in special cases
                  // where we should count the work of multiple passes.
                  var child = fiber.child;

                  while (child) {
                    fiber.actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                }

                var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
                var didReceiveUpdate = false;
                var didWarnAboutBadClass;
                var didWarnAboutModulePatternComponent;
                var didWarnAboutContextTypeOnFunctionComponent;
                var didWarnAboutGetDerivedStateOnFunctionComponent;
                var didWarnAboutFunctionRefs;
                var didWarnAboutReassigningProps;
                var didWarnAboutRevealOrder;
                var didWarnAboutTailOptions;

                {
                  didWarnAboutBadClass = {};
                  didWarnAboutModulePatternComponent = {};
                  didWarnAboutContextTypeOnFunctionComponent = {};
                  didWarnAboutGetDerivedStateOnFunctionComponent = {};
                  didWarnAboutFunctionRefs = {};
                  didWarnAboutReassigningProps = false;
                  didWarnAboutRevealOrder = {};
                  didWarnAboutTailOptions = {};
                }

                function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
                  if (current === null) {
                    // If this is a fresh new component that hasn't been rendered yet, we
                    // won't update its child set by applying minimal side-effects. Instead,
                    // we will add them all to the child before it gets rendered. That means
                    // we can optimize this reconciliation pass by not tracking side-effects.
                    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
                  } else {
                    // If the current child is the same as the work in progress, it means that
                    // we haven't yet started any work on these children. Therefore, we use
                    // the clone algorithm to create a copy of all the current children.
                    // If we had any progressed work already, that is invalid at this point so
                    // let's throw it out.
                    workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
                  }
                }

                function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {
                  // This function is fork of reconcileChildren. It's used in cases where we
                  // want to reconcile without matching against the existing set. This has the
                  // effect of all current children being unmounted; even if the type and key
                  // are the same, the old child is unmounted and a new child is created.
                  //
                  // To do this, we're going to go through the reconcile algorithm twice. In
                  // the first pass, we schedule a deletion for all the current children by
                  // passing null.
                  workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we
                  // pass null in place of where we usually pass the current child set. This has
                  // the effect of remounting all children regardless of whether their
                  // identities match.

                  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
                }

                function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
                  // TODO: current can be non-null here even if the component
                  // hasn't yet mounted. This happens after the first render suspends.
                  // We'll need to figure out if this is fine or can cause issues.
                  {
                    if (workInProgress.type !== workInProgress.elementType) {
                      // Lazy component props can't be validated in createElement
                      // because they're only guaranteed to be resolved here.
                      var innerPropTypes = Component.propTypes;

                      if (innerPropTypes) {
                        checkPropTypes(innerPropTypes, nextProps, // Resolved props
                        'prop', getComponentName(Component));
                      }
                    }
                  }

                  var render = Component.render;
                  var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent

                  var nextChildren;
                  prepareToReadContext(workInProgress, renderLanes);

                  {
                    ReactCurrentOwner$1.current = workInProgress;
                    setIsRendering(true);
                    nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);

                    if (workInProgress.mode & StrictMode) {
                      disableLogs();

                      try {
                        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
                      } finally {
                        reenableLogs();
                      }
                    }

                    setIsRendering(false);
                  }

                  if (current !== null && !didReceiveUpdate) {
                    bailoutHooks(current, workInProgress, renderLanes);
                    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                  } // React DevTools reads this flag.


                  workInProgress.flags |= PerformedWork;
                  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
                  return workInProgress.child;
                }

                function updateMemoComponent(current, workInProgress, Component, nextProps, updateLanes, renderLanes) {
                  if (current === null) {
                    var type = Component.type;

                    if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
                    Component.defaultProps === undefined) {
                      var resolvedType = type;

                      {
                        resolvedType = resolveFunctionForHotReloading(type);
                      } // If this is a plain function component without default props,
                      // and with only the default shallow comparison, we upgrade it
                      // to a SimpleMemoComponent to allow fast path updates.


                      workInProgress.tag = SimpleMemoComponent;
                      workInProgress.type = resolvedType;

                      {
                        validateFunctionComponentInDev(workInProgress, type);
                      }

                      return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, updateLanes, renderLanes);
                    }

                    {
                      var innerPropTypes = type.propTypes;

                      if (innerPropTypes) {
                        // Inner memo component props aren't currently validated in createElement.
                        // We could move it there, but we'd still need this for lazy code path.
                        checkPropTypes(innerPropTypes, nextProps, // Resolved props
                        'prop', getComponentName(type));
                      }
                    }

                    var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
                    child.ref = workInProgress.ref;
                    child.return = workInProgress;
                    workInProgress.child = child;
                    return child;
                  }

                  {
                    var _type = Component.type;
                    var _innerPropTypes = _type.propTypes;

                    if (_innerPropTypes) {
                      // Inner memo component props aren't currently validated in createElement.
                      // We could move it there, but we'd still need this for lazy code path.
                      checkPropTypes(_innerPropTypes, nextProps, // Resolved props
                      'prop', getComponentName(_type));
                    }
                  }

                  var currentChild = current.child; // This is always exactly one child

                  if (!includesSomeLane(updateLanes, renderLanes)) {
                    // This will be the props with resolved defaultProps,
                    // unlike current.memoizedProps which will be the unresolved ones.
                    var prevProps = currentChild.memoizedProps; // Default to shallow comparison

                    var compare = Component.compare;
                    compare = compare !== null ? compare : shallowEqual;

                    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {
                      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                    }
                  } // React DevTools reads this flag.


                  workInProgress.flags |= PerformedWork;
                  var newChild = createWorkInProgress(currentChild, nextProps);
                  newChild.ref = workInProgress.ref;
                  newChild.return = workInProgress;
                  workInProgress.child = newChild;
                  return newChild;
                }

                function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, updateLanes, renderLanes) {
                  // TODO: current can be non-null here even if the component
                  // hasn't yet mounted. This happens when the inner render suspends.
                  // We'll need to figure out if this is fine or can cause issues.
                  {
                    if (workInProgress.type !== workInProgress.elementType) {
                      // Lazy component props can't be validated in createElement
                      // because they're only guaranteed to be resolved here.
                      var outerMemoType = workInProgress.elementType;

                      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                        // We warn when you define propTypes on lazy()
                        // so let's just skip over it to find memo() outer wrapper.
                        // Inner props for memo are validated later.
                        var lazyComponent = outerMemoType;
                        var payload = lazyComponent._payload;
                        var init = lazyComponent._init;

                        try {
                          outerMemoType = init(payload);
                        } catch (x) {
                          outerMemoType = null;
                        } // Inner propTypes will be validated in the function component path.


                        var outerPropTypes = outerMemoType && outerMemoType.propTypes;

                        if (outerPropTypes) {
                          checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
                          'prop', getComponentName(outerMemoType));
                        }
                      }
                    }
                  }

                  if (current !== null) {
                    var prevProps = current.memoizedProps;

                    if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && // Prevent bailout if the implementation changed due to hot reload.
                    workInProgress.type === current.type) {
                      didReceiveUpdate = false;

                      if (!includesSomeLane(renderLanes, updateLanes)) {
                        // The pending lanes were cleared at the beginning of beginWork. We're
                        // about to bail out, but there might be other lanes that weren't
                        // included in the current render. Usually, the priority level of the
                        // remaining updates is accumlated during the evaluation of the
                        // component (i.e. when processing the update queue). But since since
                        // we're bailing out early *without* evaluating the component, we need
                        // to account for it here, too. Reset to the value of the current fiber.
                        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
                        // because a MemoComponent fiber does not have hooks or an update queue;
                        // rather, it wraps around an inner component, which may or may not
                        // contains hooks.
                        // TODO: Move the reset at in beginWork out of the common path so that
                        // this is no longer necessary.
                        workInProgress.lanes = current.lanes;
                        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                      } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                        // This is a special case that only exists for legacy mode.
                        // See https://github.com/facebook/react/pull/19216.
                        didReceiveUpdate = true;
                      }
                    }
                  }

                  return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
                }

                function updateOffscreenComponent(current, workInProgress, renderLanes) {
                  var nextProps = workInProgress.pendingProps;
                  var nextChildren = nextProps.children;
                  var prevState = current !== null ? current.memoizedState : null;

                  if (nextProps.mode === 'hidden' || nextProps.mode === 'unstable-defer-without-hiding') {
                    if ((workInProgress.mode & ConcurrentMode) === NoMode) {
                      // In legacy sync mode, don't defer the subtree. Render it now.
                      // TODO: Figure out what we should do in Blocking mode.
                      var nextState = {
                        baseLanes: NoLanes
                      };
                      workInProgress.memoizedState = nextState;
                      pushRenderLanes(workInProgress, renderLanes);
                    } else if (!includesSomeLane(renderLanes, OffscreenLane)) {
                      var nextBaseLanes;

                      if (prevState !== null) {
                        var prevBaseLanes = prevState.baseLanes;
                        nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);
                      } else {
                        nextBaseLanes = renderLanes;
                      } // Schedule this fiber to re-render at offscreen priority. Then bailout.


                      {
                        markSpawnedWork(OffscreenLane);
                      }

                      workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
                      var _nextState = {
                        baseLanes: nextBaseLanes
                      };
                      workInProgress.memoizedState = _nextState; // We're about to bail out, but we need to push this to the stack anyway
                      // to avoid a push/pop misalignment.

                      pushRenderLanes(workInProgress, nextBaseLanes);
                      return null;
                    } else {
                      // Rendering at offscreen, so we can clear the base lanes.
                      var _nextState2 = {
                        baseLanes: NoLanes
                      };
                      workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.

                      var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;
                      pushRenderLanes(workInProgress, subtreeRenderLanes);
                    }
                  } else {
                    var _subtreeRenderLanes;

                    if (prevState !== null) {
                      _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes); // Since we're not hidden anymore, reset the state

                      workInProgress.memoizedState = null;
                    } else {
                      // We weren't previously hidden, and we still aren't, so there's nothing
                      // special to do. Need to push to the stack regardless, though, to avoid
                      // a push/pop misalignment.
                      _subtreeRenderLanes = renderLanes;
                    }

                    pushRenderLanes(workInProgress, _subtreeRenderLanes);
                  }

                  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
                  return workInProgress.child;
                } // Note: These happen to have identical begin phases, for now. We shouldn't hold
                // ourselves to this constraint, though. If the behavior diverges, we should
                // fork the function.


                var updateLegacyHiddenComponent = updateOffscreenComponent;

                function updateFragment(current, workInProgress, renderLanes) {
                  var nextChildren = workInProgress.pendingProps;
                  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
                  return workInProgress.child;
                }

                function updateMode(current, workInProgress, renderLanes) {
                  var nextChildren = workInProgress.pendingProps.children;
                  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
                  return workInProgress.child;
                }

                function updateProfiler(current, workInProgress, renderLanes) {
                  {
                    workInProgress.flags |= Update; // Reset effect durations for the next eventual effect phase.
                    // These are reset during render to allow the DevTools commit hook a chance to read them,

                    var stateNode = workInProgress.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }

                  var nextProps = workInProgress.pendingProps;
                  var nextChildren = nextProps.children;
                  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
                  return workInProgress.child;
                }

                function markRef(current, workInProgress) {
                  var ref = workInProgress.ref;

                  if (current === null && ref !== null || current !== null && current.ref !== ref) {
                    // Schedule a Ref effect
                    workInProgress.flags |= Ref;
                  }
                }

                function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
                  {
                    if (workInProgress.type !== workInProgress.elementType) {
                      // Lazy component props can't be validated in createElement
                      // because they're only guaranteed to be resolved here.
                      var innerPropTypes = Component.propTypes;

                      if (innerPropTypes) {
                        checkPropTypes(innerPropTypes, nextProps, // Resolved props
                        'prop', getComponentName(Component));
                      }
                    }
                  }

                  var context;

                  {
                    var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
                    context = getMaskedContext(workInProgress, unmaskedContext);
                  }

                  var nextChildren;
                  prepareToReadContext(workInProgress, renderLanes);

                  {
                    ReactCurrentOwner$1.current = workInProgress;
                    setIsRendering(true);
                    nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);

                    if (workInProgress.mode & StrictMode) {
                      disableLogs();

                      try {
                        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
                      } finally {
                        reenableLogs();
                      }
                    }

                    setIsRendering(false);
                  }

                  if (current !== null && !didReceiveUpdate) {
                    bailoutHooks(current, workInProgress, renderLanes);
                    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                  } // React DevTools reads this flag.


                  workInProgress.flags |= PerformedWork;
                  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
                  return workInProgress.child;
                }

                function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
                  {
                    if (workInProgress.type !== workInProgress.elementType) {
                      // Lazy component props can't be validated in createElement
                      // because they're only guaranteed to be resolved here.
                      var innerPropTypes = Component.propTypes;

                      if (innerPropTypes) {
                        checkPropTypes(innerPropTypes, nextProps, // Resolved props
                        'prop', getComponentName(Component));
                      }
                    }
                  } // Push context providers early to prevent context stack mismatches.
                  // During mounting we don't know the child context yet as the instance doesn't exist.
                  // We will invalidate the child context in finishClassComponent() right after rendering.


                  var hasContext;

                  if (isContextProvider(Component)) {
                    hasContext = true;
                    pushContextProvider(workInProgress);
                  } else {
                    hasContext = false;
                  }

                  prepareToReadContext(workInProgress, renderLanes);
                  var instance = workInProgress.stateNode;
                  var shouldUpdate;

                  if (instance === null) {
                    if (current !== null) {
                      // A class component without an instance only mounts if it suspended
                      // inside a non-concurrent tree, in an inconsistent state. We want to
                      // treat it like a new mount, even though an empty version of it already
                      // committed. Disconnect the alternate pointers.
                      current.alternate = null;
                      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

                      workInProgress.flags |= Placement;
                    } // In the initial pass we might need to construct the instance.


                    constructClassInstance(workInProgress, Component, nextProps);
                    mountClassInstance(workInProgress, Component, nextProps, renderLanes);
                    shouldUpdate = true;
                  } else if (current === null) {
                    // In a resume, we'll already have an instance we can reuse.
                    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);
                  } else {
                    shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);
                  }

                  var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);

                  {
                    var inst = workInProgress.stateNode;

                    if (shouldUpdate && inst.props !== nextProps) {
                      if (!didWarnAboutReassigningProps) {
                        error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentName(workInProgress.type) || 'a component');
                      }

                      didWarnAboutReassigningProps = true;
                    }
                  }

                  return nextUnitOfWork;
                }

                function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
                  // Refs should update even if shouldComponentUpdate returns false
                  markRef(current, workInProgress);
                  var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;

                  if (!shouldUpdate && !didCaptureError) {
                    // Context providers should defer to sCU for rendering
                    if (hasContext) {
                      invalidateContextProvider(workInProgress, Component, false);
                    }

                    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                  }

                  var instance = workInProgress.stateNode; // Rerender

                  ReactCurrentOwner$1.current = workInProgress;
                  var nextChildren;

                  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
                    // If we captured an error, but getDerivedStateFromError is not defined,
                    // unmount all the children. componentDidCatch will schedule an update to
                    // re-render a fallback. This is temporary until we migrate everyone to
                    // the new API.
                    // TODO: Warn in a future release.
                    nextChildren = null;

                    {
                      stopProfilerTimerIfRunning();
                    }
                  } else {
                    {
                      setIsRendering(true);
                      nextChildren = instance.render();

                      if (workInProgress.mode & StrictMode) {
                        disableLogs();

                        try {
                          instance.render();
                        } finally {
                          reenableLogs();
                        }
                      }

                      setIsRendering(false);
                    }
                  } // React DevTools reads this flag.


                  workInProgress.flags |= PerformedWork;

                  if (current !== null && didCaptureError) {
                    // If we're recovering from an error, reconcile without reusing any of
                    // the existing children. Conceptually, the normal children and the children
                    // that are shown on error are two different sets, so we shouldn't reuse
                    // normal children even if their identities match.
                    forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);
                  } else {
                    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
                  } // Memoize state using the values we just used to render.
                  // TODO: Restructure so we never read values from the instance.


                  workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.

                  if (hasContext) {
                    invalidateContextProvider(workInProgress, Component, true);
                  }

                  return workInProgress.child;
                }

                function pushHostRootContext(workInProgress) {
                  var root = workInProgress.stateNode;

                  if (root.pendingContext) {
                    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
                  } else if (root.context) {
                    // Should always be set
                    pushTopLevelContextObject(workInProgress, root.context, false);
                  }

                  pushHostContainer(workInProgress, root.containerInfo);
                }

                function updateHostRoot(current, workInProgress, renderLanes) {
                  pushHostRootContext(workInProgress);
                  var updateQueue = workInProgress.updateQueue;

                  if (!(current !== null && updateQueue !== null)) {
                    {
                      throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }

                  var nextProps = workInProgress.pendingProps;
                  var prevState = workInProgress.memoizedState;
                  var prevChildren = prevState !== null ? prevState.element : null;
                  cloneUpdateQueue(current, workInProgress);
                  processUpdateQueue(workInProgress, nextProps, null, renderLanes);
                  var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property
                  // being called "element".

                  var nextChildren = nextState.element;

                  if (nextChildren === prevChildren) {
                    resetHydrationState();
                    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                  }

                  var root = workInProgress.stateNode;

                  if (root.hydrate && enterHydrationState(workInProgress)) {
                    // If we don't have any current children this might be the first pass.
                    // We always try to hydrate. If this isn't a hydration pass there won't
                    // be any children to hydrate which is effectively the same thing as
                    // not hydrating.
                    {
                      var mutableSourceEagerHydrationData = root.mutableSourceEagerHydrationData;

                      if (mutableSourceEagerHydrationData != null) {
                        for (var i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {
                          var mutableSource = mutableSourceEagerHydrationData[i];
                          var version = mutableSourceEagerHydrationData[i + 1];
                          setWorkInProgressVersion(mutableSource, version);
                        }
                      }
                    }

                    var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
                    workInProgress.child = child;
                    var node = child;

                    while (node) {
                      // Mark each child as hydrating. This is a fast path to know whether this
                      // tree is part of a hydrating tree. This is used to determine if a child
                      // node has fully mounted yet, and for scheduling event replaying.
                      // Conceptually this is similar to Placement in that a new subtree is
                      // inserted into the React tree here. It just happens to not need DOM
                      // mutations because it already exists.
                      node.flags = node.flags & ~Placement | Hydrating;
                      node = node.sibling;
                    }
                  } else {
                    // Otherwise reset hydration state in case we aborted and resumed another
                    // root.
                    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
                    resetHydrationState();
                  }

                  return workInProgress.child;
                }

                function updateHostComponent(current, workInProgress, renderLanes) {
                  pushHostContext(workInProgress);

                  if (current === null) {
                    tryToClaimNextHydratableInstance(workInProgress);
                  }

                  var type = workInProgress.type;
                  var nextProps = workInProgress.pendingProps;
                  var prevProps = current !== null ? current.memoizedProps : null;
                  var nextChildren = nextProps.children;
                  var isDirectTextChild = shouldSetTextContent(type, nextProps);

                  if (isDirectTextChild) {
                    // We special case a direct text child of a host node. This is a common
                    // case. We won't handle it as a reified child. We will instead handle
                    // this in the host environment that also has access to this prop. That
                    // avoids allocating another HostText fiber and traversing it.
                    nextChildren = null;
                  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
                    // If we're switching from a direct text child to a normal child, or to
                    // empty, we need to schedule the text content to be reset.
                    workInProgress.flags |= ContentReset;
                  }

                  markRef(current, workInProgress);
                  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
                  return workInProgress.child;
                }

                function updateHostText(current, workInProgress) {
                  if (current === null) {
                    tryToClaimNextHydratableInstance(workInProgress);
                  } // Nothing to do here. This is terminal. We'll do the completion step
                  // immediately after.


                  return null;
                }

                function mountLazyComponent(_current, workInProgress, elementType, updateLanes, renderLanes) {
                  if (_current !== null) {
                    // A lazy component only mounts if it suspended inside a non-
                    // concurrent tree, in an inconsistent state. We want to treat it like
                    // a new mount, even though an empty version of it already committed.
                    // Disconnect the alternate pointers.
                    _current.alternate = null;
                    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

                    workInProgress.flags |= Placement;
                  }

                  var props = workInProgress.pendingProps;
                  var lazyComponent = elementType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  var Component = init(payload); // Store the unwrapped component in the type.

                  workInProgress.type = Component;
                  var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
                  var resolvedProps = resolveDefaultProps(Component, props);
                  var child;

                  switch (resolvedTag) {
                    case FunctionComponent:
                      {
                        {
                          validateFunctionComponentInDev(workInProgress, Component);
                          workInProgress.type = Component = resolveFunctionForHotReloading(Component);
                        }

                        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);
                        return child;
                      }

                    case ClassComponent:
                      {
                        {
                          workInProgress.type = Component = resolveClassForHotReloading(Component);
                        }

                        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);
                        return child;
                      }

                    case ForwardRef:
                      {
                        {
                          workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
                        }

                        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);
                        return child;
                      }

                    case MemoComponent:
                      {
                        {
                          if (workInProgress.type !== workInProgress.elementType) {
                            var outerPropTypes = Component.propTypes;

                            if (outerPropTypes) {
                              checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only
                              'prop', getComponentName(Component));
                            }
                          }
                        }

                        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
                        updateLanes, renderLanes);
                        return child;
                      }
                  }

                  var hint = '';

                  {
                    if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
                      hint = ' Did you wrap a component in React.lazy() more than once?';
                    }
                  } // This message intentionally doesn't mention ForwardRef or MemoComponent
                  // because the fact that it's a separate type of work is an
                  // implementation detail.


                  {
                    {
                      throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
                    }
                  }
                }

                function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {
                  if (_current !== null) {
                    // An incomplete component only mounts if it suspended inside a non-
                    // concurrent tree, in an inconsistent state. We want to treat it like
                    // a new mount, even though an empty version of it already committed.
                    // Disconnect the alternate pointers.
                    _current.alternate = null;
                    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

                    workInProgress.flags |= Placement;
                  } // Promote the fiber to a class and try rendering again.


                  workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
                  // Push context providers early to prevent context stack mismatches.
                  // During mounting we don't know the child context yet as the instance doesn't exist.
                  // We will invalidate the child context in finishClassComponent() right after rendering.

                  var hasContext;

                  if (isContextProvider(Component)) {
                    hasContext = true;
                    pushContextProvider(workInProgress);
                  } else {
                    hasContext = false;
                  }

                  prepareToReadContext(workInProgress, renderLanes);
                  constructClassInstance(workInProgress, Component, nextProps);
                  mountClassInstance(workInProgress, Component, nextProps, renderLanes);
                  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
                }

                function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {
                  if (_current !== null) {
                    // An indeterminate component only mounts if it suspended inside a non-
                    // concurrent tree, in an inconsistent state. We want to treat it like
                    // a new mount, even though an empty version of it already committed.
                    // Disconnect the alternate pointers.
                    _current.alternate = null;
                    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

                    workInProgress.flags |= Placement;
                  }

                  var props = workInProgress.pendingProps;
                  var context;

                  {
                    var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
                    context = getMaskedContext(workInProgress, unmaskedContext);
                  }

                  prepareToReadContext(workInProgress, renderLanes);
                  var value;

                  {
                    if (Component.prototype && typeof Component.prototype.render === 'function') {
                      var componentName = getComponentName(Component) || 'Unknown';

                      if (!didWarnAboutBadClass[componentName]) {
                        error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);

                        didWarnAboutBadClass[componentName] = true;
                      }
                    }

                    if (workInProgress.mode & StrictMode) {
                      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
                    }

                    setIsRendering(true);
                    ReactCurrentOwner$1.current = workInProgress;
                    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
                    setIsRendering(false);
                  } // React DevTools reads this flag.


                  workInProgress.flags |= PerformedWork;

                  {
                    // Support for module components is deprecated and is removed behind a flag.
                    // Whether or not it would crash later, we want to show a good message in DEV first.
                    if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
                      var _componentName = getComponentName(Component) || 'Unknown';

                      if (!didWarnAboutModulePatternComponent[_componentName]) {
                        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);

                        didWarnAboutModulePatternComponent[_componentName] = true;
                      }
                    }
                  }

                  if ( // Run these checks in production only if the flag is off.
                  // Eventually we'll delete this branch altogether.
                  typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
                    {
                      var _componentName2 = getComponentName(Component) || 'Unknown';

                      if (!didWarnAboutModulePatternComponent[_componentName2]) {
                        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName2, _componentName2, _componentName2);

                        didWarnAboutModulePatternComponent[_componentName2] = true;
                      }
                    } // Proceed under the assumption that this is a class instance


                    workInProgress.tag = ClassComponent; // Throw out any hooks that were used.

                    workInProgress.memoizedState = null;
                    workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
                    // During mounting we don't know the child context yet as the instance doesn't exist.
                    // We will invalidate the child context in finishClassComponent() right after rendering.

                    var hasContext = false;

                    if (isContextProvider(Component)) {
                      hasContext = true;
                      pushContextProvider(workInProgress);
                    } else {
                      hasContext = false;
                    }

                    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
                    initializeUpdateQueue(workInProgress);
                    var getDerivedStateFromProps = Component.getDerivedStateFromProps;

                    if (typeof getDerivedStateFromProps === 'function') {
                      applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
                    }

                    adoptClassInstance(workInProgress, value);
                    mountClassInstance(workInProgress, Component, props, renderLanes);
                    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
                  } else {
                    // Proceed under the assumption that this is a function component
                    workInProgress.tag = FunctionComponent;

                    {

                      if (workInProgress.mode & StrictMode) {
                        disableLogs();

                        try {
                          value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
                        } finally {
                          reenableLogs();
                        }
                      }
                    }

                    reconcileChildren(null, workInProgress, value, renderLanes);

                    {
                      validateFunctionComponentInDev(workInProgress, Component);
                    }

                    return workInProgress.child;
                  }
                }

                function validateFunctionComponentInDev(workInProgress, Component) {
                  {
                    if (Component) {
                      if (Component.childContextTypes) {
                        error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
                      }
                    }

                    if (workInProgress.ref !== null) {
                      var info = '';
                      var ownerName = getCurrentFiberOwnerNameInDevOrNull();

                      if (ownerName) {
                        info += '\n\nCheck the render method of `' + ownerName + '`.';
                      }

                      var warningKey = ownerName || workInProgress._debugID || '';
                      var debugSource = workInProgress._debugSource;

                      if (debugSource) {
                        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
                      }

                      if (!didWarnAboutFunctionRefs[warningKey]) {
                        didWarnAboutFunctionRefs[warningKey] = true;

                        error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
                      }
                    }

                    if (typeof Component.getDerivedStateFromProps === 'function') {
                      var _componentName3 = getComponentName(Component) || 'Unknown';

                      if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                        error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);

                        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                      }
                    }

                    if (typeof Component.contextType === 'object' && Component.contextType !== null) {
                      var _componentName4 = getComponentName(Component) || 'Unknown';

                      if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                        error('%s: Function components do not support contextType.', _componentName4);

                        didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                      }
                    }
                  }
                }

                var SUSPENDED_MARKER = {
                  dehydrated: null,
                  retryLane: NoLane
                };

                function mountSuspenseOffscreenState(renderLanes) {
                  return {
                    baseLanes: renderLanes
                  };
                }

                function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {
                  return {
                    baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes)
                  };
                } // TODO: Probably should inline this back


                function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {
                  // If we're already showing a fallback, there are cases where we need to
                  // remain on that fallback regardless of whether the content has resolved.
                  // For example, SuspenseList coordinates when nested content appears.
                  if (current !== null) {
                    var suspenseState = current.memoizedState;

                    if (suspenseState === null) {
                      // Currently showing content. Don't hide it, even if ForceSuspenseFallack
                      // is true. More precise name might be "ForceRemainSuspenseFallback".
                      // Note: This is a factoring smell. Can't remain on a fallback if there's
                      // no fallback to remain on.
                      return false;
                    }
                  } // Not currently showing content. Consult the Suspense context.


                  return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
                }

                function getRemainingWorkInPrimaryTree(current, renderLanes) {
                  // TODO: Should not remove render lanes that were pinged during this render
                  return removeLanes(current.childLanes, renderLanes);
                }

                function updateSuspenseComponent(current, workInProgress, renderLanes) {
                  var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.

                  {
                    if (shouldSuspend(workInProgress)) {
                      workInProgress.flags |= DidCapture;
                    }
                  }

                  var suspenseContext = suspenseStackCursor.current;
                  var showFallback = false;
                  var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;

                  if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
                    // Something in this boundary's subtree already suspended. Switch to
                    // rendering the fallback children.
                    showFallback = true;
                    workInProgress.flags &= ~DidCapture;
                  } else {
                    // Attempting the main content
                    if (current === null || current.memoizedState !== null) {
                      // This is a new mount or this boundary is already showing a fallback state.
                      // Mark this subtree context as having at least one invisible parent that could
                      // handle the fallback state.
                      // Boundaries without fallbacks or should be avoided are not considered since
                      // they cannot handle preferred fallback states.
                      if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) {
                        suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                      }
                    }
                  }

                  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense
                  // boundary's children. This involves some custom reconcilation logic. Two
                  // main reasons this is so complicated.
                  //
                  // First, Legacy Mode has different semantics for backwards compatibility. The
                  // primary tree will commit in an inconsistent state, so when we do the
                  // second pass to render the fallback, we do some exceedingly, uh, clever
                  // hacks to make that not totally break. Like transferring effects and
                  // deletions from hidden tree. In Concurrent Mode, it's much simpler,
                  // because we bailout on the primary tree completely and leave it in its old
                  // state, no effects. Same as what we do for Offscreen (except that
                  // Offscreen doesn't have the first render pass).
                  //
                  // Second is hydration. During hydration, the Suspense fiber has a slightly
                  // different layout, where the child points to a dehydrated fragment, which
                  // contains the DOM rendered by the server.
                  //
                  // Third, even if you set all that aside, Suspense is like error boundaries in
                  // that we first we try to render one tree, and if that fails, we render again
                  // and switch to a different tree. Like a try/catch block. So we have to track
                  // which branch we're currently rendering. Ideally we would model this using
                  // a stack.

                  if (current === null) {
                    // Initial mount
                    // If we're currently hydrating, try to hydrate this boundary.
                    // But only if this has a fallback.
                    if (nextProps.fallback !== undefined) {
                      tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.
                    }

                    var nextPrimaryChildren = nextProps.children;
                    var nextFallbackChildren = nextProps.fallback;

                    if (showFallback) {
                      var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
                      var primaryChildFragment = workInProgress.child;
                      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
                      workInProgress.memoizedState = SUSPENDED_MARKER;
                      return fallbackFragment;
                    } else if (typeof nextProps.unstable_expectedLoadTime === 'number') {
                      // This is a CPU-bound tree. Skip this tree and show a placeholder to
                      // unblock the surrounding content. Then immediately retry after the
                      // initial commit.
                      var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);

                      var _primaryChildFragment = workInProgress.child;
                      _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
                      workInProgress.memoizedState = SUSPENDED_MARKER; // Since nothing actually suspended, there will nothing to ping this to
                      // get it started back up to attempt the next item. While in terms of
                      // priority this work has the same priority as this current render, it's
                      // not part of the same transition once the transition has committed. If
                      // it's sync, we still want to yield so that it can be painted.
                      // Conceptually, this is really the same as pinging. We can use any
                      // RetryLane even if it's the one currently rendering since we're leaving
                      // it behind on this node.

                      workInProgress.lanes = SomeRetryLane;

                      {
                        markSpawnedWork(SomeRetryLane);
                      }

                      return _fallbackFragment;
                    } else {
                      return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren, renderLanes);
                    }
                  } else {
                    // This is an update.
                    // If the current fiber has a SuspenseState, that means it's already showing
                    // a fallback.
                    var prevState = current.memoizedState;

                    if (prevState !== null) {

                      if (showFallback) {
                        var _nextFallbackChildren2 = nextProps.fallback;
                        var _nextPrimaryChildren2 = nextProps.children;

                        var _fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes);

                        var _primaryChildFragment3 = workInProgress.child;
                        var prevOffscreenState = current.child.memoizedState;
                        _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);
                        _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);
                        workInProgress.memoizedState = SUSPENDED_MARKER;
                        return _fallbackChildFragment;
                      } else {
                        var _nextPrimaryChildren3 = nextProps.children;

                        var _primaryChildFragment4 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren3, renderLanes);

                        workInProgress.memoizedState = null;
                        return _primaryChildFragment4;
                      }
                    } else {
                      // The current tree is not already showing a fallback.
                      if (showFallback) {
                        // Timed out.
                        var _nextFallbackChildren3 = nextProps.fallback;
                        var _nextPrimaryChildren4 = nextProps.children;

                        var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes);

                        var _primaryChildFragment5 = workInProgress.child;
                        var _prevOffscreenState = current.child.memoizedState;
                        _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes);
                        _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes); // Skip the primary children, and continue working on the
                        // fallback children.

                        workInProgress.memoizedState = SUSPENDED_MARKER;
                        return _fallbackChildFragment2;
                      } else {
                        // Still haven't timed out. Continue rendering the children, like we
                        // normally do.
                        var _nextPrimaryChildren5 = nextProps.children;

                        var _primaryChildFragment6 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren5, renderLanes);

                        workInProgress.memoizedState = null;
                        return _primaryChildFragment6;
                      }
                    }
                  }
                }

                function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {
                  var mode = workInProgress.mode;
                  var primaryChildProps = {
                    mode: 'visible',
                    children: primaryChildren
                  };
                  var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes, null);
                  primaryChildFragment.return = workInProgress;
                  workInProgress.child = primaryChildFragment;
                  return primaryChildFragment;
                }

                function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {
                  var mode = workInProgress.mode;
                  var progressedPrimaryFragment = workInProgress.child;
                  var primaryChildProps = {
                    mode: 'hidden',
                    children: primaryChildren
                  };
                  var primaryChildFragment;
                  var fallbackChildFragment;

                  if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
                    // In legacy mode, we commit the primary tree as if it successfully
                    // completed, even though it's in an inconsistent state.
                    primaryChildFragment = progressedPrimaryFragment;
                    primaryChildFragment.childLanes = NoLanes;
                    primaryChildFragment.pendingProps = primaryChildProps;

                    if (workInProgress.mode & ProfileMode) {
                      // Reset the durations from the first pass so they aren't included in the
                      // final amounts. This seems counterintuitive, since we're intentionally
                      // not measuring part of the render phase, but this makes it match what we
                      // do in Concurrent Mode.
                      primaryChildFragment.actualDuration = 0;
                      primaryChildFragment.actualStartTime = -1;
                      primaryChildFragment.selfBaseDuration = 0;
                      primaryChildFragment.treeBaseDuration = 0;
                    }

                    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
                  } else {
                    primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
                    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
                  }

                  primaryChildFragment.return = workInProgress;
                  fallbackChildFragment.return = workInProgress;
                  primaryChildFragment.sibling = fallbackChildFragment;
                  workInProgress.child = primaryChildFragment;
                  return fallbackChildFragment;
                }

                function createWorkInProgressOffscreenFiber(current, offscreenProps) {
                  // The props argument to `createWorkInProgress` is `any` typed, so we use this
                  // wrapper function to constrain it.
                  return createWorkInProgress(current, offscreenProps);
                }

                function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {
                  var currentPrimaryChildFragment = current.child;
                  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
                  var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
                    mode: 'visible',
                    children: primaryChildren
                  });

                  if ((workInProgress.mode & BlockingMode) === NoMode) {
                    primaryChildFragment.lanes = renderLanes;
                  }

                  primaryChildFragment.return = workInProgress;
                  primaryChildFragment.sibling = null;

                  if (currentFallbackChildFragment !== null) {
                    // Delete the fallback child fragment
                    currentFallbackChildFragment.nextEffect = null;
                    currentFallbackChildFragment.flags = Deletion;
                    workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChildFragment;
                  }

                  workInProgress.child = primaryChildFragment;
                  return primaryChildFragment;
                }

                function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
                  var mode = workInProgress.mode;
                  var currentPrimaryChildFragment = current.child;
                  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
                  var primaryChildProps = {
                    mode: 'hidden',
                    children: primaryChildren
                  };
                  var primaryChildFragment;

                  if ( // In legacy mode, we commit the primary tree as if it successfully
                  // completed, even though it's in an inconsistent state.
                  (mode & BlockingMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
                  // already cloned. In legacy mode, the only case where this isn't true is
                  // when DevTools forces us to display a fallback; we skip the first render
                  // pass entirely and go straight to rendering the fallback. (In Concurrent
                  // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
                  // only codepath.)
                  workInProgress.child !== currentPrimaryChildFragment) {
                    var progressedPrimaryFragment = workInProgress.child;
                    primaryChildFragment = progressedPrimaryFragment;
                    primaryChildFragment.childLanes = NoLanes;
                    primaryChildFragment.pendingProps = primaryChildProps;

                    if (workInProgress.mode & ProfileMode) {
                      // Reset the durations from the first pass so they aren't included in the
                      // final amounts. This seems counterintuitive, since we're intentionally
                      // not measuring part of the render phase, but this makes it match what we
                      // do in Concurrent Mode.
                      primaryChildFragment.actualDuration = 0;
                      primaryChildFragment.actualStartTime = -1;
                      primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                      primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
                    } // The fallback fiber was added as a deletion effect during the first pass.
                    // However, since we're going to remain on the fallback, we no longer want
                    // to delete it. So we need to remove it from the list. Deletions are stored
                    // on the same list as effects. We want to keep the effects from the primary
                    // tree. So we copy the primary child fragment's effect list, which does not
                    // include the fallback deletion effect.


                    var progressedLastEffect = primaryChildFragment.lastEffect;

                    if (progressedLastEffect !== null) {
                      workInProgress.firstEffect = primaryChildFragment.firstEffect;
                      workInProgress.lastEffect = progressedLastEffect;
                      progressedLastEffect.nextEffect = null;
                    } else {
                      // TODO: Reset this somewhere else? Lol legacy mode is so weird.
                      workInProgress.firstEffect = workInProgress.lastEffect = null;
                    }
                  } else {
                    primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
                  }

                  var fallbackChildFragment;

                  if (currentFallbackChildFragment !== null) {
                    fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
                  } else {
                    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already
                    // mounted but this is a new fiber.

                    fallbackChildFragment.flags |= Placement;
                  }

                  fallbackChildFragment.return = workInProgress;
                  primaryChildFragment.return = workInProgress;
                  primaryChildFragment.sibling = fallbackChildFragment;
                  workInProgress.child = primaryChildFragment;
                  return fallbackChildFragment;
                }

                function scheduleWorkOnFiber(fiber, renderLanes) {
                  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
                  var alternate = fiber.alternate;

                  if (alternate !== null) {
                    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
                  }

                  scheduleWorkOnParentPath(fiber.return, renderLanes);
                }

                function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {
                  // Mark any Suspense boundaries with fallbacks as having work to do.
                  // If they were previously forced into fallbacks, they may now be able
                  // to unblock.
                  var node = firstChild;

                  while (node !== null) {
                    if (node.tag === SuspenseComponent) {
                      var state = node.memoizedState;

                      if (state !== null) {
                        scheduleWorkOnFiber(node, renderLanes);
                      }
                    } else if (node.tag === SuspenseListComponent) {
                      // If the tail is hidden there might not be an Suspense boundaries
                      // to schedule work on. In this case we have to schedule it on the
                      // list itself.
                      // We don't have to traverse to the children of the list since
                      // the list will propagate the change when it rerenders.
                      scheduleWorkOnFiber(node, renderLanes);
                    } else if (node.child !== null) {
                      node.child.return = node;
                      node = node.child;
                      continue;
                    }

                    if (node === workInProgress) {
                      return;
                    }

                    while (node.sibling === null) {
                      if (node.return === null || node.return === workInProgress) {
                        return;
                      }

                      node = node.return;
                    }

                    node.sibling.return = node.return;
                    node = node.sibling;
                  }
                }

                function findLastContentRow(firstChild) {
                  // This is going to find the last row among these children that is already
                  // showing content on the screen, as opposed to being in fallback state or
                  // new. If a row has multiple Suspense boundaries, any of them being in the
                  // fallback state, counts as the whole row being in a fallback state.
                  // Note that the "rows" will be workInProgress, but any nested children
                  // will still be current since we haven't rendered them yet. The mounted
                  // order may not be the same as the new order. We use the new order.
                  var row = firstChild;
                  var lastContentRow = null;

                  while (row !== null) {
                    var currentRow = row.alternate; // New rows can't be content rows.

                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      lastContentRow = row;
                    }

                    row = row.sibling;
                  }

                  return lastContentRow;
                }

                function validateRevealOrder(revealOrder) {
                  {
                    if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
                      didWarnAboutRevealOrder[revealOrder] = true;

                      if (typeof revealOrder === 'string') {
                        switch (revealOrder.toLowerCase()) {
                          case 'together':
                          case 'forwards':
                          case 'backwards':
                            {
                              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());

                              break;
                            }

                          case 'forward':
                          case 'backward':
                            {
                              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());

                              break;
                            }

                          default:
                            error('"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);

                            break;
                        }
                      } else {
                        error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      }
                    }
                  }
                }

                function validateTailOptions(tailMode, revealOrder) {
                  {
                    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
                      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
                        didWarnAboutTailOptions[tailMode] = true;

                        error('"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
                      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
                        didWarnAboutTailOptions[tailMode] = true;

                        error('<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
                      }
                    }
                  }
                }

                function validateSuspenseListNestedChild(childSlot, index) {
                  {
                    var isArray = Array.isArray(childSlot);
                    var isIterable = !isArray && typeof getIteratorFn(childSlot) === 'function';

                    if (isArray || isIterable) {
                      var type = isArray ? 'array' : 'iterable';

                      error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);

                      return false;
                    }
                  }

                  return true;
                }

                function validateSuspenseListChildren(children, revealOrder) {
                  {
                    if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
                      if (Array.isArray(children)) {
                        for (var i = 0; i < children.length; i++) {
                          if (!validateSuspenseListNestedChild(children[i], i)) {
                            return;
                          }
                        }
                      } else {
                        var iteratorFn = getIteratorFn(children);

                        if (typeof iteratorFn === 'function') {
                          var childrenIterator = iteratorFn.call(children);

                          if (childrenIterator) {
                            var step = childrenIterator.next();
                            var _i = 0;

                            for (; !step.done; step = childrenIterator.next()) {
                              if (!validateSuspenseListNestedChild(step.value, _i)) {
                                return;
                              }

                              _i++;
                            }
                          }
                        } else {
                          error('A single row was passed to a <SuspenseList revealOrder="%s" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);
                        }
                      }
                    }
                  }
                }

                function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
                  var renderState = workInProgress.memoizedState;

                  if (renderState === null) {
                    workInProgress.memoizedState = {
                      isBackwards: isBackwards,
                      rendering: null,
                      renderingStartTime: 0,
                      last: lastContentRow,
                      tail: tail,
                      tailMode: tailMode,
                      lastEffect: lastEffectBeforeRendering
                    };
                  } else {
                    // We can reuse the existing object from previous renders.
                    renderState.isBackwards = isBackwards;
                    renderState.rendering = null;
                    renderState.renderingStartTime = 0;
                    renderState.last = lastContentRow;
                    renderState.tail = tail;
                    renderState.tailMode = tailMode;
                    renderState.lastEffect = lastEffectBeforeRendering;
                  }
                } // This can end up rendering this component multiple passes.
                // The first pass splits the children fibers into two sets. A head and tail.
                // We first render the head. If anything is in fallback state, we do another
                // pass through beginWork to rerender all children (including the tail) with
                // the force suspend context. If the first render didn't have anything in
                // in fallback state. Then we render each row in the tail one-by-one.
                // That happens in the completeWork phase without going back to beginWork.


                function updateSuspenseListComponent(current, workInProgress, renderLanes) {
                  var nextProps = workInProgress.pendingProps;
                  var revealOrder = nextProps.revealOrder;
                  var tailMode = nextProps.tail;
                  var newChildren = nextProps.children;
                  validateRevealOrder(revealOrder);
                  validateTailOptions(tailMode, revealOrder);
                  validateSuspenseListChildren(newChildren, revealOrder);
                  reconcileChildren(current, workInProgress, newChildren, renderLanes);
                  var suspenseContext = suspenseStackCursor.current;
                  var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);

                  if (shouldForceFallback) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                    workInProgress.flags |= DidCapture;
                  } else {
                    var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;

                    if (didSuspendBefore) {
                      // If we previously forced a fallback, we need to schedule work
                      // on any nested boundaries to let them know to try to render
                      // again. This is the same as context updating.
                      propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);
                    }

                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }

                  pushSuspenseContext(workInProgress, suspenseContext);

                  if ((workInProgress.mode & BlockingMode) === NoMode) {
                    // In legacy mode, SuspenseList doesn't work so we just
                    // use make it a noop by treating it as the default revealOrder.
                    workInProgress.memoizedState = null;
                  } else {
                    switch (revealOrder) {
                      case 'forwards':
                        {
                          var lastContentRow = findLastContentRow(workInProgress.child);
                          var tail;

                          if (lastContentRow === null) {
                            // The whole list is part of the tail.
                            // TODO: We could fast path by just rendering the tail now.
                            tail = workInProgress.child;
                            workInProgress.child = null;
                          } else {
                            // Disconnect the tail rows after the content row.
                            // We're going to render them separately later.
                            tail = lastContentRow.sibling;
                            lastContentRow.sibling = null;
                          }

                          initSuspenseListRenderState(workInProgress, false, // isBackwards
                          tail, lastContentRow, tailMode, workInProgress.lastEffect);
                          break;
                        }

                      case 'backwards':
                        {
                          // We're going to find the first row that has existing content.
                          // At the same time we're going to reverse the list of everything
                          // we pass in the meantime. That's going to be our tail in reverse
                          // order.
                          var _tail = null;
                          var row = workInProgress.child;
                          workInProgress.child = null;

                          while (row !== null) {
                            var currentRow = row.alternate; // New rows can't be content rows.

                            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                              // This is the beginning of the main content.
                              workInProgress.child = row;
                              break;
                            }

                            var nextRow = row.sibling;
                            row.sibling = _tail;
                            _tail = row;
                            row = nextRow;
                          } // TODO: If workInProgress.child is null, we can continue on the tail immediately.


                          initSuspenseListRenderState(workInProgress, true, // isBackwards
                          _tail, null, // last
                          tailMode, workInProgress.lastEffect);
                          break;
                        }

                      case 'together':
                        {
                          initSuspenseListRenderState(workInProgress, false, // isBackwards
                          null, // tail
                          null, // last
                          undefined, workInProgress.lastEffect);
                          break;
                        }

                      default:
                        {
                          // The default reveal order is the same as not having
                          // a boundary.
                          workInProgress.memoizedState = null;
                        }
                    }
                  }

                  return workInProgress.child;
                }

                function updatePortalComponent(current, workInProgress, renderLanes) {
                  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                  var nextChildren = workInProgress.pendingProps;

                  if (current === null) {
                    // Portals are special because we don't append the children during mount
                    // but at commit. Therefore we need to track insertions which the normal
                    // flow doesn't do during mount. This doesn't happen at the root because
                    // the root always starts with a "current" with a null child.
                    // TODO: Consider unifying this with how the root works.
                    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
                  } else {
                    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
                  }

                  return workInProgress.child;
                }

                var hasWarnedAboutUsingNoValuePropOnContextProvider = false;

                function updateContextProvider(current, workInProgress, renderLanes) {
                  var providerType = workInProgress.type;
                  var context = providerType._context;
                  var newProps = workInProgress.pendingProps;
                  var oldProps = workInProgress.memoizedProps;
                  var newValue = newProps.value;

                  {
                    if (!('value' in newProps)) {
                      if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                        hasWarnedAboutUsingNoValuePropOnContextProvider = true;

                        error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');
                      }
                    }

                    var providerPropTypes = workInProgress.type.propTypes;

                    if (providerPropTypes) {
                      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');
                    }
                  }

                  pushProvider(workInProgress, newValue);

                  if (oldProps !== null) {
                    var oldValue = oldProps.value;
                    var changedBits = calculateChangedBits(context, newValue, oldValue);

                    if (changedBits === 0) {
                      // No change. Bailout early if children are the same.
                      if (oldProps.children === newProps.children && !hasContextChanged()) {
                        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                      }
                    } else {
                      // The context value changed. Search for matching consumers and schedule
                      // them to update.
                      propagateContextChange(workInProgress, context, changedBits, renderLanes);
                    }
                  }

                  var newChildren = newProps.children;
                  reconcileChildren(current, workInProgress, newChildren, renderLanes);
                  return workInProgress.child;
                }

                var hasWarnedAboutUsingContextAsConsumer = false;

                function updateContextConsumer(current, workInProgress, renderLanes) {
                  var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
                  // DEV mode, we create a separate object for Context.Consumer that acts
                  // like a proxy to Context. This proxy object adds unnecessary code in PROD
                  // so we use the old behaviour (Context.Consumer references Context) to
                  // reduce size and overhead. The separate object references context via
                  // a property called "_context", which also gives us the ability to check
                  // in DEV mode if this property exists or not and warn if it does not.

                  {
                    if (context._context === undefined) {
                      // This may be because it's a Context (rather than a Consumer).
                      // Or it may be because it's older React where they're the same thing.
                      // We only want to warn if we're sure it's a new React.
                      if (context !== context.Consumer) {
                        if (!hasWarnedAboutUsingContextAsConsumer) {
                          hasWarnedAboutUsingContextAsConsumer = true;

                          error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
                        }
                      }
                    } else {
                      context = context._context;
                    }
                  }

                  var newProps = workInProgress.pendingProps;
                  var render = newProps.children;

                  {
                    if (typeof render !== 'function') {
                      error('A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');
                    }
                  }

                  prepareToReadContext(workInProgress, renderLanes);
                  var newValue = readContext(context, newProps.unstable_observedBits);
                  var newChildren;

                  {
                    ReactCurrentOwner$1.current = workInProgress;
                    setIsRendering(true);
                    newChildren = render(newValue);
                    setIsRendering(false);
                  } // React DevTools reads this flag.


                  workInProgress.flags |= PerformedWork;
                  reconcileChildren(current, workInProgress, newChildren, renderLanes);
                  return workInProgress.child;
                }

                function markWorkInProgressReceivedUpdate() {
                  didReceiveUpdate = true;
                }

                function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
                  if (current !== null) {
                    // Reuse previous dependencies
                    workInProgress.dependencies = current.dependencies;
                  }

                  {
                    // Don't update "base" render times for bailouts.
                    stopProfilerTimerIfRunning();
                  }

                  markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.

                  if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {
                    // The children don't have any work either. We can skip them.
                    // TODO: Once we add back resuming, we should check if the children are
                    // a work-in-progress set. If so, we need to transfer their effects.
                    return null;
                  } else {
                    // This fiber doesn't have work, but its subtree does. Clone the child
                    // fibers and continue.
                    cloneChildFibers(current, workInProgress);
                    return workInProgress.child;
                  }
                }

                function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
                  {
                    var returnFiber = oldWorkInProgress.return;

                    if (returnFiber === null) {
                      throw new Error('Cannot swap the root fiber.');
                    } // Disconnect from the old current.
                    // It will get deleted.


                    current.alternate = null;
                    oldWorkInProgress.alternate = null; // Connect to the new tree.

                    newWorkInProgress.index = oldWorkInProgress.index;
                    newWorkInProgress.sibling = oldWorkInProgress.sibling;
                    newWorkInProgress.return = oldWorkInProgress.return;
                    newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.

                    if (oldWorkInProgress === returnFiber.child) {
                      returnFiber.child = newWorkInProgress;
                    } else {
                      var prevSibling = returnFiber.child;

                      if (prevSibling === null) {
                        throw new Error('Expected parent to have a child.');
                      }

                      while (prevSibling.sibling !== oldWorkInProgress) {
                        prevSibling = prevSibling.sibling;

                        if (prevSibling === null) {
                          throw new Error('Expected to find the previous sibling.');
                        }
                      }

                      prevSibling.sibling = newWorkInProgress;
                    } // Delete the old fiber and place the new one.
                    // Since the old fiber is disconnected, we have to schedule it manually.


                    var last = returnFiber.lastEffect;

                    if (last !== null) {
                      last.nextEffect = current;
                      returnFiber.lastEffect = current;
                    } else {
                      returnFiber.firstEffect = returnFiber.lastEffect = current;
                    }

                    current.nextEffect = null;
                    current.flags = Deletion;
                    newWorkInProgress.flags |= Placement; // Restart work from the new fiber.

                    return newWorkInProgress;
                  }
                }

                function beginWork(current, workInProgress, renderLanes) {
                  var updateLanes = workInProgress.lanes;

                  {
                    if (workInProgress._debugNeedsRemount && current !== null) {
                      // This will restart the begin phase with a new fiber.
                      return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
                    }
                  }

                  if (current !== null) {
                    var oldProps = current.memoizedProps;
                    var newProps = workInProgress.pendingProps;

                    if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
                    workInProgress.type !== current.type) {
                      // If props or context changed, mark the fiber as having performed work.
                      // This may be unset if the props are determined to be equal later (memo).
                      didReceiveUpdate = true;
                    } else if (!includesSomeLane(renderLanes, updateLanes)) {
                      didReceiveUpdate = false; // This fiber does not have any pending work. Bailout without entering
                      // the begin phase. There's still some bookkeeping we that needs to be done
                      // in this optimized path, mostly pushing stuff onto the stack.

                      switch (workInProgress.tag) {
                        case HostRoot:
                          pushHostRootContext(workInProgress);
                          resetHydrationState();
                          break;

                        case HostComponent:
                          pushHostContext(workInProgress);
                          break;

                        case ClassComponent:
                          {
                            var Component = workInProgress.type;

                            if (isContextProvider(Component)) {
                              pushContextProvider(workInProgress);
                            }

                            break;
                          }

                        case HostPortal:
                          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                          break;

                        case ContextProvider:
                          {
                            var newValue = workInProgress.memoizedProps.value;
                            pushProvider(workInProgress, newValue);
                            break;
                          }

                        case Profiler:
                          {
                            // Profiler should only call onRender when one of its descendants actually rendered.
                            var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

                            if (hasChildWork) {
                              workInProgress.flags |= Update;
                            } // Reset effect durations for the next eventual effect phase.
                            // These are reset during render to allow the DevTools commit hook a chance to read them,


                            var stateNode = workInProgress.stateNode;
                            stateNode.effectDuration = 0;
                            stateNode.passiveEffectDuration = 0;
                          }

                          break;

                        case SuspenseComponent:
                          {
                            var state = workInProgress.memoizedState;

                            if (state !== null) {
                              // whether to retry the primary children, or to skip over it and
                              // go straight to the fallback. Check the priority of the primary
                              // child fragment.


                              var primaryChildFragment = workInProgress.child;
                              var primaryChildLanes = primaryChildFragment.childLanes;

                              if (includesSomeLane(renderLanes, primaryChildLanes)) {
                                // The primary children have pending work. Use the normal path
                                // to attempt to render the primary children again.
                                return updateSuspenseComponent(current, workInProgress, renderLanes);
                              } else {
                                // The primary child fragment does not have pending work marked
                                // on it
                                pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
                                // priority. Bailout.

                                var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);

                                if (child !== null) {
                                  // The fallback children have pending work. Skip over the
                                  // primary children and work on the fallback.
                                  return child.sibling;
                                } else {
                                  return null;
                                }
                              }
                            } else {
                              pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                            }

                            break;
                          }

                        case SuspenseListComponent:
                          {
                            var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;

                            var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

                            if (didSuspendBefore) {
                              if (_hasChildWork) {
                                // If something was in fallback state last time, and we have all the
                                // same children then we're still in progressive loading state.
                                // Something might get unblocked by state updates or retries in the
                                // tree which will affect the tail. So we need to use the normal
                                // path to compute the correct tail.
                                return updateSuspenseListComponent(current, workInProgress, renderLanes);
                              } // If none of the children had any work, that means that none of
                              // them got retried so they'll still be blocked in the same way
                              // as before. We can fast bail out.


                              workInProgress.flags |= DidCapture;
                            } // If nothing suspended before and we're rendering the same children,
                            // then the tail doesn't matter. Anything new that suspends will work
                            // in the "together" mode, so we can continue from the state we had.


                            var renderState = workInProgress.memoizedState;

                            if (renderState !== null) {
                              // Reset to the "together" mode in case we've started a different
                              // update in the past but didn't complete it.
                              renderState.rendering = null;
                              renderState.tail = null;
                              renderState.lastEffect = null;
                            }

                            pushSuspenseContext(workInProgress, suspenseStackCursor.current);

                            if (_hasChildWork) {
                              break;
                            } else {
                              // If none of the children had any work, that means that none of
                              // them got retried so they'll still be blocked in the same way
                              // as before. We can fast bail out.
                              return null;
                            }
                          }

                        case OffscreenComponent:
                        case LegacyHiddenComponent:
                          {
                            // Need to check if the tree still needs to be deferred. This is
                            // almost identical to the logic used in the normal update path,
                            // so we'll just enter that. The only difference is we'll bail out
                            // at the next level instead of this one, because the child props
                            // have not changed. Which is fine.
                            // TODO: Probably should refactor `beginWork` to split the bailout
                            // path from the normal path. I'm tempted to do a labeled break here
                            // but I won't :)
                            workInProgress.lanes = NoLanes;
                            return updateOffscreenComponent(current, workInProgress, renderLanes);
                          }
                      }

                      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                    } else {
                      if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                        // This is a special case that only exists for legacy mode.
                        // See https://github.com/facebook/react/pull/19216.
                        didReceiveUpdate = true;
                      } else {
                        // An update was scheduled on this fiber, but there are no new props
                        // nor legacy context. Set this to false. If an update queue or context
                        // consumer produces a changed value, it will set this to true. Otherwise,
                        // the component will assume the children have not changed and bail out.
                        didReceiveUpdate = false;
                      }
                    }
                  } else {
                    didReceiveUpdate = false;
                  } // Before entering the begin phase, clear pending update priority.
                  // TODO: This assumes that we're about to evaluate the component and process
                  // the update queue. However, there's an exception: SimpleMemoComponent
                  // sometimes bails out later in the begin phase. This indicates that we should
                  // move this assignment out of the common path and into each branch.


                  workInProgress.lanes = NoLanes;

                  switch (workInProgress.tag) {
                    case IndeterminateComponent:
                      {
                        return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);
                      }

                    case LazyComponent:
                      {
                        var elementType = workInProgress.elementType;
                        return mountLazyComponent(current, workInProgress, elementType, updateLanes, renderLanes);
                      }

                    case FunctionComponent:
                      {
                        var _Component = workInProgress.type;
                        var unresolvedProps = workInProgress.pendingProps;
                        var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
                        return updateFunctionComponent(current, workInProgress, _Component, resolvedProps, renderLanes);
                      }

                    case ClassComponent:
                      {
                        var _Component2 = workInProgress.type;
                        var _unresolvedProps = workInProgress.pendingProps;

                        var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);

                        return updateClassComponent(current, workInProgress, _Component2, _resolvedProps, renderLanes);
                      }

                    case HostRoot:
                      return updateHostRoot(current, workInProgress, renderLanes);

                    case HostComponent:
                      return updateHostComponent(current, workInProgress, renderLanes);

                    case HostText:
                      return updateHostText(current, workInProgress);

                    case SuspenseComponent:
                      return updateSuspenseComponent(current, workInProgress, renderLanes);

                    case HostPortal:
                      return updatePortalComponent(current, workInProgress, renderLanes);

                    case ForwardRef:
                      {
                        var type = workInProgress.type;
                        var _unresolvedProps2 = workInProgress.pendingProps;

                        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);

                        return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);
                      }

                    case Fragment:
                      return updateFragment(current, workInProgress, renderLanes);

                    case Mode:
                      return updateMode(current, workInProgress, renderLanes);

                    case Profiler:
                      return updateProfiler(current, workInProgress, renderLanes);

                    case ContextProvider:
                      return updateContextProvider(current, workInProgress, renderLanes);

                    case ContextConsumer:
                      return updateContextConsumer(current, workInProgress, renderLanes);

                    case MemoComponent:
                      {
                        var _type2 = workInProgress.type;
                        var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.

                        var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);

                        {
                          if (workInProgress.type !== workInProgress.elementType) {
                            var outerPropTypes = _type2.propTypes;

                            if (outerPropTypes) {
                              checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only
                              'prop', getComponentName(_type2));
                            }
                          }
                        }

                        _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                        return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, updateLanes, renderLanes);
                      }

                    case SimpleMemoComponent:
                      {
                        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, updateLanes, renderLanes);
                      }

                    case IncompleteClassComponent:
                      {
                        var _Component3 = workInProgress.type;
                        var _unresolvedProps4 = workInProgress.pendingProps;

                        var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);

                        return mountIncompleteClassComponent(current, workInProgress, _Component3, _resolvedProps4, renderLanes);
                      }

                    case SuspenseListComponent:
                      {
                        return updateSuspenseListComponent(current, workInProgress, renderLanes);
                      }

                    case FundamentalComponent:
                      {

                        break;
                      }

                    case ScopeComponent:
                      {

                        break;
                      }

                    case Block:
                      {

                        break;
                      }

                    case OffscreenComponent:
                      {
                        return updateOffscreenComponent(current, workInProgress, renderLanes);
                      }

                    case LegacyHiddenComponent:
                      {
                        return updateLegacyHiddenComponent(current, workInProgress, renderLanes);
                      }
                  }

                  {
                    {
                      throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                }

                function markUpdate(workInProgress) {
                  // Tag the fiber with an update effect. This turns a Placement into
                  // a PlacementAndUpdate.
                  workInProgress.flags |= Update;
                }

                function markRef$1(workInProgress) {
                  workInProgress.flags |= Ref;
                }

                var appendAllChildren;
                var updateHostContainer;
                var updateHostComponent$1;
                var updateHostText$1;

                {
                  // Mutation mode
                  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
                    // We only have the top Fiber that was created but we need recurse down its
                    // children to find all the terminal nodes.
                    var node = workInProgress.child;

                    while (node !== null) {
                      if (node.tag === HostComponent || node.tag === HostText) {
                        appendInitialChild(parent, node.stateNode);
                      } else if (node.tag === HostPortal) ;else if (node.child !== null) {
                        node.child.return = node;
                        node = node.child;
                        continue;
                      }

                      if (node === workInProgress) {
                        return;
                      }

                      while (node.sibling === null) {
                        if (node.return === null || node.return === workInProgress) {
                          return;
                        }

                        node = node.return;
                      }

                      node.sibling.return = node.return;
                      node = node.sibling;
                    }
                  };

                  updateHostContainer = function (workInProgress) {// Noop
                  };

                  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
                    // If we have an alternate, that means this is an update and we need to
                    // schedule a side-effect to do the updates.
                    var oldProps = current.memoizedProps;

                    if (oldProps === newProps) {
                      // In mutation mode, this is sufficient for a bailout because
                      // we won't touch this node even if children changed.
                      return;
                    } // If we get updated because one of our children updated, we don't
                    // have newProps so we'll have to reuse them.
                    // TODO: Split the update API as separate for the props vs. children.
                    // Even better would be if children weren't special cased at all tho.


                    var instance = workInProgress.stateNode;
                    var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
                    // component is hitting the resume path. Figure out why. Possibly
                    // related to `hidden`.

                    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.

                    workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
                    // is a new ref we mark this as an update. All the work is done in commitWork.

                    if (updatePayload) {
                      markUpdate(workInProgress);
                    }
                  };

                  updateHostText$1 = function (current, workInProgress, oldText, newText) {
                    // If the text differs, mark it as an update. All the work in done in commitWork.
                    if (oldText !== newText) {
                      markUpdate(workInProgress);
                    }
                  };
                }

                function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
                  if (getIsHydrating()) {
                    // If we're hydrating, we should consume as many items as we can
                    // so we don't leave any behind.
                    return;
                  }

                  switch (renderState.tailMode) {
                    case 'hidden':
                      {
                        // Any insertions at the end of the tail list after this point
                        // should be invisible. If there are already mounted boundaries
                        // anything before them are not considered for collapsing.
                        // Therefore we need to go through the whole tail to find if
                        // there are any.
                        var tailNode = renderState.tail;
                        var lastTailNode = null;

                        while (tailNode !== null) {
                          if (tailNode.alternate !== null) {
                            lastTailNode = tailNode;
                          }

                          tailNode = tailNode.sibling;
                        } // Next we're simply going to delete all insertions after the
                        // last rendered item.


                        if (lastTailNode === null) {
                          // All remaining items in the tail are insertions.
                          renderState.tail = null;
                        } else {
                          // Detach the insertion after the last node that was already
                          // inserted.
                          lastTailNode.sibling = null;
                        }

                        break;
                      }

                    case 'collapsed':
                      {
                        // Any insertions at the end of the tail list after this point
                        // should be invisible. If there are already mounted boundaries
                        // anything before them are not considered for collapsing.
                        // Therefore we need to go through the whole tail to find if
                        // there are any.
                        var _tailNode = renderState.tail;
                        var _lastTailNode = null;

                        while (_tailNode !== null) {
                          if (_tailNode.alternate !== null) {
                            _lastTailNode = _tailNode;
                          }

                          _tailNode = _tailNode.sibling;
                        } // Next we're simply going to delete all insertions after the
                        // last rendered item.


                        if (_lastTailNode === null) {
                          // All remaining items in the tail are insertions.
                          if (!hasRenderedATailFallback && renderState.tail !== null) {
                            // We suspended during the head. We want to show at least one
                            // row at the tail. So we'll keep on and cut off the rest.
                            renderState.tail.sibling = null;
                          } else {
                            renderState.tail = null;
                          }
                        } else {
                          // Detach the insertion after the last node that was already
                          // inserted.
                          _lastTailNode.sibling = null;
                        }

                        break;
                      }
                  }
                }

                function completeWork(current, workInProgress, renderLanes) {
                  var newProps = workInProgress.pendingProps;

                  switch (workInProgress.tag) {
                    case IndeterminateComponent:
                    case LazyComponent:
                    case SimpleMemoComponent:
                    case FunctionComponent:
                    case ForwardRef:
                    case Fragment:
                    case Mode:
                    case Profiler:
                    case ContextConsumer:
                    case MemoComponent:
                      return null;

                    case ClassComponent:
                      {
                        var Component = workInProgress.type;

                        if (isContextProvider(Component)) {
                          popContext(workInProgress);
                        }

                        return null;
                      }

                    case HostRoot:
                      {
                        popHostContainer(workInProgress);
                        popTopLevelContextObject(workInProgress);
                        resetWorkInProgressVersions();
                        var fiberRoot = workInProgress.stateNode;

                        if (fiberRoot.pendingContext) {
                          fiberRoot.context = fiberRoot.pendingContext;
                          fiberRoot.pendingContext = null;
                        }

                        if (current === null || current.child === null) {
                          // If we hydrated, pop so that we can delete any remaining children
                          // that weren't hydrated.
                          var wasHydrated = popHydrationState(workInProgress);

                          if (wasHydrated) {
                            // If we hydrated, then we'll need to schedule an update for
                            // the commit side-effects on the root.
                            markUpdate(workInProgress);
                          } else if (!fiberRoot.hydrate) {
                            // Schedule an effect to clear this container at the start of the next commit.
                            // This handles the case of React rendering into a container with previous children.
                            // It's also safe to do for updates too, because current.child would only be null
                            // if the previous render was null (so the the container would already be empty).
                            workInProgress.flags |= Snapshot;
                          }
                        }

                        updateHostContainer(workInProgress);
                        return null;
                      }

                    case HostComponent:
                      {
                        popHostContext(workInProgress);
                        var rootContainerInstance = getRootHostContainer();
                        var type = workInProgress.type;

                        if (current !== null && workInProgress.stateNode != null) {
                          updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

                          if (current.ref !== workInProgress.ref) {
                            markRef$1(workInProgress);
                          }
                        } else {
                          if (!newProps) {
                            if (!(workInProgress.stateNode !== null)) {
                              {
                                throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                              }
                            } // This can happen when we abort work.


                            return null;
                          }

                          var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
                          // "stack" as the parent. Then append children as we go in beginWork
                          // or completeWork depending on whether we want to add them top->down or
                          // bottom->up. Top->down is faster in IE11.

                          var _wasHydrated = popHydrationState(workInProgress);

                          if (_wasHydrated) {
                            // TODO: Move this and createInstance step into the beginPhase
                            // to consolidate.
                            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
                              // If changes to the hydrated node need to be applied at the
                              // commit-phase we mark this as such.
                              markUpdate(workInProgress);
                            }
                          } else {
                            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
                            appendAllChildren(instance, workInProgress, false, false);
                            workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.
                            // (eg DOM renderer supports auto-focus for certain elements).
                            // Make sure such renderers get scheduled for later work.

                            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                              markUpdate(workInProgress);
                            }
                          }

                          if (workInProgress.ref !== null) {
                            // If there is a ref on a host node we need to schedule a callback
                            markRef$1(workInProgress);
                          }
                        }

                        return null;
                      }

                    case HostText:
                      {
                        var newText = newProps;

                        if (current && workInProgress.stateNode != null) {
                          var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
                          // to schedule a side-effect to do the updates.

                          updateHostText$1(current, workInProgress, oldText, newText);
                        } else {
                          if (typeof newText !== 'string') {
                            if (!(workInProgress.stateNode !== null)) {
                              {
                                throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                              }
                            } // This can happen when we abort work.
                          }

                          var _rootContainerInstance = getRootHostContainer();

                          var _currentHostContext = getHostContext();

                          var _wasHydrated2 = popHydrationState(workInProgress);

                          if (_wasHydrated2) {
                            if (prepareToHydrateHostTextInstance(workInProgress)) {
                              markUpdate(workInProgress);
                            }
                          } else {
                            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
                          }
                        }

                        return null;
                      }

                    case SuspenseComponent:
                      {
                        popSuspenseContext(workInProgress);
                        var nextState = workInProgress.memoizedState;

                        if ((workInProgress.flags & DidCapture) !== NoFlags) {
                          // Something suspended. Re-render with the fallback children.
                          workInProgress.lanes = renderLanes; // Do not reset the effect list.

                          if ((workInProgress.mode & ProfileMode) !== NoMode) {
                            transferActualDuration(workInProgress);
                          }

                          return workInProgress;
                        }

                        var nextDidTimeout = nextState !== null;
                        var prevDidTimeout = false;

                        if (current === null) {
                          if (workInProgress.memoizedProps.fallback !== undefined) {
                            popHydrationState(workInProgress);
                          }
                        } else {
                          var prevState = current.memoizedState;
                          prevDidTimeout = prevState !== null;
                        }

                        if (nextDidTimeout && !prevDidTimeout) {
                          // If this subtreee is running in blocking mode we can suspend,
                          // otherwise we won't suspend.
                          // TODO: This will still suspend a synchronous tree if anything
                          // in the concurrent tree already suspended during this render.
                          // This is a known bug.
                          if ((workInProgress.mode & BlockingMode) !== NoMode) {
                            // TODO: Move this back to throwException because this is too late
                            // if this is a large tree which is common for initial loads. We
                            // don't know if we should restart a render or not until we get
                            // this marker, and this is too late.
                            // If this render already had a ping or lower pri updates,
                            // and this is the first time we know we're going to suspend we
                            // should be able to immediately restart from within throwException.
                            var hasInvisibleChildContext = current === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;

                            if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                              // If this was in an invisible tree or a new render, then showing
                              // this boundary is ok.
                              renderDidSuspend();
                            } else {
                              // Otherwise, we're going to have to hide content so we should
                              // suspend for longer if possible.
                              renderDidSuspendDelayIfPossible();
                            }
                          }
                        }

                        {
                          // TODO: Only schedule updates if these values are non equal, i.e. it changed.
                          if (nextDidTimeout || prevDidTimeout) {
                            // If this boundary just timed out, schedule an effect to attach a
                            // retry listener to the promise. This flag is also used to hide the
                            // primary children. In mutation mode, we also need the flag to
                            // *unhide* children that were previously hidden, so check if this
                            // is currently timed out, too.
                            workInProgress.flags |= Update;
                          }
                        }

                        return null;
                      }

                    case HostPortal:
                      popHostContainer(workInProgress);
                      updateHostContainer(workInProgress);

                      if (current === null) {
                        preparePortalMount(workInProgress.stateNode.containerInfo);
                      }

                      return null;

                    case ContextProvider:
                      // Pop provider fiber
                      popProvider(workInProgress);
                      return null;

                    case IncompleteClassComponent:
                      {
                        // Same as class component case. I put it down here so that the tags are
                        // sequential to ensure this switch is compiled to a jump table.
                        var _Component = workInProgress.type;

                        if (isContextProvider(_Component)) {
                          popContext(workInProgress);
                        }

                        return null;
                      }

                    case SuspenseListComponent:
                      {
                        popSuspenseContext(workInProgress);
                        var renderState = workInProgress.memoizedState;

                        if (renderState === null) {
                          // We're running in the default, "independent" mode.
                          // We don't do anything in this mode.
                          return null;
                        }

                        var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
                        var renderedTail = renderState.rendering;

                        if (renderedTail === null) {
                          // We just rendered the head.
                          if (!didSuspendAlready) {
                            // This is the first pass. We need to figure out if anything is still
                            // suspended in the rendered set.
                            // If new content unsuspended, but there's still some content that
                            // didn't. Then we need to do a second pass that forces everything
                            // to keep showing their fallbacks.
                            // We might be suspended if something in this render pass suspended, or
                            // something in the previous committed pass suspended. Otherwise,
                            // there's no chance so we can skip the expensive call to
                            // findFirstSuspended.
                            var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);

                            if (!cannotBeSuspended) {
                              var row = workInProgress.child;

                              while (row !== null) {
                                var suspended = findFirstSuspended(row);

                                if (suspended !== null) {
                                  didSuspendAlready = true;
                                  workInProgress.flags |= DidCapture;
                                  cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
                                  // part of the second pass. In that case nothing will subscribe to
                                  // its thennables. Instead, we'll transfer its thennables to the
                                  // SuspenseList so that it can retry if they resolve.
                                  // There might be multiple of these in the list but since we're
                                  // going to wait for all of them anyway, it doesn't really matter
                                  // which ones gets to ping. In theory we could get clever and keep
                                  // track of how many dependencies remain but it gets tricky because
                                  // in the meantime, we can add/remove/change items and dependencies.
                                  // We might bail out of the loop before finding any but that
                                  // doesn't matter since that means that the other boundaries that
                                  // we did find already has their listeners attached.

                                  var newThennables = suspended.updateQueue;

                                  if (newThennables !== null) {
                                    workInProgress.updateQueue = newThennables;
                                    workInProgress.flags |= Update;
                                  } // Rerender the whole list, but this time, we'll force fallbacks
                                  // to stay in place.
                                  // Reset the effect list before doing the second pass since that's now invalid.


                                  if (renderState.lastEffect === null) {
                                    workInProgress.firstEffect = null;
                                  }

                                  workInProgress.lastEffect = renderState.lastEffect; // Reset the child fibers to their original state.

                                  resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately
                                  // rerender the children.

                                  pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                                  return workInProgress.child;
                                }

                                row = row.sibling;
                              }
                            }

                            if (renderState.tail !== null && now() > getRenderTargetTime()) {
                              // We have already passed our CPU deadline but we still have rows
                              // left in the tail. We'll just give up further attempts to render
                              // the main content and only render fallbacks.
                              workInProgress.flags |= DidCapture;
                              didSuspendAlready = true;
                              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                              // to get it started back up to attempt the next item. While in terms
                              // of priority this work has the same priority as this current render,
                              // it's not part of the same transition once the transition has
                              // committed. If it's sync, we still want to yield so that it can be
                              // painted. Conceptually, this is really the same as pinging.
                              // We can use any RetryLane even if it's the one currently rendering
                              // since we're leaving it behind on this node.

                              workInProgress.lanes = SomeRetryLane;

                              {
                                markSpawnedWork(SomeRetryLane);
                              }
                            }
                          } else {
                            cutOffTailIfNeeded(renderState, false);
                          } // Next we're going to render the tail.
                        } else {
                          // Append the rendered row to the child list.
                          if (!didSuspendAlready) {
                            var _suspended = findFirstSuspended(renderedTail);

                            if (_suspended !== null) {
                              workInProgress.flags |= DidCapture;
                              didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
                              // get lost if this row ends up dropped during a second pass.

                              var _newThennables = _suspended.updateQueue;

                              if (_newThennables !== null) {
                                workInProgress.updateQueue = _newThennables;
                                workInProgress.flags |= Update;
                              }

                              cutOffTailIfNeeded(renderState, true); // This might have been modified.

                              if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.
                              ) {
                                  // We need to delete the row we just rendered.
                                  // Reset the effect list to what it was before we rendered this
                                  // child. The nested children have already appended themselves.
                                  var lastEffect = workInProgress.lastEffect = renderState.lastEffect; // Remove any effects that were appended after this point.

                                  if (lastEffect !== null) {
                                    lastEffect.nextEffect = null;
                                  } // We're done.


                                  return null;
                                }
                            } else if ( // The time it took to render last row is greater than the remaining
                            // time we have to render. So rendering one more row would likely
                            // exceed it.
                            now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {
                              // We have now passed our CPU deadline and we'll just give up further
                              // attempts to render the main content and only render fallbacks.
                              // The assumption is that this is usually faster.
                              workInProgress.flags |= DidCapture;
                              didSuspendAlready = true;
                              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                              // to get it started back up to attempt the next item. While in terms
                              // of priority this work has the same priority as this current render,
                              // it's not part of the same transition once the transition has
                              // committed. If it's sync, we still want to yield so that it can be
                              // painted. Conceptually, this is really the same as pinging.
                              // We can use any RetryLane even if it's the one currently rendering
                              // since we're leaving it behind on this node.

                              workInProgress.lanes = SomeRetryLane;

                              {
                                markSpawnedWork(SomeRetryLane);
                              }
                            }
                          }

                          if (renderState.isBackwards) {
                            // The effect list of the backwards tail will have been added
                            // to the end. This breaks the guarantee that life-cycles fire in
                            // sibling order but that isn't a strong guarantee promised by React.
                            // Especially since these might also just pop in during future commits.
                            // Append to the beginning of the list.
                            renderedTail.sibling = workInProgress.child;
                            workInProgress.child = renderedTail;
                          } else {
                            var previousSibling = renderState.last;

                            if (previousSibling !== null) {
                              previousSibling.sibling = renderedTail;
                            } else {
                              workInProgress.child = renderedTail;
                            }

                            renderState.last = renderedTail;
                          }
                        }

                        if (renderState.tail !== null) {
                          // We still have tail rows to render.
                          // Pop a row.
                          var next = renderState.tail;
                          renderState.rendering = next;
                          renderState.tail = next.sibling;
                          renderState.lastEffect = workInProgress.lastEffect;
                          renderState.renderingStartTime = now();
                          next.sibling = null; // Restore the context.
                          // TODO: We can probably just avoid popping it instead and only
                          // setting it the first time we go from not suspended to suspended.

                          var suspenseContext = suspenseStackCursor.current;

                          if (didSuspendAlready) {
                            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                          } else {
                            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                          }

                          pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.

                          return next;
                        }

                        return null;
                      }

                    case FundamentalComponent:
                      {

                        break;
                      }

                    case ScopeComponent:
                      {

                        break;
                      }

                    case Block:

                      break;

                    case OffscreenComponent:
                    case LegacyHiddenComponent:
                      {
                        popRenderLanes(workInProgress);

                        if (current !== null) {
                          var _nextState = workInProgress.memoizedState;
                          var _prevState = current.memoizedState;
                          var prevIsHidden = _prevState !== null;
                          var nextIsHidden = _nextState !== null;

                          if (prevIsHidden !== nextIsHidden && newProps.mode !== 'unstable-defer-without-hiding') {
                            workInProgress.flags |= Update;
                          }
                        }

                        return null;
                      }
                  }

                  {
                    {
                      throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                }

                function unwindWork(workInProgress, renderLanes) {
                  switch (workInProgress.tag) {
                    case ClassComponent:
                      {
                        var Component = workInProgress.type;

                        if (isContextProvider(Component)) {
                          popContext(workInProgress);
                        }

                        var flags = workInProgress.flags;

                        if (flags & ShouldCapture) {
                          workInProgress.flags = flags & ~ShouldCapture | DidCapture;

                          if ((workInProgress.mode & ProfileMode) !== NoMode) {
                            transferActualDuration(workInProgress);
                          }

                          return workInProgress;
                        }

                        return null;
                      }

                    case HostRoot:
                      {
                        popHostContainer(workInProgress);
                        popTopLevelContextObject(workInProgress);
                        resetWorkInProgressVersions();
                        var _flags = workInProgress.flags;

                        if (!((_flags & DidCapture) === NoFlags)) {
                          {
                            throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                          }
                        }

                        workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
                        return workInProgress;
                      }

                    case HostComponent:
                      {
                        // TODO: popHydrationState
                        popHostContext(workInProgress);
                        return null;
                      }

                    case SuspenseComponent:
                      {
                        popSuspenseContext(workInProgress);

                        var _flags2 = workInProgress.flags;

                        if (_flags2 & ShouldCapture) {
                          workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.

                          if ((workInProgress.mode & ProfileMode) !== NoMode) {
                            transferActualDuration(workInProgress);
                          }

                          return workInProgress;
                        }

                        return null;
                      }

                    case SuspenseListComponent:
                      {
                        popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
                        // caught by a nested boundary. If not, it should bubble through.

                        return null;
                      }

                    case HostPortal:
                      popHostContainer(workInProgress);
                      return null;

                    case ContextProvider:
                      popProvider(workInProgress);
                      return null;

                    case OffscreenComponent:
                    case LegacyHiddenComponent:
                      popRenderLanes(workInProgress);
                      return null;

                    default:
                      return null;
                  }
                }

                function unwindInterruptedWork(interruptedWork) {
                  switch (interruptedWork.tag) {
                    case ClassComponent:
                      {
                        var childContextTypes = interruptedWork.type.childContextTypes;

                        if (childContextTypes !== null && childContextTypes !== undefined) {
                          popContext(interruptedWork);
                        }

                        break;
                      }

                    case HostRoot:
                      {
                        popHostContainer(interruptedWork);
                        popTopLevelContextObject(interruptedWork);
                        resetWorkInProgressVersions();
                        break;
                      }

                    case HostComponent:
                      {
                        popHostContext(interruptedWork);
                        break;
                      }

                    case HostPortal:
                      popHostContainer(interruptedWork);
                      break;

                    case SuspenseComponent:
                      popSuspenseContext(interruptedWork);
                      break;

                    case SuspenseListComponent:
                      popSuspenseContext(interruptedWork);
                      break;

                    case ContextProvider:
                      popProvider(interruptedWork);
                      break;

                    case OffscreenComponent:
                    case LegacyHiddenComponent:
                      popRenderLanes(interruptedWork);
                      break;
                  }
                }

                function createCapturedValue(value, source) {
                  // If the value is an error, call this function immediately after it is thrown
                  // so the stack is accurate.
                  return {
                    value: value,
                    source: source,
                    stack: getStackByFiberInDevAndProd(source)
                  };
                }

                // This module is forked in different environments.
                // By default, return `true` to log errors to the console.
                // Forks can return `false` if this isn't desirable.
                function showErrorDialog(boundary, errorInfo) {
                  return true;
                }

                function logCapturedError(boundary, errorInfo) {
                  try {
                    var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.
                    // This enables renderers like ReactNative to better manage redbox behavior.

                    if (logError === false) {
                      return;
                    }

                    var error = errorInfo.value;

                    if (true) {
                      var source = errorInfo.source;
                      var stack = errorInfo.stack;
                      var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling
                      // `preventDefault()` in window `error` handler.
                      // We record this information as an expando on the error.

                      if (error != null && error._suppressLogging) {
                        if (boundary.tag === ClassComponent) {
                          // The error is recoverable and was silenced.
                          // Ignore it and don't print the stack addendum.
                          // This is handy for testing error boundaries without noise.
                          return;
                        } // The error is fatal. Since the silencing might have
                        // been accidental, we'll surface it anyway.
                        // However, the browser would have silenced the original error
                        // so we'll print it first, and then print the stack addendum.


                        console['error'](error); // Don't transform to our wrapper
                        // For a more detailed description of this block, see:
                        // https://github.com/facebook/react/pull/13384
                      }

                      var componentName = source ? getComponentName(source.type) : null;
                      var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
                      var errorBoundaryMessage;
                      var errorBoundaryName = getComponentName(boundary.type);

                      if (errorBoundaryName) {
                        errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                      } else {
                        errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';
                      }

                      var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
                      // We don't include the original error message and JS stack because the browser
                      // has already printed it. Even if the application swallows the error, it is still
                      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

                      console['error'](combinedMessage); // Don't transform to our wrapper
                    } else {
                      // In production, we print the error directly.
                      // This will include the message, the JS stack, and anything the browser wants to show.
                      // We pass the error object instead of custom message so that the browser displays the error natively.
                      console['error'](error); // Don't transform to our wrapper
                    }
                  } catch (e) {
                    // This method must not throw, or React internal state will get messed up.
                    // If console.error is overridden, or logCapturedError() shows a dialog that throws,
                    // we want to report this error outside of the normal stack as a last resort.
                    // https://github.com/facebook/react/issues/13188
                    setTimeout(function () {
                      throw e;
                    });
                  }
                }

                var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;

                function createRootErrorUpdate(fiber, errorInfo, lane) {
                  var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.

                  update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
                  // being called "element".

                  update.payload = {
                    element: null
                  };
                  var error = errorInfo.value;

                  update.callback = function () {
                    onUncaughtError(error);
                    logCapturedError(fiber, errorInfo);
                  };

                  return update;
                }

                function createClassErrorUpdate(fiber, errorInfo, lane) {
                  var update = createUpdate(NoTimestamp, lane);
                  update.tag = CaptureUpdate;
                  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

                  if (typeof getDerivedStateFromError === 'function') {
                    var error$1 = errorInfo.value;

                    update.payload = function () {
                      logCapturedError(fiber, errorInfo);
                      return getDerivedStateFromError(error$1);
                    };
                  }

                  var inst = fiber.stateNode;

                  if (inst !== null && typeof inst.componentDidCatch === 'function') {
                    update.callback = function callback() {
                      {
                        markFailedErrorBoundaryForHotReloading(fiber);
                      }

                      if (typeof getDerivedStateFromError !== 'function') {
                        // To preserve the preexisting retry behavior of error boundaries,
                        // we keep track of which ones already failed during this batch.
                        // This gets reset before we yield back to the browser.
                        // TODO: Warn in strict mode if getDerivedStateFromError is
                        // not defined.
                        markLegacyErrorBoundaryAsFailed(this); // Only log here if componentDidCatch is the only error boundary method defined

                        logCapturedError(fiber, errorInfo);
                      }

                      var error$1 = errorInfo.value;
                      var stack = errorInfo.stack;
                      this.componentDidCatch(error$1, {
                        componentStack: stack !== null ? stack : ''
                      });

                      {
                        if (typeof getDerivedStateFromError !== 'function') {
                          // If componentDidCatch is the only error boundary method defined,
                          // then it needs to call setState to recover from errors.
                          // If no state update is scheduled then the boundary will swallow the error.
                          if (!includesSomeLane(fiber.lanes, SyncLane)) {
                            error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentName(fiber.type) || 'Unknown');
                          }
                        }
                      }
                    };
                  } else {
                    update.callback = function () {
                      markFailedErrorBoundaryForHotReloading(fiber);
                    };
                  }

                  return update;
                }

                function attachPingListener(root, wakeable, lanes) {
                  // Attach a listener to the promise to "ping" the root and retry. But only if
                  // one does not already exist for the lanes we're currently rendering (which
                  // acts like a "thread ID" here).
                  var pingCache = root.pingCache;
                  var threadIDs;

                  if (pingCache === null) {
                    pingCache = root.pingCache = new PossiblyWeakMap$1();
                    threadIDs = new Set();
                    pingCache.set(wakeable, threadIDs);
                  } else {
                    threadIDs = pingCache.get(wakeable);

                    if (threadIDs === undefined) {
                      threadIDs = new Set();
                      pingCache.set(wakeable, threadIDs);
                    }
                  }

                  if (!threadIDs.has(lanes)) {
                    // Memoize using the thread ID to prevent redundant listeners.
                    threadIDs.add(lanes);
                    var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);
                    wakeable.then(ping, ping);
                  }
                }

                function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
                  // The source fiber did not complete.
                  sourceFiber.flags |= Incomplete; // Its effect list is no longer valid.

                  sourceFiber.firstEffect = sourceFiber.lastEffect = null;

                  if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
                    // This is a wakeable.
                    var wakeable = value;

                    if ((sourceFiber.mode & BlockingMode) === NoMode) {
                      // Reset the memoizedState to what it was before we attempted
                      // to render it.
                      var currentSource = sourceFiber.alternate;

                      if (currentSource) {
                        sourceFiber.updateQueue = currentSource.updateQueue;
                        sourceFiber.memoizedState = currentSource.memoizedState;
                        sourceFiber.lanes = currentSource.lanes;
                      } else {
                        sourceFiber.updateQueue = null;
                        sourceFiber.memoizedState = null;
                      }
                    }

                    var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext); // Schedule the nearest Suspense to re-render the timed out view.

                    var _workInProgress = returnFiber;

                    do {
                      if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                        // Found the nearest boundary.
                        // Stash the promise on the boundary fiber. If the boundary times out, we'll
                        // attach another listener to flip the boundary back to its normal state.
                        var wakeables = _workInProgress.updateQueue;

                        if (wakeables === null) {
                          var updateQueue = new Set();
                          updateQueue.add(wakeable);
                          _workInProgress.updateQueue = updateQueue;
                        } else {
                          wakeables.add(wakeable);
                        } // If the boundary is outside of blocking mode, we should *not*
                        // suspend the commit. Pretend as if the suspended component rendered
                        // null and keep rendering. In the commit phase, we'll schedule a
                        // subsequent synchronous update to re-render the Suspense.
                        //
                        // Note: It doesn't matter whether the component that suspended was
                        // inside a blocking mode tree. If the Suspense is outside of it, we
                        // should *not* suspend the commit.


                        if ((_workInProgress.mode & BlockingMode) === NoMode) {
                          _workInProgress.flags |= DidCapture;
                          sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.
                          // But we shouldn't call any lifecycle methods or callbacks. Remove
                          // all lifecycle effect tags.

                          sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);

                          if (sourceFiber.tag === ClassComponent) {
                            var currentSourceFiber = sourceFiber.alternate;

                            if (currentSourceFiber === null) {
                              // This is a new mount. Change the tag so it's not mistaken for a
                              // completed class component. For example, we should not call
                              // componentWillUnmount if it is deleted.
                              sourceFiber.tag = IncompleteClassComponent;
                            } else {
                              // When we try rendering again, we should not reuse the current fiber,
                              // since it's known to be in an inconsistent state. Use a force update to
                              // prevent a bail out.
                              var update = createUpdate(NoTimestamp, SyncLane);
                              update.tag = ForceUpdate;
                              enqueueUpdate(sourceFiber, update);
                            }
                          } // The source fiber did not complete. Mark it with Sync priority to
                          // indicate that it still has pending work.


                          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane); // Exit without suspending.

                          return;
                        } // Confirmed that the boundary is in a concurrent mode tree. Continue
                        // with the normal suspend path.
                        //
                        // After this we'll use a set of heuristics to determine whether this
                        // render pass will run to completion or restart or "suspend" the commit.
                        // The actual logic for this is spread out in different places.
                        //
                        // This first principle is that if we're going to suspend when we complete
                        // a root, then we should also restart if we get an update or ping that
                        // might unsuspend it, and vice versa. The only reason to suspend is
                        // because you think you might want to restart before committing. However,
                        // it doesn't make sense to restart only while in the period we're suspended.
                        //
                        // Restarting too aggressively is also not good because it starves out any
                        // intermediate loading state. So we use heuristics to determine when.
                        // Suspense Heuristics
                        //
                        // If nothing threw a Promise or all the same fallbacks are already showing,
                        // then don't suspend/restart.
                        //
                        // If this is an initial render of a new tree of Suspense boundaries and
                        // those trigger a fallback, then don't suspend/restart. We want to ensure
                        // that we can show the initial loading state as quickly as possible.
                        //
                        // If we hit a "Delayed" case, such as when we'd switch from content back into
                        // a fallback, then we should always suspend/restart. Transitions apply
                        // to this case. If none is defined, JND is used instead.
                        //
                        // If we're already showing a fallback and it gets "retried", allowing us to show
                        // another level, but there's still an inner boundary that would show a fallback,
                        // then we suspend/restart for 500ms since the last time we showed a fallback
                        // anywhere in the tree. This effectively throttles progressive loading into a
                        // consistent train of commits. This also gives us an opportunity to restart to
                        // get to the completed state slightly earlier.
                        //
                        // If there's ambiguity due to batching it's resolved in preference of:
                        // 1) "delayed", 2) "initial render", 3) "retry".
                        //
                        // We want to ensure that a "busy" state doesn't get force committed. We want to
                        // ensure that new initial loading states can commit as soon as possible.


                        attachPingListener(root, wakeable, rootRenderLanes);
                        _workInProgress.flags |= ShouldCapture;
                        _workInProgress.lanes = rootRenderLanes;
                        return;
                      } // This boundary already captured during this render. Continue to the next
                      // boundary.


                      _workInProgress = _workInProgress.return;
                    } while (_workInProgress !== null); // No boundary was found. Fallthrough to error mode.
                    // TODO: Use invariant so the message is stripped in prod?


                    value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.');
                  } // We didn't find a boundary that could handle this type of exception. Start
                  // over and traverse parent path again, this time treating the exception
                  // as an error.


                  renderDidError();
                  value = createCapturedValue(value, sourceFiber);
                  var workInProgress = returnFiber;

                  do {
                    switch (workInProgress.tag) {
                      case HostRoot:
                        {
                          var _errorInfo = value;
                          workInProgress.flags |= ShouldCapture;
                          var lane = pickArbitraryLane(rootRenderLanes);
                          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);

                          var _update = createRootErrorUpdate(workInProgress, _errorInfo, lane);

                          enqueueCapturedUpdate(workInProgress, _update);
                          return;
                        }

                      case ClassComponent:
                        // Capture and retry
                        var errorInfo = value;
                        var ctor = workInProgress.type;
                        var instance = workInProgress.stateNode;

                        if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                          workInProgress.flags |= ShouldCapture;

                          var _lane = pickArbitraryLane(rootRenderLanes);

                          workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state

                          var _update2 = createClassErrorUpdate(workInProgress, errorInfo, _lane);

                          enqueueCapturedUpdate(workInProgress, _update2);
                          return;
                        }

                        break;
                    }

                    workInProgress = workInProgress.return;
                  } while (workInProgress !== null);
                }

                var didWarnAboutUndefinedSnapshotBeforeUpdate = null;

                {
                  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
                }

                var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;

                var callComponentWillUnmountWithTimer = function (current, instance) {
                  instance.props = current.memoizedProps;
                  instance.state = current.memoizedState;

                  {
                    instance.componentWillUnmount();
                  }
                }; // Capture errors so they don't interrupt unmounting.


                function safelyCallComponentWillUnmount(current, instance) {
                  {
                    invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current, instance);

                    if (hasCaughtError()) {
                      var unmountError = clearCaughtError();
                      captureCommitPhaseError(current, unmountError);
                    }
                  }
                }

                function safelyDetachRef(current) {
                  var ref = current.ref;

                  if (ref !== null) {
                    if (typeof ref === 'function') {
                      {
                        invokeGuardedCallback(null, ref, null, null);

                        if (hasCaughtError()) {
                          var refError = clearCaughtError();
                          captureCommitPhaseError(current, refError);
                        }
                      }
                    } else {
                      ref.current = null;
                    }
                  }
                }

                function safelyCallDestroy(current, destroy) {
                  {
                    invokeGuardedCallback(null, destroy, null);

                    if (hasCaughtError()) {
                      var error = clearCaughtError();
                      captureCommitPhaseError(current, error);
                    }
                  }
                }

                function commitBeforeMutationLifeCycles(current, finishedWork) {
                  switch (finishedWork.tag) {
                    case FunctionComponent:
                    case ForwardRef:
                    case SimpleMemoComponent:
                    case Block:
                      {
                        return;
                      }

                    case ClassComponent:
                      {
                        if (finishedWork.flags & Snapshot) {
                          if (current !== null) {
                            var prevProps = current.memoizedProps;
                            var prevState = current.memoizedState;
                            var instance = finishedWork.stateNode; // We could update instance props and state here,
                            // but instead we rely on them being set during last render.
                            // TODO: revisit this when we implement resuming.

                            {
                              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                                if (instance.props !== finishedWork.memoizedProps) {
                                  error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                                }

                                if (instance.state !== finishedWork.memoizedState) {
                                  error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                                }
                              }
                            }

                            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);

                            {
                              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

                              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                                didWarnSet.add(finishedWork.type);

                                error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
                              }
                            }

                            instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                          }
                        }

                        return;
                      }

                    case HostRoot:
                      {
                        {
                          if (finishedWork.flags & Snapshot) {
                            var root = finishedWork.stateNode;
                            clearContainer(root.containerInfo);
                          }
                        }

                        return;
                      }

                    case HostComponent:
                    case HostText:
                    case HostPortal:
                    case IncompleteClassComponent:
                      // Nothing to do for these component types
                      return;
                  }

                  {
                    {
                      throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                }

                function commitHookEffectListUnmount(tag, finishedWork) {
                  var updateQueue = finishedWork.updateQueue;
                  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect = firstEffect;

                    do {
                      if ((effect.tag & tag) === tag) {
                        // Unmount
                        var destroy = effect.destroy;
                        effect.destroy = undefined;

                        if (destroy !== undefined) {
                          destroy();
                        }
                      }

                      effect = effect.next;
                    } while (effect !== firstEffect);
                  }
                }

                function commitHookEffectListMount(tag, finishedWork) {
                  var updateQueue = finishedWork.updateQueue;
                  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect = firstEffect;

                    do {
                      if ((effect.tag & tag) === tag) {
                        // Mount
                        var create = effect.create;
                        effect.destroy = create();

                        {
                          var destroy = effect.destroy;

                          if (destroy !== undefined && typeof destroy !== 'function') {
                            var addendum = void 0;

                            if (destroy === null) {
                              addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
                            } else if (typeof destroy.then === 'function') {
                              addendum = '\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + 'useEffect(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';
                            } else {
                              addendum = ' You returned: ' + destroy;
                            }

                            error('An effect function must not return anything besides a function, ' + 'which is used for clean-up.%s', addendum);
                          }
                        }
                      }

                      effect = effect.next;
                    } while (effect !== firstEffect);
                  }
                }

                function schedulePassiveEffects(finishedWork) {
                  var updateQueue = finishedWork.updateQueue;
                  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect = firstEffect;

                    do {
                      var _effect = effect,
                          next = _effect.next,
                          tag = _effect.tag;

                      if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
                        enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
                        enqueuePendingPassiveHookEffectMount(finishedWork, effect);
                      }

                      effect = next;
                    } while (effect !== firstEffect);
                  }
                }

                function commitLifeCycles(finishedRoot, current, finishedWork, committedLanes) {
                  switch (finishedWork.tag) {
                    case FunctionComponent:
                    case ForwardRef:
                    case SimpleMemoComponent:
                    case Block:
                      {
                        // At this point layout effects have already been destroyed (during mutation phase).
                        // This is done to prevent sibling component effects from interfering with each other,
                        // e.g. a destroy function in one component should never override a ref set
                        // by a create function in another component during the same commit.
                        {
                          commitHookEffectListMount(Layout | HasEffect, finishedWork);
                        }

                        schedulePassiveEffects(finishedWork);
                        return;
                      }

                    case ClassComponent:
                      {
                        var instance = finishedWork.stateNode;

                        if (finishedWork.flags & Update) {
                          if (current === null) {
                            // We could update instance props and state here,
                            // but instead we rely on them being set during last render.
                            // TODO: revisit this when we implement resuming.
                            {
                              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                                if (instance.props !== finishedWork.memoizedProps) {
                                  error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                                }

                                if (instance.state !== finishedWork.memoizedState) {
                                  error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                                }
                              }
                            }

                            {
                              instance.componentDidMount();
                            }
                          } else {
                            var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
                            var prevState = current.memoizedState; // We could update instance props and state here,
                            // but instead we rely on them being set during last render.
                            // TODO: revisit this when we implement resuming.

                            {
                              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                                if (instance.props !== finishedWork.memoizedProps) {
                                  error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                                }

                                if (instance.state !== finishedWork.memoizedState) {
                                  error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                                }
                              }
                            }

                            {
                              instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                            }
                          }
                        } // TODO: I think this is now always non-null by the time it reaches the
                        // commit phase. Consider removing the type check.


                        var updateQueue = finishedWork.updateQueue;

                        if (updateQueue !== null) {
                          {
                            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                              if (instance.props !== finishedWork.memoizedProps) {
                                error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                              }

                              if (instance.state !== finishedWork.memoizedState) {
                                error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                              }
                            }
                          } // We could update instance props and state here,
                          // but instead we rely on them being set during last render.
                          // TODO: revisit this when we implement resuming.


                          commitUpdateQueue(finishedWork, updateQueue, instance);
                        }

                        return;
                      }

                    case HostRoot:
                      {
                        // TODO: I think this is now always non-null by the time it reaches the
                        // commit phase. Consider removing the type check.
                        var _updateQueue = finishedWork.updateQueue;

                        if (_updateQueue !== null) {
                          var _instance = null;

                          if (finishedWork.child !== null) {
                            switch (finishedWork.child.tag) {
                              case HostComponent:
                                _instance = getPublicInstance(finishedWork.child.stateNode);
                                break;

                              case ClassComponent:
                                _instance = finishedWork.child.stateNode;
                                break;
                            }
                          }

                          commitUpdateQueue(finishedWork, _updateQueue, _instance);
                        }

                        return;
                      }

                    case HostComponent:
                      {
                        var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
                        // (eg DOM renderer may schedule auto-focus for inputs and form controls).
                        // These effects should only be committed when components are first mounted,
                        // aka when there is no current/alternate.

                        if (current === null && finishedWork.flags & Update) {
                          var type = finishedWork.type;
                          var props = finishedWork.memoizedProps;
                          commitMount(_instance2, type, props);
                        }

                        return;
                      }

                    case HostText:
                      {
                        // We have no life-cycles associated with text.
                        return;
                      }

                    case HostPortal:
                      {
                        // We have no life-cycles associated with portals.
                        return;
                      }

                    case Profiler:
                      {
                        {
                          var _finishedWork$memoize2 = finishedWork.memoizedProps,
                              onCommit = _finishedWork$memoize2.onCommit,
                              onRender = _finishedWork$memoize2.onRender;
                          var effectDuration = finishedWork.stateNode.effectDuration;
                          var commitTime = getCommitTime();

                          if (typeof onRender === 'function') {
                            {
                              onRender(finishedWork.memoizedProps.id, current === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime, finishedRoot.memoizedInteractions);
                            }
                          }
                        }

                        return;
                      }

                    case SuspenseComponent:
                      {
                        commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                        return;
                      }

                    case SuspenseListComponent:
                    case IncompleteClassComponent:
                    case FundamentalComponent:
                    case ScopeComponent:
                    case OffscreenComponent:
                    case LegacyHiddenComponent:
                      return;
                  }

                  {
                    {
                      throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                }

                function hideOrUnhideAllChildren(finishedWork, isHidden) {
                  {
                    // We only have the top Fiber that was inserted but we need to recurse down its
                    // children to find all the terminal nodes.
                    var node = finishedWork;

                    while (true) {
                      if (node.tag === HostComponent) {
                        var instance = node.stateNode;

                        if (isHidden) {
                          hideInstance(instance);
                        } else {
                          unhideInstance(node.stateNode, node.memoizedProps);
                        }
                      } else if (node.tag === HostText) {
                        var _instance3 = node.stateNode;

                        if (isHidden) {
                          hideTextInstance(_instance3);
                        } else {
                          unhideTextInstance(_instance3, node.memoizedProps);
                        }
                      } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;else if (node.child !== null) {
                        node.child.return = node;
                        node = node.child;
                        continue;
                      }

                      if (node === finishedWork) {
                        return;
                      }

                      while (node.sibling === null) {
                        if (node.return === null || node.return === finishedWork) {
                          return;
                        }

                        node = node.return;
                      }

                      node.sibling.return = node.return;
                      node = node.sibling;
                    }
                  }
                }

                function commitAttachRef(finishedWork) {
                  var ref = finishedWork.ref;

                  if (ref !== null) {
                    var instance = finishedWork.stateNode;
                    var instanceToUse;

                    switch (finishedWork.tag) {
                      case HostComponent:
                        instanceToUse = getPublicInstance(instance);
                        break;

                      default:
                        instanceToUse = instance;
                    } // Moved outside to ensure DCE works with this flag

                    if (typeof ref === 'function') {
                      ref(instanceToUse);
                    } else {
                      {
                        if (!ref.hasOwnProperty('current')) {
                          error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().', getComponentName(finishedWork.type));
                        }
                      }

                      ref.current = instanceToUse;
                    }
                  }
                }

                function commitDetachRef(current) {
                  var currentRef = current.ref;

                  if (currentRef !== null) {
                    if (typeof currentRef === 'function') {
                      currentRef(null);
                    } else {
                      currentRef.current = null;
                    }
                  }
                } // User-originating errors (lifecycles and refs) should not interrupt
                // deletion, so don't let them throw. Host-originating errors should
                // interrupt deletion, so it's okay


                function commitUnmount(finishedRoot, current, renderPriorityLevel) {
                  onCommitUnmount(current);

                  switch (current.tag) {
                    case FunctionComponent:
                    case ForwardRef:
                    case MemoComponent:
                    case SimpleMemoComponent:
                    case Block:
                      {
                        var updateQueue = current.updateQueue;

                        if (updateQueue !== null) {
                          var lastEffect = updateQueue.lastEffect;

                          if (lastEffect !== null) {
                            var firstEffect = lastEffect.next;
                            var effect = firstEffect;

                            do {
                              var _effect2 = effect,
                                  destroy = _effect2.destroy,
                                  tag = _effect2.tag;

                              if (destroy !== undefined) {
                                if ((tag & Passive$1) !== NoFlags$1) {
                                  enqueuePendingPassiveHookEffectUnmount(current, effect);
                                } else {
                                  {
                                    safelyCallDestroy(current, destroy);
                                  }
                                }
                              }

                              effect = effect.next;
                            } while (effect !== firstEffect);
                          }
                        }

                        return;
                      }

                    case ClassComponent:
                      {
                        safelyDetachRef(current);
                        var instance = current.stateNode;

                        if (typeof instance.componentWillUnmount === 'function') {
                          safelyCallComponentWillUnmount(current, instance);
                        }

                        return;
                      }

                    case HostComponent:
                      {
                        safelyDetachRef(current);
                        return;
                      }

                    case HostPortal:
                      {
                        // TODO: this is recursive.
                        // We are also not using this parent because
                        // the portal will get pushed immediately.
                        {
                          unmountHostComponents(finishedRoot, current);
                        }

                        return;
                      }

                    case FundamentalComponent:
                      {

                        return;
                      }

                    case DehydratedFragment:
                      {

                        return;
                      }

                    case ScopeComponent:
                      {

                        return;
                      }
                  }
                }

                function commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {
                  // While we're inside a removed host node we don't want to call
                  // removeChild on the inner nodes because they're removed by the top
                  // call anyway. We also want to call componentWillUnmount on all
                  // composites before this host node is removed from the tree. Therefore
                  // we do an inner loop while we're still inside the host node.
                  var node = root;

                  while (true) {
                    commitUnmount(finishedRoot, node); // Visit children because they may contain more composite or host nodes.
                    // Skip portals because commitUnmount() currently visits them recursively.

                    if (node.child !== null && // If we use mutation we drill down into portals using commitUnmount above.
                    // If we don't use mutation we drill down into portals here instead.
                    node.tag !== HostPortal) {
                      node.child.return = node;
                      node = node.child;
                      continue;
                    }

                    if (node === root) {
                      return;
                    }

                    while (node.sibling === null) {
                      if (node.return === null || node.return === root) {
                        return;
                      }

                      node = node.return;
                    }

                    node.sibling.return = node.return;
                    node = node.sibling;
                  }
                }

                function detachFiberMutation(fiber) {
                  // Cut off the return pointers to disconnect it from the tree. Ideally, we
                  // should clear the child pointer of the parent alternate to let this
                  // get GC:ed but we don't know which for sure which parent is the current
                  // one so we'll settle for GC:ing the subtree of this child. This child
                  // itself will be GC:ed when the parent updates the next time.
                  // Note: we cannot null out sibling here, otherwise it can cause issues
                  // with findDOMNode and how it requires the sibling field to carry out
                  // traversal in a later effect. See PR #16820. We now clear the sibling
                  // field after effects, see: detachFiberAfterEffects.
                  //
                  // Don't disconnect stateNode now; it will be detached in detachFiberAfterEffects.
                  // It may be required if the current component is an error boundary,
                  // and one of its descendants throws while unmounting a passive effect.
                  fiber.alternate = null;
                  fiber.child = null;
                  fiber.dependencies = null;
                  fiber.firstEffect = null;
                  fiber.lastEffect = null;
                  fiber.memoizedProps = null;
                  fiber.memoizedState = null;
                  fiber.pendingProps = null;
                  fiber.return = null;
                  fiber.updateQueue = null;

                  {
                    fiber._debugOwner = null;
                  }
                }

                function getHostParentFiber(fiber) {
                  var parent = fiber.return;

                  while (parent !== null) {
                    if (isHostParent(parent)) {
                      return parent;
                    }

                    parent = parent.return;
                  }

                  {
                    {
                      throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                }

                function isHostParent(fiber) {
                  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
                }

                function getHostSibling(fiber) {
                  // We're going to search forward into the tree until we find a sibling host
                  // node. Unfortunately, if multiple insertions are done in a row we have to
                  // search past them. This leads to exponential search for the next sibling.
                  // TODO: Find a more efficient way to do this.
                  var node = fiber;

                  siblings: while (true) {
                    // If we didn't find anything, let's try the next sibling.
                    while (node.sibling === null) {
                      if (node.return === null || isHostParent(node.return)) {
                        // If we pop out of the root or hit the parent the fiber we are the
                        // last sibling.
                        return null;
                      }

                      node = node.return;
                    }

                    node.sibling.return = node.return;
                    node = node.sibling;

                    while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                      // If it is not host node and, we might have a host node inside it.
                      // Try to search down until we find one.
                      if (node.flags & Placement) {
                        // If we don't have a child, try the siblings instead.
                        continue siblings;
                      } // If we don't have a child, try the siblings instead.
                      // We also skip portals because they are not part of this host tree.


                      if (node.child === null || node.tag === HostPortal) {
                        continue siblings;
                      } else {
                        node.child.return = node;
                        node = node.child;
                      }
                    } // Check if this host node is stable or about to be placed.


                    if (!(node.flags & Placement)) {
                      // Found it!
                      return node.stateNode;
                    }
                  }
                }

                function commitPlacement(finishedWork) {

                  var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.

                  var parent;
                  var isContainer;
                  var parentStateNode = parentFiber.stateNode;

                  switch (parentFiber.tag) {
                    case HostComponent:
                      parent = parentStateNode;
                      isContainer = false;
                      break;

                    case HostRoot:
                      parent = parentStateNode.containerInfo;
                      isContainer = true;
                      break;

                    case HostPortal:
                      parent = parentStateNode.containerInfo;
                      isContainer = true;
                      break;

                    case FundamentalComponent:

                    // eslint-disable-next-line-no-fallthrough

                    default:
                      {
                        {
                          throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
                        }
                      }

                  }

                  if (parentFiber.flags & ContentReset) {
                    // Reset the text content of the parent before doing any insertions
                    resetTextContent(parent); // Clear ContentReset from the effect tag

                    parentFiber.flags &= ~ContentReset;
                  }

                  var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
                  // children to find all the terminal nodes.

                  if (isContainer) {
                    insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
                  } else {
                    insertOrAppendPlacementNode(finishedWork, before, parent);
                  }
                }

                function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
                  var tag = node.tag;
                  var isHost = tag === HostComponent || tag === HostText;

                  if (isHost || enableFundamentalAPI) {
                    var stateNode = isHost ? node.stateNode : node.stateNode.instance;

                    if (before) {
                      insertInContainerBefore(parent, stateNode, before);
                    } else {
                      appendChildToContainer(parent, stateNode);
                    }
                  } else if (tag === HostPortal) ;else {
                    var child = node.child;

                    if (child !== null) {
                      insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                      var sibling = child.sibling;

                      while (sibling !== null) {
                        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                        sibling = sibling.sibling;
                      }
                    }
                  }
                }

                function insertOrAppendPlacementNode(node, before, parent) {
                  var tag = node.tag;
                  var isHost = tag === HostComponent || tag === HostText;

                  if (isHost || enableFundamentalAPI) {
                    var stateNode = isHost ? node.stateNode : node.stateNode.instance;

                    if (before) {
                      insertBefore(parent, stateNode, before);
                    } else {
                      appendChild(parent, stateNode);
                    }
                  } else if (tag === HostPortal) ;else {
                    var child = node.child;

                    if (child !== null) {
                      insertOrAppendPlacementNode(child, before, parent);
                      var sibling = child.sibling;

                      while (sibling !== null) {
                        insertOrAppendPlacementNode(sibling, before, parent);
                        sibling = sibling.sibling;
                      }
                    }
                  }
                }

                function unmountHostComponents(finishedRoot, current, renderPriorityLevel) {
                  // We only have the top Fiber that was deleted but we need to recurse down its
                  // children to find all the terminal nodes.
                  var node = current; // Each iteration, currentParent is populated with node's host parent if not
                  // currentParentIsValid.

                  var currentParentIsValid = false; // Note: these two variables *must* always be updated together.

                  var currentParent;
                  var currentParentIsContainer;

                  while (true) {
                    if (!currentParentIsValid) {
                      var parent = node.return;

                      findParent: while (true) {
                        if (!(parent !== null)) {
                          {
                            throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                          }
                        }

                        var parentStateNode = parent.stateNode;

                        switch (parent.tag) {
                          case HostComponent:
                            currentParent = parentStateNode;
                            currentParentIsContainer = false;
                            break findParent;

                          case HostRoot:
                            currentParent = parentStateNode.containerInfo;
                            currentParentIsContainer = true;
                            break findParent;

                          case HostPortal:
                            currentParent = parentStateNode.containerInfo;
                            currentParentIsContainer = true;
                            break findParent;

                        }

                        parent = parent.return;
                      }

                      currentParentIsValid = true;
                    }

                    if (node.tag === HostComponent || node.tag === HostText) {
                      commitNestedUnmounts(finishedRoot, node); // After all the children have unmounted, it is now safe to remove the
                      // node from the tree.

                      if (currentParentIsContainer) {
                        removeChildFromContainer(currentParent, node.stateNode);
                      } else {
                        removeChild(currentParent, node.stateNode);
                      } // Don't visit children because we already visited them.
                    } else if (node.tag === HostPortal) {
                      if (node.child !== null) {
                        // When we go into a portal, it becomes the parent to remove from.
                        // We will reassign it back when we pop the portal on the way up.
                        currentParent = node.stateNode.containerInfo;
                        currentParentIsContainer = true; // Visit children because portals might contain host components.

                        node.child.return = node;
                        node = node.child;
                        continue;
                      }
                    } else {
                      commitUnmount(finishedRoot, node); // Visit children because we may find more host components below.

                      if (node.child !== null) {
                        node.child.return = node;
                        node = node.child;
                        continue;
                      }
                    }

                    if (node === current) {
                      return;
                    }

                    while (node.sibling === null) {
                      if (node.return === null || node.return === current) {
                        return;
                      }

                      node = node.return;

                      if (node.tag === HostPortal) {
                        // When we go out of the portal, we need to restore the parent.
                        // Since we don't keep a stack of them, we will search for it.
                        currentParentIsValid = false;
                      }
                    }

                    node.sibling.return = node.return;
                    node = node.sibling;
                  }
                }

                function commitDeletion(finishedRoot, current, renderPriorityLevel) {
                  {
                    // Recursively delete all host nodes from the parent.
                    // Detach refs and call componentWillUnmount() on the whole subtree.
                    unmountHostComponents(finishedRoot, current);
                  }

                  var alternate = current.alternate;
                  detachFiberMutation(current);

                  if (alternate !== null) {
                    detachFiberMutation(alternate);
                  }
                }

                function commitWork(current, finishedWork) {

                  switch (finishedWork.tag) {
                    case FunctionComponent:
                    case ForwardRef:
                    case MemoComponent:
                    case SimpleMemoComponent:
                    case Block:
                      {
                        // Layout effects are destroyed during the mutation phase so that all
                        // destroy functions for all fibers are called before any create functions.
                        // This prevents sibling component effects from interfering with each other,
                        // e.g. a destroy function in one component should never override a ref set
                        // by a create function in another component during the same commit.
                        {
                          commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
                        }

                        return;
                      }

                    case ClassComponent:
                      {
                        return;
                      }

                    case HostComponent:
                      {
                        var instance = finishedWork.stateNode;

                        if (instance != null) {
                          // Commit the work prepared earlier.
                          var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                          // as the newProps. The updatePayload will contain the real change in
                          // this case.

                          var oldProps = current !== null ? current.memoizedProps : newProps;
                          var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.

                          var updatePayload = finishedWork.updateQueue;
                          finishedWork.updateQueue = null;

                          if (updatePayload !== null) {
                            commitUpdate(instance, updatePayload, type, oldProps, newProps);
                          }
                        }

                        return;
                      }

                    case HostText:
                      {
                        if (!(finishedWork.stateNode !== null)) {
                          {
                            throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                          }
                        }

                        var textInstance = finishedWork.stateNode;
                        var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                        // as the newProps. The updatePayload will contain the real change in
                        // this case.

                        var oldText = current !== null ? current.memoizedProps : newText;
                        commitTextUpdate(textInstance, oldText, newText);
                        return;
                      }

                    case HostRoot:
                      {
                        {
                          var _root = finishedWork.stateNode;

                          if (_root.hydrate) {
                            // We've just hydrated. No need to hydrate again.
                            _root.hydrate = false;
                            commitHydratedContainer(_root.containerInfo);
                          }
                        }

                        return;
                      }

                    case Profiler:
                      {
                        return;
                      }

                    case SuspenseComponent:
                      {
                        commitSuspenseComponent(finishedWork);
                        attachSuspenseRetryListeners(finishedWork);
                        return;
                      }

                    case SuspenseListComponent:
                      {
                        attachSuspenseRetryListeners(finishedWork);
                        return;
                      }

                    case IncompleteClassComponent:
                      {
                        return;
                      }

                    case FundamentalComponent:
                      {

                        break;
                      }

                    case ScopeComponent:
                      {

                        break;
                      }

                    case OffscreenComponent:
                    case LegacyHiddenComponent:
                      {
                        var newState = finishedWork.memoizedState;
                        var isHidden = newState !== null;
                        hideOrUnhideAllChildren(finishedWork, isHidden);
                        return;
                      }
                  }

                  {
                    {
                      throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                }

                function commitSuspenseComponent(finishedWork) {
                  var newState = finishedWork.memoizedState;

                  if (newState !== null) {
                    markCommitTimeOfFallback();

                    {
                      // Hide the Offscreen component that contains the primary children. TODO:
                      // Ideally, this effect would have been scheduled on the Offscreen fiber
                      // itself. That's how unhiding works: the Offscreen component schedules an
                      // effect on itself. However, in this case, the component didn't complete,
                      // so the fiber was never added to the effect list in the normal path. We
                      // could have appended it to the effect list in the Suspense component's
                      // second pass, but doing it this way is less complicated. This would be
                      // simpler if we got rid of the effect list and traversed the tree, like
                      // we're planning to do.
                      var primaryChildParent = finishedWork.child;
                      hideOrUnhideAllChildren(primaryChildParent, true);
                    }
                  }
                }

                function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {

                  var newState = finishedWork.memoizedState;

                  if (newState === null) {
                    var current = finishedWork.alternate;

                    if (current !== null) {
                      var prevState = current.memoizedState;

                      if (prevState !== null) {
                        var suspenseInstance = prevState.dehydrated;

                        if (suspenseInstance !== null) {
                          commitHydratedSuspenseInstance(suspenseInstance);
                        }
                      }
                    }
                  }
                }

                function attachSuspenseRetryListeners(finishedWork) {
                  // If this boundary just timed out, then it will have a set of wakeables.
                  // For each wakeable, attach a listener so that when it resolves, React
                  // attempts to re-render the boundary in the primary (pre-timeout) state.
                  var wakeables = finishedWork.updateQueue;

                  if (wakeables !== null) {
                    finishedWork.updateQueue = null;
                    var retryCache = finishedWork.stateNode;

                    if (retryCache === null) {
                      retryCache = finishedWork.stateNode = new PossiblyWeakSet();
                    }

                    wakeables.forEach(function (wakeable) {
                      // Memoize using the boundary fiber to prevent redundant listeners.
                      var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);

                      if (!retryCache.has(wakeable)) {
                        {
                          if (wakeable.__reactDoNotTraceInteractions !== true) {
                            retry = tracing.unstable_wrap(retry);
                          }
                        }

                        retryCache.add(wakeable);
                        wakeable.then(retry, retry);
                      }
                    });
                  }
                } // This function detects when a Suspense boundary goes from visible to hidden.
                // It returns false if the boundary is already hidden.
                // TODO: Use an effect tag.


                function isSuspenseBoundaryBeingHidden(current, finishedWork) {
                  if (current !== null) {
                    var oldState = current.memoizedState;

                    if (oldState === null || oldState.dehydrated !== null) {
                      var newState = finishedWork.memoizedState;
                      return newState !== null && newState.dehydrated === null;
                    }
                  }

                  return false;
                }

                function commitResetTextContent(current) {

                  resetTextContent(current.stateNode);
                }

                var COMPONENT_TYPE = 0;
                var HAS_PSEUDO_CLASS_TYPE = 1;
                var ROLE_TYPE = 2;
                var TEST_NAME_TYPE = 3;
                var TEXT_TYPE = 4;

                if (typeof Symbol === 'function' && Symbol.for) {
                  var symbolFor$1 = Symbol.for;
                  COMPONENT_TYPE = symbolFor$1('selector.component');
                  HAS_PSEUDO_CLASS_TYPE = symbolFor$1('selector.has_pseudo_class');
                  ROLE_TYPE = symbolFor$1('selector.role');
                  TEST_NAME_TYPE = symbolFor$1('selector.test_id');
                  TEXT_TYPE = symbolFor$1('selector.text');
                }
                var commitHooks = [];
                function onCommitRoot$1() {
                  {
                    commitHooks.forEach(function (commitHook) {
                      return commitHook();
                    });
                  }
                }

                var ceil = Math.ceil;
                var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,
                    ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
                    IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
                var NoContext =
                /*             */
                0;
                var BatchedContext =
                /*               */
                1;
                var EventContext =
                /*                 */
                2;
                var DiscreteEventContext =
                /*         */
                4;
                var LegacyUnbatchedContext =
                /*       */
                8;
                var RenderContext =
                /*                */
                16;
                var CommitContext =
                /*                */
                32;
                var RetryAfterError =
                /*       */
                64;
                var RootIncomplete = 0;
                var RootFatalErrored = 1;
                var RootErrored = 2;
                var RootSuspended = 3;
                var RootSuspendedWithDelay = 4;
                var RootCompleted = 5; // Describes where we are in the React execution stack

                var executionContext = NoContext; // The root we're working on

                var workInProgressRoot = null; // The fiber we're working on

                var workInProgress = null; // The lanes we're rendering

                var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree
                // This is a superset of the lanes we started working on at the root. The only
                // case where it's different from `workInProgressRootRenderLanes` is when we
                // enter a subtree that is hidden and needs to be unhidden: Suspense and
                // Offscreen component.
                //
                // Most things in the work loop should deal with workInProgressRootRenderLanes.
                // Most things in begin/complete phases should deal with subtreeRenderLanes.

                var subtreeRenderLanes = NoLanes;
                var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.

                var workInProgressRootExitStatus = RootIncomplete; // A fatal error, if one is thrown

                var workInProgressRootFatalError = null; // "Included" lanes refer to lanes that were worked on during this render. It's
                // slightly different than `renderLanes` because `renderLanes` can change as you
                // enter and exit an Offscreen tree. This value is the combination of all render
                // lanes for the entire render phase.

                var workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only
                // includes unprocessed updates, not work in bailed out children.

                var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.

                var workInProgressRootUpdatedLanes = NoLanes; // Lanes that were pinged (in an interleaved event) during this render.

                var workInProgressRootPingedLanes = NoLanes;
                var mostRecentlyUpdatedRoot = null; // The most recent time we committed a fallback. This lets us ensure a train
                // model where we don't commit new loading states in too quick succession.

                var globalMostRecentFallbackTime = 0;
                var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering
                // more and prefer CPU suspense heuristics instead.

                var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU
                // suspense heuristics and opt out of rendering more content.

                var RENDER_TIMEOUT_MS = 500;

                function resetRenderTimer() {
                  workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
                }

                function getRenderTargetTime() {
                  return workInProgressRootRenderTargetTime;
                }
                var nextEffect = null;
                var hasUncaughtError = false;
                var firstUncaughtError = null;
                var legacyErrorBoundariesThatAlreadyFailed = null;
                var rootDoesHavePassiveEffects = false;
                var rootWithPendingPassiveEffects = null;
                var pendingPassiveEffectsRenderPriority = NoPriority$1;
                var pendingPassiveEffectsLanes = NoLanes;
                var pendingPassiveHookEffectsMount = [];
                var pendingPassiveHookEffectsUnmount = [];
                var rootsWithPendingDiscreteUpdates = null; // Use these to prevent an infinite loop of nested updates

                var NESTED_UPDATE_LIMIT = 50;
                var nestedUpdateCount = 0;
                var rootWithNestedUpdates = null;
                var NESTED_PASSIVE_UPDATE_LIMIT = 50;
                var nestedPassiveUpdateCount = 0; // Marks the need to reschedule pending interactions at these lanes
                // during the commit phase. This enables them to be traced across components
                // that spawn new work during render. E.g. hidden boundaries, suspended SSR
                // hydration or SuspenseList.
                // TODO: Can use a bitmask instead of an array

                var spawnedWorkDuringRender = null; // If two updates are scheduled within the same event, we should treat their
                // event times as simultaneous, even if the actual clock time has advanced
                // between the first and second call.

                var currentEventTime = NoTimestamp;
                var currentEventWipLanes = NoLanes;
                var currentEventPendingLanes = NoLanes; // Dev only flag that tracks if passive effects are currently being flushed.
                // We warn about state updates for unmounted components differently in this case.

                var isFlushingPassiveEffects = false;
                var focusedInstanceHandle = null;
                var shouldFireAfterActiveInstanceBlur = false;
                function getWorkInProgressRoot() {
                  return workInProgressRoot;
                }
                function requestEventTime() {
                  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
                    // We're inside React, so it's fine to read the actual time.
                    return now();
                  } // We're not inside React, so we may be in the middle of a browser event.


                  if (currentEventTime !== NoTimestamp) {
                    // Use the same start time for all updates until we enter React again.
                    return currentEventTime;
                  } // This is the first update since React yielded. Compute a new start time.


                  currentEventTime = now();
                  return currentEventTime;
                }
                function requestUpdateLane(fiber) {
                  // Special cases
                  var mode = fiber.mode;

                  if ((mode & BlockingMode) === NoMode) {
                    return SyncLane;
                  } else if ((mode & ConcurrentMode) === NoMode) {
                    return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
                  } // The algorithm for assigning an update to a lane should be stable for all
                  // updates at the same priority within the same event. To do this, the inputs
                  // to the algorithm must be the same. For example, we use the `renderLanes`
                  // to avoid choosing a lane that is already in the middle of rendering.
                  //
                  // However, the "included" lanes could be mutated in between updates in the
                  // same event, like if you perform an update inside `flushSync`. Or any other
                  // code path that might call `prepareFreshStack`.
                  //
                  // The trick we use is to cache the first of each of these inputs within an
                  // event. Then reset the cached values once we can be sure the event is over.
                  // Our heuristic for that is whenever we enter a concurrent work loop.
                  //
                  // We'll do the same for `currentEventPendingLanes` below.


                  if (currentEventWipLanes === NoLanes) {
                    currentEventWipLanes = workInProgressRootIncludedLanes;
                  }

                  var isTransition = requestCurrentTransition() !== NoTransition;

                  if (isTransition) {
                    if (currentEventPendingLanes !== NoLanes) {
                      currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
                    }

                    return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
                  } // TODO: Remove this dependency on the Scheduler priority.
                  // To do that, we're replacing it with an update lane priority.


                  var schedulerPriority = getCurrentPriorityLevel(); // The old behavior was using the priority level of the Scheduler.
                  // This couples React to the Scheduler internals, so we're replacing it
                  // with the currentUpdateLanePriority above. As an example of how this
                  // could be problematic, if we're not inside `Scheduler.runWithPriority`,
                  // then we'll get the priority of the current running Scheduler task,
                  // which is probably not what we want.

                  var lane;

                  if ( // TODO: Temporary. We're removing the concept of discrete updates.
                  (executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) {
                    lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
                  } else {
                    var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);

                    lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
                  }

                  return lane;
                }

                function requestRetryLane(fiber) {
                  // This is a fork of `requestUpdateLane` designed specifically for Suspense
                  // "retries" — a special update that attempts to flip a Suspense boundary
                  // from its placeholder state to its primary/resolved state.
                  // Special cases
                  var mode = fiber.mode;

                  if ((mode & BlockingMode) === NoMode) {
                    return SyncLane;
                  } else if ((mode & ConcurrentMode) === NoMode) {
                    return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
                  } // See `requestUpdateLane` for explanation of `currentEventWipLanes`


                  if (currentEventWipLanes === NoLanes) {
                    currentEventWipLanes = workInProgressRootIncludedLanes;
                  }

                  return findRetryLane(currentEventWipLanes);
                }

                function scheduleUpdateOnFiber(fiber, lane, eventTime) {
                  checkForNestedUpdates();
                  warnAboutRenderPhaseUpdatesInDEV(fiber);
                  var root = markUpdateLaneFromFiberToRoot(fiber, lane);

                  if (root === null) {
                    warnAboutUpdateOnUnmountedFiberInDEV(fiber);
                    return null;
                  } // Mark that the root has a pending update.


                  markRootUpdated(root, lane, eventTime);

                  if (root === workInProgressRoot) {
                    // Received an update to a tree that's in the middle of rendering. Mark
                    // that there was an interleaved update work on this root. Unless the
                    // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render
                    // phase update. In that case, we don't treat render phase updates as if
                    // they were interleaved, for backwards compat reasons.
                    {
                      workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
                    }

                    if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                      // The root already suspended with a delay, which means this render
                      // definitely won't finish. Since we have a new update, let's mark it as
                      // suspended now, right before marking the incoming update. This has the
                      // effect of interrupting the current render and switching to the update.
                      // TODO: Make sure this doesn't override pings that happen while we've
                      // already started rendering.
                      markRootSuspended$1(root, workInProgressRootRenderLanes);
                    }
                  } // TODO: requestUpdateLanePriority also reads the priority. Pass the
                  // priority as an argument to that function and this one.


                  var priorityLevel = getCurrentPriorityLevel();

                  if (lane === SyncLane) {
                    if ( // Check if we're inside unbatchedUpdates
                    (executionContext & LegacyUnbatchedContext) !== NoContext && // Check if we're not already rendering
                    (executionContext & (RenderContext | CommitContext)) === NoContext) {
                      // Register pending interactions on the root to avoid losing traced interaction data.
                      schedulePendingInteractions(root, lane); // This is a legacy edge case. The initial mount of a ReactDOM.render-ed
                      // root inside of batchedUpdates should be synchronous, but layout updates
                      // should be deferred until the end of the batch.

                      performSyncWorkOnRoot(root);
                    } else {
                      ensureRootIsScheduled(root, eventTime);
                      schedulePendingInteractions(root, lane);

                      if (executionContext === NoContext) {
                        // Flush the synchronous work now, unless we're already working or inside
                        // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
                        // scheduleCallbackForFiber to preserve the ability to schedule a callback
                        // without immediately flushing it. We only do this for user-initiated
                        // updates, to preserve historical behavior of legacy mode.
                        resetRenderTimer();
                        flushSyncCallbackQueue();
                      }
                    }
                  } else {
                    // Schedule a discrete update but only if it's not Sync.
                    if ((executionContext & DiscreteEventContext) !== NoContext && ( // Only updates at user-blocking priority or greater are considered
                    // discrete, even inside a discrete event.
                    priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
                      // This is the result of a discrete event. Track the lowest priority
                      // discrete update per root so we can flush them early, if needed.
                      if (rootsWithPendingDiscreteUpdates === null) {
                        rootsWithPendingDiscreteUpdates = new Set([root]);
                      } else {
                        rootsWithPendingDiscreteUpdates.add(root);
                      }
                    } // Schedule other updates after in case the callback is sync.


                    ensureRootIsScheduled(root, eventTime);
                    schedulePendingInteractions(root, lane);
                  } // We use this when assigning a lane for a transition inside
                  // `requestUpdateLane`. We assume it's the same as the root being updated,
                  // since in the common case of a single root app it probably is. If it's not
                  // the same root, then it's not a huge deal, we just might batch more stuff
                  // together more than necessary.


                  mostRecentlyUpdatedRoot = root;
                } // This is split into a separate function so we can mark a fiber with pending
                // work without treating it as a typical update that originates from an event;
                // e.g. retrying a Suspense boundary isn't an update, but it does schedule work
                // on a fiber.

                function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
                  // Update the source fiber's lanes
                  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
                  var alternate = sourceFiber.alternate;

                  if (alternate !== null) {
                    alternate.lanes = mergeLanes(alternate.lanes, lane);
                  }

                  {
                    if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                      warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                    }
                  } // Walk the parent path to the root and update the child expiration time.


                  var node = sourceFiber;
                  var parent = sourceFiber.return;

                  while (parent !== null) {
                    parent.childLanes = mergeLanes(parent.childLanes, lane);
                    alternate = parent.alternate;

                    if (alternate !== null) {
                      alternate.childLanes = mergeLanes(alternate.childLanes, lane);
                    } else {
                      {
                        if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                        }
                      }
                    }

                    node = parent;
                    parent = parent.return;
                  }

                  if (node.tag === HostRoot) {
                    var root = node.stateNode;
                    return root;
                  } else {
                    return null;
                  }
                } // Use this function to schedule a task for a root. There's only one task per
                // root; if a task was already scheduled, we'll check to make sure the priority
                // of the existing task is the same as the priority of the next level that the
                // root has work on. This function is called on every update, and right before
                // exiting a task.


                function ensureRootIsScheduled(root, currentTime) {
                  var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as
                  // expired so we know to work on those next.

                  markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.

                  var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes); // This returns the priority level computed during the `getNextLanes` call.

                  var newCallbackPriority = returnNextLanesPriority();

                  if (nextLanes === NoLanes) {
                    // Special case: There's nothing to work on.
                    if (existingCallbackNode !== null) {
                      cancelCallback(existingCallbackNode);
                      root.callbackNode = null;
                      root.callbackPriority = NoLanePriority;
                    }

                    return;
                  } // Check if there's an existing task. We may be able to reuse it.


                  if (existingCallbackNode !== null) {
                    var existingCallbackPriority = root.callbackPriority;

                    if (existingCallbackPriority === newCallbackPriority) {
                      // The priority hasn't changed. We can reuse the existing task. Exit.
                      return;
                    } // The priority changed. Cancel the existing callback. We'll schedule a new
                    // one below.


                    cancelCallback(existingCallbackNode);
                  } // Schedule a new callback.


                  var newCallbackNode;

                  if (newCallbackPriority === SyncLanePriority) {
                    // Special case: Sync React callbacks are scheduled on a special
                    // internal queue
                    newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
                  } else if (newCallbackPriority === SyncBatchedLanePriority) {
                    newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root));
                  } else {
                    var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
                    newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));
                  }

                  root.callbackPriority = newCallbackPriority;
                  root.callbackNode = newCallbackNode;
                } // This is the entry point for every concurrent task, i.e. anything that
                // goes through Scheduler.


                function performConcurrentWorkOnRoot(root) {
                  // Since we know we're in a React event, we can clear the current
                  // event time. The next update will compute a new event time.
                  currentEventTime = NoTimestamp;
                  currentEventWipLanes = NoLanes;
                  currentEventPendingLanes = NoLanes;

                  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
                    {
                      throw Error("Should not already be working.");
                    }
                  } // Flush any pending passive effects before deciding which lanes to work on,
                  // in case they schedule additional work.


                  var originalCallbackNode = root.callbackNode;
                  var didFlushPassiveEffects = flushPassiveEffects();

                  if (didFlushPassiveEffects) {
                    // Something in the passive effect phase may have canceled the current task.
                    // Check if the task node for this root was changed.
                    if (root.callbackNode !== originalCallbackNode) {
                      // The current task was canceled. Exit. We don't need to call
                      // `ensureRootIsScheduled` because the check above implies either that
                      // there's a new task, or that there's no remaining work on this root.
                      return null;
                    }
                  } // Determine the next expiration time to work on, using the fields stored
                  // on the root.


                  var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);

                  if (lanes === NoLanes) {
                    // Defensive coding. This is never expected to happen.
                    return null;
                  }

                  var exitStatus = renderRootConcurrent(root, lanes);

                  if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
                    // The render included lanes that were updated during the render phase.
                    // For example, when unhiding a hidden tree, we include all the lanes
                    // that were previously skipped when the tree was hidden. That set of
                    // lanes is a superset of the lanes we started rendering with.
                    //
                    // So we'll throw out the current work and restart.
                    prepareFreshStack(root, NoLanes);
                  } else if (exitStatus !== RootIncomplete) {
                    if (exitStatus === RootErrored) {
                      executionContext |= RetryAfterError; // If an error occurred during hydration,
                      // discard server response and fall back to client side render.

                      if (root.hydrate) {
                        root.hydrate = false;
                        clearContainer(root.containerInfo);
                      } // If something threw an error, try rendering one more time. We'll render
                      // synchronously to block concurrent data mutations, and we'll includes
                      // all pending updates are included. If it still fails after the second
                      // attempt, we'll give up and commit the resulting tree.


                      lanes = getLanesToRetrySynchronouslyOnError(root);

                      if (lanes !== NoLanes) {
                        exitStatus = renderRootSync(root, lanes);
                      }
                    }

                    if (exitStatus === RootFatalErrored) {
                      var fatalError = workInProgressRootFatalError;
                      prepareFreshStack(root, NoLanes);
                      markRootSuspended$1(root, lanes);
                      ensureRootIsScheduled(root, now());
                      throw fatalError;
                    } // We now have a consistent tree. The next step is either to commit it,
                    // or, if something suspended, wait to commit it after a timeout.


                    var finishedWork = root.current.alternate;
                    root.finishedWork = finishedWork;
                    root.finishedLanes = lanes;
                    finishConcurrentRender(root, exitStatus, lanes);
                  }

                  ensureRootIsScheduled(root, now());

                  if (root.callbackNode === originalCallbackNode) {
                    // The task node scheduled for this root is the same one that's
                    // currently executed. Need to return a continuation.
                    return performConcurrentWorkOnRoot.bind(null, root);
                  }

                  return null;
                }

                function finishConcurrentRender(root, exitStatus, lanes) {
                  switch (exitStatus) {
                    case RootIncomplete:
                    case RootFatalErrored:
                      {
                        {
                          {
                            throw Error("Root did not complete. This is a bug in React.");
                          }
                        }
                      }
                    // Flow knows about invariant, so it complains if I add a break
                    // statement, but eslint doesn't know about invariant, so it complains
                    // if I do. eslint-disable-next-line no-fallthrough

                    case RootErrored:
                      {
                        // We should have already attempted to retry this tree. If we reached
                        // this point, it errored again. Commit it.
                        commitRoot(root);
                        break;
                      }

                    case RootSuspended:
                      {
                        markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we
                        // should immediately commit it or wait a bit.

                        if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                        !shouldForceFlushFallbacksInDEV()) {
                          // This render only included retries, no updates. Throttle committing
                          // retries so that we don't show too many loading states too quickly.
                          var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.

                          if (msUntilTimeout > 10) {
                            var nextLanes = getNextLanes(root, NoLanes);

                            if (nextLanes !== NoLanes) {
                              // There's additional work on this root.
                              break;
                            }

                            var suspendedLanes = root.suspendedLanes;

                            if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                              // We should prefer to render the fallback of at the last
                              // suspended level. Ping the last suspended level to try
                              // rendering it again.
                              // FIXME: What if the suspended lanes are Idle? Should not restart.
                              var eventTime = requestEventTime();
                              markRootPinged(root, suspendedLanes);
                              break;
                            } // The render is suspended, it hasn't timed out, and there's no
                            // lower priority work to do. Instead of committing the fallback
                            // immediately, wait for more data to arrive.


                            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);
                            break;
                          }
                        } // The work expired. Commit immediately.


                        commitRoot(root);
                        break;
                      }

                    case RootSuspendedWithDelay:
                      {
                        markRootSuspended$1(root, lanes);

                        if (includesOnlyTransitions(lanes)) {
                          // This is a transition, so we should exit without committing a
                          // placeholder and without scheduling a timeout. Delay indefinitely
                          // until we receive more data.
                          break;
                        }

                        if (!shouldForceFlushFallbacksInDEV()) {
                          // This is not a transition, but we did trigger an avoided state.
                          // Schedule a placeholder to display after a short delay, using the Just
                          // Noticeable Difference.
                          // TODO: Is the JND optimization worth the added complexity? If this is
                          // the only reason we track the event time, then probably not.
                          // Consider removing.
                          var mostRecentEventTime = getMostRecentEventTime(root, lanes);
                          var eventTimeMs = mostRecentEventTime;
                          var timeElapsedMs = now() - eventTimeMs;

                          var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.


                          if (_msUntilTimeout > 10) {
                            // Instead of committing the fallback immediately, wait for more data
                            // to arrive.
                            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);
                            break;
                          }
                        } // Commit the placeholder.


                        commitRoot(root);
                        break;
                      }

                    case RootCompleted:
                      {
                        // The work completed. Ready to commit.
                        commitRoot(root);
                        break;
                      }

                    default:
                      {
                        {
                          {
                            throw Error("Unknown root exit status.");
                          }
                        }
                      }
                  }
                }

                function markRootSuspended$1(root, suspendedLanes) {
                  // When suspending, we should always exclude lanes that were pinged or (more
                  // rarely, since we try to avoid it) updated during the render phase.
                  // TODO: Lol maybe there's a better way to factor this besides this
                  // obnoxiously named function :)
                  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
                  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
                  markRootSuspended(root, suspendedLanes);
                } // This is the entry point for synchronous tasks that don't go
                // through Scheduler


                function performSyncWorkOnRoot(root) {
                  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
                    {
                      throw Error("Should not already be working.");
                    }
                  }

                  flushPassiveEffects();
                  var lanes;
                  var exitStatus;

                  if (root === workInProgressRoot && includesSomeLane(root.expiredLanes, workInProgressRootRenderLanes)) {
                    // There's a partial tree, and at least one of its lanes has expired. Finish
                    // rendering it before rendering the rest of the expired work.
                    lanes = workInProgressRootRenderLanes;
                    exitStatus = renderRootSync(root, lanes);

                    if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
                      // The render included lanes that were updated during the render phase.
                      // For example, when unhiding a hidden tree, we include all the lanes
                      // that were previously skipped when the tree was hidden. That set of
                      // lanes is a superset of the lanes we started rendering with.
                      //
                      // Note that this only happens when part of the tree is rendered
                      // concurrently. If the whole tree is rendered synchronously, then there
                      // are no interleaved events.
                      lanes = getNextLanes(root, lanes);
                      exitStatus = renderRootSync(root, lanes);
                    }
                  } else {
                    lanes = getNextLanes(root, NoLanes);
                    exitStatus = renderRootSync(root, lanes);
                  }

                  if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
                    executionContext |= RetryAfterError; // If an error occurred during hydration,
                    // discard server response and fall back to client side render.

                    if (root.hydrate) {
                      root.hydrate = false;
                      clearContainer(root.containerInfo);
                    } // If something threw an error, try rendering one more time. We'll render
                    // synchronously to block concurrent data mutations, and we'll includes
                    // all pending updates are included. If it still fails after the second
                    // attempt, we'll give up and commit the resulting tree.


                    lanes = getLanesToRetrySynchronouslyOnError(root);

                    if (lanes !== NoLanes) {
                      exitStatus = renderRootSync(root, lanes);
                    }
                  }

                  if (exitStatus === RootFatalErrored) {
                    var fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root, NoLanes);
                    markRootSuspended$1(root, lanes);
                    ensureRootIsScheduled(root, now());
                    throw fatalError;
                  } // We now have a consistent tree. Because this is a sync render, we
                  // will commit it even if something suspended.


                  var finishedWork = root.current.alternate;
                  root.finishedWork = finishedWork;
                  root.finishedLanes = lanes;
                  commitRoot(root); // Before exiting, make sure there's a callback scheduled for the next
                  // pending level.

                  ensureRootIsScheduled(root, now());
                  return null;
                }
                function flushDiscreteUpdates() {
                  // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.
                  // However, `act` uses `batchedUpdates`, so there's no way to distinguish
                  // those two cases. Need to fix this before exposing flushDiscreteUpdates
                  // as a public API.
                  if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
                    {
                      if ((executionContext & RenderContext) !== NoContext) {
                        error('unstable_flushDiscreteUpdates: Cannot flush updates when React is ' + 'already rendering.');
                      }
                    } // We're already rendering, so we can't synchronously flush pending work.
                    // This is probably a nested event dispatch triggered by a lifecycle/effect,
                    // like `el.focus()`. Exit.


                    return;
                  }

                  flushPendingDiscreteUpdates(); // If the discrete updates scheduled passive effects, flush them now so that
                  // they fire before the next serial event.

                  flushPassiveEffects();
                }

                function flushPendingDiscreteUpdates() {
                  if (rootsWithPendingDiscreteUpdates !== null) {
                    // For each root with pending discrete updates, schedule a callback to
                    // immediately flush them.
                    var roots = rootsWithPendingDiscreteUpdates;
                    rootsWithPendingDiscreteUpdates = null;
                    roots.forEach(function (root) {
                      markDiscreteUpdatesExpired(root);
                      ensureRootIsScheduled(root, now());
                    });
                  } // Now flush the immediate queue.


                  flushSyncCallbackQueue();
                }

                function batchedUpdates$1(fn, a) {
                  var prevExecutionContext = executionContext;
                  executionContext |= BatchedContext;

                  try {
                    return fn(a);
                  } finally {
                    executionContext = prevExecutionContext;

                    if (executionContext === NoContext) {
                      // Flush the immediate callbacks that were scheduled during this batch
                      resetRenderTimer();
                      flushSyncCallbackQueue();
                    }
                  }
                }
                function batchedEventUpdates$1(fn, a) {
                  var prevExecutionContext = executionContext;
                  executionContext |= EventContext;

                  try {
                    return fn(a);
                  } finally {
                    executionContext = prevExecutionContext;

                    if (executionContext === NoContext) {
                      // Flush the immediate callbacks that were scheduled during this batch
                      resetRenderTimer();
                      flushSyncCallbackQueue();
                    }
                  }
                }
                function discreteUpdates$1(fn, a, b, c, d) {
                  var prevExecutionContext = executionContext;
                  executionContext |= DiscreteEventContext;

                  {
                    try {
                      return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a, b, c, d));
                    } finally {
                      executionContext = prevExecutionContext;

                      if (executionContext === NoContext) {
                        // Flush the immediate callbacks that were scheduled during this batch
                        resetRenderTimer();
                        flushSyncCallbackQueue();
                      }
                    }
                  }
                }
                function unbatchedUpdates(fn, a) {
                  var prevExecutionContext = executionContext;
                  executionContext &= ~BatchedContext;
                  executionContext |= LegacyUnbatchedContext;

                  try {
                    return fn(a);
                  } finally {
                    executionContext = prevExecutionContext;

                    if (executionContext === NoContext) {
                      // Flush the immediate callbacks that were scheduled during this batch
                      resetRenderTimer();
                      flushSyncCallbackQueue();
                    }
                  }
                }
                function flushSync(fn, a) {
                  var prevExecutionContext = executionContext;

                  if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
                    {
                      error('flushSync was called from inside a lifecycle method. React cannot ' + 'flush when React is already rendering. Consider moving this call to ' + 'a scheduler task or micro task.');
                    }

                    return fn(a);
                  }

                  executionContext |= BatchedContext;

                  {
                    try {
                      if (fn) {
                        return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a));
                      } else {
                        return undefined;
                      }
                    } finally {
                      executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
                      // Note that this will happen even if batchedUpdates is higher up
                      // the stack.

                      flushSyncCallbackQueue();
                    }
                  }
                }
                function pushRenderLanes(fiber, lanes) {
                  push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
                  subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
                  workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
                }
                function popRenderLanes(fiber) {
                  subtreeRenderLanes = subtreeRenderLanesCursor.current;
                  pop(subtreeRenderLanesCursor, fiber);
                }

                function prepareFreshStack(root, lanes) {
                  root.finishedWork = null;
                  root.finishedLanes = NoLanes;
                  var timeoutHandle = root.timeoutHandle;

                  if (timeoutHandle !== noTimeout) {
                    // The root previous suspended and scheduled a timeout to commit a fallback
                    // state. Now that we have additional work, cancel the timeout.
                    root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

                    cancelTimeout(timeoutHandle);
                  }

                  if (workInProgress !== null) {
                    var interruptedWork = workInProgress.return;

                    while (interruptedWork !== null) {
                      unwindInterruptedWork(interruptedWork);
                      interruptedWork = interruptedWork.return;
                    }
                  }

                  workInProgressRoot = root;
                  workInProgress = createWorkInProgress(root.current, null);
                  workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
                  workInProgressRootExitStatus = RootIncomplete;
                  workInProgressRootFatalError = null;
                  workInProgressRootSkippedLanes = NoLanes;
                  workInProgressRootUpdatedLanes = NoLanes;
                  workInProgressRootPingedLanes = NoLanes;

                  {
                    spawnedWorkDuringRender = null;
                  }

                  {
                    ReactStrictModeWarnings.discardPendingWarnings();
                  }
                }

                function handleError(root, thrownValue) {
                  do {
                    var erroredWork = workInProgress;

                    try {
                      // Reset module-level state that was set during the render phase.
                      resetContextDependencies();
                      resetHooksAfterThrow();
                      resetCurrentFiber(); // TODO: I found and added this missing line while investigating a
                      // separate issue. Write a regression test using string refs.

                      ReactCurrentOwner$2.current = null;

                      if (erroredWork === null || erroredWork.return === null) {
                        // Expected to be working on a non-root fiber. This is a fatal error
                        // because there's no ancestor that can handle it; the root is
                        // supposed to capture all errors that weren't caught by an error
                        // boundary.
                        workInProgressRootExitStatus = RootFatalErrored;
                        workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
                        // sibling, or the parent if there are no siblings. But since the root
                        // has no siblings nor a parent, we set it to null. Usually this is
                        // handled by `completeUnitOfWork` or `unwindWork`, but since we're
                        // intentionally not calling those, we need set it here.
                        // TODO: Consider calling `unwindWork` to pop the contexts.

                        workInProgress = null;
                        return;
                      }

                      if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                        // Record the time spent rendering before an error was thrown. This
                        // avoids inaccurate Profiler durations in the case of a
                        // suspended render.
                        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                      }

                      throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                      completeUnitOfWork(erroredWork);
                    } catch (yetAnotherThrownValue) {
                      // Something in the return path also threw.
                      thrownValue = yetAnotherThrownValue;

                      if (workInProgress === erroredWork && erroredWork !== null) {
                        // If this boundary has already errored, then we had trouble processing
                        // the error. Bubble it to the next boundary.
                        erroredWork = erroredWork.return;
                        workInProgress = erroredWork;
                      } else {
                        erroredWork = workInProgress;
                      }

                      continue;
                    } // Return to the normal work loop.


                    return;
                  } while (true);
                }

                function pushDispatcher() {
                  var prevDispatcher = ReactCurrentDispatcher$2.current;
                  ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;

                  if (prevDispatcher === null) {
                    // The React isomorphic package does not include a default dispatcher.
                    // Instead the first renderer will lazily attach one, in order to give
                    // nicer error messages.
                    return ContextOnlyDispatcher;
                  } else {
                    return prevDispatcher;
                  }
                }

                function popDispatcher(prevDispatcher) {
                  ReactCurrentDispatcher$2.current = prevDispatcher;
                }

                function pushInteractions(root) {
                  {
                    var prevInteractions = tracing.__interactionsRef.current;
                    tracing.__interactionsRef.current = root.memoizedInteractions;
                    return prevInteractions;
                  }
                }

                function popInteractions(prevInteractions) {
                  {
                    tracing.__interactionsRef.current = prevInteractions;
                  }
                }

                function markCommitTimeOfFallback() {
                  globalMostRecentFallbackTime = now();
                }
                function markSkippedUpdateLanes(lane) {
                  workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
                }
                function renderDidSuspend() {
                  if (workInProgressRootExitStatus === RootIncomplete) {
                    workInProgressRootExitStatus = RootSuspended;
                  }
                }
                function renderDidSuspendDelayIfPossible() {
                  if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
                    workInProgressRootExitStatus = RootSuspendedWithDelay;
                  } // Check if there are updates that we skipped tree that might have unblocked
                  // this render.


                  if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {
                    // Mark the current render as suspended so that we switch to working on
                    // the updates that were skipped. Usually we only suspend at the end of
                    // the render phase.
                    // TODO: We should probably always mark the root as suspended immediately
                    // (inside this function), since by suspending at the end of the render
                    // phase introduces a potential mistake where we suspend lanes that were
                    // pinged or updated while we were rendering.
                    markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
                  }
                }
                function renderDidError() {
                  if (workInProgressRootExitStatus !== RootCompleted) {
                    workInProgressRootExitStatus = RootErrored;
                  }
                } // Called during render to determine if anything has suspended.
                // Returns false if we're not sure.

                function renderHasNotSuspendedYet() {
                  // If something errored or completed, we can't really be sure,
                  // so those are false.
                  return workInProgressRootExitStatus === RootIncomplete;
                }

                function renderRootSync(root, lanes) {
                  var prevExecutionContext = executionContext;
                  executionContext |= RenderContext;
                  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
                  // and prepare a fresh one. Otherwise we'll continue where we left off.

                  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
                    prepareFreshStack(root, lanes);
                    startWorkOnPendingInteractions(root, lanes);
                  }

                  var prevInteractions = pushInteractions(root);

                  do {
                    try {
                      workLoopSync();
                      break;
                    } catch (thrownValue) {
                      handleError(root, thrownValue);
                    }
                  } while (true);

                  resetContextDependencies();

                  {
                    popInteractions(prevInteractions);
                  }

                  executionContext = prevExecutionContext;
                  popDispatcher(prevDispatcher);

                  if (workInProgress !== null) {
                    // This is a sync render, so we should have finished the whole tree.
                    {
                      {
                        throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                  }

                  workInProgressRoot = null;
                  workInProgressRootRenderLanes = NoLanes;
                  return workInProgressRootExitStatus;
                } // The work loop is an extremely hot path. Tell Closure not to inline it.

                /** @noinline */

                function workLoopSync() {
                  // Already timed out, so perform work without checking if we need to yield.
                  while (workInProgress !== null) {
                    performUnitOfWork(workInProgress);
                  }
                }

                function renderRootConcurrent(root, lanes) {
                  var prevExecutionContext = executionContext;
                  executionContext |= RenderContext;
                  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
                  // and prepare a fresh one. Otherwise we'll continue where we left off.

                  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
                    resetRenderTimer();
                    prepareFreshStack(root, lanes);
                    startWorkOnPendingInteractions(root, lanes);
                  }

                  var prevInteractions = pushInteractions(root);

                  do {
                    try {
                      workLoopConcurrent();
                      break;
                    } catch (thrownValue) {
                      handleError(root, thrownValue);
                    }
                  } while (true);

                  resetContextDependencies();

                  {
                    popInteractions(prevInteractions);
                  }

                  popDispatcher(prevDispatcher);
                  executionContext = prevExecutionContext;

                  if (workInProgress !== null) {

                    return RootIncomplete;
                  } else {

                    workInProgressRoot = null;
                    workInProgressRootRenderLanes = NoLanes; // Return the final exit status.

                    return workInProgressRootExitStatus;
                  }
                }
                /** @noinline */

                function workLoopConcurrent() {
                  // Perform work until Scheduler asks us to yield
                  while (workInProgress !== null && !shouldYield()) {
                    performUnitOfWork(workInProgress);
                  }
                }

                function performUnitOfWork(unitOfWork) {
                  // The current, flushed, state of this fiber is the alternate. Ideally
                  // nothing should rely on this, but relying on it here means that we don't
                  // need an additional field on the work in progress.
                  var current = unitOfWork.alternate;
                  setCurrentFiber(unitOfWork);
                  var next;

                  if ((unitOfWork.mode & ProfileMode) !== NoMode) {
                    startProfilerTimer(unitOfWork);
                    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
                    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
                  } else {
                    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
                  }

                  resetCurrentFiber();
                  unitOfWork.memoizedProps = unitOfWork.pendingProps;

                  if (next === null) {
                    // If this doesn't spawn new work, complete the current work.
                    completeUnitOfWork(unitOfWork);
                  } else {
                    workInProgress = next;
                  }

                  ReactCurrentOwner$2.current = null;
                }

                function completeUnitOfWork(unitOfWork) {
                  // Attempt to complete the current unit of work, then move to the next
                  // sibling. If there are no more siblings, return to the parent fiber.
                  var completedWork = unitOfWork;

                  do {
                    // The current, flushed, state of this fiber is the alternate. Ideally
                    // nothing should rely on this, but relying on it here means that we don't
                    // need an additional field on the work in progress.
                    var current = completedWork.alternate;
                    var returnFiber = completedWork.return; // Check if the work completed or if something threw.

                    if ((completedWork.flags & Incomplete) === NoFlags) {
                      setCurrentFiber(completedWork);
                      var next = void 0;

                      if ((completedWork.mode & ProfileMode) === NoMode) {
                        next = completeWork(current, completedWork, subtreeRenderLanes);
                      } else {
                        startProfilerTimer(completedWork);
                        next = completeWork(current, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.

                        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                      }

                      resetCurrentFiber();

                      if (next !== null) {
                        // Completing this fiber spawned new work. Work on that next.
                        workInProgress = next;
                        return;
                      }

                      resetChildLanes(completedWork);

                      if (returnFiber !== null && // Do not append effects to parents if a sibling failed to complete
                      (returnFiber.flags & Incomplete) === NoFlags) {
                        // Append all the effects of the subtree and this fiber onto the effect
                        // list of the parent. The completion order of the children affects the
                        // side-effect order.
                        if (returnFiber.firstEffect === null) {
                          returnFiber.firstEffect = completedWork.firstEffect;
                        }

                        if (completedWork.lastEffect !== null) {
                          if (returnFiber.lastEffect !== null) {
                            returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                          }

                          returnFiber.lastEffect = completedWork.lastEffect;
                        } // If this fiber had side-effects, we append it AFTER the children's
                        // side-effects. We can perform certain side-effects earlier if needed,
                        // by doing multiple passes over the effect list. We don't want to
                        // schedule our own side-effect on our own list because if end up
                        // reusing children we'll schedule this effect onto itself since we're
                        // at the end.


                        var flags = completedWork.flags; // Skip both NoWork and PerformedWork tags when creating the effect
                        // list. PerformedWork effect is read by React DevTools but shouldn't be
                        // committed.

                        if (flags > PerformedWork) {
                          if (returnFiber.lastEffect !== null) {
                            returnFiber.lastEffect.nextEffect = completedWork;
                          } else {
                            returnFiber.firstEffect = completedWork;
                          }

                          returnFiber.lastEffect = completedWork;
                        }
                      }
                    } else {
                      // This fiber did not complete because something threw. Pop values off
                      // the stack without entering the complete phase. If this is a boundary,
                      // capture values if possible.
                      var _next = unwindWork(completedWork); // Because this fiber did not complete, don't reset its expiration time.


                      if (_next !== null) {
                        // If completing this work spawned new work, do that next. We'll come
                        // back here again.
                        // Since we're restarting, remove anything that is not a host effect
                        // from the effect tag.
                        _next.flags &= HostEffectMask;
                        workInProgress = _next;
                        return;
                      }

                      if ((completedWork.mode & ProfileMode) !== NoMode) {
                        // Record the render duration for the fiber that errored.
                        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.

                        var actualDuration = completedWork.actualDuration;
                        var child = completedWork.child;

                        while (child !== null) {
                          actualDuration += child.actualDuration;
                          child = child.sibling;
                        }

                        completedWork.actualDuration = actualDuration;
                      }

                      if (returnFiber !== null) {
                        // Mark the parent fiber as incomplete and clear its effect list.
                        returnFiber.firstEffect = returnFiber.lastEffect = null;
                        returnFiber.flags |= Incomplete;
                      }
                    }

                    var siblingFiber = completedWork.sibling;

                    if (siblingFiber !== null) {
                      // If there is more work to do in this returnFiber, do that next.
                      workInProgress = siblingFiber;
                      return;
                    } // Otherwise, return to the parent


                    completedWork = returnFiber; // Update the next thing we're working on in case something throws.

                    workInProgress = completedWork;
                  } while (completedWork !== null); // We've reached the root.


                  if (workInProgressRootExitStatus === RootIncomplete) {
                    workInProgressRootExitStatus = RootCompleted;
                  }
                }

                function resetChildLanes(completedWork) {
                  if ( // TODO: Move this check out of the hot path by moving `resetChildLanes`
                  // to switch statement in `completeWork`.
                  (completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) {
                    // The children of this component are hidden. Don't bubble their
                    // expiration times.
                    return;
                  }

                  var newChildLanes = NoLanes; // Bubble up the earliest expiration time.

                  if ((completedWork.mode & ProfileMode) !== NoMode) {
                    // In profiling mode, resetChildExpirationTime is also used to reset
                    // profiler durations.
                    var actualDuration = completedWork.actualDuration;
                    var treeBaseDuration = completedWork.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0. This value will
                    // only be updated if work is done on the fiber (i.e. it doesn't bailout).
                    // When work is done, it should bubble to the parent's actualDuration. If
                    // the fiber has not been cloned though, (meaning no work was done), then
                    // this value will reflect the amount of time spent working on a previous
                    // render. In that case it should not bubble. We determine whether it was
                    // cloned by comparing the child pointer.

                    var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
                    var child = completedWork.child;

                    while (child !== null) {
                      newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));

                      if (shouldBubbleActualDurations) {
                        actualDuration += child.actualDuration;
                      }

                      treeBaseDuration += child.treeBaseDuration;
                      child = child.sibling;
                    }

                    var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;

                    if (isTimedOutSuspense) {
                      // Don't count time spent in a timed out Suspense subtree as part of the base duration.
                      var primaryChildFragment = completedWork.child;

                      if (primaryChildFragment !== null) {
                        treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }

                    completedWork.actualDuration = actualDuration;
                    completedWork.treeBaseDuration = treeBaseDuration;
                  } else {
                    var _child = completedWork.child;

                    while (_child !== null) {
                      newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                      _child = _child.sibling;
                    }
                  }

                  completedWork.childLanes = newChildLanes;
                }

                function commitRoot(root) {
                  var renderPriorityLevel = getCurrentPriorityLevel();
                  runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root, renderPriorityLevel));
                  return null;
                }

                function commitRootImpl(root, renderPriorityLevel) {
                  do {
                    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
                    // means `flushPassiveEffects` will sometimes result in additional
                    // passive effects. So we need to keep flushing in a loop until there are
                    // no more pending effects.
                    // TODO: Might be better if `flushPassiveEffects` did not automatically
                    // flush synchronous work at the end, to avoid factoring hazards like this.
                    flushPassiveEffects();
                  } while (rootWithPendingPassiveEffects !== null);

                  flushRenderPhaseStrictModeWarningsInDEV();

                  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
                    {
                      throw Error("Should not already be working.");
                    }
                  }

                  var finishedWork = root.finishedWork;
                  var lanes = root.finishedLanes;

                  if (finishedWork === null) {

                    return null;
                  }

                  root.finishedWork = null;
                  root.finishedLanes = NoLanes;

                  if (!(finishedWork !== root.current)) {
                    {
                      throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  } // commitRoot never returns a continuation; it always finishes synchronously.
                  // So we can clear these now to allow a new callback to be scheduled.


                  root.callbackNode = null; // Update the first and last pending times on this root. The new first
                  // pending time is whatever is left on the root fiber.

                  var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
                  markRootFinished(root, remainingLanes); // Clear already finished discrete updates in case that a later call of
                  // `flushDiscreteUpdates` starts a useless render pass which may cancels
                  // a scheduled timeout.

                  if (rootsWithPendingDiscreteUpdates !== null) {
                    if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root)) {
                      rootsWithPendingDiscreteUpdates.delete(root);
                    }
                  }

                  if (root === workInProgressRoot) {
                    // We can reset these now that they are finished.
                    workInProgressRoot = null;
                    workInProgress = null;
                    workInProgressRootRenderLanes = NoLanes;
                  } // Get the list of effects.


                  var firstEffect;

                  if (finishedWork.flags > PerformedWork) {
                    // A fiber's effect list consists only of its children, not itself. So if
                    // the root has an effect, we need to add it to the end of the list. The
                    // resulting list is the set that would belong to the root's parent, if it
                    // had one; that is, all the effects in the tree including the root.
                    if (finishedWork.lastEffect !== null) {
                      finishedWork.lastEffect.nextEffect = finishedWork;
                      firstEffect = finishedWork.firstEffect;
                    } else {
                      firstEffect = finishedWork;
                    }
                  } else {
                    // There is no effect on the root.
                    firstEffect = finishedWork.firstEffect;
                  }

                  if (firstEffect !== null) {

                    var prevExecutionContext = executionContext;
                    executionContext |= CommitContext;
                    var prevInteractions = pushInteractions(root); // Reset this to null before calling lifecycles

                    ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
                    // of the effect list for each phase: all mutation effects come before all
                    // layout effects, and so on.
                    // The first phase a "before mutation" phase. We use this phase to read the
                    // state of the host tree right before we mutate it. This is where
                    // getSnapshotBeforeUpdate is called.

                    focusedInstanceHandle = prepareForCommit(root.containerInfo);
                    shouldFireAfterActiveInstanceBlur = false;
                    nextEffect = firstEffect;

                    do {
                      {
                        invokeGuardedCallback(null, commitBeforeMutationEffects, null);

                        if (hasCaughtError()) {
                          if (!(nextEffect !== null)) {
                            {
                              throw Error("Should be working on an effect.");
                            }
                          }

                          var error = clearCaughtError();
                          captureCommitPhaseError(nextEffect, error);
                          nextEffect = nextEffect.nextEffect;
                        }
                      }
                    } while (nextEffect !== null); // We no longer need to track the active instance fiber


                    focusedInstanceHandle = null;

                    {
                      // Mark the current commit time to be shared by all Profilers in this
                      // batch. This enables them to be grouped later.
                      recordCommitTime();
                    } // The next phase is the mutation phase, where we mutate the host tree.


                    nextEffect = firstEffect;

                    do {
                      {
                        invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);

                        if (hasCaughtError()) {
                          if (!(nextEffect !== null)) {
                            {
                              throw Error("Should be working on an effect.");
                            }
                          }

                          var _error = clearCaughtError();

                          captureCommitPhaseError(nextEffect, _error);
                          nextEffect = nextEffect.nextEffect;
                        }
                      }
                    } while (nextEffect !== null);

                    resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
                    // the mutation phase, so that the previous tree is still current during
                    // componentWillUnmount, but before the layout phase, so that the finished
                    // work is current during componentDidMount/Update.

                    root.current = finishedWork; // The next phase is the layout phase, where we call effects that read
                    // the host tree after it's been mutated. The idiomatic use case for this is
                    // layout, but class component lifecycles also fire here for legacy reasons.

                    nextEffect = firstEffect;

                    do {
                      {
                        invokeGuardedCallback(null, commitLayoutEffects, null, root, lanes);

                        if (hasCaughtError()) {
                          if (!(nextEffect !== null)) {
                            {
                              throw Error("Should be working on an effect.");
                            }
                          }

                          var _error2 = clearCaughtError();

                          captureCommitPhaseError(nextEffect, _error2);
                          nextEffect = nextEffect.nextEffect;
                        }
                      }
                    } while (nextEffect !== null);

                    nextEffect = null; // Tell Scheduler to yield at the end of the frame, so the browser has an
                    // opportunity to paint.

                    requestPaint();

                    {
                      popInteractions(prevInteractions);
                    }

                    executionContext = prevExecutionContext;
                  } else {
                    // No effects.
                    root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
                    // no effects.
                    // TODO: Maybe there's a better way to report this.

                    {
                      recordCommitTime();
                    }
                  }

                  var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;

                  if (rootDoesHavePassiveEffects) {
                    // This commit has passive effects. Stash a reference to them. But don't
                    // schedule a callback until after flushing layout work.
                    rootDoesHavePassiveEffects = false;
                    rootWithPendingPassiveEffects = root;
                    pendingPassiveEffectsLanes = lanes;
                    pendingPassiveEffectsRenderPriority = renderPriorityLevel;
                  } else {
                    // We are done with the effect chain at this point so let's clear the
                    // nextEffect pointers to assist with GC. If we have passive effects, we'll
                    // clear this in flushPassiveEffects.
                    nextEffect = firstEffect;

                    while (nextEffect !== null) {
                      var nextNextEffect = nextEffect.nextEffect;
                      nextEffect.nextEffect = null;

                      if (nextEffect.flags & Deletion) {
                        detachFiberAfterEffects(nextEffect);
                      }

                      nextEffect = nextNextEffect;
                    }
                  } // Read this again, since an effect might have updated it


                  remainingLanes = root.pendingLanes; // Check if there's remaining work on this root

                  if (remainingLanes !== NoLanes) {
                    {
                      if (spawnedWorkDuringRender !== null) {
                        var expirationTimes = spawnedWorkDuringRender;
                        spawnedWorkDuringRender = null;

                        for (var i = 0; i < expirationTimes.length; i++) {
                          scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions);
                        }
                      }

                      schedulePendingInteractions(root, remainingLanes);
                    }
                  } else {
                    // If there's no remaining work, we can clear the set of already failed
                    // error boundaries.
                    legacyErrorBoundariesThatAlreadyFailed = null;
                  }

                  {
                    if (!rootDidHavePassiveEffects) {
                      // If there are no passive effects, then we can complete the pending interactions.
                      // Otherwise, we'll wait until after the passive effects are flushed.
                      // Wait to do this until after remaining work has been scheduled,
                      // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.
                      finishPendingInteractions(root, lanes);
                    }
                  }

                  if (remainingLanes === SyncLane) {
                    // Count the number of times the root synchronously re-renders without
                    // finishing. If there are too many, it indicates an infinite update loop.
                    if (root === rootWithNestedUpdates) {
                      nestedUpdateCount++;
                    } else {
                      nestedUpdateCount = 0;
                      rootWithNestedUpdates = root;
                    }
                  } else {
                    nestedUpdateCount = 0;
                  }

                  onCommitRoot(finishedWork.stateNode, renderPriorityLevel);

                  {
                    onCommitRoot$1();
                  } // Always call this before exiting `commitRoot`, to ensure that any
                  // additional work on this root is scheduled.


                  ensureRootIsScheduled(root, now());

                  if (hasUncaughtError) {
                    hasUncaughtError = false;
                    var _error3 = firstUncaughtError;
                    firstUncaughtError = null;
                    throw _error3;
                  }

                  if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
                    // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired
                    // synchronously, but layout updates should be deferred until the end
                    // of the batch.


                    return null;
                  } // If layout work was scheduled, flush it now.


                  flushSyncCallbackQueue();

                  return null;
                }

                function commitBeforeMutationEffects() {
                  while (nextEffect !== null) {
                    var current = nextEffect.alternate;

                    if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
                      if ((nextEffect.flags & Deletion) !== NoFlags) {
                        if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
                          shouldFireAfterActiveInstanceBlur = true;
                        }
                      } else {
                        // TODO: Move this out of the hot path using a dedicated effect tag.
                        if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {
                          shouldFireAfterActiveInstanceBlur = true;
                        }
                      }
                    }

                    var flags = nextEffect.flags;

                    if ((flags & Snapshot) !== NoFlags) {
                      setCurrentFiber(nextEffect);
                      commitBeforeMutationLifeCycles(current, nextEffect);
                      resetCurrentFiber();
                    }

                    if ((flags & Passive) !== NoFlags) {
                      // If there are passive effects, schedule a callback to flush at
                      // the earliest opportunity.
                      if (!rootDoesHavePassiveEffects) {
                        rootDoesHavePassiveEffects = true;
                        scheduleCallback(NormalPriority$1, function () {
                          flushPassiveEffects();
                          return null;
                        });
                      }
                    }

                    nextEffect = nextEffect.nextEffect;
                  }
                }

                function commitMutationEffects(root, renderPriorityLevel) {
                  // TODO: Should probably move the bulk of this function to commitWork.
                  while (nextEffect !== null) {
                    setCurrentFiber(nextEffect);
                    var flags = nextEffect.flags;

                    if (flags & ContentReset) {
                      commitResetTextContent(nextEffect);
                    }

                    if (flags & Ref) {
                      var current = nextEffect.alternate;

                      if (current !== null) {
                        commitDetachRef(current);
                      }
                    } // The following switch statement is only concerned about placement,
                    // updates, and deletions. To avoid needing to add a case for every possible
                    // bitmap value, we remove the secondary effects from the effect tag and
                    // switch on that value.


                    var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);

                    switch (primaryFlags) {
                      case Placement:
                        {
                          commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
                          // inserted, before any life-cycles like componentDidMount gets called.
                          // TODO: findDOMNode doesn't rely on this any more but isMounted does
                          // and isMounted is deprecated anyway so we should be able to kill this.

                          nextEffect.flags &= ~Placement;
                          break;
                        }

                      case PlacementAndUpdate:
                        {
                          // Placement
                          commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
                          // inserted, before any life-cycles like componentDidMount gets called.

                          nextEffect.flags &= ~Placement; // Update

                          var _current = nextEffect.alternate;
                          commitWork(_current, nextEffect);
                          break;
                        }

                      case Hydrating:
                        {
                          nextEffect.flags &= ~Hydrating;
                          break;
                        }

                      case HydratingAndUpdate:
                        {
                          nextEffect.flags &= ~Hydrating; // Update

                          var _current2 = nextEffect.alternate;
                          commitWork(_current2, nextEffect);
                          break;
                        }

                      case Update:
                        {
                          var _current3 = nextEffect.alternate;
                          commitWork(_current3, nextEffect);
                          break;
                        }

                      case Deletion:
                        {
                          commitDeletion(root, nextEffect);
                          break;
                        }
                    }

                    resetCurrentFiber();
                    nextEffect = nextEffect.nextEffect;
                  }
                }

                function commitLayoutEffects(root, committedLanes) {

                  while (nextEffect !== null) {
                    setCurrentFiber(nextEffect);
                    var flags = nextEffect.flags;

                    if (flags & (Update | Callback)) {
                      var current = nextEffect.alternate;
                      commitLifeCycles(root, current, nextEffect);
                    }

                    {
                      if (flags & Ref) {
                        commitAttachRef(nextEffect);
                      }
                    }

                    resetCurrentFiber();
                    nextEffect = nextEffect.nextEffect;
                  }
                }

                function flushPassiveEffects() {
                  // Returns whether passive effects were flushed.
                  if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
                    var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
                    pendingPassiveEffectsRenderPriority = NoPriority$1;

                    {
                      return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
                    }
                  }

                  return false;
                }
                function enqueuePendingPassiveHookEffectMount(fiber, effect) {
                  pendingPassiveHookEffectsMount.push(effect, fiber);

                  if (!rootDoesHavePassiveEffects) {
                    rootDoesHavePassiveEffects = true;
                    scheduleCallback(NormalPriority$1, function () {
                      flushPassiveEffects();
                      return null;
                    });
                  }
                }
                function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
                  pendingPassiveHookEffectsUnmount.push(effect, fiber);

                  {
                    fiber.flags |= PassiveUnmountPendingDev;
                    var alternate = fiber.alternate;

                    if (alternate !== null) {
                      alternate.flags |= PassiveUnmountPendingDev;
                    }
                  }

                  if (!rootDoesHavePassiveEffects) {
                    rootDoesHavePassiveEffects = true;
                    scheduleCallback(NormalPriority$1, function () {
                      flushPassiveEffects();
                      return null;
                    });
                  }
                }

                function invokePassiveEffectCreate(effect) {
                  var create = effect.create;
                  effect.destroy = create();
                }

                function flushPassiveEffectsImpl() {
                  if (rootWithPendingPassiveEffects === null) {
                    return false;
                  }

                  var root = rootWithPendingPassiveEffects;
                  var lanes = pendingPassiveEffectsLanes;
                  rootWithPendingPassiveEffects = null;
                  pendingPassiveEffectsLanes = NoLanes;

                  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
                    {
                      throw Error("Cannot flush passive effects while already rendering.");
                    }
                  }

                  {
                    isFlushingPassiveEffects = true;
                  }

                  var prevExecutionContext = executionContext;
                  executionContext |= CommitContext;
                  var prevInteractions = pushInteractions(root); // It's important that ALL pending passive effect destroy functions are called
                  // before ANY passive effect create functions are called.
                  // Otherwise effects in sibling components might interfere with each other.
                  // e.g. a destroy function in one component may unintentionally override a ref
                  // value set by a create function in another component.
                  // Layout effects have the same constraint.
                  // First pass: Destroy stale passive effects.

                  var unmountEffects = pendingPassiveHookEffectsUnmount;
                  pendingPassiveHookEffectsUnmount = [];

                  for (var i = 0; i < unmountEffects.length; i += 2) {
                    var _effect = unmountEffects[i];
                    var fiber = unmountEffects[i + 1];
                    var destroy = _effect.destroy;
                    _effect.destroy = undefined;

                    {
                      fiber.flags &= ~PassiveUnmountPendingDev;
                      var alternate = fiber.alternate;

                      if (alternate !== null) {
                        alternate.flags &= ~PassiveUnmountPendingDev;
                      }
                    }

                    if (typeof destroy === 'function') {
                      {
                        setCurrentFiber(fiber);

                        {
                          invokeGuardedCallback(null, destroy, null);
                        }

                        if (hasCaughtError()) {
                          if (!(fiber !== null)) {
                            {
                              throw Error("Should be working on an effect.");
                            }
                          }

                          var error = clearCaughtError();
                          captureCommitPhaseError(fiber, error);
                        }

                        resetCurrentFiber();
                      }
                    }
                  } // Second pass: Create new passive effects.


                  var mountEffects = pendingPassiveHookEffectsMount;
                  pendingPassiveHookEffectsMount = [];

                  for (var _i = 0; _i < mountEffects.length; _i += 2) {
                    var _effect2 = mountEffects[_i];
                    var _fiber = mountEffects[_i + 1];

                    {
                      setCurrentFiber(_fiber);

                      {
                        invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
                      }

                      if (hasCaughtError()) {
                        if (!(_fiber !== null)) {
                          {
                            throw Error("Should be working on an effect.");
                          }
                        }

                        var _error4 = clearCaughtError();

                        captureCommitPhaseError(_fiber, _error4);
                      }

                      resetCurrentFiber();
                    }
                  } // Note: This currently assumes there are no passive effects on the root fiber
                  // because the root is not part of its own effect list.
                  // This could change in the future.


                  var effect = root.current.firstEffect;

                  while (effect !== null) {
                    var nextNextEffect = effect.nextEffect; // Remove nextEffect pointer to assist GC

                    effect.nextEffect = null;

                    if (effect.flags & Deletion) {
                      detachFiberAfterEffects(effect);
                    }

                    effect = nextNextEffect;
                  }

                  {
                    popInteractions(prevInteractions);
                    finishPendingInteractions(root, lanes);
                  }

                  {
                    isFlushingPassiveEffects = false;
                  }

                  executionContext = prevExecutionContext;
                  flushSyncCallbackQueue(); // If additional passive effects were scheduled, increment a counter. If this
                  // exceeds the limit, we'll fire a warning.

                  nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
                  return true;
                }

                function isAlreadyFailedLegacyErrorBoundary(instance) {
                  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
                }
                function markLegacyErrorBoundaryAsFailed(instance) {
                  if (legacyErrorBoundariesThatAlreadyFailed === null) {
                    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
                  } else {
                    legacyErrorBoundariesThatAlreadyFailed.add(instance);
                  }
                }

                function prepareToThrowUncaughtError(error) {
                  if (!hasUncaughtError) {
                    hasUncaughtError = true;
                    firstUncaughtError = error;
                  }
                }

                var onUncaughtError = prepareToThrowUncaughtError;

                function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
                  var errorInfo = createCapturedValue(error, sourceFiber);
                  var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
                  enqueueUpdate(rootFiber, update);
                  var eventTime = requestEventTime();
                  var root = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);

                  if (root !== null) {
                    markRootUpdated(root, SyncLane, eventTime);
                    ensureRootIsScheduled(root, eventTime);
                    schedulePendingInteractions(root, SyncLane);
                  }
                }

                function captureCommitPhaseError(sourceFiber, error) {
                  if (sourceFiber.tag === HostRoot) {
                    // Error was thrown at the root. There is no parent, so the root
                    // itself should capture it.
                    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
                    return;
                  }

                  var fiber = sourceFiber.return;

                  while (fiber !== null) {
                    if (fiber.tag === HostRoot) {
                      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
                      return;
                    } else if (fiber.tag === ClassComponent) {
                      var ctor = fiber.type;
                      var instance = fiber.stateNode;

                      if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                        var errorInfo = createCapturedValue(error, sourceFiber);
                        var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                        enqueueUpdate(fiber, update);
                        var eventTime = requestEventTime();
                        var root = markUpdateLaneFromFiberToRoot(fiber, SyncLane);

                        if (root !== null) {
                          markRootUpdated(root, SyncLane, eventTime);
                          ensureRootIsScheduled(root, eventTime);
                          schedulePendingInteractions(root, SyncLane);
                        } else {
                          // This component has already been unmounted.
                          // We can't schedule any follow up work for the root because the fiber is already unmounted,
                          // but we can still call the log-only boundary so the error isn't swallowed.
                          //
                          // TODO This is only a temporary bandaid for the old reconciler fork.
                          // We can delete this special case once the new fork is merged.
                          if (typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                            try {
                              instance.componentDidCatch(error, errorInfo);
                            } catch (errorToIgnore) {// TODO Ignore this error? Rethrow it?
                              // This is kind of an edge case.
                            }
                          }
                        }

                        return;
                      }
                    }

                    fiber = fiber.return;
                  }
                }
                function pingSuspendedRoot(root, wakeable, pingedLanes) {
                  var pingCache = root.pingCache;

                  if (pingCache !== null) {
                    // The wakeable resolved, so we no longer need to memoize, because it will
                    // never be thrown again.
                    pingCache.delete(wakeable);
                  }

                  var eventTime = requestEventTime();
                  markRootPinged(root, pingedLanes);

                  if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
                    // Received a ping at the same priority level at which we're currently
                    // rendering. We might want to restart this render. This should mirror
                    // the logic of whether or not a root suspends once it completes.
                    // TODO: If we're rendering sync either due to Sync, Batched or expired,
                    // we should probably never restart.
                    // If we're suspended with delay, or if it's a retry, we'll always suspend
                    // so we can always restart.
                    if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                      // Restart from the root.
                      prepareFreshStack(root, NoLanes);
                    } else {
                      // Even though we can't restart right now, we might get an
                      // opportunity later. So we mark this render as having a ping.
                      workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
                    }
                  }

                  ensureRootIsScheduled(root, eventTime);
                  schedulePendingInteractions(root, pingedLanes);
                }

                function retryTimedOutBoundary(boundaryFiber, retryLane) {
                  // The boundary fiber (a Suspense component or SuspenseList component)
                  // previously was rendered in its fallback state. One of the promises that
                  // suspended it has resolved, which means at least part of the tree was
                  // likely unblocked. Try rendering again, at a new expiration time.
                  if (retryLane === NoLane) {
                    retryLane = requestRetryLane(boundaryFiber);
                  } // TODO: Special case idle priority?


                  var eventTime = requestEventTime();
                  var root = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);

                  if (root !== null) {
                    markRootUpdated(root, retryLane, eventTime);
                    ensureRootIsScheduled(root, eventTime);
                    schedulePendingInteractions(root, retryLane);
                  }
                }
                function resolveRetryWakeable(boundaryFiber, wakeable) {
                  var retryLane = NoLane; // Default

                  var retryCache;

                  {
                    retryCache = boundaryFiber.stateNode;
                  }

                  if (retryCache !== null) {
                    // The wakeable resolved, so we no longer need to memoize, because it will
                    // never be thrown again.
                    retryCache.delete(wakeable);
                  }

                  retryTimedOutBoundary(boundaryFiber, retryLane);
                } // Computes the next Just Noticeable Difference (JND) boundary.
                // The theory is that a person can't tell the difference between small differences in time.
                // Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
                // difference in the experience. However, waiting for longer might mean that we can avoid
                // showing an intermediate loading state. The longer we have already waited, the harder it
                // is to tell small differences in time. Therefore, the longer we've already waited,
                // the longer we can wait additionally. At some point we have to give up though.
                // We pick a train model where the next boundary commits at a consistent schedule.
                // These particular numbers are vague estimates. We expect to adjust them based on research.

                function jnd(timeElapsed) {
                  return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
                }

                function checkForNestedUpdates() {
                  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
                    nestedUpdateCount = 0;
                    rootWithNestedUpdates = null;

                    {
                      {
                        throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
                      }
                    }
                  }

                  {
                    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                      nestedPassiveUpdateCount = 0;

                      error('Maximum update depth exceeded. This can happen when a component ' + "calls setState inside useEffect, but useEffect either doesn't " + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');
                    }
                  }
                }

                function flushRenderPhaseStrictModeWarningsInDEV() {
                  {
                    ReactStrictModeWarnings.flushLegacyContextWarning();

                    {
                      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
                    }
                  }
                }

                var didWarnStateUpdateForNotYetMountedComponent = null;

                function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
                  {
                    if ((executionContext & RenderContext) !== NoContext) {
                      // We let the other warning about render phase updates deal with this one.
                      return;
                    }

                    if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
                      return;
                    }

                    var tag = fiber.tag;

                    if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
                      // Only warn for user-defined components, not internal ones like Suspense.
                      return;
                    } // We show the whole stack but dedupe on the top component's name because
                    // the problematic code almost always lies inside that component.


                    var componentName = getComponentName(fiber.type) || 'ReactComponent';

                    if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                      if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                        return;
                      }

                      didWarnStateUpdateForNotYetMountedComponent.add(componentName);
                    } else {
                      didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
                    }

                    var previousFiber = current;

                    try {
                      setCurrentFiber(fiber);

                      error("Can't perform a React state update on a component that hasn't mounted yet. " + 'This indicates that you have a side-effect in your render function that ' + 'asynchronously later calls tries to update the component. Move this work to ' + 'useEffect instead.');
                    } finally {
                      if (previousFiber) {
                        setCurrentFiber(fiber);
                      } else {
                        resetCurrentFiber();
                      }
                    }
                  }
                }

                var didWarnStateUpdateForUnmountedComponent = null;

                function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
                  {
                    var tag = fiber.tag;

                    if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
                      // Only warn for user-defined components, not internal ones like Suspense.
                      return;
                    } // If there are pending passive effects unmounts for this Fiber,
                    // we can assume that they would have prevented this update.


                    if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
                      return;
                    } // We show the whole stack but dedupe on the top component's name because
                    // the problematic code almost always lies inside that component.


                    var componentName = getComponentName(fiber.type) || 'ReactComponent';

                    if (didWarnStateUpdateForUnmountedComponent !== null) {
                      if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
                        return;
                      }

                      didWarnStateUpdateForUnmountedComponent.add(componentName);
                    } else {
                      didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
                    }

                    if (isFlushingPassiveEffects) ;else {
                      var previousFiber = current;

                      try {
                        setCurrentFiber(fiber);

                        error("Can't perform a React state update on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.', tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function');
                      } finally {
                        if (previousFiber) {
                          setCurrentFiber(fiber);
                        } else {
                          resetCurrentFiber();
                        }
                      }
                    }
                  }
                }

                var beginWork$1;

                {
                  var dummyFiber = null;

                  beginWork$1 = function (current, unitOfWork, lanes) {
                    // If a component throws an error, we replay it again in a synchronously
                    // dispatched event, so that the debugger will treat it as an uncaught
                    // error See ReactErrorUtils for more information.
                    // Before entering the begin phase, copy the work-in-progress onto a dummy
                    // fiber. If beginWork throws, we'll use this to reset the state.
                    var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);

                    try {
                      return beginWork(current, unitOfWork, lanes);
                    } catch (originalError) {
                      if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {
                        // Don't replay promises. Treat everything else like an error.
                        throw originalError;
                      } // Keep this code in sync with handleError; any changes here must have
                      // corresponding changes there.


                      resetContextDependencies();
                      resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
                      // same fiber again.
                      // Unwind the failed stack frame

                      unwindInterruptedWork(unitOfWork); // Restore the original properties of the fiber.

                      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);

                      if (unitOfWork.mode & ProfileMode) {
                        // Reset the profiler timer.
                        startProfilerTimer(unitOfWork);
                      } // Run beginWork again.


                      invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);

                      if (hasCaughtError()) {
                        var replayError = clearCaughtError(); // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.
                        // Rethrow this error instead of the original one.

                        throw replayError;
                      } else {
                        // This branch is reachable if the render phase is impure.
                        throw originalError;
                      }
                    }
                  };
                }

                var didWarnAboutUpdateInRender = false;
                var didWarnAboutUpdateInRenderForAnotherComponent;

                {
                  didWarnAboutUpdateInRenderForAnotherComponent = new Set();
                }

                function warnAboutRenderPhaseUpdatesInDEV(fiber) {
                  {
                    if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                      switch (fiber.tag) {
                        case FunctionComponent:
                        case ForwardRef:
                        case SimpleMemoComponent:
                          {
                            var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.

                            var dedupeKey = renderingComponentName;

                            if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                              didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                              var setStateComponentName = getComponentName(fiber.type) || 'Unknown';

                              error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://reactjs.org/link/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);
                            }

                            break;
                          }

                        case ClassComponent:
                          {
                            if (!didWarnAboutUpdateInRender) {
                              error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');

                              didWarnAboutUpdateInRender = true;
                            }

                            break;
                          }
                      }
                    }
                  }
                } // a 'shared' variable that changes when act() opens/closes in tests.


                var IsThisRendererActing = {
                  current: false
                };
                function warnIfNotScopedWithMatchingAct(fiber) {
                  {
                    if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
                      var previousFiber = current;

                      try {
                        setCurrentFiber(fiber);

                        error("It looks like you're using the wrong act() around your test interactions.\n" + 'Be sure to use the matching version of act() corresponding to your renderer:\n\n' + '// for react-dom:\n' + // Break up imports to avoid accidentally parsing them as dependencies.
                        'import {act} fr' + "om 'react-dom/test-utils';\n" + '// ...\n' + 'act(() => ...);\n\n' + '// for react-test-renderer:\n' + // Break up imports to avoid accidentally parsing them as dependencies.
                        'import TestRenderer fr' + "om react-test-renderer';\n" + 'const {act} = TestRenderer;\n' + '// ...\n' + 'act(() => ...);');
                      } finally {
                        if (previousFiber) {
                          setCurrentFiber(fiber);
                        } else {
                          resetCurrentFiber();
                        }
                      }
                    }
                  }
                }
                function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
                  {
                    if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                      error('An update to %s ran an effect, but was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentName(fiber.type));
                    }
                  }
                }

                function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
                  {
                    if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                      var previousFiber = current;

                      try {
                        setCurrentFiber(fiber);

                        error('An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentName(fiber.type));
                      } finally {
                        if (previousFiber) {
                          setCurrentFiber(fiber);
                        } else {
                          resetCurrentFiber();
                        }
                      }
                    }
                  }
                }

                var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV; // In tests, we want to enforce a mocked scheduler.

                var didWarnAboutUnmockedScheduler = false; // TODO Before we release concurrent mode, revisit this and decide whether a mocked
                // scheduler is the actual recommendation. The alternative could be a testing build,
                // a new lib, or whatever; we dunno just yet. This message is for early adopters
                // to get their tests right.

                function warnIfUnmockedScheduler(fiber) {
                  {
                    if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
                      if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                        didWarnAboutUnmockedScheduler = true;

                        error('In Concurrent or Sync modes, the "scheduler" module needs to be mocked ' + 'to guarantee consistent behaviour across tests and browsers. ' + 'For example, with jest: \n' + // Break up requires to avoid accidentally parsing them as dependencies.
                        "jest.mock('scheduler', () => require" + "('scheduler/unstable_mock'));\n\n" + 'For more info, visit https://reactjs.org/link/mock-scheduler');
                      }
                    }
                  }
                }

                function computeThreadID(root, lane) {
                  // Interaction threads are unique per root and expiration time.
                  // NOTE: Intentionally unsound cast. All that matters is that it's a number
                  // and it represents a batch of work. Could make a helper function instead,
                  // but meh this is fine for now.
                  return lane * 1000 + root.interactionThreadID;
                }

                function markSpawnedWork(lane) {

                  if (spawnedWorkDuringRender === null) {
                    spawnedWorkDuringRender = [lane];
                  } else {
                    spawnedWorkDuringRender.push(lane);
                  }
                }

                function scheduleInteractions(root, lane, interactions) {

                  if (interactions.size > 0) {
                    var pendingInteractionMap = root.pendingInteractionMap;
                    var pendingInteractions = pendingInteractionMap.get(lane);

                    if (pendingInteractions != null) {
                      interactions.forEach(function (interaction) {
                        if (!pendingInteractions.has(interaction)) {
                          // Update the pending async work count for previously unscheduled interaction.
                          interaction.__count++;
                        }

                        pendingInteractions.add(interaction);
                      });
                    } else {
                      pendingInteractionMap.set(lane, new Set(interactions)); // Update the pending async work count for the current interactions.

                      interactions.forEach(function (interaction) {
                        interaction.__count++;
                      });
                    }

                    var subscriber = tracing.__subscriberRef.current;

                    if (subscriber !== null) {
                      var threadID = computeThreadID(root, lane);
                      subscriber.onWorkScheduled(interactions, threadID);
                    }
                  }
                }

                function schedulePendingInteractions(root, lane) {

                  scheduleInteractions(root, lane, tracing.__interactionsRef.current);
                }

                function startWorkOnPendingInteractions(root, lanes) {
                  // we can accurately attribute time spent working on it, And so that cascading
                  // work triggered during the render phase will be associated with it.


                  var interactions = new Set();
                  root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledLane) {
                    if (includesSomeLane(lanes, scheduledLane)) {
                      scheduledInteractions.forEach(function (interaction) {
                        return interactions.add(interaction);
                      });
                    }
                  }); // Store the current set of interactions on the FiberRoot for a few reasons:
                  // We can re-use it in hot functions like performConcurrentWorkOnRoot()
                  // without having to recalculate it. We will also use it in commitWork() to
                  // pass to any Profiler onRender() hooks. This also provides DevTools with a
                  // way to access it when the onCommitRoot() hook is called.

                  root.memoizedInteractions = interactions;

                  if (interactions.size > 0) {
                    var subscriber = tracing.__subscriberRef.current;

                    if (subscriber !== null) {
                      var threadID = computeThreadID(root, lanes);

                      try {
                        subscriber.onWorkStarted(interactions, threadID);
                      } catch (error) {
                        // If the subscriber throws, rethrow it in a separate task
                        scheduleCallback(ImmediatePriority$1, function () {
                          throw error;
                        });
                      }
                    }
                  }
                }

                function finishPendingInteractions(root, committedLanes) {

                  var remainingLanesAfterCommit = root.pendingLanes;
                  var subscriber;

                  try {
                    subscriber = tracing.__subscriberRef.current;

                    if (subscriber !== null && root.memoizedInteractions.size > 0) {
                      // FIXME: More than one lane can finish in a single commit.
                      var threadID = computeThreadID(root, committedLanes);
                      subscriber.onWorkStopped(root.memoizedInteractions, threadID);
                    }
                  } catch (error) {
                    // If the subscriber throws, rethrow it in a separate task
                    scheduleCallback(ImmediatePriority$1, function () {
                      throw error;
                    });
                  } finally {
                    // Clear completed interactions from the pending Map.
                    // Unless the render was suspended or cascading work was scheduled,
                    // In which case– leave pending interactions until the subsequent render.
                    var pendingInteractionMap = root.pendingInteractionMap;
                    pendingInteractionMap.forEach(function (scheduledInteractions, lane) {
                      // Only decrement the pending interaction count if we're done.
                      // If there's still work at the current priority,
                      // That indicates that we are waiting for suspense data.
                      if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
                        pendingInteractionMap.delete(lane);
                        scheduledInteractions.forEach(function (interaction) {
                          interaction.__count--;

                          if (subscriber !== null && interaction.__count === 0) {
                            try {
                              subscriber.onInteractionScheduledWorkCompleted(interaction);
                            } catch (error) {
                              // If the subscriber throws, rethrow it in a separate task
                              scheduleCallback(ImmediatePriority$1, function () {
                                throw error;
                              });
                            }
                          }
                        });
                      }
                    });
                  }
                } // `act` testing API

                function shouldForceFlushFallbacksInDEV() {
                  // Never force flush in production. This function should get stripped out.
                  return actingUpdatesScopeDepth > 0;
                }
                // so we can tell if any async act() calls try to run in parallel.


                var actingUpdatesScopeDepth = 0;

                function detachFiberAfterEffects(fiber) {
                  fiber.sibling = null;
                  fiber.stateNode = null;
                }

                var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.

                var failedBoundaries = null;
                var setRefreshHandler = function (handler) {
                  {
                    resolveFamily = handler;
                  }
                };
                function resolveFunctionForHotReloading(type) {
                  {
                    if (resolveFamily === null) {
                      // Hot reloading is disabled.
                      return type;
                    }

                    var family = resolveFamily(type);

                    if (family === undefined) {
                      return type;
                    } // Use the latest known implementation.


                    return family.current;
                  }
                }
                function resolveClassForHotReloading(type) {
                  // No implementation differences.
                  return resolveFunctionForHotReloading(type);
                }
                function resolveForwardRefForHotReloading(type) {
                  {
                    if (resolveFamily === null) {
                      // Hot reloading is disabled.
                      return type;
                    }

                    var family = resolveFamily(type);

                    if (family === undefined) {
                      // Check if we're dealing with a real forwardRef. Don't want to crash early.
                      if (type !== null && type !== undefined && typeof type.render === 'function') {
                        // ForwardRef is special because its resolved .type is an object,
                        // but it's possible that we only have its inner render function in the map.
                        // If that inner render function is different, we'll build a new forwardRef type.
                        var currentRender = resolveFunctionForHotReloading(type.render);

                        if (type.render !== currentRender) {
                          var syntheticType = {
                            $$typeof: REACT_FORWARD_REF_TYPE,
                            render: currentRender
                          };

                          if (type.displayName !== undefined) {
                            syntheticType.displayName = type.displayName;
                          }

                          return syntheticType;
                        }
                      }

                      return type;
                    } // Use the latest known implementation.


                    return family.current;
                  }
                }
                function isCompatibleFamilyForHotReloading(fiber, element) {
                  {
                    if (resolveFamily === null) {
                      // Hot reloading is disabled.
                      return false;
                    }

                    var prevType = fiber.elementType;
                    var nextType = element.type; // If we got here, we know types aren't === equal.

                    var needsCompareFamilies = false;
                    var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;

                    switch (fiber.tag) {
                      case ClassComponent:
                        {
                          if (typeof nextType === 'function') {
                            needsCompareFamilies = true;
                          }

                          break;
                        }

                      case FunctionComponent:
                        {
                          if (typeof nextType === 'function') {
                            needsCompareFamilies = true;
                          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                            // We don't know the inner type yet.
                            // We're going to assume that the lazy inner type is stable,
                            // and so it is sufficient to avoid reconciling it away.
                            // We're not going to unwrap or actually use the new lazy type.
                            needsCompareFamilies = true;
                          }

                          break;
                        }

                      case ForwardRef:
                        {
                          if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                            needsCompareFamilies = true;
                          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                            needsCompareFamilies = true;
                          }

                          break;
                        }

                      case MemoComponent:
                      case SimpleMemoComponent:
                        {
                          if ($$typeofNextType === REACT_MEMO_TYPE) {
                            // TODO: if it was but can no longer be simple,
                            // we shouldn't set this.
                            needsCompareFamilies = true;
                          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                            needsCompareFamilies = true;
                          }

                          break;
                        }

                      default:
                        return false;
                    } // Check if both types have a family and it's the same one.


                    if (needsCompareFamilies) {
                      // Note: memo() and forwardRef() we'll compare outer rather than inner type.
                      // This means both of them need to be registered to preserve state.
                      // If we unwrapped and compared the inner types for wrappers instead,
                      // then we would risk falsely saying two separate memo(Foo)
                      // calls are equivalent because they wrap the same Foo function.
                      var prevFamily = resolveFamily(prevType);

                      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
                        return true;
                      }
                    }

                    return false;
                  }
                }
                function markFailedErrorBoundaryForHotReloading(fiber) {
                  {
                    if (resolveFamily === null) {
                      // Hot reloading is disabled.
                      return;
                    }

                    if (typeof WeakSet !== 'function') {
                      return;
                    }

                    if (failedBoundaries === null) {
                      failedBoundaries = new WeakSet();
                    }

                    failedBoundaries.add(fiber);
                  }
                }
                var scheduleRefresh = function (root, update) {
                  {
                    if (resolveFamily === null) {
                      // Hot reloading is disabled.
                      return;
                    }

                    var staleFamilies = update.staleFamilies,
                        updatedFamilies = update.updatedFamilies;
                    flushPassiveEffects();
                    flushSync(function () {
                      scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
                    });
                  }
                };
                var scheduleRoot = function (root, element) {
                  {
                    if (root.context !== emptyContextObject) {
                      // Super edge case: root has a legacy _renderSubtree context
                      // but we don't know the parentComponent so we can't pass it.
                      // Just ignore. We'll delete this with _renderSubtree code path later.
                      return;
                    }

                    flushPassiveEffects();
                    flushSync(function () {
                      updateContainer(element, root, null, null);
                    });
                  }
                };

                function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
                  {
                    var alternate = fiber.alternate,
                        child = fiber.child,
                        sibling = fiber.sibling,
                        tag = fiber.tag,
                        type = fiber.type;
                    var candidateType = null;

                    switch (tag) {
                      case FunctionComponent:
                      case SimpleMemoComponent:
                      case ClassComponent:
                        candidateType = type;
                        break;

                      case ForwardRef:
                        candidateType = type.render;
                        break;
                    }

                    if (resolveFamily === null) {
                      throw new Error('Expected resolveFamily to be set during hot reload.');
                    }

                    var needsRender = false;
                    var needsRemount = false;

                    if (candidateType !== null) {
                      var family = resolveFamily(candidateType);

                      if (family !== undefined) {
                        if (staleFamilies.has(family)) {
                          needsRemount = true;
                        } else if (updatedFamilies.has(family)) {
                          if (tag === ClassComponent) {
                            needsRemount = true;
                          } else {
                            needsRender = true;
                          }
                        }
                      }
                    }

                    if (failedBoundaries !== null) {
                      if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                        needsRemount = true;
                      }
                    }

                    if (needsRemount) {
                      fiber._debugNeedsRemount = true;
                    }

                    if (needsRemount || needsRender) {
                      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
                    }

                    if (child !== null && !needsRemount) {
                      scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
                    }

                    if (sibling !== null) {
                      scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
                    }
                  }
                }

                var findHostInstancesForRefresh = function (root, families) {
                  {
                    var hostInstances = new Set();
                    var types = new Set(families.map(function (family) {
                      return family.current;
                    }));
                    findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
                    return hostInstances;
                  }
                };

                function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
                  {
                    var child = fiber.child,
                        sibling = fiber.sibling,
                        tag = fiber.tag,
                        type = fiber.type;
                    var candidateType = null;

                    switch (tag) {
                      case FunctionComponent:
                      case SimpleMemoComponent:
                      case ClassComponent:
                        candidateType = type;
                        break;

                      case ForwardRef:
                        candidateType = type.render;
                        break;
                    }

                    var didMatch = false;

                    if (candidateType !== null) {
                      if (types.has(candidateType)) {
                        didMatch = true;
                      }
                    }

                    if (didMatch) {
                      // We have a match. This only drills down to the closest host components.
                      // There's no need to search deeper because for the purpose of giving
                      // visual feedback, "flashing" outermost parent rectangles is sufficient.
                      findHostInstancesForFiberShallowly(fiber, hostInstances);
                    } else {
                      // If there's no match, maybe there will be one further down in the child tree.
                      if (child !== null) {
                        findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                      }
                    }

                    if (sibling !== null) {
                      findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
                    }
                  }
                }

                function findHostInstancesForFiberShallowly(fiber, hostInstances) {
                  {
                    var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);

                    if (foundHostInstances) {
                      return;
                    } // If we didn't find any host children, fallback to closest host parent.


                    var node = fiber;

                    while (true) {
                      switch (node.tag) {
                        case HostComponent:
                          hostInstances.add(node.stateNode);
                          return;

                        case HostPortal:
                          hostInstances.add(node.stateNode.containerInfo);
                          return;

                        case HostRoot:
                          hostInstances.add(node.stateNode.containerInfo);
                          return;
                      }

                      if (node.return === null) {
                        throw new Error('Expected to reach root first.');
                      }

                      node = node.return;
                    }
                  }
                }

                function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
                  {
                    var node = fiber;
                    var foundHostInstances = false;

                    while (true) {
                      if (node.tag === HostComponent) {
                        // We got a match.
                        foundHostInstances = true;
                        hostInstances.add(node.stateNode); // There may still be more, so keep searching.
                      } else if (node.child !== null) {
                        node.child.return = node;
                        node = node.child;
                        continue;
                      }

                      if (node === fiber) {
                        return foundHostInstances;
                      }

                      while (node.sibling === null) {
                        if (node.return === null || node.return === fiber) {
                          return foundHostInstances;
                        }

                        node = node.return;
                      }

                      node.sibling.return = node.return;
                      node = node.sibling;
                    }
                  }

                  return false;
                }

                var hasBadMapPolyfill;

                {
                  hasBadMapPolyfill = false;

                  try {
                    var nonExtensibleObject = Object.preventExtensions({});
                    /* eslint-disable no-new */

                    new Map([[nonExtensibleObject, null]]);
                    new Set([nonExtensibleObject]);
                    /* eslint-enable no-new */
                  } catch (e) {
                    // TODO: Consider warning about bad polyfills
                    hasBadMapPolyfill = true;
                  }
                }

                var debugCounter = 1;

                function FiberNode(tag, pendingProps, key, mode) {
                  // Instance
                  this.tag = tag;
                  this.key = key;
                  this.elementType = null;
                  this.type = null;
                  this.stateNode = null; // Fiber

                  this.return = null;
                  this.child = null;
                  this.sibling = null;
                  this.index = 0;
                  this.ref = null;
                  this.pendingProps = pendingProps;
                  this.memoizedProps = null;
                  this.updateQueue = null;
                  this.memoizedState = null;
                  this.dependencies = null;
                  this.mode = mode; // Effects

                  this.flags = NoFlags;
                  this.nextEffect = null;
                  this.firstEffect = null;
                  this.lastEffect = null;
                  this.lanes = NoLanes;
                  this.childLanes = NoLanes;
                  this.alternate = null;

                  {
                    // Note: The following is done to avoid a v8 performance cliff.
                    //
                    // Initializing the fields below to smis and later updating them with
                    // double values will cause Fibers to end up having separate shapes.
                    // This behavior/bug has something to do with Object.preventExtension().
                    // Fortunately this only impacts DEV builds.
                    // Unfortunately it makes React unusably slow for some applications.
                    // To work around this, initialize the fields below with doubles.
                    //
                    // Learn more about this here:
                    // https://github.com/facebook/react/issues/14365
                    // https://bugs.chromium.org/p/v8/issues/detail?id=8538
                    this.actualDuration = Number.NaN;
                    this.actualStartTime = Number.NaN;
                    this.selfBaseDuration = Number.NaN;
                    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
                    // This won't trigger the performance cliff mentioned above,
                    // and it simplifies other profiler code (including DevTools).

                    this.actualDuration = 0;
                    this.actualStartTime = -1;
                    this.selfBaseDuration = 0;
                    this.treeBaseDuration = 0;
                  }

                  {
                    // This isn't directly used but is handy for debugging internals:
                    this._debugID = debugCounter++;
                    this._debugSource = null;
                    this._debugOwner = null;
                    this._debugNeedsRemount = false;
                    this._debugHookTypes = null;

                    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
                      Object.preventExtensions(this);
                    }
                  }
                } // This is a constructor function, rather than a POJO constructor, still
                // please ensure we do the following:
                // 1) Nobody should add any instance methods on this. Instance methods can be
                //    more difficult to predict when they get optimized and they are almost
                //    never inlined properly in static compilers.
                // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
                //    always know when it is a fiber.
                // 3) We might want to experiment with using numeric keys since they are easier
                //    to optimize in a non-JIT environment.
                // 4) We can easily go from a constructor to a createFiber object literal if that
                //    is faster.
                // 5) It should be easy to port this to a C struct and keep a C implementation
                //    compatible.


                var createFiber = function (tag, pendingProps, key, mode) {
                  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
                  return new FiberNode(tag, pendingProps, key, mode);
                };

                function shouldConstruct$1(Component) {
                  var prototype = Component.prototype;
                  return !!(prototype && prototype.isReactComponent);
                }

                function isSimpleFunctionComponent(type) {
                  return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;
                }
                function resolveLazyComponentTag(Component) {
                  if (typeof Component === 'function') {
                    return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
                  } else if (Component !== undefined && Component !== null) {
                    var $$typeof = Component.$$typeof;

                    if ($$typeof === REACT_FORWARD_REF_TYPE) {
                      return ForwardRef;
                    }

                    if ($$typeof === REACT_MEMO_TYPE) {
                      return MemoComponent;
                    }
                  }

                  return IndeterminateComponent;
                } // This is used to create an alternate fiber to do work on.

                function createWorkInProgress(current, pendingProps) {
                  var workInProgress = current.alternate;

                  if (workInProgress === null) {
                    // We use a double buffering pooling technique because we know that we'll
                    // only ever need at most two versions of a tree. We pool the "other" unused
                    // node that we're free to reuse. This is lazily created to avoid allocating
                    // extra objects for things that are never updated. It also allow us to
                    // reclaim the extra memory if needed.
                    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
                    workInProgress.elementType = current.elementType;
                    workInProgress.type = current.type;
                    workInProgress.stateNode = current.stateNode;

                    {
                      // DEV-only fields
                      workInProgress._debugID = current._debugID;
                      workInProgress._debugSource = current._debugSource;
                      workInProgress._debugOwner = current._debugOwner;
                      workInProgress._debugHookTypes = current._debugHookTypes;
                    }

                    workInProgress.alternate = current;
                    current.alternate = workInProgress;
                  } else {
                    workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.

                    workInProgress.type = current.type; // We already have an alternate.
                    // Reset the effect tag.

                    workInProgress.flags = NoFlags; // The effect list is no longer valid.

                    workInProgress.nextEffect = null;
                    workInProgress.firstEffect = null;
                    workInProgress.lastEffect = null;

                    {
                      // We intentionally reset, rather than copy, actualDuration & actualStartTime.
                      // This prevents time from endlessly accumulating in new commits.
                      // This has the downside of resetting values for different priority renders,
                      // But works for yielding (the common case) and should support resuming.
                      workInProgress.actualDuration = 0;
                      workInProgress.actualStartTime = -1;
                    }
                  }

                  workInProgress.childLanes = current.childLanes;
                  workInProgress.lanes = current.lanes;
                  workInProgress.child = current.child;
                  workInProgress.memoizedProps = current.memoizedProps;
                  workInProgress.memoizedState = current.memoizedState;
                  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
                  // it cannot be shared with the current fiber.

                  var currentDependencies = current.dependencies;
                  workInProgress.dependencies = currentDependencies === null ? null : {
                    lanes: currentDependencies.lanes,
                    firstContext: currentDependencies.firstContext
                  }; // These will be overridden during the parent's reconciliation

                  workInProgress.sibling = current.sibling;
                  workInProgress.index = current.index;
                  workInProgress.ref = current.ref;

                  {
                    workInProgress.selfBaseDuration = current.selfBaseDuration;
                    workInProgress.treeBaseDuration = current.treeBaseDuration;
                  }

                  {
                    workInProgress._debugNeedsRemount = current._debugNeedsRemount;

                    switch (workInProgress.tag) {
                      case IndeterminateComponent:
                      case FunctionComponent:
                      case SimpleMemoComponent:
                        workInProgress.type = resolveFunctionForHotReloading(current.type);
                        break;

                      case ClassComponent:
                        workInProgress.type = resolveClassForHotReloading(current.type);
                        break;

                      case ForwardRef:
                        workInProgress.type = resolveForwardRefForHotReloading(current.type);
                        break;
                    }
                  }

                  return workInProgress;
                } // Used to reuse a Fiber for a second pass.

                function resetWorkInProgress(workInProgress, renderLanes) {
                  // This resets the Fiber to what createFiber or createWorkInProgress would
                  // have set the values to before during the first pass. Ideally this wouldn't
                  // be necessary but unfortunately many code paths reads from the workInProgress
                  // when they should be reading from current and writing to workInProgress.
                  // We assume pendingProps, index, key, ref, return are still untouched to
                  // avoid doing another reconciliation.
                  // Reset the effect tag but keep any Placement tags, since that's something
                  // that child fiber is setting, not the reconciliation.
                  workInProgress.flags &= Placement; // The effect list is no longer valid.

                  workInProgress.nextEffect = null;
                  workInProgress.firstEffect = null;
                  workInProgress.lastEffect = null;
                  var current = workInProgress.alternate;

                  if (current === null) {
                    // Reset to createFiber's initial values.
                    workInProgress.childLanes = NoLanes;
                    workInProgress.lanes = renderLanes;
                    workInProgress.child = null;
                    workInProgress.memoizedProps = null;
                    workInProgress.memoizedState = null;
                    workInProgress.updateQueue = null;
                    workInProgress.dependencies = null;
                    workInProgress.stateNode = null;

                    {
                      // Note: We don't reset the actualTime counts. It's useful to accumulate
                      // actual time across multiple render passes.
                      workInProgress.selfBaseDuration = 0;
                      workInProgress.treeBaseDuration = 0;
                    }
                  } else {
                    // Reset to the cloned values that createWorkInProgress would've.
                    workInProgress.childLanes = current.childLanes;
                    workInProgress.lanes = current.lanes;
                    workInProgress.child = current.child;
                    workInProgress.memoizedProps = current.memoizedProps;
                    workInProgress.memoizedState = current.memoizedState;
                    workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.

                    workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so
                    // it cannot be shared with the current fiber.

                    var currentDependencies = current.dependencies;
                    workInProgress.dependencies = currentDependencies === null ? null : {
                      lanes: currentDependencies.lanes,
                      firstContext: currentDependencies.firstContext
                    };

                    {
                      // Note: We don't reset the actualTime counts. It's useful to accumulate
                      // actual time across multiple render passes.
                      workInProgress.selfBaseDuration = current.selfBaseDuration;
                      workInProgress.treeBaseDuration = current.treeBaseDuration;
                    }
                  }

                  return workInProgress;
                }
                function createHostRootFiber(tag) {
                  var mode;

                  if (tag === ConcurrentRoot) {
                    mode = ConcurrentMode | BlockingMode | StrictMode;
                  } else if (tag === BlockingRoot) {
                    mode = BlockingMode | StrictMode;
                  } else {
                    mode = NoMode;
                  }

                  if (isDevToolsPresent) {
                    // Always collect profile timings when DevTools are present.
                    // This enables DevTools to start capturing timing at any point–
                    // Without some nodes in the tree having empty base times.
                    mode |= ProfileMode;
                  }

                  return createFiber(HostRoot, null, null, mode);
                }
                function createFiberFromTypeAndProps(type, // React$ElementType
                key, pendingProps, owner, mode, lanes) {
                  var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.

                  var resolvedType = type;

                  if (typeof type === 'function') {
                    if (shouldConstruct$1(type)) {
                      fiberTag = ClassComponent;

                      {
                        resolvedType = resolveClassForHotReloading(resolvedType);
                      }
                    } else {
                      {
                        resolvedType = resolveFunctionForHotReloading(resolvedType);
                      }
                    }
                  } else if (typeof type === 'string') {
                    fiberTag = HostComponent;
                  } else {
                    getTag: switch (type) {
                      case REACT_FRAGMENT_TYPE:
                        return createFiberFromFragment(pendingProps.children, mode, lanes, key);

                      case REACT_DEBUG_TRACING_MODE_TYPE:
                        fiberTag = Mode;
                        mode |= DebugTracingMode;
                        break;

                      case REACT_STRICT_MODE_TYPE:
                        fiberTag = Mode;
                        mode |= StrictMode;
                        break;

                      case REACT_PROFILER_TYPE:
                        return createFiberFromProfiler(pendingProps, mode, lanes, key);

                      case REACT_SUSPENSE_TYPE:
                        return createFiberFromSuspense(pendingProps, mode, lanes, key);

                      case REACT_SUSPENSE_LIST_TYPE:
                        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);

                      case REACT_OFFSCREEN_TYPE:
                        return createFiberFromOffscreen(pendingProps, mode, lanes, key);

                      case REACT_LEGACY_HIDDEN_TYPE:
                        return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);

                      case REACT_SCOPE_TYPE:

                      // eslint-disable-next-line no-fallthrough

                      default:
                        {
                          if (typeof type === 'object' && type !== null) {
                            switch (type.$$typeof) {
                              case REACT_PROVIDER_TYPE:
                                fiberTag = ContextProvider;
                                break getTag;

                              case REACT_CONTEXT_TYPE:
                                // This is a consumer
                                fiberTag = ContextConsumer;
                                break getTag;

                              case REACT_FORWARD_REF_TYPE:
                                fiberTag = ForwardRef;

                                {
                                  resolvedType = resolveForwardRefForHotReloading(resolvedType);
                                }

                                break getTag;

                              case REACT_MEMO_TYPE:
                                fiberTag = MemoComponent;
                                break getTag;

                              case REACT_LAZY_TYPE:
                                fiberTag = LazyComponent;
                                resolvedType = null;
                                break getTag;

                              case REACT_BLOCK_TYPE:
                                fiberTag = Block;
                                break getTag;
                            }
                          }

                          var info = '';

                          {
                            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
                              info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
                            }

                            var ownerName = owner ? getComponentName(owner.type) : null;

                            if (ownerName) {
                              info += '\n\nCheck the render method of `' + ownerName + '`.';
                            }
                          }

                          {
                            {
                              throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
                            }
                          }
                        }
                    }
                  }

                  var fiber = createFiber(fiberTag, pendingProps, key, mode);
                  fiber.elementType = type;
                  fiber.type = resolvedType;
                  fiber.lanes = lanes;

                  {
                    fiber._debugOwner = owner;
                  }

                  return fiber;
                }
                function createFiberFromElement(element, mode, lanes) {
                  var owner = null;

                  {
                    owner = element._owner;
                  }

                  var type = element.type;
                  var key = element.key;
                  var pendingProps = element.props;
                  var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);

                  {
                    fiber._debugSource = element._source;
                    fiber._debugOwner = element._owner;
                  }

                  return fiber;
                }
                function createFiberFromFragment(elements, mode, lanes, key) {
                  var fiber = createFiber(Fragment, elements, key, mode);
                  fiber.lanes = lanes;
                  return fiber;
                }

                function createFiberFromProfiler(pendingProps, mode, lanes, key) {
                  {
                    if (typeof pendingProps.id !== 'string') {
                      error('Profiler must specify an "id" as a prop');
                    }
                  }

                  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode); // TODO: The Profiler fiber shouldn't have a type. It has a tag.

                  fiber.elementType = REACT_PROFILER_TYPE;
                  fiber.type = REACT_PROFILER_TYPE;
                  fiber.lanes = lanes;

                  {
                    fiber.stateNode = {
                      effectDuration: 0,
                      passiveEffectDuration: 0
                    };
                  }

                  return fiber;
                }

                function createFiberFromSuspense(pendingProps, mode, lanes, key) {
                  var fiber = createFiber(SuspenseComponent, pendingProps, key, mode); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
                  // This needs to be fixed in getComponentName so that it relies on the tag
                  // instead.

                  fiber.type = REACT_SUSPENSE_TYPE;
                  fiber.elementType = REACT_SUSPENSE_TYPE;
                  fiber.lanes = lanes;
                  return fiber;
                }
                function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
                  var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);

                  {
                    // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.
                    // This needs to be fixed in getComponentName so that it relies on the tag
                    // instead.
                    fiber.type = REACT_SUSPENSE_LIST_TYPE;
                  }

                  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
                  fiber.lanes = lanes;
                  return fiber;
                }
                function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
                  var fiber = createFiber(OffscreenComponent, pendingProps, key, mode); // TODO: The OffscreenComponent fiber shouldn't have a type. It has a tag.
                  // This needs to be fixed in getComponentName so that it relies on the tag
                  // instead.

                  {
                    fiber.type = REACT_OFFSCREEN_TYPE;
                  }

                  fiber.elementType = REACT_OFFSCREEN_TYPE;
                  fiber.lanes = lanes;
                  return fiber;
                }
                function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
                  var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode); // TODO: The LegacyHidden fiber shouldn't have a type. It has a tag.
                  // This needs to be fixed in getComponentName so that it relies on the tag
                  // instead.

                  {
                    fiber.type = REACT_LEGACY_HIDDEN_TYPE;
                  }

                  fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
                  fiber.lanes = lanes;
                  return fiber;
                }
                function createFiberFromText(content, mode, lanes) {
                  var fiber = createFiber(HostText, content, null, mode);
                  fiber.lanes = lanes;
                  return fiber;
                }
                function createFiberFromHostInstanceForDeletion() {
                  var fiber = createFiber(HostComponent, null, null, NoMode); // TODO: These should not need a type.

                  fiber.elementType = 'DELETED';
                  fiber.type = 'DELETED';
                  return fiber;
                }
                function createFiberFromPortal(portal, mode, lanes) {
                  var pendingProps = portal.children !== null ? portal.children : [];
                  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
                  fiber.lanes = lanes;
                  fiber.stateNode = {
                    containerInfo: portal.containerInfo,
                    pendingChildren: null,
                    // Used by persistent updates
                    implementation: portal.implementation
                  };
                  return fiber;
                } // Used for stashing WIP properties to replay failed work in DEV.

                function assignFiberPropertiesInDEV(target, source) {
                  if (target === null) {
                    // This Fiber's initial properties will always be overwritten.
                    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
                    target = createFiber(IndeterminateComponent, null, null, NoMode);
                  } // This is intentionally written as a list of all properties.
                  // We tried to use Object.assign() instead but this is called in
                  // the hottest path, and Object.assign() was too slow:
                  // https://github.com/facebook/react/issues/12502
                  // This code is DEV-only so size is not a concern.


                  target.tag = source.tag;
                  target.key = source.key;
                  target.elementType = source.elementType;
                  target.type = source.type;
                  target.stateNode = source.stateNode;
                  target.return = source.return;
                  target.child = source.child;
                  target.sibling = source.sibling;
                  target.index = source.index;
                  target.ref = source.ref;
                  target.pendingProps = source.pendingProps;
                  target.memoizedProps = source.memoizedProps;
                  target.updateQueue = source.updateQueue;
                  target.memoizedState = source.memoizedState;
                  target.dependencies = source.dependencies;
                  target.mode = source.mode;
                  target.flags = source.flags;
                  target.nextEffect = source.nextEffect;
                  target.firstEffect = source.firstEffect;
                  target.lastEffect = source.lastEffect;
                  target.lanes = source.lanes;
                  target.childLanes = source.childLanes;
                  target.alternate = source.alternate;

                  {
                    target.actualDuration = source.actualDuration;
                    target.actualStartTime = source.actualStartTime;
                    target.selfBaseDuration = source.selfBaseDuration;
                    target.treeBaseDuration = source.treeBaseDuration;
                  }

                  target._debugID = source._debugID;
                  target._debugSource = source._debugSource;
                  target._debugOwner = source._debugOwner;
                  target._debugNeedsRemount = source._debugNeedsRemount;
                  target._debugHookTypes = source._debugHookTypes;
                  return target;
                }

                function FiberRootNode(containerInfo, tag, hydrate) {
                  this.tag = tag;
                  this.containerInfo = containerInfo;
                  this.pendingChildren = null;
                  this.current = null;
                  this.pingCache = null;
                  this.finishedWork = null;
                  this.timeoutHandle = noTimeout;
                  this.context = null;
                  this.pendingContext = null;
                  this.hydrate = hydrate;
                  this.callbackNode = null;
                  this.callbackPriority = NoLanePriority;
                  this.eventTimes = createLaneMap(NoLanes);
                  this.expirationTimes = createLaneMap(NoTimestamp);
                  this.pendingLanes = NoLanes;
                  this.suspendedLanes = NoLanes;
                  this.pingedLanes = NoLanes;
                  this.expiredLanes = NoLanes;
                  this.mutableReadLanes = NoLanes;
                  this.finishedLanes = NoLanes;
                  this.entangledLanes = NoLanes;
                  this.entanglements = createLaneMap(NoLanes);

                  {
                    this.mutableSourceEagerHydrationData = null;
                  }

                  {
                    this.interactionThreadID = tracing.unstable_getThreadID();
                    this.memoizedInteractions = new Set();
                    this.pendingInteractionMap = new Map();
                  }

                  {
                    switch (tag) {
                      case BlockingRoot:
                        this._debugRootType = 'createBlockingRoot()';
                        break;

                      case ConcurrentRoot:
                        this._debugRootType = 'createRoot()';
                        break;

                      case LegacyRoot:
                        this._debugRootType = 'createLegacyRoot()';
                        break;
                    }
                  }
                }

                function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
                  var root = new FiberRootNode(containerInfo, tag, hydrate);
                  // stateNode is any.


                  var uninitializedFiber = createHostRootFiber(tag);
                  root.current = uninitializedFiber;
                  uninitializedFiber.stateNode = root;
                  initializeUpdateQueue(uninitializedFiber);
                  return root;
                }

                // This ensures that the version used for server rendering matches the one
                // that is eventually read during hydration.
                // If they don't match there's a potential tear and a full deopt render is required.

                function registerMutableSourceForHydration(root, mutableSource) {
                  var getVersion = mutableSource._getVersion;
                  var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.
                  // Retaining it forever may interfere with GC.

                  if (root.mutableSourceEagerHydrationData == null) {
                    root.mutableSourceEagerHydrationData = [mutableSource, version];
                  } else {
                    root.mutableSourceEagerHydrationData.push(mutableSource, version);
                  }
                }

                function createPortal(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.
                implementation) {
                  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
                  return {
                    // This tag allow us to uniquely identify this as a React Portal
                    $$typeof: REACT_PORTAL_TYPE,
                    key: key == null ? null : '' + key,
                    children: children,
                    containerInfo: containerInfo,
                    implementation: implementation
                  };
                }

                var didWarnAboutNestedUpdates;
                var didWarnAboutFindNodeInStrictMode;

                {
                  didWarnAboutNestedUpdates = false;
                  didWarnAboutFindNodeInStrictMode = {};
                }

                function getContextForSubtree(parentComponent) {
                  if (!parentComponent) {
                    return emptyContextObject;
                  }

                  var fiber = get(parentComponent);
                  var parentContext = findCurrentUnmaskedContext(fiber);

                  if (fiber.tag === ClassComponent) {
                    var Component = fiber.type;

                    if (isContextProvider(Component)) {
                      return processChildContext(fiber, Component, parentContext);
                    }
                  }

                  return parentContext;
                }

                function findHostInstanceWithWarning(component, methodName) {
                  {
                    var fiber = get(component);

                    if (fiber === undefined) {
                      if (typeof component.render === 'function') {
                        {
                          {
                            throw Error("Unable to find node on an unmounted component.");
                          }
                        }
                      } else {
                        {
                          {
                            throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
                          }
                        }
                      }
                    }

                    var hostFiber = findCurrentHostFiber(fiber);

                    if (hostFiber === null) {
                      return null;
                    }

                    if (hostFiber.mode & StrictMode) {
                      var componentName = getComponentName(fiber.type) || 'Component';

                      if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                        didWarnAboutFindNodeInStrictMode[componentName] = true;
                        var previousFiber = current;

                        try {
                          setCurrentFiber(hostFiber);

                          if (fiber.mode & StrictMode) {
                            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
                          } else {
                            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
                          }
                        } finally {
                          // Ideally this should reset to previous but this shouldn't be called in
                          // render and there's another warning for that anyway.
                          if (previousFiber) {
                            setCurrentFiber(previousFiber);
                          } else {
                            resetCurrentFiber();
                          }
                        }
                      }
                    }

                    return hostFiber.stateNode;
                  }
                }

                function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
                  return createFiberRoot(containerInfo, tag, hydrate);
                }
                function updateContainer(element, container, parentComponent, callback) {
                  {
                    onScheduleRoot(container, element);
                  }

                  var current$1 = container.current;
                  var eventTime = requestEventTime();

                  {
                    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
                    if ('undefined' !== typeof jest) {
                      warnIfUnmockedScheduler(current$1);
                      warnIfNotScopedWithMatchingAct(current$1);
                    }
                  }

                  var lane = requestUpdateLane(current$1);

                  var context = getContextForSubtree(parentComponent);

                  if (container.context === null) {
                    container.context = context;
                  } else {
                    container.pendingContext = context;
                  }

                  {
                    if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                      didWarnAboutNestedUpdates = true;

                      error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
                    }
                  }

                  var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property
                  // being called "element".

                  update.payload = {
                    element: element
                  };
                  callback = callback === undefined ? null : callback;

                  if (callback !== null) {
                    {
                      if (typeof callback !== 'function') {
                        error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
                      }
                    }

                    update.callback = callback;
                  }

                  enqueueUpdate(current$1, update);
                  scheduleUpdateOnFiber(current$1, lane, eventTime);
                  return lane;
                }
                function getPublicRootInstance(container) {
                  var containerFiber = container.current;

                  if (!containerFiber.child) {
                    return null;
                  }

                  switch (containerFiber.child.tag) {
                    case HostComponent:
                      return getPublicInstance(containerFiber.child.stateNode);

                    default:
                      return containerFiber.child.stateNode;
                  }
                }

                function markRetryLaneImpl(fiber, retryLane) {
                  var suspenseState = fiber.memoizedState;

                  if (suspenseState !== null && suspenseState.dehydrated !== null) {
                    suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
                  }
                } // Increases the priority of thennables when they resolve within this boundary.


                function markRetryLaneIfNotHydrated(fiber, retryLane) {
                  markRetryLaneImpl(fiber, retryLane);
                  var alternate = fiber.alternate;

                  if (alternate) {
                    markRetryLaneImpl(alternate, retryLane);
                  }
                }

                function attemptUserBlockingHydration$1(fiber) {
                  if (fiber.tag !== SuspenseComponent) {
                    // We ignore HostRoots here because we can't increase
                    // their priority and they should not suspend on I/O,
                    // since you have to wrap anything that might suspend in
                    // Suspense.
                    return;
                  }

                  var eventTime = requestEventTime();
                  var lane = InputDiscreteHydrationLane;
                  scheduleUpdateOnFiber(fiber, lane, eventTime);
                  markRetryLaneIfNotHydrated(fiber, lane);
                }
                function attemptContinuousHydration$1(fiber) {
                  if (fiber.tag !== SuspenseComponent) {
                    // We ignore HostRoots here because we can't increase
                    // their priority and they should not suspend on I/O,
                    // since you have to wrap anything that might suspend in
                    // Suspense.
                    return;
                  }

                  var eventTime = requestEventTime();
                  var lane = SelectiveHydrationLane;
                  scheduleUpdateOnFiber(fiber, lane, eventTime);
                  markRetryLaneIfNotHydrated(fiber, lane);
                }
                function attemptHydrationAtCurrentPriority$1(fiber) {
                  if (fiber.tag !== SuspenseComponent) {
                    // We ignore HostRoots here because we can't increase
                    // their priority other than synchronously flush it.
                    return;
                  }

                  var eventTime = requestEventTime();
                  var lane = requestUpdateLane(fiber);
                  scheduleUpdateOnFiber(fiber, lane, eventTime);
                  markRetryLaneIfNotHydrated(fiber, lane);
                }
                function runWithPriority$2(priority, fn) {

                  try {
                    setCurrentUpdateLanePriority(priority);
                    return fn();
                  } finally {}
                }
                function findHostInstanceWithNoPortals(fiber) {
                  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

                  if (hostFiber === null) {
                    return null;
                  }

                  if (hostFiber.tag === FundamentalComponent) {
                    return hostFiber.stateNode.instance;
                  }

                  return hostFiber.stateNode;
                }

                var shouldSuspendImpl = function (fiber) {
                  return false;
                };

                function shouldSuspend(fiber) {
                  return shouldSuspendImpl(fiber);
                }
                var overrideHookState = null;
                var overrideHookStateDeletePath = null;
                var overrideHookStateRenamePath = null;
                var overrideProps = null;
                var overridePropsDeletePath = null;
                var overridePropsRenamePath = null;
                var scheduleUpdate = null;
                var setSuspenseHandler = null;

                {
                  var copyWithDeleteImpl = function (obj, path, index) {
                    var key = path[index];
                    var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);

                    if (index + 1 === path.length) {
                      if (Array.isArray(updated)) {
                        updated.splice(key, 1);
                      } else {
                        delete updated[key];
                      }

                      return updated;
                    } // $FlowFixMe number or string is fine here


                    updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
                    return updated;
                  };

                  var copyWithDelete = function (obj, path) {
                    return copyWithDeleteImpl(obj, path, 0);
                  };

                  var copyWithRenameImpl = function (obj, oldPath, newPath, index) {
                    var oldKey = oldPath[index];
                    var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);

                    if (index + 1 === oldPath.length) {
                      var newKey = newPath[index]; // $FlowFixMe number or string is fine here

                      updated[newKey] = updated[oldKey];

                      if (Array.isArray(updated)) {
                        updated.splice(oldKey, 1);
                      } else {
                        delete updated[oldKey];
                      }
                    } else {
                      // $FlowFixMe number or string is fine here
                      updated[oldKey] = copyWithRenameImpl( // $FlowFixMe number or string is fine here
                      obj[oldKey], oldPath, newPath, index + 1);
                    }

                    return updated;
                  };

                  var copyWithRename = function (obj, oldPath, newPath) {
                    if (oldPath.length !== newPath.length) {
                      warn('copyWithRename() expects paths of the same length');

                      return;
                    } else {
                      for (var i = 0; i < newPath.length - 1; i++) {
                        if (oldPath[i] !== newPath[i]) {
                          warn('copyWithRename() expects paths to be the same except for the deepest key');

                          return;
                        }
                      }
                    }

                    return copyWithRenameImpl(obj, oldPath, newPath, 0);
                  };

                  var copyWithSetImpl = function (obj, path, index, value) {
                    if (index >= path.length) {
                      return value;
                    }

                    var key = path[index];
                    var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj); // $FlowFixMe number or string is fine here

                    updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
                    return updated;
                  };

                  var copyWithSet = function (obj, path, value) {
                    return copyWithSetImpl(obj, path, 0, value);
                  };

                  var findHook = function (fiber, id) {
                    // For now, the "id" of stateful hooks is just the stateful hook index.
                    // This may change in the future with e.g. nested hooks.
                    var currentHook = fiber.memoizedState;

                    while (currentHook !== null && id > 0) {
                      currentHook = currentHook.next;
                      id--;
                    }

                    return currentHook;
                  }; // Support DevTools editable values for useState and useReducer.


                  overrideHookState = function (fiber, id, path, value) {
                    var hook = findHook(fiber, id);

                    if (hook !== null) {
                      var newState = copyWithSet(hook.memoizedState, path, value);
                      hook.memoizedState = newState;
                      hook.baseState = newState; // We aren't actually adding an update to the queue,
                      // because there is no update we can add for useReducer hooks that won't trigger an error.
                      // (There's no appropriate action type for DevTools overrides.)
                      // As a result though, React will see the scheduled update as a noop and bailout.
                      // Shallow cloning props works as a workaround for now to bypass the bailout check.

                      fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
                    }
                  };

                  overrideHookStateDeletePath = function (fiber, id, path) {
                    var hook = findHook(fiber, id);

                    if (hook !== null) {
                      var newState = copyWithDelete(hook.memoizedState, path);
                      hook.memoizedState = newState;
                      hook.baseState = newState; // We aren't actually adding an update to the queue,
                      // because there is no update we can add for useReducer hooks that won't trigger an error.
                      // (There's no appropriate action type for DevTools overrides.)
                      // As a result though, React will see the scheduled update as a noop and bailout.
                      // Shallow cloning props works as a workaround for now to bypass the bailout check.

                      fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
                    }
                  };

                  overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {
                    var hook = findHook(fiber, id);

                    if (hook !== null) {
                      var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                      hook.memoizedState = newState;
                      hook.baseState = newState; // We aren't actually adding an update to the queue,
                      // because there is no update we can add for useReducer hooks that won't trigger an error.
                      // (There's no appropriate action type for DevTools overrides.)
                      // As a result though, React will see the scheduled update as a noop and bailout.
                      // Shallow cloning props works as a workaround for now to bypass the bailout check.

                      fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
                    }
                  }; // Support DevTools props for function components, forwardRef, memo, host components, etc.


                  overrideProps = function (fiber, path, value) {
                    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);

                    if (fiber.alternate) {
                      fiber.alternate.pendingProps = fiber.pendingProps;
                    }

                    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
                  };

                  overridePropsDeletePath = function (fiber, path) {
                    fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);

                    if (fiber.alternate) {
                      fiber.alternate.pendingProps = fiber.pendingProps;
                    }

                    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
                  };

                  overridePropsRenamePath = function (fiber, oldPath, newPath) {
                    fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);

                    if (fiber.alternate) {
                      fiber.alternate.pendingProps = fiber.pendingProps;
                    }

                    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
                  };

                  scheduleUpdate = function (fiber) {
                    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
                  };

                  setSuspenseHandler = function (newShouldSuspendImpl) {
                    shouldSuspendImpl = newShouldSuspendImpl;
                  };
                }

                function findHostInstanceByFiber(fiber) {
                  var hostFiber = findCurrentHostFiber(fiber);

                  if (hostFiber === null) {
                    return null;
                  }

                  return hostFiber.stateNode;
                }

                function emptyFindFiberByHostInstance(instance) {
                  return null;
                }

                function getCurrentFiberForDevTools() {
                  return current;
                }

                function injectIntoDevTools(devToolsConfig) {
                  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
                  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
                  return injectInternals({
                    bundleType: devToolsConfig.bundleType,
                    version: devToolsConfig.version,
                    rendererPackageName: devToolsConfig.rendererPackageName,
                    rendererConfig: devToolsConfig.rendererConfig,
                    overrideHookState: overrideHookState,
                    overrideHookStateDeletePath: overrideHookStateDeletePath,
                    overrideHookStateRenamePath: overrideHookStateRenamePath,
                    overrideProps: overrideProps,
                    overridePropsDeletePath: overridePropsDeletePath,
                    overridePropsRenamePath: overridePropsRenamePath,
                    setSuspenseHandler: setSuspenseHandler,
                    scheduleUpdate: scheduleUpdate,
                    currentDispatcherRef: ReactCurrentDispatcher,
                    findHostInstanceByFiber: findHostInstanceByFiber,
                    findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
                    // React Refresh
                    findHostInstancesForRefresh: findHostInstancesForRefresh,
                    scheduleRefresh: scheduleRefresh,
                    scheduleRoot: scheduleRoot,
                    setRefreshHandler: setRefreshHandler,
                    // Enables DevTools to append owner stacks to error messages in DEV mode.
                    getCurrentFiber: getCurrentFiberForDevTools
                  });
                }

                function ReactDOMRoot(container, options) {
                  this._internalRoot = createRootImpl(container, ConcurrentRoot, options);
                }

                function ReactDOMBlockingRoot(container, tag, options) {
                  this._internalRoot = createRootImpl(container, tag, options);
                }

                ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function (children) {
                  var root = this._internalRoot;

                  {
                    if (typeof arguments[1] === 'function') {
                      error('render(...): does not support the second callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
                    }

                    var container = root.containerInfo;

                    if (container.nodeType !== COMMENT_NODE) {
                      var hostInstance = findHostInstanceWithNoPortals(root.current);

                      if (hostInstance) {
                        if (hostInstance.parentNode !== container) {
                          error('render(...): It looks like the React-rendered content of the ' + 'root container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + "root.unmount() to empty a root's container.");
                        }
                      }
                    }
                  }

                  updateContainer(children, root, null, null);
                };

                ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function () {
                  {
                    if (typeof arguments[0] === 'function') {
                      error('unmount(...): does not support a callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
                    }
                  }

                  var root = this._internalRoot;
                  var container = root.containerInfo;
                  updateContainer(null, root, null, function () {
                    unmarkContainerAsRoot(container);
                  });
                };

                function createRootImpl(container, tag, options) {
                  // Tag is either LegacyRoot or Concurrent Root
                  var hydrate = options != null && options.hydrate === true;
                  var hydrationCallbacks = options != null && options.hydrationOptions || null;
                  var mutableSources = options != null && options.hydrationOptions != null && options.hydrationOptions.mutableSources || null;
                  var root = createContainer(container, tag, hydrate);
                  markContainerAsRoot(root.current, container);
                  var containerNodeType = container.nodeType;

                  {
                    var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
                    listenToAllSupportedEvents(rootContainerElement);
                  }

                  if (mutableSources) {
                    for (var i = 0; i < mutableSources.length; i++) {
                      var mutableSource = mutableSources[i];
                      registerMutableSourceForHydration(root, mutableSource);
                    }
                  }

                  return root;
                }
                function createLegacyRoot(container, options) {
                  return new ReactDOMBlockingRoot(container, LegacyRoot, options);
                }
                function isValidContainer(node) {
                  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
                }

                var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
                var topLevelUpdateWarnings;
                var warnedAboutHydrateAPI = false;

                {
                  topLevelUpdateWarnings = function (container) {
                    if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                      var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);

                      if (hostInstance) {
                        if (hostInstance.parentNode !== container) {
                          error('render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');
                        }
                      }
                    }

                    var isRootRenderedBySomeReact = !!container._reactRootContainer;
                    var rootEl = getReactRootElementInContainer(container);
                    var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));

                    if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                      error('render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');
                    }

                    if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {
                      error('render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');
                    }
                  };
                }

                function getReactRootElementInContainer(container) {
                  if (!container) {
                    return null;
                  }

                  if (container.nodeType === DOCUMENT_NODE) {
                    return container.documentElement;
                  } else {
                    return container.firstChild;
                  }
                }

                function shouldHydrateDueToLegacyHeuristic(container) {
                  var rootElement = getReactRootElementInContainer(container);
                  return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
                }

                function legacyCreateRootFromDOMContainer(container, forceHydrate) {
                  var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container); // First clear any existing content.

                  if (!shouldHydrate) {
                    var warned = false;
                    var rootSibling;

                    while (rootSibling = container.lastChild) {
                      {
                        if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                          warned = true;

                          error('render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
                        }
                      }

                      container.removeChild(rootSibling);
                    }
                  }

                  {
                    if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
                      warnedAboutHydrateAPI = true;

                      warn('render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v18. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
                    }
                  }

                  return createLegacyRoot(container, shouldHydrate ? {
                    hydrate: true
                  } : undefined);
                }

                function warnOnInvalidCallback$1(callback, callerName) {
                  {
                    if (callback !== null && typeof callback !== 'function') {
                      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
                    }
                  }
                }

                function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
                  {
                    topLevelUpdateWarnings(container);
                    warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
                  } // TODO: Without `any` type, Flow says "Property cannot be accessed on any
                  // member of intersection type." Whyyyyyy.


                  var root = container._reactRootContainer;
                  var fiberRoot;

                  if (!root) {
                    // Initial mount
                    root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
                    fiberRoot = root._internalRoot;

                    if (typeof callback === 'function') {
                      var originalCallback = callback;

                      callback = function () {
                        var instance = getPublicRootInstance(fiberRoot);
                        originalCallback.call(instance);
                      };
                    } // Initial mount should not be batched.


                    unbatchedUpdates(function () {
                      updateContainer(children, fiberRoot, parentComponent, callback);
                    });
                  } else {
                    fiberRoot = root._internalRoot;

                    if (typeof callback === 'function') {
                      var _originalCallback = callback;

                      callback = function () {
                        var instance = getPublicRootInstance(fiberRoot);

                        _originalCallback.call(instance);
                      };
                    } // Update


                    updateContainer(children, fiberRoot, parentComponent, callback);
                  }

                  return getPublicRootInstance(fiberRoot);
                }

                function findDOMNode(componentOrElement) {
                  {
                    var owner = ReactCurrentOwner$3.current;

                    if (owner !== null && owner.stateNode !== null) {
                      var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;

                      if (!warnedAboutRefsInRender) {
                        error('%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner.type) || 'A component');
                      }

                      owner.stateNode._warnedAboutRefsInRender = true;
                    }
                  }

                  if (componentOrElement == null) {
                    return null;
                  }

                  if (componentOrElement.nodeType === ELEMENT_NODE) {
                    return componentOrElement;
                  }

                  {
                    return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
                  }
                }
                function hydrate(element, container, callback) {
                  if (!isValidContainer(container)) {
                    {
                      throw Error("Target container is not a DOM element.");
                    }
                  }

                  {
                    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

                    if (isModernRoot) {
                      error('You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call createRoot(container, {hydrate: true}).render(element)?');
                    }
                  } // TODO: throw or warn if we couldn't hydrate?


                  return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
                }
                function render(element, container, callback) {
                  if (!isValidContainer(container)) {
                    {
                      throw Error("Target container is not a DOM element.");
                    }
                  }

                  {
                    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

                    if (isModernRoot) {
                      error('You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call root.render(element)?');
                    }
                  }

                  return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
                }
                function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
                  if (!isValidContainer(containerNode)) {
                    {
                      throw Error("Target container is not a DOM element.");
                    }
                  }

                  if (!(parentComponent != null && has(parentComponent))) {
                    {
                      throw Error("parentComponent must be a valid React Component");
                    }
                  }

                  return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
                }
                function unmountComponentAtNode(container) {
                  if (!isValidContainer(container)) {
                    {
                      throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
                    }
                  }

                  {
                    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

                    if (isModernRoot) {
                      error('You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?');
                    }
                  }

                  if (container._reactRootContainer) {
                    {
                      var rootEl = getReactRootElementInContainer(container);
                      var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);

                      if (renderedByDifferentReact) {
                        error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.');
                      }
                    } // Unmount should not be batched.


                    unbatchedUpdates(function () {
                      legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
                        // $FlowFixMe This should probably use `delete container._reactRootContainer`
                        container._reactRootContainer = null;
                        unmarkContainerAsRoot(container);
                      });
                    }); // If you call unmountComponentAtNode twice in quick succession, you'll
                    // get `true` twice. That's probably fine?

                    return true;
                  } else {
                    {
                      var _rootEl = getReactRootElementInContainer(container);

                      var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)); // Check if the container itself is a React root node.

                      var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;

                      if (hasNonRootReactChild) {
                        error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');
                      }
                    }

                    return false;
                  }
                }

                setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
                setAttemptContinuousHydration(attemptContinuousHydration$1);
                setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
                setAttemptHydrationAtPriority(runWithPriority$2);
                var didWarnAboutUnstableCreatePortal = false;

                {
                  if (typeof Map !== 'function' || // $FlowIssue Flow incorrectly thinks Map has no prototype
                  Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || // $FlowIssue Flow incorrectly thinks Set has no prototype
                  Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
                    error('React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
                  }
                }

                setRestoreImplementation(restoreControlledState$3);
                setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);

                function createPortal$1(children, container) {
                  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

                  if (!isValidContainer(container)) {
                    {
                      throw Error("Target container is not a DOM element.");
                    }
                  } // TODO: pass ReactDOM portal implementation as third argument
                  // $FlowFixMe The Flow type is opaque but there's no way to actually create it.


                  return createPortal(children, container, null, key);
                }

                function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {

                  return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
                }

                function unstable_createPortal(children, container) {
                  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

                  {
                    if (!didWarnAboutUnstableCreatePortal) {
                      didWarnAboutUnstableCreatePortal = true;

                      warn('The ReactDOM.unstable_createPortal() alias has been deprecated, ' + 'and will be removed in React 18+. Update your code to use ' + 'ReactDOM.createPortal() instead. It has the exact same API, ' + 'but without the "unstable_" prefix.');
                    }
                  }

                  return createPortal$1(children, container, key);
                }

                var Internals = {
                  // Keep in sync with ReactTestUtils.js, and ReactTestUtilsAct.js.
                  // This is an array for better minification.
                  Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, flushPassiveEffects, // TODO: This is related to `act`, not events. Move to separate key?
                  IsThisRendererActing]
                };
                var foundDevTools = injectIntoDevTools({
                  findFiberByHostInstance: getClosestInstanceFromNode,
                  bundleType: 1,
                  version: ReactVersion,
                  rendererPackageName: 'react-dom'
                });

                {
                  if (!foundDevTools && canUseDOM && window.top === window.self) {
                    // If we're in Chrome or Firefox, provide a download link if not installed.
                    if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
                      var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.

                      if (/^(https?|file):$/.test(protocol)) {
                        // eslint-disable-next-line react-internal/no-production-logging
                        console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://reactjs.org/link/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://reactjs.org/link/react-devtools-faq' : ''), 'font-weight:bold');
                      }
                    }
                  }
                }

                _exports21.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
                _exports21.createPortal = createPortal$1;
                _exports21.findDOMNode = findDOMNode;
                _exports21.flushSync = flushSync;
                _exports21.hydrate = hydrate;
                _exports21.render = render;
                _exports21.unmountComponentAtNode = unmountComponentAtNode;
                _exports21.unstable_batchedUpdates = batchedUpdates$1;
                _exports21.unstable_createPortal = unstable_createPortal;
                _exports21.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
                _exports21.version = ReactVersion;
              })();
            }

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } }, "scheduler": { "package.json": function module(_require21, _exports22, _module23) {

          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //                                                                                                                     //
          // node_modules/scheduler/package.json                                                                                 //
          //                                                                                                                     //
          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //
          _module23.exports = {
            "name": "scheduler",
            "version": "0.20.2",
            "main": "index.js"
          };

          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        }, "index.js": function module(_require22, _exports23, _module24) {

          if (process.env.NODE_ENV === 'production') {
            _module24.exports = _require22('./cjs/scheduler.production.min.js');
          } else {
            _module24.exports = _require22('./cjs/scheduler.development.js');
          }

          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        }, "cjs": { "scheduler.production.min.js": function _module25(_require23, _exports24) {
            var f, g, h, k;if ("object" === typeof performance && "function" === typeof performance.now) {
              var l = performance;_exports24.unstable_now = function () {
                return l.now();
              };
            } else {
              var p = Date,
                  q = p.now();_exports24.unstable_now = function () {
                return p.now() - q;
              };
            }
            if ("undefined" === typeof window || "function" !== typeof MessageChannel) {
              var t = null,
                  u = null,
                  w = function () {
                if (null !== t) try {
                  var a = _exports24.unstable_now();t(!0, a);t = null;
                } catch (b) {
                  throw setTimeout(w, 0), b;
                }
              };f = function (a) {
                null !== t ? setTimeout(f, 0, a) : (t = a, setTimeout(w, 0));
              };g = function (a, b) {
                u = setTimeout(a, b);
              };h = function () {
                clearTimeout(u);
              };_exports24.unstable_shouldYield = function () {
                return !1;
              };k = _exports24.unstable_forceFrameRate = function () {};
            } else {
              var x = window.setTimeout,
                  y = window.clearTimeout;if ("undefined" !== typeof console) {
                var z = window.cancelAnimationFrame;"function" !== typeof window.requestAnimationFrame && console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");"function" !== typeof z && console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }var A = !1,
                  B = null,
                  C = -1,
                  D = 5,
                  E = 0;_exports24.unstable_shouldYield = function () {
                return _exports24.unstable_now() >= E;
              };k = function () {};_exports24.unstable_forceFrameRate = function (a) {
                0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : D = 0 < a ? Math.floor(1E3 / a) : 5;
              };var F = new MessageChannel(),
                  G = F.port2;F.port1.onmessage = function () {
                if (null !== B) {
                  var a = _exports24.unstable_now();E = a + D;try {
                    B(!0, a) ? G.postMessage(null) : (A = !1, B = null);
                  } catch (b) {
                    throw G.postMessage(null), b;
                  }
                } else A = !1;
              };f = function (a) {
                B = a;A || (A = !0, G.postMessage(null));
              };g = function (a, b) {
                C = x(function () {
                  a(_exports24.unstable_now());
                }, b);
              };h = function () {
                y(C);C = -1;
              };
            }function H(a, b) {
              var c = a.length;a.push(b);a: for (;;) {
                var d = c - 1 >>> 1,
                    e = a[d];if (void 0 !== e && 0 < I(e, b)) a[d] = b, a[c] = e, c = d;else break a;
              }
            }function J(a) {
              a = a[0];return void 0 === a ? null : a;
            }
            function K(a) {
              var b = a[0];if (void 0 !== b) {
                var c = a.pop();if (c !== b) {
                  a[0] = c;a: for (var d = 0, e = a.length; d < e;) {
                    var m = 2 * (d + 1) - 1,
                        n = a[m],
                        v = m + 1,
                        r = a[v];if (void 0 !== n && 0 > I(n, c)) void 0 !== r && 0 > I(r, n) ? (a[d] = r, a[v] = c, d = v) : (a[d] = n, a[m] = c, d = m);else if (void 0 !== r && 0 > I(r, c)) a[d] = r, a[v] = c, d = v;else break a;
                  }
                }return b;
              }return null;
            }function I(a, b) {
              var c = a.sortIndex - b.sortIndex;return 0 !== c ? c : a.id - b.id;
            }var L = [],
                M = [],
                N = 1,
                O = null,
                P = 3,
                Q = !1,
                R = !1,
                S = !1;
            function T(a) {
              for (var b = J(M); null !== b;) {
                if (null === b.callback) K(M);else if (b.startTime <= a) K(M), b.sortIndex = b.expirationTime, H(L, b);else break;b = J(M);
              }
            }function U(a) {
              S = !1;T(a);if (!R) if (null !== J(L)) R = !0, f(V);else {
                var b = J(M);null !== b && g(U, b.startTime - a);
              }
            }
            function V(a, b) {
              R = !1;S && (S = !1, h());Q = !0;var c = P;try {
                T(b);for (O = J(L); null !== O && (!(O.expirationTime > b) || a && !_exports24.unstable_shouldYield());) {
                  var d = O.callback;if ("function" === typeof d) {
                    O.callback = null;P = O.priorityLevel;var e = d(O.expirationTime <= b);b = _exports24.unstable_now();"function" === typeof e ? O.callback = e : O === J(L) && K(L);T(b);
                  } else K(L);O = J(L);
                }if (null !== O) var m = !0;else {
                  var n = J(M);null !== n && g(U, n.startTime - b);m = !1;
                }return m;
              } finally {
                O = null, P = c, Q = !1;
              }
            }var W = k;_exports24.unstable_IdlePriority = 5;
            _exports24.unstable_ImmediatePriority = 1;_exports24.unstable_LowPriority = 4;_exports24.unstable_NormalPriority = 3;_exports24.unstable_Profiling = null;_exports24.unstable_UserBlockingPriority = 2;_exports24.unstable_cancelCallback = function (a) {
              a.callback = null;
            };_exports24.unstable_continueExecution = function () {
              R || Q || (R = !0, f(V));
            };_exports24.unstable_getCurrentPriorityLevel = function () {
              return P;
            };_exports24.unstable_getFirstCallbackNode = function () {
              return J(L);
            };
            _exports24.unstable_next = function (a) {
              switch (P) {case 1:case 2:case 3:
                  var b = 3;break;default:
                  b = P;}var c = P;P = b;try {
                return a();
              } finally {
                P = c;
              }
            };_exports24.unstable_pauseExecution = function () {};_exports24.unstable_requestPaint = W;_exports24.unstable_runWithPriority = function (a, b) {
              switch (a) {case 1:case 2:case 3:case 4:case 5:
                  break;default:
                  a = 3;}var c = P;P = a;try {
                return b();
              } finally {
                P = c;
              }
            };
            _exports24.unstable_scheduleCallback = function (a, b, c) {
              var d = _exports24.unstable_now();"object" === typeof c && null !== c ? (c = c.delay, c = "number" === typeof c && 0 < c ? d + c : d) : c = d;switch (a) {case 1:
                  var e = -1;break;case 2:
                  e = 250;break;case 5:
                  e = 1073741823;break;case 4:
                  e = 1E4;break;default:
                  e = 5E3;}e = c + e;a = { id: N++, callback: b, priorityLevel: a, startTime: c, expirationTime: e, sortIndex: -1 };c > d ? (a.sortIndex = c, H(M, a), null === J(L) && a === J(M) && (S ? h() : S = !0, g(U, c - d))) : (a.sortIndex = e, H(L, a), R || Q || (R = !0, f(V)));return a;
            };
            _exports24.unstable_wrapCallback = function (a) {
              var b = P;return function () {
                var c = P;P = b;try {
                  return a.apply(this, arguments);
                } finally {
                  P = c;
                }
              };
            };

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "scheduler.development.js": function _module26(_require24, _exports25) {

            if (process.env.NODE_ENV !== "production") {
              (function () {

                var enableSchedulerDebugging = false;
                var enableProfiling = false;

                var requestHostCallback;
                var requestHostTimeout;
                var cancelHostTimeout;
                var requestPaint;
                var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';

                if (hasPerformanceNow) {
                  var localPerformance = performance;

                  _exports25.unstable_now = function () {
                    return localPerformance.now();
                  };
                } else {
                  var localDate = Date;
                  var initialTime = localDate.now();

                  _exports25.unstable_now = function () {
                    return localDate.now() - initialTime;
                  };
                }

                if ( // If Scheduler runs in a non-DOM environment, it falls back to a naive
                // implementation using setTimeout.
                typeof window === 'undefined' || // Check if MessageChannel is supported, too.
                typeof MessageChannel !== 'function') {
                  // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
                  // fallback to a naive implementation.
                  var _callback = null;
                  var _timeoutID = null;

                  var _flushCallback = function () {
                    if (_callback !== null) {
                      try {
                        var currentTime = _exports25.unstable_now();
                        var hasRemainingTime = true;

                        _callback(hasRemainingTime, currentTime);

                        _callback = null;
                      } catch (e) {
                        setTimeout(_flushCallback, 0);
                        throw e;
                      }
                    }
                  };

                  requestHostCallback = function (cb) {
                    if (_callback !== null) {
                      // Protect against re-entrancy.
                      setTimeout(requestHostCallback, 0, cb);
                    } else {
                      _callback = cb;
                      setTimeout(_flushCallback, 0);
                    }
                  };

                  requestHostTimeout = function (cb, ms) {
                    _timeoutID = setTimeout(cb, ms);
                  };

                  cancelHostTimeout = function () {
                    clearTimeout(_timeoutID);
                  };

                  _exports25.unstable_shouldYield = function () {
                    return false;
                  };

                  requestPaint = _exports25.unstable_forceFrameRate = function () {};
                } else {
                  // Capture local references to native APIs, in case a polyfill overrides them.
                  var _setTimeout = window.setTimeout;
                  var _clearTimeout = window.clearTimeout;

                  if (typeof console !== 'undefined') {
                    // TODO: Scheduler no longer requires these methods to be polyfilled. But
                    // maybe we want to continue warning if they don't exist, to preserve the
                    // option to rely on it in the future?
                    var requestAnimationFrame = window.requestAnimationFrame;
                    var cancelAnimationFrame = window.cancelAnimationFrame;

                    if (typeof requestAnimationFrame !== 'function') {
                      // Using console['error'] to evade Babel and ESLint
                      console['error']("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
                    }

                    if (typeof cancelAnimationFrame !== 'function') {
                      // Using console['error'] to evade Babel and ESLint
                      console['error']("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
                    }
                  }

                  var isMessageLoopRunning = false;
                  var scheduledHostCallback = null;
                  var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
                  // thread, like user events. By default, it yields multiple times per frame.
                  // It does not attempt to align with frame boundaries, since most tasks don't
                  // need to be frame aligned; for those that do, use requestAnimationFrame.

                  var yieldInterval = 5;
                  var deadline = 0; // TODO: Make this configurable

                  {
                    // `isInputPending` is not available. Since we have no way of knowing if
                    // there's pending input, always yield at the end of the frame.
                    _exports25.unstable_shouldYield = function () {
                      return _exports25.unstable_now() >= deadline;
                    }; // Since we yield every frame regardless, `requestPaint` has no effect.


                    requestPaint = function () {};
                  }

                  _exports25.unstable_forceFrameRate = function (fps) {
                    if (fps < 0 || fps > 125) {
                      // Using console['error'] to evade Babel and ESLint
                      console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');
                      return;
                    }

                    if (fps > 0) {
                      yieldInterval = Math.floor(1000 / fps);
                    } else {
                      // reset the framerate
                      yieldInterval = 5;
                    }
                  };

                  var performWorkUntilDeadline = function () {
                    if (scheduledHostCallback !== null) {
                      var currentTime = _exports25.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync
                      // cycle. This means there's always time remaining at the beginning of
                      // the message event.

                      deadline = currentTime + yieldInterval;
                      var hasTimeRemaining = true;

                      try {
                        var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);

                        if (!hasMoreWork) {
                          isMessageLoopRunning = false;
                          scheduledHostCallback = null;
                        } else {
                          // If there's more work, schedule the next message event at the end
                          // of the preceding one.
                          port.postMessage(null);
                        }
                      } catch (error) {
                        // If a scheduler task throws, exit the current browser task so the
                        // error can be observed.
                        port.postMessage(null);
                        throw error;
                      }
                    } else {
                      isMessageLoopRunning = false;
                    } // Yielding to the browser will give it a chance to paint, so we can
                  };

                  var channel = new MessageChannel();
                  var port = channel.port2;
                  channel.port1.onmessage = performWorkUntilDeadline;

                  requestHostCallback = function (callback) {
                    scheduledHostCallback = callback;

                    if (!isMessageLoopRunning) {
                      isMessageLoopRunning = true;
                      port.postMessage(null);
                    }
                  };

                  requestHostTimeout = function (callback, ms) {
                    taskTimeoutID = _setTimeout(function () {
                      callback(_exports25.unstable_now());
                    }, ms);
                  };

                  cancelHostTimeout = function () {
                    _clearTimeout(taskTimeoutID);

                    taskTimeoutID = -1;
                  };
                }

                function push(heap, node) {
                  var index = heap.length;
                  heap.push(node);
                  siftUp(heap, node, index);
                }
                function peek(heap) {
                  var first = heap[0];
                  return first === undefined ? null : first;
                }
                function pop(heap) {
                  var first = heap[0];

                  if (first !== undefined) {
                    var last = heap.pop();

                    if (last !== first) {
                      heap[0] = last;
                      siftDown(heap, last, 0);
                    }

                    return first;
                  } else {
                    return null;
                  }
                }

                function siftUp(heap, node, i) {
                  var index = i;

                  while (true) {
                    var parentIndex = index - 1 >>> 1;
                    var parent = heap[parentIndex];

                    if (parent !== undefined && compare(parent, node) > 0) {
                      // The parent is larger. Swap positions.
                      heap[parentIndex] = node;
                      heap[index] = parent;
                      index = parentIndex;
                    } else {
                      // The parent is smaller. Exit.
                      return;
                    }
                  }
                }

                function siftDown(heap, node, i) {
                  var index = i;
                  var length = heap.length;

                  while (index < length) {
                    var leftIndex = (index + 1) * 2 - 1;
                    var left = heap[leftIndex];
                    var rightIndex = leftIndex + 1;
                    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.

                    if (left !== undefined && compare(left, node) < 0) {
                      if (right !== undefined && compare(right, left) < 0) {
                        heap[index] = right;
                        heap[rightIndex] = node;
                        index = rightIndex;
                      } else {
                        heap[index] = left;
                        heap[leftIndex] = node;
                        index = leftIndex;
                      }
                    } else if (right !== undefined && compare(right, node) < 0) {
                      heap[index] = right;
                      heap[rightIndex] = node;
                      index = rightIndex;
                    } else {
                      // Neither child is smaller. Exit.
                      return;
                    }
                  }
                }

                function compare(a, b) {
                  // Compare sort index first, then task id.
                  var diff = a.sortIndex - b.sortIndex;
                  return diff !== 0 ? diff : a.id - b.id;
                }

                // TODO: Use symbols?
                var ImmediatePriority = 1;
                var UserBlockingPriority = 2;
                var NormalPriority = 3;
                var LowPriority = 4;
                var IdlePriority = 5;

                function markTaskErrored(task, ms) {}

                /* eslint-disable no-var */
                // Math.pow(2, 30) - 1
                // 0b111111111111111111111111111111

                var maxSigned31BitInt = 1073741823; // Times out immediately

                var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out

                var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
                var NORMAL_PRIORITY_TIMEOUT = 5000;
                var LOW_PRIORITY_TIMEOUT = 10000; // Never times out

                var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap

                var taskQueue = [];
                var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.

                var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
                var currentTask = null;
                var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.

                var isPerformingWork = false;
                var isHostCallbackScheduled = false;
                var isHostTimeoutScheduled = false;

                function advanceTimers(currentTime) {
                  // Check for tasks that are no longer delayed and add them to the queue.
                  var timer = peek(timerQueue);

                  while (timer !== null) {
                    if (timer.callback === null) {
                      // Timer was cancelled.
                      pop(timerQueue);
                    } else if (timer.startTime <= currentTime) {
                      // Timer fired. Transfer to the task queue.
                      pop(timerQueue);
                      timer.sortIndex = timer.expirationTime;
                      push(taskQueue, timer);
                    } else {
                      // Remaining timers are pending.
                      return;
                    }

                    timer = peek(timerQueue);
                  }
                }

                function handleTimeout(currentTime) {
                  isHostTimeoutScheduled = false;
                  advanceTimers(currentTime);

                  if (!isHostCallbackScheduled) {
                    if (peek(taskQueue) !== null) {
                      isHostCallbackScheduled = true;
                      requestHostCallback(flushWork);
                    } else {
                      var firstTimer = peek(timerQueue);

                      if (firstTimer !== null) {
                        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                      }
                    }
                  }
                }

                function flushWork(hasTimeRemaining, initialTime) {

                  isHostCallbackScheduled = false;

                  if (isHostTimeoutScheduled) {
                    // We scheduled a timeout but it's no longer needed. Cancel it.
                    isHostTimeoutScheduled = false;
                    cancelHostTimeout();
                  }

                  isPerformingWork = true;
                  var previousPriorityLevel = currentPriorityLevel;

                  try {
                    if (enableProfiling) {
                      try {
                        return workLoop(hasTimeRemaining, initialTime);
                      } catch (error) {
                        if (currentTask !== null) {
                          var currentTime = _exports25.unstable_now();
                          markTaskErrored(currentTask, currentTime);
                          currentTask.isQueued = false;
                        }

                        throw error;
                      }
                    } else {
                      // No catch in prod code path.
                      return workLoop(hasTimeRemaining, initialTime);
                    }
                  } finally {
                    currentTask = null;
                    currentPriorityLevel = previousPriorityLevel;
                    isPerformingWork = false;
                  }
                }

                function workLoop(hasTimeRemaining, initialTime) {
                  var currentTime = initialTime;
                  advanceTimers(currentTime);
                  currentTask = peek(taskQueue);

                  while (currentTask !== null && !enableSchedulerDebugging) {
                    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || _exports25.unstable_shouldYield())) {
                      // This currentTask hasn't expired, and we've reached the deadline.
                      break;
                    }

                    var callback = currentTask.callback;

                    if (typeof callback === 'function') {
                      currentTask.callback = null;
                      currentPriorityLevel = currentTask.priorityLevel;
                      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;

                      var continuationCallback = callback(didUserCallbackTimeout);
                      currentTime = _exports25.unstable_now();

                      if (typeof continuationCallback === 'function') {
                        currentTask.callback = continuationCallback;
                      } else {

                        if (currentTask === peek(taskQueue)) {
                          pop(taskQueue);
                        }
                      }

                      advanceTimers(currentTime);
                    } else {
                      pop(taskQueue);
                    }

                    currentTask = peek(taskQueue);
                  } // Return whether there's additional work


                  if (currentTask !== null) {
                    return true;
                  } else {
                    var firstTimer = peek(timerQueue);

                    if (firstTimer !== null) {
                      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                    }

                    return false;
                  }
                }

                function unstable_runWithPriority(priorityLevel, eventHandler) {
                  switch (priorityLevel) {
                    case ImmediatePriority:
                    case UserBlockingPriority:
                    case NormalPriority:
                    case LowPriority:
                    case IdlePriority:
                      break;

                    default:
                      priorityLevel = NormalPriority;
                  }

                  var previousPriorityLevel = currentPriorityLevel;
                  currentPriorityLevel = priorityLevel;

                  try {
                    return eventHandler();
                  } finally {
                    currentPriorityLevel = previousPriorityLevel;
                  }
                }

                function unstable_next(eventHandler) {
                  var priorityLevel;

                  switch (currentPriorityLevel) {
                    case ImmediatePriority:
                    case UserBlockingPriority:
                    case NormalPriority:
                      // Shift down to normal priority
                      priorityLevel = NormalPriority;
                      break;

                    default:
                      // Anything lower than normal priority should remain at the current level.
                      priorityLevel = currentPriorityLevel;
                      break;
                  }

                  var previousPriorityLevel = currentPriorityLevel;
                  currentPriorityLevel = priorityLevel;

                  try {
                    return eventHandler();
                  } finally {
                    currentPriorityLevel = previousPriorityLevel;
                  }
                }

                function unstable_wrapCallback(callback) {
                  var parentPriorityLevel = currentPriorityLevel;
                  return function () {
                    // This is a fork of runWithPriority, inlined for performance.
                    var previousPriorityLevel = currentPriorityLevel;
                    currentPriorityLevel = parentPriorityLevel;

                    try {
                      return callback.apply(this, arguments);
                    } finally {
                      currentPriorityLevel = previousPriorityLevel;
                    }
                  };
                }

                function unstable_scheduleCallback(priorityLevel, callback, options) {
                  var currentTime = _exports25.unstable_now();
                  var startTime;

                  if (typeof options === 'object' && options !== null) {
                    var delay = options.delay;

                    if (typeof delay === 'number' && delay > 0) {
                      startTime = currentTime + delay;
                    } else {
                      startTime = currentTime;
                    }
                  } else {
                    startTime = currentTime;
                  }

                  var timeout;

                  switch (priorityLevel) {
                    case ImmediatePriority:
                      timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                      break;

                    case UserBlockingPriority:
                      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                      break;

                    case IdlePriority:
                      timeout = IDLE_PRIORITY_TIMEOUT;
                      break;

                    case LowPriority:
                      timeout = LOW_PRIORITY_TIMEOUT;
                      break;

                    case NormalPriority:
                    default:
                      timeout = NORMAL_PRIORITY_TIMEOUT;
                      break;
                  }

                  var expirationTime = startTime + timeout;
                  var newTask = {
                    id: taskIdCounter++,
                    callback: callback,
                    priorityLevel: priorityLevel,
                    startTime: startTime,
                    expirationTime: expirationTime,
                    sortIndex: -1
                  };

                  if (startTime > currentTime) {
                    // This is a delayed task.
                    newTask.sortIndex = startTime;
                    push(timerQueue, newTask);

                    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                      // All tasks are delayed, and this is the task with the earliest delay.
                      if (isHostTimeoutScheduled) {
                        // Cancel an existing timeout.
                        cancelHostTimeout();
                      } else {
                        isHostTimeoutScheduled = true;
                      } // Schedule a timeout.


                      requestHostTimeout(handleTimeout, startTime - currentTime);
                    }
                  } else {
                    newTask.sortIndex = expirationTime;
                    push(taskQueue, newTask);
                    // wait until the next time we yield.


                    if (!isHostCallbackScheduled && !isPerformingWork) {
                      isHostCallbackScheduled = true;
                      requestHostCallback(flushWork);
                    }
                  }

                  return newTask;
                }

                function unstable_pauseExecution() {}

                function unstable_continueExecution() {

                  if (!isHostCallbackScheduled && !isPerformingWork) {
                    isHostCallbackScheduled = true;
                    requestHostCallback(flushWork);
                  }
                }

                function unstable_getFirstCallbackNode() {
                  return peek(taskQueue);
                }

                function unstable_cancelCallback(task) {
                  // remove from the queue because you can't remove arbitrary nodes from an
                  // array based heap, only the first one.)


                  task.callback = null;
                }

                function unstable_getCurrentPriorityLevel() {
                  return currentPriorityLevel;
                }

                var unstable_requestPaint = requestPaint;
                var unstable_Profiling = null;

                _exports25.unstable_IdlePriority = IdlePriority;
                _exports25.unstable_ImmediatePriority = ImmediatePriority;
                _exports25.unstable_LowPriority = LowPriority;
                _exports25.unstable_NormalPriority = NormalPriority;
                _exports25.unstable_Profiling = unstable_Profiling;
                _exports25.unstable_UserBlockingPriority = UserBlockingPriority;
                _exports25.unstable_cancelCallback = unstable_cancelCallback;
                _exports25.unstable_continueExecution = unstable_continueExecution;
                _exports25.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
                _exports25.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
                _exports25.unstable_next = unstable_next;
                _exports25.unstable_pauseExecution = unstable_pauseExecution;
                _exports25.unstable_requestPaint = unstable_requestPaint;
                _exports25.unstable_runWithPriority = unstable_runWithPriority;
                _exports25.unstable_scheduleCallback = unstable_scheduleCallback;
                _exports25.unstable_wrapCallback = unstable_wrapCallback;
              })();
            }

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "scheduler-tracing.production.min.js": function _module27(_require25, _exports26) {
            var b = 0;_exports26.__interactionsRef = null;_exports26.__subscriberRef = null;_exports26.unstable_clear = function (a) {
              return a();
            };_exports26.unstable_getCurrent = function () {
              return null;
            };_exports26.unstable_getThreadID = function () {
              return ++b;
            };_exports26.unstable_subscribe = function () {};_exports26.unstable_trace = function (a, d, c) {
              return c();
            };_exports26.unstable_unsubscribe = function () {};_exports26.unstable_wrap = function (a) {
              return a;
            };

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "scheduler-tracing.development.js": function _module28(_require26, _exports27) {

            if (process.env.NODE_ENV !== "production") {
              (function () {

                var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.

                var interactionIDCounter = 0;
                var threadIDCounter = 0; // Set of currently traced interactions.
                // Interactions "stack"–
                // Meaning that newly traced interactions are appended to the previously active set.
                // When an interaction goes out of scope, the previous set (if any) is restored.

                _exports27.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.

                _exports27.__subscriberRef = null;

                {
                  _exports27.__interactionsRef = {
                    current: new Set()
                  };
                  _exports27.__subscriberRef = {
                    current: null
                  };
                }
                function unstable_clear(callback) {

                  var prevInteractions = _exports27.__interactionsRef.current;
                  _exports27.__interactionsRef.current = new Set();

                  try {
                    return callback();
                  } finally {
                    _exports27.__interactionsRef.current = prevInteractions;
                  }
                }
                function unstable_getCurrent() {
                  {
                    return _exports27.__interactionsRef.current;
                  }
                }
                function unstable_getThreadID() {
                  return ++threadIDCounter;
                }
                function unstable_trace(name, timestamp, callback) {
                  var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;

                  var interaction = {
                    __count: 1,
                    id: interactionIDCounter++,
                    name: name,
                    timestamp: timestamp
                  };
                  var prevInteractions = _exports27.__interactionsRef.current; // Traced interactions should stack/accumulate.
                  // To do that, clone the current interactions.
                  // The previous set will be restored upon completion.

                  var interactions = new Set(prevInteractions);
                  interactions.add(interaction);
                  _exports27.__interactionsRef.current = interactions;
                  var subscriber = _exports27.__subscriberRef.current;
                  var returnValue;

                  try {
                    if (subscriber !== null) {
                      subscriber.onInteractionTraced(interaction);
                    }
                  } finally {
                    try {
                      if (subscriber !== null) {
                        subscriber.onWorkStarted(interactions, threadID);
                      }
                    } finally {
                      try {
                        returnValue = callback();
                      } finally {
                        _exports27.__interactionsRef.current = prevInteractions;

                        try {
                          if (subscriber !== null) {
                            subscriber.onWorkStopped(interactions, threadID);
                          }
                        } finally {
                          interaction.__count--; // If no async work was scheduled for this interaction,
                          // Notify subscribers that it's completed.

                          if (subscriber !== null && interaction.__count === 0) {
                            subscriber.onInteractionScheduledWorkCompleted(interaction);
                          }
                        }
                      }
                    }
                  }

                  return returnValue;
                }
                function unstable_wrap(callback) {
                  var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;

                  var wrappedInteractions = _exports27.__interactionsRef.current;
                  var subscriber = _exports27.__subscriberRef.current;

                  if (subscriber !== null) {
                    subscriber.onWorkScheduled(wrappedInteractions, threadID);
                  } // Update the pending async work count for the current interactions.
                  // Update after calling subscribers in case of error.


                  wrappedInteractions.forEach(function (interaction) {
                    interaction.__count++;
                  });
                  var hasRun = false;

                  function wrapped() {
                    var prevInteractions = _exports27.__interactionsRef.current;
                    _exports27.__interactionsRef.current = wrappedInteractions;
                    subscriber = _exports27.__subscriberRef.current;

                    try {
                      var returnValue;

                      try {
                        if (subscriber !== null) {
                          subscriber.onWorkStarted(wrappedInteractions, threadID);
                        }
                      } finally {
                        try {
                          returnValue = callback.apply(undefined, arguments);
                        } finally {
                          _exports27.__interactionsRef.current = prevInteractions;

                          if (subscriber !== null) {
                            subscriber.onWorkStopped(wrappedInteractions, threadID);
                          }
                        }
                      }

                      return returnValue;
                    } finally {
                      if (!hasRun) {
                        // We only expect a wrapped function to be executed once,
                        // But in the event that it's executed more than once–
                        // Only decrement the outstanding interaction counts once.
                        hasRun = true; // Update pending async counts for all wrapped interactions.
                        // If this was the last scheduled async work for any of them,
                        // Mark them as completed.

                        wrappedInteractions.forEach(function (interaction) {
                          interaction.__count--;

                          if (subscriber !== null && interaction.__count === 0) {
                            subscriber.onInteractionScheduledWorkCompleted(interaction);
                          }
                        });
                      }
                    }
                  }

                  wrapped.cancel = function cancel() {
                    subscriber = _exports27.__subscriberRef.current;

                    try {
                      if (subscriber !== null) {
                        subscriber.onWorkCanceled(wrappedInteractions, threadID);
                      }
                    } finally {
                      // Update pending async counts for all wrapped interactions.
                      // If this was the last scheduled async work for any of them,
                      // Mark them as completed.
                      wrappedInteractions.forEach(function (interaction) {
                        interaction.__count--;

                        if (subscriber && interaction.__count === 0) {
                          subscriber.onInteractionScheduledWorkCompleted(interaction);
                        }
                      });
                    }
                  };

                  return wrapped;
                }

                var subscribers = null;

                {
                  subscribers = new Set();
                }

                function unstable_subscribe(subscriber) {
                  {
                    subscribers.add(subscriber);

                    if (subscribers.size === 1) {
                      _exports27.__subscriberRef.current = {
                        onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
                        onInteractionTraced: onInteractionTraced,
                        onWorkCanceled: onWorkCanceled,
                        onWorkScheduled: onWorkScheduled,
                        onWorkStarted: onWorkStarted,
                        onWorkStopped: onWorkStopped
                      };
                    }
                  }
                }
                function unstable_unsubscribe(subscriber) {
                  {
                    subscribers.delete(subscriber);

                    if (subscribers.size === 0) {
                      _exports27.__subscriberRef.current = null;
                    }
                  }
                }

                function onInteractionTraced(interaction) {
                  var didCatchError = false;
                  var caughtError = null;
                  subscribers.forEach(function (subscriber) {
                    try {
                      subscriber.onInteractionTraced(interaction);
                    } catch (error) {
                      if (!didCatchError) {
                        didCatchError = true;
                        caughtError = error;
                      }
                    }
                  });

                  if (didCatchError) {
                    throw caughtError;
                  }
                }

                function onInteractionScheduledWorkCompleted(interaction) {
                  var didCatchError = false;
                  var caughtError = null;
                  subscribers.forEach(function (subscriber) {
                    try {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    } catch (error) {
                      if (!didCatchError) {
                        didCatchError = true;
                        caughtError = error;
                      }
                    }
                  });

                  if (didCatchError) {
                    throw caughtError;
                  }
                }

                function onWorkScheduled(interactions, threadID) {
                  var didCatchError = false;
                  var caughtError = null;
                  subscribers.forEach(function (subscriber) {
                    try {
                      subscriber.onWorkScheduled(interactions, threadID);
                    } catch (error) {
                      if (!didCatchError) {
                        didCatchError = true;
                        caughtError = error;
                      }
                    }
                  });

                  if (didCatchError) {
                    throw caughtError;
                  }
                }

                function onWorkStarted(interactions, threadID) {
                  var didCatchError = false;
                  var caughtError = null;
                  subscribers.forEach(function (subscriber) {
                    try {
                      subscriber.onWorkStarted(interactions, threadID);
                    } catch (error) {
                      if (!didCatchError) {
                        didCatchError = true;
                        caughtError = error;
                      }
                    }
                  });

                  if (didCatchError) {
                    throw caughtError;
                  }
                }

                function onWorkStopped(interactions, threadID) {
                  var didCatchError = false;
                  var caughtError = null;
                  subscribers.forEach(function (subscriber) {
                    try {
                      subscriber.onWorkStopped(interactions, threadID);
                    } catch (error) {
                      if (!didCatchError) {
                        didCatchError = true;
                        caughtError = error;
                      }
                    }
                  });

                  if (didCatchError) {
                    throw caughtError;
                  }
                }

                function onWorkCanceled(interactions, threadID) {
                  var didCatchError = false;
                  var caughtError = null;
                  subscribers.forEach(function (subscriber) {
                    try {
                      subscriber.onWorkCanceled(interactions, threadID);
                    } catch (error) {
                      if (!didCatchError) {
                        didCatchError = true;
                        caughtError = error;
                      }
                    }
                  });

                  if (didCatchError) {
                    throw caughtError;
                  }
                }

                _exports27.unstable_clear = unstable_clear;
                _exports27.unstable_getCurrent = unstable_getCurrent;
                _exports27.unstable_getThreadID = unstable_getThreadID;
                _exports27.unstable_subscribe = unstable_subscribe;
                _exports27.unstable_trace = unstable_trace;
                _exports27.unstable_unsubscribe = unstable_unsubscribe;
                _exports27.unstable_wrap = unstable_wrap;
              })();
            }

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } }, "tracing.js": function module(_require27, _exports28, _module29) {

          if (process.env.NODE_ENV === 'production') {
            _module29.exports = _require27('./cjs/scheduler-tracing.production.min.js');
          } else {
            _module29.exports = _require27('./cjs/scheduler-tracing.development.js');
          }

          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        } }, "meteor-node-stubs": { "package.json": function module(_require28, _exports29, _module30) {

          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //                                                                                                                     //
          // node_modules/meteor-node-stubs/package.json                                                                         //
          //                                                                                                                     //
          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //
          _module30.exports = {
            "name": "meteor-node-stubs",
            "version": "1.1.0",
            "main": "index.js"
          };

          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        }, "index.js": function module(_require29, _exports30, _module31) {

          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //                                                                                                                     //
          // node_modules/meteor-node-stubs/index.js                                                                             //
          //                                                                                                                     //
          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //
          var map = _require29("./map.json");
          var meteorAliases = {};

          Object.keys(map).forEach(function (id) {
            if (typeof map[id] === "string") {
              var aliasParts = _module31.id.split("/");
              aliasParts.pop();
              aliasParts.push("node_modules", map[id]);
              _exports30[id] = meteorAliases[id + ".js"] = aliasParts.join("/");
            } else {
              _exports30[id] = map[id];
              meteorAliases[id + ".js"] = function () {};
            }
          });

          if (typeof meteorInstall === "function") {
            meteorInstall({
              // Install the aliases into a node_modules directory one level up from
              // the root directory, so that they do not clutter the namespace
              // available to apps and packages.
              "..": {
                node_modules: meteorAliases
              }
            });
          }

          // If Buffer is not defined globally, but the "buffer" built-in stub is
          // installed and can be imported, use it to define global.Buffer so that
          // modules like core-util-is/lib/util.js can refer to Buffer without
          // crashing application startup.
          if (typeof global.Buffer !== "function") {
            try {
              // Use (0, require)(...) to avoid registering a dependency on the
              // "buffer" stub, in case it is not otherwise bundled.
              global.Buffer = (0, _require29)("buffer").Buffer;
            } catch (ok) {
              // Failure to import "buffer" is fine as long as the Buffer global
              // variable is not used.
            }
          }

          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        }, "map.json": function module(_require30, _exports31, _module32) {

          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //                                                                                                                     //
          // node_modules/meteor-node-stubs/map.json                                                                             //
          //                                                                                                                     //
          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //
          _module32.exports = {
            "assert": "assert/",
            "buffer": "buffer/",
            "child_process": null,
            "cluster": null,
            "console": "console-browserify",
            "constants": "constants-browserify",
            "crypto": "../wrappers/crypto.js",
            "dgram": null,
            "dns": null,
            "domain": "domain-browser",
            "events": "events/",
            "fs": null,
            "http": "stream-http",
            "https": "https-browserify",
            "module": "../wrappers/module.js",
            "net": null,
            "os": "os-browserify/browser.js",
            "path": "path-browserify",
            "process": "process/browser.js",
            "punycode": "punycode/",
            "querystring": "querystring-es3/",
            "readline": null,
            "repl": null,
            "stream": "stream-browserify",
            "_stream_duplex": "readable-stream/lib/_stream_duplex.js",
            "_stream_passthrough": "readable-stream/lib/_stream_passthrough.js",
            "_stream_readable": "readable-stream/lib/_stream_readable.js",
            "_stream_transform": "readable-stream/lib/_stream_transform.js",
            "_stream_writable": "readable-stream/lib/_stream_writable.js",
            "string_decoder": "string_decoder/",
            "sys": "util/util.js",
            "timers": "timers-browserify",
            "tls": null,
            "tty": "tty-browserify",
            "url": "url/",
            "util": "util/util.js",
            "vm": "vm-browserify",
            "zlib": "browserify-zlib"
          };

          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        }, "deps": { "process.js": function _module33(_require31) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/meteor-node-stubs/deps/process.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require31("process/browser.js");

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } }, "node_modules": { "process": { "browser.js": function module(_require32, _exports32, _module34) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/meteor-node-stubs/node_modules/process/browser.js                                                      //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // shim for using process in browser
              var process = _module34.exports = {};

              // cached from whatever global is present so that test runners that stub it
              // don't break things.  But we need to wrap it in a try catch in case it is
              // wrapped in strict mode code which doesn't define any globals.  It's inside a
              // function because try/catches deoptimize in certain engines.

              var cachedSetTimeout;
              var cachedClearTimeout;

              function defaultSetTimout() {
                throw new Error('setTimeout has not been defined');
              }
              function defaultClearTimeout() {
                throw new Error('clearTimeout has not been defined');
              }
              (function () {
                try {
                  if (typeof setTimeout === 'function') {
                    cachedSetTimeout = setTimeout;
                  } else {
                    cachedSetTimeout = defaultSetTimout;
                  }
                } catch (e) {
                  cachedSetTimeout = defaultSetTimout;
                }
                try {
                  if (typeof clearTimeout === 'function') {
                    cachedClearTimeout = clearTimeout;
                  } else {
                    cachedClearTimeout = defaultClearTimeout;
                  }
                } catch (e) {
                  cachedClearTimeout = defaultClearTimeout;
                }
              })();
              function runTimeout(fun) {
                if (cachedSetTimeout === setTimeout) {
                  //normal enviroments in sane situations
                  return setTimeout(fun, 0);
                }
                // if setTimeout wasn't available but was latter defined
                if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                  cachedSetTimeout = setTimeout;
                  return setTimeout(fun, 0);
                }
                try {
                  // when when somebody has screwed with setTimeout but no I.E. maddness
                  return cachedSetTimeout(fun, 0);
                } catch (e) {
                  try {
                    // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                    return cachedSetTimeout.call(null, fun, 0);
                  } catch (e) {
                    // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                    return cachedSetTimeout.call(this, fun, 0);
                  }
                }
              }
              function runClearTimeout(marker) {
                if (cachedClearTimeout === clearTimeout) {
                  //normal enviroments in sane situations
                  return clearTimeout(marker);
                }
                // if clearTimeout wasn't available but was latter defined
                if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                  cachedClearTimeout = clearTimeout;
                  return clearTimeout(marker);
                }
                try {
                  // when when somebody has screwed with setTimeout but no I.E. maddness
                  return cachedClearTimeout(marker);
                } catch (e) {
                  try {
                    // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                    return cachedClearTimeout.call(null, marker);
                  } catch (e) {
                    // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                    // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                    return cachedClearTimeout.call(this, marker);
                  }
                }
              }
              var queue = [];
              var draining = false;
              var currentQueue;
              var queueIndex = -1;

              function cleanUpNextTick() {
                if (!draining || !currentQueue) {
                  return;
                }
                draining = false;
                if (currentQueue.length) {
                  queue = currentQueue.concat(queue);
                } else {
                  queueIndex = -1;
                }
                if (queue.length) {
                  drainQueue();
                }
              }

              function drainQueue() {
                if (draining) {
                  return;
                }
                var timeout = runTimeout(cleanUpNextTick);
                draining = true;

                var len = queue.length;
                while (len) {
                  currentQueue = queue;
                  queue = [];
                  while (++queueIndex < len) {
                    if (currentQueue) {
                      currentQueue[queueIndex].run();
                    }
                  }
                  queueIndex = -1;
                  len = queue.length;
                }
                currentQueue = null;
                draining = false;
                runClearTimeout(timeout);
              }

              process.nextTick = function (fun) {
                var args = new Array(arguments.length - 1);
                if (arguments.length > 1) {
                  for (var i = 1; i < arguments.length; i++) {
                    args[i - 1] = arguments[i];
                  }
                }
                queue.push(new Item(fun, args));
                if (queue.length === 1 && !draining) {
                  runTimeout(drainQueue);
                }
              };

              // v8 likes predictible objects
              function Item(fun, array) {
                this.fun = fun;
                this.array = array;
              }
              Item.prototype.run = function () {
                this.fun.apply(null, this.array);
              };
              process.title = 'browser';
              process.browser = true;
              process.env = {};
              process.argv = [];
              process.version = ''; // empty string to avoid regexp issues
              process.versions = {};

              function noop() {}

              process.on = noop;
              process.addListener = noop;
              process.once = noop;
              process.off = noop;
              process.removeListener = noop;
              process.removeAllListeners = noop;
              process.emit = noop;
              process.prependListener = noop;
              process.prependOnceListener = noop;

              process.listeners = function (name) {
                return [];
              };

              process.binding = function (name) {
                throw new Error('process.binding is not supported');
              };

              process.cwd = function () {
                return '/';
              };
              process.chdir = function (dir) {
                throw new Error('process.chdir is not supported');
              };
              process.umask = function () {
                return 0;
              };

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            } } } }, "@babel": { "runtime": { "package.json": function module(_require33, _exports33, _module35) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/@babel/runtime/package.json                                                                            //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module35.exports = {
              "author": {
                "name": "The Babel Team",
                "url": "https://babel.dev/team"
              },
              "bugs": {
                "url": "https://github.com/babel/babel/issues"
              },
              "bundleDependencies": false,
              "dependencies": {
                "regenerator-runtime": "^0.13.4"
              },
              "deprecated": false,
              "description": "babel's modular runtime helpers",
              "engines": {
                "node": ">=6.9.0"
              },
              "exports": {
                "./helpers/jsx": [{
                  "node": "./helpers/jsx.js",
                  "import": "./helpers/esm/jsx.js",
                  "default": "./helpers/jsx.js"
                }, "./helpers/jsx.js"],
                "./helpers/esm/jsx": "./helpers/esm/jsx.js",
                "./helpers/objectSpread2": [{
                  "node": "./helpers/objectSpread2.js",
                  "import": "./helpers/esm/objectSpread2.js",
                  "default": "./helpers/objectSpread2.js"
                }, "./helpers/objectSpread2.js"],
                "./helpers/esm/objectSpread2": "./helpers/esm/objectSpread2.js",
                "./helpers/typeof": [{
                  "node": "./helpers/typeof.js",
                  "import": "./helpers/esm/typeof.js",
                  "default": "./helpers/typeof.js"
                }, "./helpers/typeof.js"],
                "./helpers/esm/typeof": "./helpers/esm/typeof.js",
                "./helpers/wrapRegExp": [{
                  "node": "./helpers/wrapRegExp.js",
                  "import": "./helpers/esm/wrapRegExp.js",
                  "default": "./helpers/wrapRegExp.js"
                }, "./helpers/wrapRegExp.js"],
                "./helpers/esm/wrapRegExp": "./helpers/esm/wrapRegExp.js",
                "./helpers/asyncIterator": [{
                  "node": "./helpers/asyncIterator.js",
                  "import": "./helpers/esm/asyncIterator.js",
                  "default": "./helpers/asyncIterator.js"
                }, "./helpers/asyncIterator.js"],
                "./helpers/esm/asyncIterator": "./helpers/esm/asyncIterator.js",
                "./helpers/AwaitValue": [{
                  "node": "./helpers/AwaitValue.js",
                  "import": "./helpers/esm/AwaitValue.js",
                  "default": "./helpers/AwaitValue.js"
                }, "./helpers/AwaitValue.js"],
                "./helpers/esm/AwaitValue": "./helpers/esm/AwaitValue.js",
                "./helpers/AsyncGenerator": [{
                  "node": "./helpers/AsyncGenerator.js",
                  "import": "./helpers/esm/AsyncGenerator.js",
                  "default": "./helpers/AsyncGenerator.js"
                }, "./helpers/AsyncGenerator.js"],
                "./helpers/esm/AsyncGenerator": "./helpers/esm/AsyncGenerator.js",
                "./helpers/wrapAsyncGenerator": [{
                  "node": "./helpers/wrapAsyncGenerator.js",
                  "import": "./helpers/esm/wrapAsyncGenerator.js",
                  "default": "./helpers/wrapAsyncGenerator.js"
                }, "./helpers/wrapAsyncGenerator.js"],
                "./helpers/esm/wrapAsyncGenerator": "./helpers/esm/wrapAsyncGenerator.js",
                "./helpers/awaitAsyncGenerator": [{
                  "node": "./helpers/awaitAsyncGenerator.js",
                  "import": "./helpers/esm/awaitAsyncGenerator.js",
                  "default": "./helpers/awaitAsyncGenerator.js"
                }, "./helpers/awaitAsyncGenerator.js"],
                "./helpers/esm/awaitAsyncGenerator": "./helpers/esm/awaitAsyncGenerator.js",
                "./helpers/asyncGeneratorDelegate": [{
                  "node": "./helpers/asyncGeneratorDelegate.js",
                  "import": "./helpers/esm/asyncGeneratorDelegate.js",
                  "default": "./helpers/asyncGeneratorDelegate.js"
                }, "./helpers/asyncGeneratorDelegate.js"],
                "./helpers/esm/asyncGeneratorDelegate": "./helpers/esm/asyncGeneratorDelegate.js",
                "./helpers/asyncToGenerator": [{
                  "node": "./helpers/asyncToGenerator.js",
                  "import": "./helpers/esm/asyncToGenerator.js",
                  "default": "./helpers/asyncToGenerator.js"
                }, "./helpers/asyncToGenerator.js"],
                "./helpers/esm/asyncToGenerator": "./helpers/esm/asyncToGenerator.js",
                "./helpers/classCallCheck": [{
                  "node": "./helpers/classCallCheck.js",
                  "import": "./helpers/esm/classCallCheck.js",
                  "default": "./helpers/classCallCheck.js"
                }, "./helpers/classCallCheck.js"],
                "./helpers/esm/classCallCheck": "./helpers/esm/classCallCheck.js",
                "./helpers/createClass": [{
                  "node": "./helpers/createClass.js",
                  "import": "./helpers/esm/createClass.js",
                  "default": "./helpers/createClass.js"
                }, "./helpers/createClass.js"],
                "./helpers/esm/createClass": "./helpers/esm/createClass.js",
                "./helpers/defineEnumerableProperties": [{
                  "node": "./helpers/defineEnumerableProperties.js",
                  "import": "./helpers/esm/defineEnumerableProperties.js",
                  "default": "./helpers/defineEnumerableProperties.js"
                }, "./helpers/defineEnumerableProperties.js"],
                "./helpers/esm/defineEnumerableProperties": "./helpers/esm/defineEnumerableProperties.js",
                "./helpers/defaults": [{
                  "node": "./helpers/defaults.js",
                  "import": "./helpers/esm/defaults.js",
                  "default": "./helpers/defaults.js"
                }, "./helpers/defaults.js"],
                "./helpers/esm/defaults": "./helpers/esm/defaults.js",
                "./helpers/defineProperty": [{
                  "node": "./helpers/defineProperty.js",
                  "import": "./helpers/esm/defineProperty.js",
                  "default": "./helpers/defineProperty.js"
                }, "./helpers/defineProperty.js"],
                "./helpers/esm/defineProperty": "./helpers/esm/defineProperty.js",
                "./helpers/extends": [{
                  "node": "./helpers/extends.js",
                  "import": "./helpers/esm/extends.js",
                  "default": "./helpers/extends.js"
                }, "./helpers/extends.js"],
                "./helpers/esm/extends": "./helpers/esm/extends.js",
                "./helpers/objectSpread": [{
                  "node": "./helpers/objectSpread.js",
                  "import": "./helpers/esm/objectSpread.js",
                  "default": "./helpers/objectSpread.js"
                }, "./helpers/objectSpread.js"],
                "./helpers/esm/objectSpread": "./helpers/esm/objectSpread.js",
                "./helpers/inherits": [{
                  "node": "./helpers/inherits.js",
                  "import": "./helpers/esm/inherits.js",
                  "default": "./helpers/inherits.js"
                }, "./helpers/inherits.js"],
                "./helpers/esm/inherits": "./helpers/esm/inherits.js",
                "./helpers/inheritsLoose": [{
                  "node": "./helpers/inheritsLoose.js",
                  "import": "./helpers/esm/inheritsLoose.js",
                  "default": "./helpers/inheritsLoose.js"
                }, "./helpers/inheritsLoose.js"],
                "./helpers/esm/inheritsLoose": "./helpers/esm/inheritsLoose.js",
                "./helpers/getPrototypeOf": [{
                  "node": "./helpers/getPrototypeOf.js",
                  "import": "./helpers/esm/getPrototypeOf.js",
                  "default": "./helpers/getPrototypeOf.js"
                }, "./helpers/getPrototypeOf.js"],
                "./helpers/esm/getPrototypeOf": "./helpers/esm/getPrototypeOf.js",
                "./helpers/setPrototypeOf": [{
                  "node": "./helpers/setPrototypeOf.js",
                  "import": "./helpers/esm/setPrototypeOf.js",
                  "default": "./helpers/setPrototypeOf.js"
                }, "./helpers/setPrototypeOf.js"],
                "./helpers/esm/setPrototypeOf": "./helpers/esm/setPrototypeOf.js",
                "./helpers/isNativeReflectConstruct": [{
                  "node": "./helpers/isNativeReflectConstruct.js",
                  "import": "./helpers/esm/isNativeReflectConstruct.js",
                  "default": "./helpers/isNativeReflectConstruct.js"
                }, "./helpers/isNativeReflectConstruct.js"],
                "./helpers/esm/isNativeReflectConstruct": "./helpers/esm/isNativeReflectConstruct.js",
                "./helpers/construct": [{
                  "node": "./helpers/construct.js",
                  "import": "./helpers/esm/construct.js",
                  "default": "./helpers/construct.js"
                }, "./helpers/construct.js"],
                "./helpers/esm/construct": "./helpers/esm/construct.js",
                "./helpers/isNativeFunction": [{
                  "node": "./helpers/isNativeFunction.js",
                  "import": "./helpers/esm/isNativeFunction.js",
                  "default": "./helpers/isNativeFunction.js"
                }, "./helpers/isNativeFunction.js"],
                "./helpers/esm/isNativeFunction": "./helpers/esm/isNativeFunction.js",
                "./helpers/wrapNativeSuper": [{
                  "node": "./helpers/wrapNativeSuper.js",
                  "import": "./helpers/esm/wrapNativeSuper.js",
                  "default": "./helpers/wrapNativeSuper.js"
                }, "./helpers/wrapNativeSuper.js"],
                "./helpers/esm/wrapNativeSuper": "./helpers/esm/wrapNativeSuper.js",
                "./helpers/instanceof": [{
                  "node": "./helpers/instanceof.js",
                  "import": "./helpers/esm/instanceof.js",
                  "default": "./helpers/instanceof.js"
                }, "./helpers/instanceof.js"],
                "./helpers/esm/instanceof": "./helpers/esm/instanceof.js",
                "./helpers/interopRequireDefault": [{
                  "node": "./helpers/interopRequireDefault.js",
                  "import": "./helpers/esm/interopRequireDefault.js",
                  "default": "./helpers/interopRequireDefault.js"
                }, "./helpers/interopRequireDefault.js"],
                "./helpers/esm/interopRequireDefault": "./helpers/esm/interopRequireDefault.js",
                "./helpers/interopRequireWildcard": [{
                  "node": "./helpers/interopRequireWildcard.js",
                  "import": "./helpers/esm/interopRequireWildcard.js",
                  "default": "./helpers/interopRequireWildcard.js"
                }, "./helpers/interopRequireWildcard.js"],
                "./helpers/esm/interopRequireWildcard": "./helpers/esm/interopRequireWildcard.js",
                "./helpers/newArrowCheck": [{
                  "node": "./helpers/newArrowCheck.js",
                  "import": "./helpers/esm/newArrowCheck.js",
                  "default": "./helpers/newArrowCheck.js"
                }, "./helpers/newArrowCheck.js"],
                "./helpers/esm/newArrowCheck": "./helpers/esm/newArrowCheck.js",
                "./helpers/objectDestructuringEmpty": [{
                  "node": "./helpers/objectDestructuringEmpty.js",
                  "import": "./helpers/esm/objectDestructuringEmpty.js",
                  "default": "./helpers/objectDestructuringEmpty.js"
                }, "./helpers/objectDestructuringEmpty.js"],
                "./helpers/esm/objectDestructuringEmpty": "./helpers/esm/objectDestructuringEmpty.js",
                "./helpers/objectWithoutPropertiesLoose": [{
                  "node": "./helpers/objectWithoutPropertiesLoose.js",
                  "import": "./helpers/esm/objectWithoutPropertiesLoose.js",
                  "default": "./helpers/objectWithoutPropertiesLoose.js"
                }, "./helpers/objectWithoutPropertiesLoose.js"],
                "./helpers/esm/objectWithoutPropertiesLoose": "./helpers/esm/objectWithoutPropertiesLoose.js",
                "./helpers/objectWithoutProperties": [{
                  "node": "./helpers/objectWithoutProperties.js",
                  "import": "./helpers/esm/objectWithoutProperties.js",
                  "default": "./helpers/objectWithoutProperties.js"
                }, "./helpers/objectWithoutProperties.js"],
                "./helpers/esm/objectWithoutProperties": "./helpers/esm/objectWithoutProperties.js",
                "./helpers/assertThisInitialized": [{
                  "node": "./helpers/assertThisInitialized.js",
                  "import": "./helpers/esm/assertThisInitialized.js",
                  "default": "./helpers/assertThisInitialized.js"
                }, "./helpers/assertThisInitialized.js"],
                "./helpers/esm/assertThisInitialized": "./helpers/esm/assertThisInitialized.js",
                "./helpers/possibleConstructorReturn": [{
                  "node": "./helpers/possibleConstructorReturn.js",
                  "import": "./helpers/esm/possibleConstructorReturn.js",
                  "default": "./helpers/possibleConstructorReturn.js"
                }, "./helpers/possibleConstructorReturn.js"],
                "./helpers/esm/possibleConstructorReturn": "./helpers/esm/possibleConstructorReturn.js",
                "./helpers/createSuper": [{
                  "node": "./helpers/createSuper.js",
                  "import": "./helpers/esm/createSuper.js",
                  "default": "./helpers/createSuper.js"
                }, "./helpers/createSuper.js"],
                "./helpers/esm/createSuper": "./helpers/esm/createSuper.js",
                "./helpers/superPropBase": [{
                  "node": "./helpers/superPropBase.js",
                  "import": "./helpers/esm/superPropBase.js",
                  "default": "./helpers/superPropBase.js"
                }, "./helpers/superPropBase.js"],
                "./helpers/esm/superPropBase": "./helpers/esm/superPropBase.js",
                "./helpers/get": [{
                  "node": "./helpers/get.js",
                  "import": "./helpers/esm/get.js",
                  "default": "./helpers/get.js"
                }, "./helpers/get.js"],
                "./helpers/esm/get": "./helpers/esm/get.js",
                "./helpers/set": [{
                  "node": "./helpers/set.js",
                  "import": "./helpers/esm/set.js",
                  "default": "./helpers/set.js"
                }, "./helpers/set.js"],
                "./helpers/esm/set": "./helpers/esm/set.js",
                "./helpers/taggedTemplateLiteral": [{
                  "node": "./helpers/taggedTemplateLiteral.js",
                  "import": "./helpers/esm/taggedTemplateLiteral.js",
                  "default": "./helpers/taggedTemplateLiteral.js"
                }, "./helpers/taggedTemplateLiteral.js"],
                "./helpers/esm/taggedTemplateLiteral": "./helpers/esm/taggedTemplateLiteral.js",
                "./helpers/taggedTemplateLiteralLoose": [{
                  "node": "./helpers/taggedTemplateLiteralLoose.js",
                  "import": "./helpers/esm/taggedTemplateLiteralLoose.js",
                  "default": "./helpers/taggedTemplateLiteralLoose.js"
                }, "./helpers/taggedTemplateLiteralLoose.js"],
                "./helpers/esm/taggedTemplateLiteralLoose": "./helpers/esm/taggedTemplateLiteralLoose.js",
                "./helpers/readOnlyError": [{
                  "node": "./helpers/readOnlyError.js",
                  "import": "./helpers/esm/readOnlyError.js",
                  "default": "./helpers/readOnlyError.js"
                }, "./helpers/readOnlyError.js"],
                "./helpers/esm/readOnlyError": "./helpers/esm/readOnlyError.js",
                "./helpers/writeOnlyError": [{
                  "node": "./helpers/writeOnlyError.js",
                  "import": "./helpers/esm/writeOnlyError.js",
                  "default": "./helpers/writeOnlyError.js"
                }, "./helpers/writeOnlyError.js"],
                "./helpers/esm/writeOnlyError": "./helpers/esm/writeOnlyError.js",
                "./helpers/classNameTDZError": [{
                  "node": "./helpers/classNameTDZError.js",
                  "import": "./helpers/esm/classNameTDZError.js",
                  "default": "./helpers/classNameTDZError.js"
                }, "./helpers/classNameTDZError.js"],
                "./helpers/esm/classNameTDZError": "./helpers/esm/classNameTDZError.js",
                "./helpers/temporalUndefined": [{
                  "node": "./helpers/temporalUndefined.js",
                  "import": "./helpers/esm/temporalUndefined.js",
                  "default": "./helpers/temporalUndefined.js"
                }, "./helpers/temporalUndefined.js"],
                "./helpers/esm/temporalUndefined": "./helpers/esm/temporalUndefined.js",
                "./helpers/tdz": [{
                  "node": "./helpers/tdz.js",
                  "import": "./helpers/esm/tdz.js",
                  "default": "./helpers/tdz.js"
                }, "./helpers/tdz.js"],
                "./helpers/esm/tdz": "./helpers/esm/tdz.js",
                "./helpers/temporalRef": [{
                  "node": "./helpers/temporalRef.js",
                  "import": "./helpers/esm/temporalRef.js",
                  "default": "./helpers/temporalRef.js"
                }, "./helpers/temporalRef.js"],
                "./helpers/esm/temporalRef": "./helpers/esm/temporalRef.js",
                "./helpers/slicedToArray": [{
                  "node": "./helpers/slicedToArray.js",
                  "import": "./helpers/esm/slicedToArray.js",
                  "default": "./helpers/slicedToArray.js"
                }, "./helpers/slicedToArray.js"],
                "./helpers/esm/slicedToArray": "./helpers/esm/slicedToArray.js",
                "./helpers/slicedToArrayLoose": [{
                  "node": "./helpers/slicedToArrayLoose.js",
                  "import": "./helpers/esm/slicedToArrayLoose.js",
                  "default": "./helpers/slicedToArrayLoose.js"
                }, "./helpers/slicedToArrayLoose.js"],
                "./helpers/esm/slicedToArrayLoose": "./helpers/esm/slicedToArrayLoose.js",
                "./helpers/toArray": [{
                  "node": "./helpers/toArray.js",
                  "import": "./helpers/esm/toArray.js",
                  "default": "./helpers/toArray.js"
                }, "./helpers/toArray.js"],
                "./helpers/esm/toArray": "./helpers/esm/toArray.js",
                "./helpers/toConsumableArray": [{
                  "node": "./helpers/toConsumableArray.js",
                  "import": "./helpers/esm/toConsumableArray.js",
                  "default": "./helpers/toConsumableArray.js"
                }, "./helpers/toConsumableArray.js"],
                "./helpers/esm/toConsumableArray": "./helpers/esm/toConsumableArray.js",
                "./helpers/arrayWithoutHoles": [{
                  "node": "./helpers/arrayWithoutHoles.js",
                  "import": "./helpers/esm/arrayWithoutHoles.js",
                  "default": "./helpers/arrayWithoutHoles.js"
                }, "./helpers/arrayWithoutHoles.js"],
                "./helpers/esm/arrayWithoutHoles": "./helpers/esm/arrayWithoutHoles.js",
                "./helpers/arrayWithHoles": [{
                  "node": "./helpers/arrayWithHoles.js",
                  "import": "./helpers/esm/arrayWithHoles.js",
                  "default": "./helpers/arrayWithHoles.js"
                }, "./helpers/arrayWithHoles.js"],
                "./helpers/esm/arrayWithHoles": "./helpers/esm/arrayWithHoles.js",
                "./helpers/maybeArrayLike": [{
                  "node": "./helpers/maybeArrayLike.js",
                  "import": "./helpers/esm/maybeArrayLike.js",
                  "default": "./helpers/maybeArrayLike.js"
                }, "./helpers/maybeArrayLike.js"],
                "./helpers/esm/maybeArrayLike": "./helpers/esm/maybeArrayLike.js",
                "./helpers/iterableToArray": [{
                  "node": "./helpers/iterableToArray.js",
                  "import": "./helpers/esm/iterableToArray.js",
                  "default": "./helpers/iterableToArray.js"
                }, "./helpers/iterableToArray.js"],
                "./helpers/esm/iterableToArray": "./helpers/esm/iterableToArray.js",
                "./helpers/iterableToArrayLimit": [{
                  "node": "./helpers/iterableToArrayLimit.js",
                  "import": "./helpers/esm/iterableToArrayLimit.js",
                  "default": "./helpers/iterableToArrayLimit.js"
                }, "./helpers/iterableToArrayLimit.js"],
                "./helpers/esm/iterableToArrayLimit": "./helpers/esm/iterableToArrayLimit.js",
                "./helpers/iterableToArrayLimitLoose": [{
                  "node": "./helpers/iterableToArrayLimitLoose.js",
                  "import": "./helpers/esm/iterableToArrayLimitLoose.js",
                  "default": "./helpers/iterableToArrayLimitLoose.js"
                }, "./helpers/iterableToArrayLimitLoose.js"],
                "./helpers/esm/iterableToArrayLimitLoose": "./helpers/esm/iterableToArrayLimitLoose.js",
                "./helpers/unsupportedIterableToArray": [{
                  "node": "./helpers/unsupportedIterableToArray.js",
                  "import": "./helpers/esm/unsupportedIterableToArray.js",
                  "default": "./helpers/unsupportedIterableToArray.js"
                }, "./helpers/unsupportedIterableToArray.js"],
                "./helpers/esm/unsupportedIterableToArray": "./helpers/esm/unsupportedIterableToArray.js",
                "./helpers/arrayLikeToArray": [{
                  "node": "./helpers/arrayLikeToArray.js",
                  "import": "./helpers/esm/arrayLikeToArray.js",
                  "default": "./helpers/arrayLikeToArray.js"
                }, "./helpers/arrayLikeToArray.js"],
                "./helpers/esm/arrayLikeToArray": "./helpers/esm/arrayLikeToArray.js",
                "./helpers/nonIterableSpread": [{
                  "node": "./helpers/nonIterableSpread.js",
                  "import": "./helpers/esm/nonIterableSpread.js",
                  "default": "./helpers/nonIterableSpread.js"
                }, "./helpers/nonIterableSpread.js"],
                "./helpers/esm/nonIterableSpread": "./helpers/esm/nonIterableSpread.js",
                "./helpers/nonIterableRest": [{
                  "node": "./helpers/nonIterableRest.js",
                  "import": "./helpers/esm/nonIterableRest.js",
                  "default": "./helpers/nonIterableRest.js"
                }, "./helpers/nonIterableRest.js"],
                "./helpers/esm/nonIterableRest": "./helpers/esm/nonIterableRest.js",
                "./helpers/createForOfIteratorHelper": [{
                  "node": "./helpers/createForOfIteratorHelper.js",
                  "import": "./helpers/esm/createForOfIteratorHelper.js",
                  "default": "./helpers/createForOfIteratorHelper.js"
                }, "./helpers/createForOfIteratorHelper.js"],
                "./helpers/esm/createForOfIteratorHelper": "./helpers/esm/createForOfIteratorHelper.js",
                "./helpers/createForOfIteratorHelperLoose": [{
                  "node": "./helpers/createForOfIteratorHelperLoose.js",
                  "import": "./helpers/esm/createForOfIteratorHelperLoose.js",
                  "default": "./helpers/createForOfIteratorHelperLoose.js"
                }, "./helpers/createForOfIteratorHelperLoose.js"],
                "./helpers/esm/createForOfIteratorHelperLoose": "./helpers/esm/createForOfIteratorHelperLoose.js",
                "./helpers/skipFirstGeneratorNext": [{
                  "node": "./helpers/skipFirstGeneratorNext.js",
                  "import": "./helpers/esm/skipFirstGeneratorNext.js",
                  "default": "./helpers/skipFirstGeneratorNext.js"
                }, "./helpers/skipFirstGeneratorNext.js"],
                "./helpers/esm/skipFirstGeneratorNext": "./helpers/esm/skipFirstGeneratorNext.js",
                "./helpers/toPrimitive": [{
                  "node": "./helpers/toPrimitive.js",
                  "import": "./helpers/esm/toPrimitive.js",
                  "default": "./helpers/toPrimitive.js"
                }, "./helpers/toPrimitive.js"],
                "./helpers/esm/toPrimitive": "./helpers/esm/toPrimitive.js",
                "./helpers/toPropertyKey": [{
                  "node": "./helpers/toPropertyKey.js",
                  "import": "./helpers/esm/toPropertyKey.js",
                  "default": "./helpers/toPropertyKey.js"
                }, "./helpers/toPropertyKey.js"],
                "./helpers/esm/toPropertyKey": "./helpers/esm/toPropertyKey.js",
                "./helpers/initializerWarningHelper": [{
                  "node": "./helpers/initializerWarningHelper.js",
                  "import": "./helpers/esm/initializerWarningHelper.js",
                  "default": "./helpers/initializerWarningHelper.js"
                }, "./helpers/initializerWarningHelper.js"],
                "./helpers/esm/initializerWarningHelper": "./helpers/esm/initializerWarningHelper.js",
                "./helpers/initializerDefineProperty": [{
                  "node": "./helpers/initializerDefineProperty.js",
                  "import": "./helpers/esm/initializerDefineProperty.js",
                  "default": "./helpers/initializerDefineProperty.js"
                }, "./helpers/initializerDefineProperty.js"],
                "./helpers/esm/initializerDefineProperty": "./helpers/esm/initializerDefineProperty.js",
                "./helpers/applyDecoratedDescriptor": [{
                  "node": "./helpers/applyDecoratedDescriptor.js",
                  "import": "./helpers/esm/applyDecoratedDescriptor.js",
                  "default": "./helpers/applyDecoratedDescriptor.js"
                }, "./helpers/applyDecoratedDescriptor.js"],
                "./helpers/esm/applyDecoratedDescriptor": "./helpers/esm/applyDecoratedDescriptor.js",
                "./helpers/classPrivateFieldLooseKey": [{
                  "node": "./helpers/classPrivateFieldLooseKey.js",
                  "import": "./helpers/esm/classPrivateFieldLooseKey.js",
                  "default": "./helpers/classPrivateFieldLooseKey.js"
                }, "./helpers/classPrivateFieldLooseKey.js"],
                "./helpers/esm/classPrivateFieldLooseKey": "./helpers/esm/classPrivateFieldLooseKey.js",
                "./helpers/classPrivateFieldLooseBase": [{
                  "node": "./helpers/classPrivateFieldLooseBase.js",
                  "import": "./helpers/esm/classPrivateFieldLooseBase.js",
                  "default": "./helpers/classPrivateFieldLooseBase.js"
                }, "./helpers/classPrivateFieldLooseBase.js"],
                "./helpers/esm/classPrivateFieldLooseBase": "./helpers/esm/classPrivateFieldLooseBase.js",
                "./helpers/classPrivateFieldGet": [{
                  "node": "./helpers/classPrivateFieldGet.js",
                  "import": "./helpers/esm/classPrivateFieldGet.js",
                  "default": "./helpers/classPrivateFieldGet.js"
                }, "./helpers/classPrivateFieldGet.js"],
                "./helpers/esm/classPrivateFieldGet": "./helpers/esm/classPrivateFieldGet.js",
                "./helpers/classPrivateFieldSet": [{
                  "node": "./helpers/classPrivateFieldSet.js",
                  "import": "./helpers/esm/classPrivateFieldSet.js",
                  "default": "./helpers/classPrivateFieldSet.js"
                }, "./helpers/classPrivateFieldSet.js"],
                "./helpers/esm/classPrivateFieldSet": "./helpers/esm/classPrivateFieldSet.js",
                "./helpers/classPrivateFieldDestructureSet": [{
                  "node": "./helpers/classPrivateFieldDestructureSet.js",
                  "import": "./helpers/esm/classPrivateFieldDestructureSet.js",
                  "default": "./helpers/classPrivateFieldDestructureSet.js"
                }, "./helpers/classPrivateFieldDestructureSet.js"],
                "./helpers/esm/classPrivateFieldDestructureSet": "./helpers/esm/classPrivateFieldDestructureSet.js",
                "./helpers/classExtractFieldDescriptor": [{
                  "node": "./helpers/classExtractFieldDescriptor.js",
                  "import": "./helpers/esm/classExtractFieldDescriptor.js",
                  "default": "./helpers/classExtractFieldDescriptor.js"
                }, "./helpers/classExtractFieldDescriptor.js"],
                "./helpers/esm/classExtractFieldDescriptor": "./helpers/esm/classExtractFieldDescriptor.js",
                "./helpers/classStaticPrivateFieldSpecGet": [{
                  "node": "./helpers/classStaticPrivateFieldSpecGet.js",
                  "import": "./helpers/esm/classStaticPrivateFieldSpecGet.js",
                  "default": "./helpers/classStaticPrivateFieldSpecGet.js"
                }, "./helpers/classStaticPrivateFieldSpecGet.js"],
                "./helpers/esm/classStaticPrivateFieldSpecGet": "./helpers/esm/classStaticPrivateFieldSpecGet.js",
                "./helpers/classStaticPrivateFieldSpecSet": [{
                  "node": "./helpers/classStaticPrivateFieldSpecSet.js",
                  "import": "./helpers/esm/classStaticPrivateFieldSpecSet.js",
                  "default": "./helpers/classStaticPrivateFieldSpecSet.js"
                }, "./helpers/classStaticPrivateFieldSpecSet.js"],
                "./helpers/esm/classStaticPrivateFieldSpecSet": "./helpers/esm/classStaticPrivateFieldSpecSet.js",
                "./helpers/classStaticPrivateMethodGet": [{
                  "node": "./helpers/classStaticPrivateMethodGet.js",
                  "import": "./helpers/esm/classStaticPrivateMethodGet.js",
                  "default": "./helpers/classStaticPrivateMethodGet.js"
                }, "./helpers/classStaticPrivateMethodGet.js"],
                "./helpers/esm/classStaticPrivateMethodGet": "./helpers/esm/classStaticPrivateMethodGet.js",
                "./helpers/classStaticPrivateMethodSet": [{
                  "node": "./helpers/classStaticPrivateMethodSet.js",
                  "import": "./helpers/esm/classStaticPrivateMethodSet.js",
                  "default": "./helpers/classStaticPrivateMethodSet.js"
                }, "./helpers/classStaticPrivateMethodSet.js"],
                "./helpers/esm/classStaticPrivateMethodSet": "./helpers/esm/classStaticPrivateMethodSet.js",
                "./helpers/classApplyDescriptorGet": [{
                  "node": "./helpers/classApplyDescriptorGet.js",
                  "import": "./helpers/esm/classApplyDescriptorGet.js",
                  "default": "./helpers/classApplyDescriptorGet.js"
                }, "./helpers/classApplyDescriptorGet.js"],
                "./helpers/esm/classApplyDescriptorGet": "./helpers/esm/classApplyDescriptorGet.js",
                "./helpers/classApplyDescriptorSet": [{
                  "node": "./helpers/classApplyDescriptorSet.js",
                  "import": "./helpers/esm/classApplyDescriptorSet.js",
                  "default": "./helpers/classApplyDescriptorSet.js"
                }, "./helpers/classApplyDescriptorSet.js"],
                "./helpers/esm/classApplyDescriptorSet": "./helpers/esm/classApplyDescriptorSet.js",
                "./helpers/classApplyDescriptorDestructureSet": [{
                  "node": "./helpers/classApplyDescriptorDestructureSet.js",
                  "import": "./helpers/esm/classApplyDescriptorDestructureSet.js",
                  "default": "./helpers/classApplyDescriptorDestructureSet.js"
                }, "./helpers/classApplyDescriptorDestructureSet.js"],
                "./helpers/esm/classApplyDescriptorDestructureSet": "./helpers/esm/classApplyDescriptorDestructureSet.js",
                "./helpers/classStaticPrivateFieldDestructureSet": [{
                  "node": "./helpers/classStaticPrivateFieldDestructureSet.js",
                  "import": "./helpers/esm/classStaticPrivateFieldDestructureSet.js",
                  "default": "./helpers/classStaticPrivateFieldDestructureSet.js"
                }, "./helpers/classStaticPrivateFieldDestructureSet.js"],
                "./helpers/esm/classStaticPrivateFieldDestructureSet": "./helpers/esm/classStaticPrivateFieldDestructureSet.js",
                "./helpers/classCheckPrivateStaticAccess": [{
                  "node": "./helpers/classCheckPrivateStaticAccess.js",
                  "import": "./helpers/esm/classCheckPrivateStaticAccess.js",
                  "default": "./helpers/classCheckPrivateStaticAccess.js"
                }, "./helpers/classCheckPrivateStaticAccess.js"],
                "./helpers/esm/classCheckPrivateStaticAccess": "./helpers/esm/classCheckPrivateStaticAccess.js",
                "./helpers/classCheckPrivateStaticFieldDescriptor": [{
                  "node": "./helpers/classCheckPrivateStaticFieldDescriptor.js",
                  "import": "./helpers/esm/classCheckPrivateStaticFieldDescriptor.js",
                  "default": "./helpers/classCheckPrivateStaticFieldDescriptor.js"
                }, "./helpers/classCheckPrivateStaticFieldDescriptor.js"],
                "./helpers/esm/classCheckPrivateStaticFieldDescriptor": "./helpers/esm/classCheckPrivateStaticFieldDescriptor.js",
                "./helpers/decorate": [{
                  "node": "./helpers/decorate.js",
                  "import": "./helpers/esm/decorate.js",
                  "default": "./helpers/decorate.js"
                }, "./helpers/decorate.js"],
                "./helpers/esm/decorate": "./helpers/esm/decorate.js",
                "./helpers/classPrivateMethodGet": [{
                  "node": "./helpers/classPrivateMethodGet.js",
                  "import": "./helpers/esm/classPrivateMethodGet.js",
                  "default": "./helpers/classPrivateMethodGet.js"
                }, "./helpers/classPrivateMethodGet.js"],
                "./helpers/esm/classPrivateMethodGet": "./helpers/esm/classPrivateMethodGet.js",
                "./helpers/checkPrivateRedeclaration": [{
                  "node": "./helpers/checkPrivateRedeclaration.js",
                  "import": "./helpers/esm/checkPrivateRedeclaration.js",
                  "default": "./helpers/checkPrivateRedeclaration.js"
                }, "./helpers/checkPrivateRedeclaration.js"],
                "./helpers/esm/checkPrivateRedeclaration": "./helpers/esm/checkPrivateRedeclaration.js",
                "./helpers/classPrivateFieldInitSpec": [{
                  "node": "./helpers/classPrivateFieldInitSpec.js",
                  "import": "./helpers/esm/classPrivateFieldInitSpec.js",
                  "default": "./helpers/classPrivateFieldInitSpec.js"
                }, "./helpers/classPrivateFieldInitSpec.js"],
                "./helpers/esm/classPrivateFieldInitSpec": "./helpers/esm/classPrivateFieldInitSpec.js",
                "./helpers/classPrivateMethodInitSpec": [{
                  "node": "./helpers/classPrivateMethodInitSpec.js",
                  "import": "./helpers/esm/classPrivateMethodInitSpec.js",
                  "default": "./helpers/classPrivateMethodInitSpec.js"
                }, "./helpers/classPrivateMethodInitSpec.js"],
                "./helpers/esm/classPrivateMethodInitSpec": "./helpers/esm/classPrivateMethodInitSpec.js",
                "./helpers/classPrivateMethodSet": [{
                  "node": "./helpers/classPrivateMethodSet.js",
                  "import": "./helpers/esm/classPrivateMethodSet.js",
                  "default": "./helpers/classPrivateMethodSet.js"
                }, "./helpers/classPrivateMethodSet.js"],
                "./helpers/esm/classPrivateMethodSet": "./helpers/esm/classPrivateMethodSet.js",
                "./package": "./package.json",
                "./package.json": "./package.json",
                "./regenerator": "./regenerator/index.js",
                "./regenerator/*.js": "./regenerator/*.js",
                "./regenerator/": "./regenerator/"
              },
              "homepage": "https://babel.dev/docs/en/next/babel-runtime",
              "license": "MIT",
              "name": "@babel/runtime",
              "publishConfig": {
                "access": "public"
              },
              "repository": {
                "type": "git",
                "url": "git+https://github.com/babel/babel.git",
                "directory": "packages/babel-runtime"
              },
              "version": "7.15.4"
            };

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "helpers": { "objectSpread2.js": function module(_require34, _exports34, _module36) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/@babel/runtime/helpers/objectSpread2.js                                                                //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var defineProperty = _require34("./defineProperty.js");

              function ownKeys(object, enumerableOnly) {
                var keys = Object.keys(object);

                if (Object.getOwnPropertySymbols) {
                  var symbols = Object.getOwnPropertySymbols(object);

                  if (enumerableOnly) {
                    symbols = symbols.filter(function (sym) {
                      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                    });
                  }

                  keys.push.apply(keys, symbols);
                }

                return keys;
              }

              function _objectSpread2(target) {
                for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i] != null ? arguments[i] : {};

                  if (i % 2) {
                    ownKeys(Object(source), true).forEach(function (key) {
                      defineProperty(target, key, source[key]);
                    });
                  } else if (Object.getOwnPropertyDescriptors) {
                    Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                  } else {
                    ownKeys(Object(source)).forEach(function (key) {
                      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                    });
                  }
                }

                return target;
              }

              _module36.exports = _objectSpread2;
              _module36.exports["default"] = _module36.exports, _module36.exports.__esModule = true;
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "defineProperty.js": function module(_require35, _exports35, _module37) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/@babel/runtime/helpers/defineProperty.js                                                               //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              function _defineProperty(obj, key, value) {
                if (key in obj) {
                  Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: true,
                    configurable: true,
                    writable: true
                  });
                } else {
                  obj[key] = value;
                }

                return obj;
              }

              _module37.exports = _defineProperty;
              _module37.exports["default"] = _module37.exports, _module37.exports.__esModule = true;
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "objectWithoutProperties.js": function module(_require36, _exports36, _module38) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/@babel/runtime/helpers/objectWithoutProperties.js                                                      //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var objectWithoutPropertiesLoose = _require36("./objectWithoutPropertiesLoose.js");

              function _objectWithoutProperties(source, excluded) {
                if (source == null) return {};
                var target = objectWithoutPropertiesLoose(source, excluded);
                var key, i;

                if (Object.getOwnPropertySymbols) {
                  var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

                  for (i = 0; i < sourceSymbolKeys.length; i++) {
                    key = sourceSymbolKeys[i];
                    if (excluded.indexOf(key) >= 0) continue;
                    if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
                    target[key] = source[key];
                  }
                }

                return target;
              }

              _module38.exports = _objectWithoutProperties;
              _module38.exports["default"] = _module38.exports, _module38.exports.__esModule = true;
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "objectWithoutPropertiesLoose.js": function module(_require37, _exports37, _module39) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js                                                 //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              function _objectWithoutPropertiesLoose(source, excluded) {
                if (source == null) return {};
                var target = {};
                var sourceKeys = Object.keys(source);
                var key, i;

                for (i = 0; i < sourceKeys.length; i++) {
                  key = sourceKeys[i];
                  if (excluded.indexOf(key) >= 0) continue;
                  target[key] = source[key];
                }

                return target;
              }

              _module39.exports = _objectWithoutPropertiesLoose;
              _module39.exports["default"] = _module39.exports, _module39.exports.__esModule = true;
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            } } } } } }, {
    "extensions": [".js", ".json", ".jsx", ".css"]
  });

  var _exports2 = _require2("/node_modules/meteor/modules/client.js");

  /* Exports */
  Package._define("modules", _exports2, {
    meteorInstall: meteorInstall
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("es5-shim");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("modern-browsers");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("babel-compiler");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;

  /* Package-scope variables */
  var ReactFastRefresh;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "react-fast-refresh": { "client-runtime.js": function module(_require, _exports, _module) {

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                              //
            // packages/react-fast-refresh/client-runtime.js                                                                //
            //                                                                                                              //
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            const enabled = __meteor_runtime_config__.reactFastRefreshEnabled;

            if (enabled && process.env.NODE_ENV !== 'production' && _module.hot) {
              const runtime = _require('react-refresh/runtime');

              let timeout = null;
              function scheduleRefresh() {
                if (!timeout) {
                  timeout = setTimeout(function () {
                    timeout = null;
                    runtime.performReactRefresh();
                  }, 0);
                }
              }

              // The react refresh babel plugin only registers functions. For react
              // to update other types of exports (such as classes), we have to
              // register them
              function registerExportsForReactRefresh(moduleId, moduleExports) {
                runtime.register(moduleExports, moduleId + ' %exports%');

                if (moduleExports == null || typeof moduleExports !== 'object') {
                  // Exit if we can't iterate over exports.
                  return;
                }

                for (var key in moduleExports) {
                  var desc = Object.getOwnPropertyDescriptor(moduleExports, key);
                  if (desc && desc.get) {
                    // Don't invoke getters as they may have side effects.
                    continue;
                  }

                  var exportValue = moduleExports[key];
                  var typeID = moduleId + ' %exports% ' + key;
                  runtime.register(exportValue, typeID);
                }
              };

              // Modules that only export components become React Refresh boundaries.
              function isReactRefreshBoundary(moduleExports) {
                if (runtime.isLikelyComponentType(moduleExports)) {
                  return true;
                }
                if (moduleExports == null || typeof moduleExports !== 'object') {
                  // Exit if we can't iterate over exports.
                  return false;
                }

                var hasExports = false;
                var onlyExportComponents = true;

                for (var key in moduleExports) {
                  hasExports = true;

                  var desc = Object.getOwnPropertyDescriptor(moduleExports, key);
                  if (desc && desc.get) {
                    // Don't invoke getters as they may have side effects.
                    return false;
                  }

                  if (!runtime.isLikelyComponentType(moduleExports[key])) {
                    onlyExportComponents = false;
                  }
                }

                return hasExports && onlyExportComponents;
              };

              runtime.injectIntoGlobalHook(window);

              window.$RefreshReg$ = function () {};
              window.$RefreshSig$ = function () {
                return function (type) {
                  return type;
                };
              };

              _module.hot.onRequire({
                before: function (_module2) {
                  if (_module2.loaded) {
                    // The module was already executed
                    return;
                  }

                  var prevRefreshReg = window.$RefreshReg$;
                  var prevRefreshSig = window.$RefreshSig$;

                  window.RefreshRuntime = runtime;
                  window.$RefreshReg$ = function (type, _id) {
                    const fullId = _module2.id + ' ' + _id;
                    RefreshRuntime.register(type, fullId);
                  };
                  window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

                  return {
                    prevRefreshReg: prevRefreshReg,
                    prevRefreshSig: prevRefreshSig
                  };
                },
                after: function (_module3, beforeData) {
                  // TODO: handle modules with errors
                  if (!beforeData) {
                    return;
                  }

                  window.$RefreshReg$ = beforeData.prevRefreshReg;
                  window.$RefreshSig$ = beforeData.prevRefreshSig;
                  if (isReactRefreshBoundary(_module3.exports)) {
                    registerExportsForReactRefresh(_module3.id, _module3.exports);
                    _module3.hot.accept();

                    scheduleRefresh();
                  }
                }
              });
            }

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "node_modules": { "react-refresh": { "runtime.js": function module(_require3, _exports2, _module4) {

                if (process.env.NODE_ENV === 'production') {
                  _module4.exports = _require3('./cjs/react-refresh-runtime.production.min.js');
                } else {
                  _module4.exports = _require3('./cjs/react-refresh-runtime.development.js');
                }

                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              }, "cjs": { "react-refresh-runtime.production.min.js": function module() {
                  throw Error("React Refresh runtime should not be included in the production bundle.");

                  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "react-refresh-runtime.development.js": function module(_require4, _exports3, _module5) {

                  if (process.env.NODE_ENV !== "production") {
                    (function () {

                      // ATTENTION
                      // When adding new symbols to this file,
                      // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
                      // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
                      // nor polyfill, then a plain number is used for performance.
                      var REACT_ELEMENT_TYPE = 0xeac7;
                      var REACT_PORTAL_TYPE = 0xeaca;
                      var REACT_FRAGMENT_TYPE = 0xeacb;
                      var REACT_STRICT_MODE_TYPE = 0xeacc;
                      var REACT_PROFILER_TYPE = 0xead2;
                      var REACT_PROVIDER_TYPE = 0xeacd;
                      var REACT_CONTEXT_TYPE = 0xeace;
                      var REACT_FORWARD_REF_TYPE = 0xead0;
                      var REACT_SUSPENSE_TYPE = 0xead1;
                      var REACT_SUSPENSE_LIST_TYPE = 0xead8;
                      var REACT_MEMO_TYPE = 0xead3;
                      var REACT_LAZY_TYPE = 0xead4;
                      var REACT_BLOCK_TYPE = 0xead9;
                      var REACT_SERVER_BLOCK_TYPE = 0xeada;
                      var REACT_FUNDAMENTAL_TYPE = 0xead5;
                      var REACT_SCOPE_TYPE = 0xead7;
                      var REACT_OPAQUE_ID_TYPE = 0xeae0;
                      var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
                      var REACT_OFFSCREEN_TYPE = 0xeae2;
                      var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

                      if (typeof Symbol === 'function' && Symbol.for) {
                        var symbolFor = Symbol.for;
                        REACT_ELEMENT_TYPE = symbolFor('react.element');
                        REACT_PORTAL_TYPE = symbolFor('react.portal');
                        REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
                        REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
                        REACT_PROFILER_TYPE = symbolFor('react.profiler');
                        REACT_PROVIDER_TYPE = symbolFor('react.provider');
                        REACT_CONTEXT_TYPE = symbolFor('react.context');
                        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
                        REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
                        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
                        REACT_MEMO_TYPE = symbolFor('react.memo');
                        REACT_LAZY_TYPE = symbolFor('react.lazy');
                        REACT_BLOCK_TYPE = symbolFor('react.block');
                        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
                        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
                        REACT_SCOPE_TYPE = symbolFor('react.scope');
                        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
                        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
                        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
                        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
                      }

                      var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map; // We never remove these associations.
                      // It's OK to reference families, but use WeakMap/Set for types.

                      var allFamiliesByID = new Map();
                      var allFamiliesByType = new PossiblyWeakMap();
                      var allSignaturesByType = new PossiblyWeakMap(); // This WeakMap is read by React, so we only put families
                      // that have actually been edited here. This keeps checks fast.
                      // $FlowIssue

                      var updatedFamiliesByType = new PossiblyWeakMap(); // This is cleared on every performReactRefresh() call.
                      // It is an array of [Family, NextType] tuples.

                      var pendingUpdates = []; // This is injected by the renderer via DevTools global hook.

                      var helpersByRendererID = new Map();
                      var helpersByRoot = new Map(); // We keep track of mounted roots so we can schedule updates.

                      var mountedRoots = new Set(); // If a root captures an error, we remember it so we can retry on edit.

                      var failedRoots = new Set(); // In environments that support WeakMap, we also remember the last element for every root.
                      // It needs to be weak because we do this even for roots that failed to mount.
                      // If there is no WeakMap, we won't attempt to do retrying.
                      // $FlowIssue

                      var rootElements = // $FlowIssue
                      typeof WeakMap === 'function' ? new WeakMap() : null;
                      var isPerformingRefresh = false;

                      function computeFullKey(signature) {
                        if (signature.fullKey !== null) {
                          return signature.fullKey;
                        }

                        var fullKey = signature.ownKey;
                        var hooks;

                        try {
                          hooks = signature.getCustomHooks();
                        } catch (err) {
                          // This can happen in an edge case, e.g. if expression like Foo.useSomething
                          // depends on Foo which is lazily initialized during rendering.
                          // In that case just assume we'll have to remount.
                          signature.forceReset = true;
                          signature.fullKey = fullKey;
                          return fullKey;
                        }

                        for (var i = 0; i < hooks.length; i++) {
                          var hook = hooks[i];

                          if (typeof hook !== 'function') {
                            // Something's wrong. Assume we need to remount.
                            signature.forceReset = true;
                            signature.fullKey = fullKey;
                            return fullKey;
                          }

                          var nestedHookSignature = allSignaturesByType.get(hook);

                          if (nestedHookSignature === undefined) {
                            // No signature means Hook wasn't in the source code, e.g. in a library.
                            // We'll skip it because we can assume it won't change during this session.
                            continue;
                          }

                          var nestedHookKey = computeFullKey(nestedHookSignature);

                          if (nestedHookSignature.forceReset) {
                            signature.forceReset = true;
                          }

                          fullKey += '\n---\n' + nestedHookKey;
                        }

                        signature.fullKey = fullKey;
                        return fullKey;
                      }

                      function haveEqualSignatures(prevType, nextType) {
                        var prevSignature = allSignaturesByType.get(prevType);
                        var nextSignature = allSignaturesByType.get(nextType);

                        if (prevSignature === undefined && nextSignature === undefined) {
                          return true;
                        }

                        if (prevSignature === undefined || nextSignature === undefined) {
                          return false;
                        }

                        if (computeFullKey(prevSignature) !== computeFullKey(nextSignature)) {
                          return false;
                        }

                        if (nextSignature.forceReset) {
                          return false;
                        }

                        return true;
                      }

                      function isReactClass(type) {
                        return type.prototype && type.prototype.isReactComponent;
                      }

                      function canPreserveStateBetween(prevType, nextType) {
                        if (isReactClass(prevType) || isReactClass(nextType)) {
                          return false;
                        }

                        if (haveEqualSignatures(prevType, nextType)) {
                          return true;
                        }

                        return false;
                      }

                      function resolveFamily(type) {
                        // Only check updated types to keep lookups fast.
                        return updatedFamiliesByType.get(type);
                      } // If we didn't care about IE11, we could use new Map/Set(iterable).


                      function cloneMap(map) {
                        var clone = new Map();
                        map.forEach(function (value, key) {
                          clone.set(key, value);
                        });
                        return clone;
                      }

                      function cloneSet(set) {
                        var clone = new Set();
                        set.forEach(function (value) {
                          clone.add(value);
                        });
                        return clone;
                      }

                      function performReactRefresh() {

                        if (pendingUpdates.length === 0) {
                          return null;
                        }

                        if (isPerformingRefresh) {
                          return null;
                        }

                        isPerformingRefresh = true;

                        try {
                          var staleFamilies = new Set();
                          var updatedFamilies = new Set();
                          var updates = pendingUpdates;
                          pendingUpdates = [];
                          updates.forEach(function (_ref) {
                            var family = _ref[0],
                                nextType = _ref[1];
                            // Now that we got a real edit, we can create associations
                            // that will be read by the React reconciler.
                            var prevType = family.current;
                            updatedFamiliesByType.set(prevType, family);
                            updatedFamiliesByType.set(nextType, family);
                            family.current = nextType; // Determine whether this should be a re-render or a re-mount.

                            if (canPreserveStateBetween(prevType, nextType)) {
                              updatedFamilies.add(family);
                            } else {
                              staleFamilies.add(family);
                            }
                          }); // TODO: rename these fields to something more meaningful.

                          var update = {
                            updatedFamilies: updatedFamilies,
                            // Families that will re-render preserving state
                            staleFamilies: staleFamilies // Families that will be remounted

                          };
                          helpersByRendererID.forEach(function (helpers) {
                            // Even if there are no roots, set the handler on first update.
                            // This ensures that if *new* roots are mounted, they'll use the resolve handler.
                            helpers.setRefreshHandler(resolveFamily);
                          });
                          var didError = false;
                          var firstError = null; // We snapshot maps and sets that are mutated during commits.
                          // If we don't do this, there is a risk they will be mutated while
                          // we iterate over them. For example, trying to recover a failed root
                          // may cause another root to be added to the failed list -- an infinite loop.

                          var failedRootsSnapshot = cloneSet(failedRoots);
                          var mountedRootsSnapshot = cloneSet(mountedRoots);
                          var helpersByRootSnapshot = cloneMap(helpersByRoot);
                          failedRootsSnapshot.forEach(function (root) {
                            var helpers = helpersByRootSnapshot.get(root);

                            if (helpers === undefined) {
                              throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
                            }

                            if (!failedRoots.has(root)) {// No longer failed.
                            }

                            if (rootElements === null) {
                              return;
                            }

                            if (!rootElements.has(root)) {
                              return;
                            }

                            var element = rootElements.get(root);

                            try {
                              helpers.scheduleRoot(root, element);
                            } catch (err) {
                              if (!didError) {
                                didError = true;
                                firstError = err;
                              } // Keep trying other roots.
                            }
                          });
                          mountedRootsSnapshot.forEach(function (root) {
                            var helpers = helpersByRootSnapshot.get(root);

                            if (helpers === undefined) {
                              throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
                            }

                            if (!mountedRoots.has(root)) {// No longer mounted.
                            }

                            try {
                              helpers.scheduleRefresh(root, update);
                            } catch (err) {
                              if (!didError) {
                                didError = true;
                                firstError = err;
                              } // Keep trying other roots.
                            }
                          });

                          if (didError) {
                            throw firstError;
                          }

                          return update;
                        } finally {
                          isPerformingRefresh = false;
                        }
                      }
                      function register(type, id) {
                        {
                          if (type === null) {
                            return;
                          }

                          if (typeof type !== 'function' && typeof type !== 'object') {
                            return;
                          } // This can happen in an edge case, e.g. if we register
                          // return value of a HOC but it returns a cached component.
                          // Ignore anything but the first registration for each type.


                          if (allFamiliesByType.has(type)) {
                            return;
                          } // Create family or remember to update it.
                          // None of this bookkeeping affects reconciliation
                          // until the first performReactRefresh() call above.


                          var family = allFamiliesByID.get(id);

                          if (family === undefined) {
                            family = {
                              current: type
                            };
                            allFamiliesByID.set(id, family);
                          } else {
                            pendingUpdates.push([family, type]);
                          }

                          allFamiliesByType.set(type, family); // Visit inner types because we might not have registered them.

                          if (typeof type === 'object' && type !== null) {
                            switch (type.$$typeof) {
                              case REACT_FORWARD_REF_TYPE:
                                register(type.render, id + '$render');
                                break;

                              case REACT_MEMO_TYPE:
                                register(type.type, id + '$type');
                                break;
                            }
                          }
                        }
                      }
                      function setSignature(type, key) {
                        var forceReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
                        var getCustomHooks = arguments.length > 3 ? arguments[3] : undefined;

                        {
                          allSignaturesByType.set(type, {
                            forceReset: forceReset,
                            ownKey: key,
                            fullKey: null,
                            getCustomHooks: getCustomHooks || function () {
                              return [];
                            }
                          });
                        }
                      } // This is lazily called during first render for a type.
                      // It captures Hook list at that time so inline requires don't break comparisons.

                      function collectCustomHooksForSignature(type) {
                        {
                          var signature = allSignaturesByType.get(type);

                          if (signature !== undefined) {
                            computeFullKey(signature);
                          }
                        }
                      }
                      function getFamilyByID(id) {
                        {
                          return allFamiliesByID.get(id);
                        }
                      }
                      function getFamilyByType(type) {
                        {
                          return allFamiliesByType.get(type);
                        }
                      }
                      function findAffectedHostInstances(families) {
                        {
                          var affectedInstances = new Set();
                          mountedRoots.forEach(function (root) {
                            var helpers = helpersByRoot.get(root);

                            if (helpers === undefined) {
                              throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
                            }

                            var instancesForRoot = helpers.findHostInstancesForRefresh(root, families);
                            instancesForRoot.forEach(function (inst) {
                              affectedInstances.add(inst);
                            });
                          });
                          return affectedInstances;
                        }
                      }
                      function injectIntoGlobalHook(globalObject) {
                        {
                          // For React Native, the global hook will be set up by require('react-devtools-core').
                          // That code will run before us. So we need to monkeypatch functions on existing hook.
                          // For React Web, the global hook will be set up by the extension.
                          // This will also run before us.
                          var hook = globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__;

                          if (hook === undefined) {
                            // However, if there is no DevTools extension, we'll need to set up the global hook ourselves.
                            // Note that in this case it's important that renderer code runs *after* this method call.
                            // Otherwise, the renderer will think that there is no global hook, and won't do the injection.
                            var nextID = 0;
                            globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__ = hook = {
                              renderers: new Map(),
                              supportsFiber: true,
                              inject: function (injected) {
                                return nextID++;
                              },
                              onScheduleFiberRoot: function (id, root, children) {},
                              onCommitFiberRoot: function (id, root, maybePriorityLevel, didError) {},
                              onCommitFiberUnmount: function () {}
                            };
                          } // Here, we just want to get a reference to scheduleRefresh.


                          var oldInject = hook.inject;

                          hook.inject = function (injected) {
                            var id = oldInject.apply(this, arguments);

                            if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') {
                              // This version supports React Refresh.
                              helpersByRendererID.set(id, injected);
                            }

                            return id;
                          }; // Do the same for any already injected roots.
                          // This is useful if ReactDOM has already been initialized.
                          // https://github.com/facebook/react/issues/17626


                          hook.renderers.forEach(function (injected, id) {
                            if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') {
                              // This version supports React Refresh.
                              helpersByRendererID.set(id, injected);
                            }
                          }); // We also want to track currently mounted roots.

                          var oldOnCommitFiberRoot = hook.onCommitFiberRoot;

                          var oldOnScheduleFiberRoot = hook.onScheduleFiberRoot || function () {};

                          hook.onScheduleFiberRoot = function (id, root, children) {
                            if (!isPerformingRefresh) {
                              // If it was intentionally scheduled, don't attempt to restore.
                              // This includes intentionally scheduled unmounts.
                              failedRoots.delete(root);

                              if (rootElements !== null) {
                                rootElements.set(root, children);
                              }
                            }

                            return oldOnScheduleFiberRoot.apply(this, arguments);
                          };

                          hook.onCommitFiberRoot = function (id, root, maybePriorityLevel, didError) {
                            var helpers = helpersByRendererID.get(id);

                            if (helpers === undefined) {
                              return;
                            }

                            helpersByRoot.set(root, helpers);
                            var current = root.current;
                            var alternate = current.alternate; // We need to determine whether this root has just (un)mounted.
                            // This logic is copy-pasted from similar logic in the DevTools backend.
                            // If this breaks with some refactoring, you'll want to update DevTools too.

                            if (alternate !== null) {
                              var wasMounted = alternate.memoizedState != null && alternate.memoizedState.element != null;
                              var isMounted = current.memoizedState != null && current.memoizedState.element != null;

                              if (!wasMounted && isMounted) {
                                // Mount a new root.
                                mountedRoots.add(root);
                                failedRoots.delete(root);
                              } else if (wasMounted && isMounted) ;else if (wasMounted && !isMounted) {
                                // Unmount an existing root.
                                mountedRoots.delete(root);

                                if (didError) {
                                  // We'll remount it on future edits.
                                  failedRoots.add(root);
                                } else {
                                  helpersByRoot.delete(root);
                                }
                              } else if (!wasMounted && !isMounted) {
                                if (didError) {
                                  // We'll remount it on future edits.
                                  failedRoots.add(root);
                                }
                              }
                            } else {
                              // Mount a new root.
                              mountedRoots.add(root);
                            }

                            return oldOnCommitFiberRoot.apply(this, arguments);
                          };
                        }
                      }
                      function hasUnrecoverableErrors() {
                        // TODO: delete this after removing dependency in RN.
                        return false;
                      } // Exposed for testing.

                      function _getMountedRootCount() {
                        {
                          return mountedRoots.size;
                        }
                      } // This is a wrapper over more primitive functions for setting signature.
                      // Signatures let us decide whether the Hook order has changed on refresh.
                      //
                      // This function is intended to be used as a transform target, e.g.:
                      // var _s = createSignatureFunctionForTransform()
                      //
                      // function Hello() {
                      //   const [foo, setFoo] = useState(0);
                      //   const value = useCustomHook();
                      //   _s(); /* Second call triggers collecting the custom Hook list.
                      //          * This doesn't happen during the module evaluation because we
                      //          * don't want to change the module order with inline requires.
                      //          * Next calls are noops. */
                      //   return <h1>Hi</h1>;
                      // }
                      //
                      // /* First call specifies the signature: */
                      // _s(
                      //   Hello,
                      //   'useState{[foo, setFoo]}(0)',
                      //   () => [useCustomHook], /* Lazy to avoid triggering inline requires */
                      // );

                      function createSignatureFunctionForTransform() {
                        {
                          // We'll fill in the signature in two steps.
                          // First, we'll know the signature itself. This happens outside the component.
                          // Then, we'll know the references to custom Hooks. This happens inside the component.
                          // After that, the returned function will be a fast path no-op.
                          var status = 'needsSignature';
                          var savedType;
                          var hasCustomHooks;
                          return function (type, key, forceReset, getCustomHooks) {
                            switch (status) {
                              case 'needsSignature':
                                if (type !== undefined) {
                                  // If we received an argument, this is the initial registration call.
                                  savedType = type;
                                  hasCustomHooks = typeof getCustomHooks === 'function';
                                  setSignature(type, key, forceReset, getCustomHooks); // The next call we expect is from inside a function, to fill in the custom Hooks.

                                  status = 'needsCustomHooks';
                                }

                                break;

                              case 'needsCustomHooks':
                                if (hasCustomHooks) {
                                  collectCustomHooksForSignature(savedType);
                                }

                                status = 'resolved';
                                break;
                            }

                            return type;
                          };
                        }
                      }
                      function isLikelyComponentType(type) {
                        {
                          switch (typeof type) {
                            case 'function':
                              {
                                // First, deal with classes.
                                if (type.prototype != null) {
                                  if (type.prototype.isReactComponent) {
                                    // React class.
                                    return true;
                                  }

                                  var ownNames = Object.getOwnPropertyNames(type.prototype);

                                  if (ownNames.length > 1 || ownNames[0] !== 'constructor') {
                                    // This looks like a class.
                                    return false;
                                  } // eslint-disable-next-line no-proto


                                  if (type.prototype.__proto__ !== Object.prototype) {
                                    // It has a superclass.
                                    return false;
                                  } // Pass through.
                                  // This looks like a regular function with empty prototype.
                                } // For plain functions and arrows, use name as a heuristic.


                                var name = type.name || type.displayName;
                                return typeof name === 'string' && /^[A-Z]/.test(name);
                              }

                            case 'object':
                              {
                                if (type != null) {
                                  switch (type.$$typeof) {
                                    case REACT_FORWARD_REF_TYPE:
                                    case REACT_MEMO_TYPE:
                                      // Definitely React components.
                                      return true;

                                    default:
                                      return false;
                                  }
                                }

                                return false;
                              }

                            default:
                              {
                                return false;
                              }
                          }
                        }
                      }

                      _exports3._getMountedRootCount = _getMountedRootCount;
                      _exports3.collectCustomHooksForSignature = collectCustomHooksForSignature;
                      _exports3.createSignatureFunctionForTransform = createSignatureFunctionForTransform;
                      _exports3.findAffectedHostInstances = findAffectedHostInstances;
                      _exports3.getFamilyByID = getFamilyByID;
                      _exports3.getFamilyByType = getFamilyByType;
                      _exports3.hasUnrecoverableErrors = hasUnrecoverableErrors;
                      _exports3.injectIntoGlobalHook = injectIntoGlobalHook;
                      _exports3.isLikelyComponentType = isLikelyComponentType;
                      _exports3.performReactRefresh = performReactRefresh;
                      _exports3.register = register;
                      _exports3.setSignature = setSignature;
                    })();
                  }

                  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                } } } } } } } }, {
    "extensions": [".js", ".json"]
  });

  _require2("/node_modules/meteor/react-fast-refresh/client-runtime.js");

  /* Exports */
  Package._define("react-fast-refresh", {
    ReactFastRefresh: ReactFastRefresh
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("ecmascript");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("typescript");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("shell-server");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("ecmascript-runtime");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "babel-runtime": { "babel-runtime.js": function _module(_require) {

            /////////////////////////////////////////////////////////////////////////////////////
            //                                                                                 //
            // packages/babel-runtime/babel-runtime.js                                         //
            //                                                                                 //
            /////////////////////////////////////////////////////////////////////////////////////
            //
            try {
              var babelRuntimeVersion = _require("@babel/runtime/package.json").version;
            } catch (e) {
              throw new Error(["", "The @babel/runtime npm package could not be found in your node_modules ", "directory. Please run the following command to install it:", "", "  meteor npm install --save @babel/runtime", ""].join("\n"));
            }

            if (parseInt(babelRuntimeVersion, 10) < 7 || babelRuntimeVersion.indexOf("7.0.0-beta.") === 0 && parseInt(babelRuntimeVersion.split(".").pop(), 10) < 56) {
              console.error(["The version of @babel/runtime installed in your node_modules directory ", "(" + babelRuntimeVersion + ") is out of date. Please upgrade it by running ", "", "  meteor npm install --save @babel/runtime@latest", "", "in your application directory.", ""].join("\n"));
            }

            /////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports = _require2("/node_modules/meteor/babel-runtime/babel-runtime.js");

  /* Exports */
  Package._define("babel-runtime", _exports);
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;

  /* Package-scope variables */
  var Promise;

  var _require = meteorInstall({ "node_modules": { "meteor": { "promise": { "modern.js": function _module() {

            /////////////////////////////////////////////////////////////////////////////
            //                                                                         //
            // packages/promise/modern.js                                              //
            //                                                                         //
            /////////////////////////////////////////////////////////////////////////////
            //
            // Initialize the package-scoped Promise variable with global.Promise in
            // all environments, even if it's not defined.
            Promise = global.Promise;

            /////////////////////////////////////////////////////////////////////////////
          }, "client.js": function _module2(_require2) {

            /////////////////////////////////////////////////////////////////////////////
            //                                                                         //
            // packages/promise/client.js                                              //
            //                                                                         //
            /////////////////////////////////////////////////////////////////////////////
            //
            _require2("./extensions.js");
            _require2("meteor-promise").makeCompatible(Promise);

            /////////////////////////////////////////////////////////////////////////////
          }, "extensions.js": function _module3() {

            /////////////////////////////////////////////////////////////////////////////
            //                                                                         //
            // packages/promise/extensions.js                                          //
            //                                                                         //
            /////////////////////////////////////////////////////////////////////////////
            //
            var proto = Promise.prototype;
            var hasOwn = Object.prototype.hasOwnProperty;

            proto.done = function (onFulfilled, onRejected) {
              var self = this;

              if (arguments.length > 0) {
                self = this.then.apply(this, arguments);
              }

              self.then(null, function (err) {
                Meteor._setImmediate(function () {
                  throw err;
                });
              });
            };

            if (!hasOwn.call(proto, "finally")) {
              proto["finally"] = function (onFinally) {
                var threw = false,
                    result;
                return this.then(function (value) {
                  result = value;
                  // Most implementations of Promise.prototype.finally call
                  // Promise.resolve(onFinally()) (or this.constructor.resolve or even
                  // this.constructor[Symbol.species].resolve, depending on how spec
                  // compliant they're trying to be), but this implementation simply
                  // relies on the standard Promise behavior of resolving any value
                  // returned from a .then callback function.
                  return onFinally();
                }, function (error) {
                  // Make the final .then callback (below) re-throw the error instead
                  // of returning it.
                  threw = true;
                  result = error;
                  return onFinally();
                }).then(function () {
                  if (threw) throw result;
                  return result;
                });
              };
            }

            /////////////////////////////////////////////////////////////////////////////
          }, "node_modules": { "meteor-promise": { "package.json": function module(_require3, _exports2, _module4) {

                /////////////////////////////////////////////////////////////////////////////
                //                                                                         //
                // node_modules/meteor/promise/node_modules/meteor-promise/package.json    //
                //                                                                         //
                /////////////////////////////////////////////////////////////////////////////
                //
                _module4.exports = {
                  "name": "meteor-promise",
                  "version": "0.9.0",
                  "browser": "promise_client.js",
                  "main": "promise_server.js"
                };

                /////////////////////////////////////////////////////////////////////////////
              }, "promise_client.js": function _module5(_require4, _exports3) {

                /////////////////////////////////////////////////////////////////////////////
                //                                                                         //
                // node_modules/meteor/promise/node_modules/meteor-promise/promise_client. //
                //                                                                         //
                /////////////////////////////////////////////////////////////////////////////
                //
                _exports3.makeCompatible = function (Promise) {
                  var es6PromiseThen = Promise.prototype.then;

                  Promise.prototype.then = function (onResolved, onRejected) {
                    if (typeof Meteor === "object" && typeof Meteor.bindEnvironment === "function") {
                      return es6PromiseThen.call(this, onResolved && Meteor.bindEnvironment(onResolved, raise), onRejected && Meteor.bindEnvironment(onRejected, raise));
                    }

                    return es6PromiseThen.call(this, onResolved, onRejected);
                  };
                };

                function raise(exception) {
                  throw exception;
                }

                /////////////////////////////////////////////////////////////////////////////
              } } } } } } }, {
    "extensions": [".js", ".json"]
  });

  _require("/node_modules/meteor/promise/modern.js");
  var _exports = _require("/node_modules/meteor/promise/client.js");

  /* Exports */
  Package._define("promise", _exports, {
    Promise: Promise
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var fetch;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "fetch": { "modern.js": function _module(_require, _exports) {

            ///////////////////////////////////////////////////////////////////////
            //                                                                   //
            // packages/fetch/modern.js                                          //
            //                                                                   //
            ///////////////////////////////////////////////////////////////////////
            //
            _exports.fetch = global.fetch;
            _exports.Headers = global.Headers;
            _exports.Request = global.Request;
            _exports.Response = global.Response;

            ///////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/fetch/modern.js");

  /* Exports */
  Package._define("fetch", _exports2, {
    fetch: fetch
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;
  var fetch = Package.fetch.fetch;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "dynamic-import": { "client.js": function module(_require, _exports, _module) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                       //
            // packages/dynamic-import/client.js                                                                     //
            //                                                                                                       //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var Module = _module.constructor;
            var cache = _require("./cache.js");
            var meteorInstall = _require("meteor/modules").meteorInstall;
            var dynamicVersions = _require("./dynamic-versions.js");

            // Fix for Safari 14 bug (https://bugs.webkit.org/show_bug.cgi?id=226547), do not delete this unused var
            var idb = global.indexedDB;

            var dynamicImportSettings = Meteor.settings && Meteor.settings.public && Meteor.settings.public.packages && Meteor.settings.public.packages['dynamic-import'] || {};

            // Call module.dynamicImport(id) to fetch a module and any/all of its
            // dependencies that have not already been fetched, and evaluate them as
            // soon as they arrive. This runtime API makes it very easy to implement
            // ECMAScript dynamic import(...) syntax.
            Module.prototype.dynamicImport = function (id) {
              var module = this;
              return module.prefetch(id).then(function () {
                return getNamespace(module, id);
              });
            };

            // Called by Module.prototype.prefetch if there are any missing dynamic
            // modules that need to be fetched.
            meteorInstall.fetch = function (ids) {
              var tree = Object.create(null);
              var versions = Object.create(null);
              var missing;

              function addSource(id, source) {
                addToTree(tree, id, makeModuleFunction(id, source, ids[id].options));
              }

              function addMissing(id) {
                addToTree(missing = missing || Object.create(null), id, 1);
              }

              Object.keys(ids).forEach(function (id) {
                var version = dynamicVersions.get(id);
                if (version) {
                  versions[id] = version;
                } else {
                  addMissing(id);
                }
              });

              return cache.checkMany(versions).then(function (sources) {
                Object.keys(sources).forEach(function (id) {
                  var source = sources[id];
                  if (source) {
                    addSource(id, source);
                  } else {
                    addMissing(id);
                  }
                });

                return missing && fetchMissing(missing).then(function (results) {
                  var versionsAndSourcesById = Object.create(null);
                  var flatResults = flattenModuleTree(results);

                  Object.keys(flatResults).forEach(function (id) {
                    var source = flatResults[id];
                    addSource(id, source);

                    var version = dynamicVersions.get(id);
                    if (version) {
                      versionsAndSourcesById[id] = {
                        version: version,
                        source: source
                      };
                    }
                  });

                  cache.setMany(versionsAndSourcesById);
                });
              }).then(function () {
                return tree;
              });
            };

            function flattenModuleTree(tree) {
              var parts = [""];
              var result = Object.create(null);

              function walk(t) {
                if (t && typeof t === "object") {
                  Object.keys(t).forEach(function (key) {
                    parts.push(key);
                    walk(t[key]);
                    parts.pop();
                  });
                } else if (typeof t === "string") {
                  result[parts.join("/")] = t;
                }
              }

              walk(tree);

              return result;
            }

            function makeModuleFunction(id, source, options) {
              // By calling (options && options.eval || eval) in a wrapper function,
              // we delay the cost of parsing and evaluating the module code until the
              // module is first imported.
              return function () {
                // If an options.eval function was provided in the second argument to
                // meteorInstall when this bundle was first installed, use that
                // function to parse and evaluate the dynamic module code in the scope
                // of the package. Otherwise fall back to indirect (global) eval.
                return (options && options.eval || eval)(
                // Wrap the function(require,exports,module){...} expression in
                // parentheses to force it to be parsed as an expression.
                "(" + source + ")\n//# sourceURL=" + id).apply(this, arguments);
              };
            }

            var secretKey = null;
            _exports.setSecretKey = function (key) {
              secretKey = key;
            };

            var fetchURL = _require("./common.js").fetchURL;

            function inIframe() {
              try {
                return window.self !== window.top;
              } catch (e) {
                return true;
              }
            }

            function fetchMissing(missingTree) {
              // If the hostname of the URL returned by Meteor.absoluteUrl differs
              // from location.host, then we'll be making a cross-origin request here,
              // but that's fine because the dynamic-import server sets appropriate
              // CORS headers to enable fetching dynamic modules from any
              // origin. Browsers that check CORS do so by sending an additional
              // preflight OPTIONS request, which may add latency to the first dynamic
              // import() request, so it's a good idea for ROOT_URL to match
              // location.host if possible, though not strictly necessary.

              var url = fetchURL;

              var useLocationOrigin = dynamicImportSettings.useLocationOrigin;

              var disableLocationOriginIframe = dynamicImportSettings.disableLocationOriginIframe;

              if (useLocationOrigin && location && !(disableLocationOriginIframe && inIframe())) {
                url = location.origin.concat(__meteor_runtime_config__.ROOT_URL_PATH_PREFIX || '', url);
              } else {
                url = Meteor.absoluteUrl(url);
              }

              if (secretKey) {
                url += "key=" + secretKey;
              }

              return fetch(url, {
                method: "POST",
                body: JSON.stringify(missingTree)
              }).then(function (res) {
                if (!res.ok) throw res;
                return res.json();
              });
            }

            function addToTree(tree, id, value) {
              var parts = id.split("/");
              var lastIndex = parts.length - 1;
              parts.forEach(function (part, i) {
                if (part) {
                  tree = tree[part] = tree[part] || (i < lastIndex ? Object.create(null) : value);
                }
              });
            }

            function getNamespace(_module2, id) {
              var namespace;

              _module2.link(id, {
                "*": function (ns) {
                  namespace = ns;
                }
              });

              // This helps with Babel interop, since we're not just returning the
              // module.exports object.
              Object.defineProperty(namespace, "__esModule", {
                value: true,
                enumerable: false
              });

              return namespace;
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "cache.js": function module(_require3, _exports3, _module3) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                       //
            // packages/dynamic-import/cache.js                                                                      //
            //                                                                                                       //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var dbPromise;

            var canUseCache =
            // The server doesn't benefit from dynamic module fetching, and almost
            // certainly doesn't support IndexedDB.
            Meteor.isClient &&
            // Cordova bundles all modules into the monolithic initial bundle, so
            // the dynamic module cache won't be necessary.
            !Meteor.isCordova &&
            // Caching can be confusing in development, and is designed to be a
            // transparent optimization for production performance.
            Meteor.isProduction;

            function getIDB() {
              if (typeof indexedDB !== "undefined") return indexedDB;
              if (typeof webkitIndexedDB !== "undefined") return webkitIndexedDB;
              if (typeof mozIndexedDB !== "undefined") return mozIndexedDB;
              if (typeof OIndexedDB !== "undefined") return OIndexedDB;
              if (typeof msIndexedDB !== "undefined") return msIndexedDB;
            }

            function withDB(callback) {
              dbPromise = dbPromise || new Promise(function (resolve, reject) {
                var idb = getIDB();
                if (!idb) {
                  throw new Error("IndexedDB not available");
                }

                // Incrementing the version number causes all existing object stores
                // to be deleted and recreates those specified by objectStoreMap.
                var request = idb.open("MeteorDynamicImportCache", 2);

                request.onupgradeneeded = function (event) {
                  var db = event.target.result;

                  // It's fine to delete existing object stores since onupgradeneeded
                  // is only called when we change the DB version number, and the data
                  // we're storing is disposable/reconstructible.
                  Array.from(db.objectStoreNames).forEach(db.deleteObjectStore, db);

                  Object.keys(objectStoreMap).forEach(function (name) {
                    db.createObjectStore(name, objectStoreMap[name]);
                  });
                };

                request.onerror = makeOnError(reject, "indexedDB.open");
                request.onsuccess = function (event) {
                  resolve(event.target.result);
                };
              });

              return dbPromise.then(callback, function (error) {
                return callback(null);
              });
            }

            var objectStoreMap = {
              sourcesByVersion: { keyPath: "version" }
            };

            function makeOnError(reject, source) {
              return function (event) {
                reject(new Error("IndexedDB failure in " + source + " " + JSON.stringify(event.target)));

                // Returning true from an onerror callback function prevents an
                // InvalidStateError in Firefox during Private Browsing. Silencing
                // that error is safe because we handle the error more gracefully by
                // passing it to the Promise reject function above.
                // https://github.com/meteor/meteor/issues/8697
                return true;
              };
            }

            var checkCount = 0;

            _exports3.checkMany = function (versions) {
              var ids = Object.keys(versions);
              var sourcesById = Object.create(null);

              // Initialize sourcesById with null values to indicate all sources are
              // missing (unless replaced with actual sources below).
              ids.forEach(function (id) {
                sourcesById[id] = null;
              });

              if (!canUseCache) {
                return Promise.resolve(sourcesById);
              }

              return withDB(function (db) {
                if (!db) {
                  // We thought we could used IndexedDB, but something went wrong
                  // while opening the database, so err on the side of safety.
                  return sourcesById;
                }

                var txn = db.transaction(["sourcesByVersion"], "readonly");

                var sourcesByVersion = txn.objectStore("sourcesByVersion");

                ++checkCount;

                function finish() {
                  --checkCount;
                  return sourcesById;
                }

                return Promise.all(ids.map(function (id) {
                  return new Promise(function (resolve, reject) {
                    var version = versions[id];
                    if (version) {
                      var sourceRequest = sourcesByVersion.get(version);
                      sourceRequest.onerror = makeOnError(reject, "sourcesByVersion.get");
                      sourceRequest.onsuccess = function (event) {
                        var result = event.target.result;
                        if (result) {
                          sourcesById[id] = result.source;
                        }
                        resolve();
                      };
                    } else resolve();
                  });
                })).then(finish, finish);
              });
            };

            var pendingVersionsAndSourcesById = Object.create(null);

            _exports3.setMany = function (versionsAndSourcesById) {
              if (canUseCache) {
                Object.assign(pendingVersionsAndSourcesById, versionsAndSourcesById);

                // Delay the call to flushSetMany so that it doesn't contribute to the
                // amount of time it takes to call module.dynamicImport.
                if (!flushSetMany.timer) {
                  flushSetMany.timer = setTimeout(flushSetMany, 100);
                }
              }
            };

            function flushSetMany() {
              if (checkCount > 0) {
                // If checkMany is currently underway, postpone the flush until later,
                // since updating the cache is less important than reading from it.
                return flushSetMany.timer = setTimeout(flushSetMany, 100);
              }

              flushSetMany.timer = null;

              var versionsAndSourcesById = pendingVersionsAndSourcesById;
              pendingVersionsAndSourcesById = Object.create(null);

              return withDB(function (db) {
                if (!db) {
                  // We thought we could used IndexedDB, but something went wrong
                  // while opening the database, so err on the side of safety.
                  return;
                }

                var setTxn = db.transaction(["sourcesByVersion"], "readwrite");

                var sourcesByVersion = setTxn.objectStore("sourcesByVersion");

                return Promise.all(Object.keys(versionsAndSourcesById).map(function (id) {
                  var info = versionsAndSourcesById[id];
                  return new Promise(function (resolve, reject) {
                    var request = sourcesByVersion.put({
                      version: info.version,
                      source: info.source
                    });
                    request.onerror = makeOnError(reject, "sourcesByVersion.put");
                    request.onsuccess = resolve;
                  });
                }));
              });
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "common.js": function _module4(_require4, _exports4) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                       //
            // packages/dynamic-import/common.js                                                                     //
            //                                                                                                       //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _exports4.fetchURL = "/__meteor__/dynamic-import/fetch";

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "dynamic-versions.js": function module(_require5, _exports5, _module5) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                       //
            // packages/dynamic-import/dynamic-versions.js                                                           //
            //                                                                                                       //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // This magic double-underscored identifier gets replaced in
            // tools/isobuild/bundler.js with a tree of hashes of all dynamic
            // modules, for use in client.js and cache.js.
            var versions = {};

            const METEOR_PREFIX = '/node_modules/meteor/';

            _exports5.get = function (id) {
              var tree = versions;
              var version = null;

              id.split("/").some(function (part) {
                if (part) {
                  // If the tree contains identifiers for Meteor packages with colons
                  // in their names, the colons should not have been replaced by
                  // underscores, but there's a bug that results in that behavior, so
                  // for now it seems safest to be tolerant of underscores here.
                  // https://github.com/meteor/meteor/pull/9103
                  tree = tree[part] || tree[part.replace(":", "_")];
                }

                if (!tree) {
                  // Terminate the search without reassigning version.
                  return true;
                }

                if (typeof tree === "string") {
                  version = tree;
                  return true;
                }
              });

              return version;
            };

            function getFlatModuleArray(tree) {
              var parts = [""];
              var result = [];

              function walk(t) {
                if (t && typeof t === "object") {
                  Object.keys(t).forEach(function (key) {
                    parts.push(key);
                    walk(t[key]);
                    parts.pop();
                  });
                } else if (typeof t === "string") {
                  result.push(parts.join("/"));
                }
              }

              walk(tree);

              return result;
            }

            // If Package.appcache is loaded, preload additional modules after the
            // core bundle has been loaded.
            function precacheOnLoad(event) {
              // Check inside onload to make sure Package.appcache has had a chance to
              // become available.
              if (!Package.appcache) {
                return;
              }

              // Prefetch in chunks to reduce overhead. If we call module.prefetch(id)
              // multiple times in the same tick of the event loop, all those modules
              // will be fetched in one HTTP POST request.
              function prefetchInChunks(modules, amount) {
                Promise.all(modules.splice(0, amount).map(function (id) {
                  return new Promise(function (resolve, reject) {
                    _module5.prefetch(id).then(resolve).catch(function (err) {
                      // we probably have a : _ mismatch
                      // what can get wrong if we do the replacement
                      // 1. a package with a name like a_b:package will not resolve
                      // 2. someone falsely imports a_package that does not exist but a
                      // package a:package exists, so this one gets imported and its usage
                      // will fail
                      if (id.indexOf(METEOR_PREFIX) === 0) {
                        _module5.prefetch(METEOR_PREFIX + id.replace(METEOR_PREFIX, '').replace('_', ':')).then(resolve).catch(reject);
                      } else {
                        reject(err);
                      }
                    });
                  });
                })).then(function () {
                  if (modules.length > 0) {
                    setTimeout(function () {
                      prefetchInChunks(modules, amount);
                    }, 0);
                  }
                });
              }

              // Get a flat array of modules and start prefetching.
              prefetchInChunks(getFlatModuleArray(versions), 50);
            }

            // Use window.onload to only prefetch after the main bundle has loaded.
            if (global.addEventListener) {
              global.addEventListener('load', precacheOnLoad, false);
            } else if (global.attachEvent) {
              global.attachEvent('onload', precacheOnLoad);
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/dynamic-import/client.js");

  /* Exports */
  Package._define("dynamic-import", _exports2);
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "ecmascript-runtime-client": { "modern.js": function _module(_require) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/ecmascript-runtime-client/modern.js                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            try {
              _require("core-js/modules/es.object.get-own-property-descriptors");
            } catch (e) {
              throw new Error(["The core-js npm package could not be found in your node_modules ", "directory. Please run the following command to install it:", "", "  meteor npm install --save core-js", ""].join("\n"));
            }

            _require("core-js/modules/es.object.is");
            _require("core-js/modules/es.function.name");
            _require("core-js/modules/es.number.is-finite");
            _require("core-js/modules/es.number.is-nan");
            _require("core-js/modules/es.array.flat");
            _require("core-js/modules/es.array.flat-map");
            _require("core-js/modules/es.object.from-entries");
            _require("core-js/modules/es.string.pad-start");
            _require("core-js/modules/es.string.pad-end");
            _require("core-js/modules/es.string.trim-start");
            _require("core-js/modules/es.string.trim-end");
            _require("core-js/modules/es.symbol.async-iterator");

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "node_modules": { "core-js": { "modules": { "es.object.get-own-property-descriptors.js": function _module2(_require3) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/es.object.get-own-property-descriptors.j //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var $ = _require3('../internals/export');
                  var DESCRIPTORS = _require3('../internals/descriptors');
                  var ownKeys = _require3('../internals/own-keys');
                  var toIndexedObject = _require3('../internals/to-indexed-object');
                  var getOwnPropertyDescriptorModule = _require3('../internals/object-get-own-property-descriptor');
                  var createProperty = _require3('../internals/create-property');

                  // `Object.getOwnPropertyDescriptors` method
                  // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
                  $({ target: 'Object', stat: true, sham: !DESCRIPTORS }, {
                    getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
                      var O = toIndexedObject(object);
                      var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
                      var keys = ownKeys(O);
                      var result = {};
                      var index = 0;
                      var key, descriptor;
                      while (keys.length > index) {
                        descriptor = getOwnPropertyDescriptor(O, key = keys[index++]);
                        if (descriptor !== undefined) createProperty(result, key, descriptor);
                      }
                      return result;
                    }
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es.object.is.js": function _module3(_require4) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/es.object.is.js                          //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var $ = _require4('../internals/export');
                  var is = _require4('../internals/same-value');

                  // `Object.is` method
                  // https://tc39.es/ecma262/#sec-object.is
                  $({ target: 'Object', stat: true }, {
                    is: is
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es.function.name.js": function _module4(_require5) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/es.function.name.js                      //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var DESCRIPTORS = _require5('../internals/descriptors');
                  var defineProperty = _require5('../internals/object-define-property').f;

                  var FunctionPrototype = Function.prototype;
                  var FunctionPrototypeToString = FunctionPrototype.toString;
                  var nameRE = /^\s*function ([^ (]*)/;
                  var NAME = 'name';

                  // Function instances `.name` property
                  // https://tc39.es/ecma262/#sec-function-instances-name
                  if (DESCRIPTORS && !(NAME in FunctionPrototype)) {
                    defineProperty(FunctionPrototype, NAME, {
                      configurable: true,
                      get: function () {
                        try {
                          return FunctionPrototypeToString.call(this).match(nameRE)[1];
                        } catch (error) {
                          return '';
                        }
                      }
                    });
                  }

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es.number.is-finite.js": function _module5(_require6) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/es.number.is-finite.js                   //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var $ = _require6('../internals/export');
                  var numberIsFinite = _require6('../internals/number-is-finite');

                  // `Number.isFinite` method
                  // https://tc39.es/ecma262/#sec-number.isfinite
                  $({ target: 'Number', stat: true }, { isFinite: numberIsFinite });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es.number.is-nan.js": function _module6(_require7) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/es.number.is-nan.js                      //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var $ = _require7('../internals/export');

                  // `Number.isNaN` method
                  // https://tc39.es/ecma262/#sec-number.isnan
                  $({ target: 'Number', stat: true }, {
                    isNaN: function isNaN(number) {
                      // eslint-disable-next-line no-self-compare -- NaN check
                      return number != number;
                    }
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es.array.flat.js": function _module7(_require8) {
                  var $ = _require8('../internals/export');
                  var flattenIntoArray = _require8('../internals/flatten-into-array');
                  var toObject = _require8('../internals/to-object');
                  var toLength = _require8('../internals/to-length');
                  var toInteger = _require8('../internals/to-integer');
                  var arraySpeciesCreate = _require8('../internals/array-species-create');

                  // `Array.prototype.flat` method
                  // https://tc39.es/ecma262/#sec-array.prototype.flat
                  $({ target: 'Array', proto: true }, {
                    flat: function flat() /* depthArg = 1 */{
                      var depthArg = arguments.length ? arguments[0] : undefined;
                      var O = toObject(this);
                      var sourceLen = toLength(O.length);
                      var A = arraySpeciesCreate(O, 0);
                      A.length = flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
                      return A;
                    }
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es.array.flat-map.js": function _module8(_require9) {
                  var $ = _require9('../internals/export');
                  var flattenIntoArray = _require9('../internals/flatten-into-array');
                  var toObject = _require9('../internals/to-object');
                  var toLength = _require9('../internals/to-length');
                  var aFunction = _require9('../internals/a-function');
                  var arraySpeciesCreate = _require9('../internals/array-species-create');

                  // `Array.prototype.flatMap` method
                  // https://tc39.es/ecma262/#sec-array.prototype.flatmap
                  $({ target: 'Array', proto: true }, {
                    flatMap: function flatMap(callbackfn /* , thisArg */) {
                      var O = toObject(this);
                      var sourceLen = toLength(O.length);
                      var A;
                      aFunction(callbackfn);
                      A = arraySpeciesCreate(O, 0);
                      A.length = flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
                      return A;
                    }
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es.object.from-entries.js": function _module9(_require10) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/es.object.from-entries.js                //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var $ = _require10('../internals/export');
                  var iterate = _require10('../internals/iterate');
                  var createProperty = _require10('../internals/create-property');

                  // `Object.fromEntries` method
                  // https://github.com/tc39/proposal-object-from-entries
                  $({ target: 'Object', stat: true }, {
                    fromEntries: function fromEntries(iterable) {
                      var obj = {};
                      iterate(iterable, function (k, v) {
                        createProperty(obj, k, v);
                      }, { AS_ENTRIES: true });
                      return obj;
                    }
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es.string.pad-start.js": function _module10(_require11) {
                  var $ = _require11('../internals/export');
                  var $padStart = _require11('../internals/string-pad').start;
                  var WEBKIT_BUG = _require11('../internals/string-pad-webkit-bug');

                  // `String.prototype.padStart` method
                  // https://tc39.es/ecma262/#sec-string.prototype.padstart
                  $({ target: 'String', proto: true, forced: WEBKIT_BUG }, {
                    padStart: function padStart(maxLength /* , fillString = ' ' */) {
                      return $padStart(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);
                    }
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es.string.pad-end.js": function _module11(_require12) {
                  var $ = _require12('../internals/export');
                  var $padEnd = _require12('../internals/string-pad').end;
                  var WEBKIT_BUG = _require12('../internals/string-pad-webkit-bug');

                  // `String.prototype.padEnd` method
                  // https://tc39.es/ecma262/#sec-string.prototype.padend
                  $({ target: 'String', proto: true, forced: WEBKIT_BUG }, {
                    padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
                      return $padEnd(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);
                    }
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es.string.trim-start.js": function _module12(_require13) {
                  var $ = _require13('../internals/export');
                  var $trimStart = _require13('../internals/string-trim').start;
                  var forcedStringTrimMethod = _require13('../internals/string-trim-forced');

                  var FORCED = forcedStringTrimMethod('trimStart');

                  var trimStart = FORCED ? function trimStart() {
                    return $trimStart(this);
                    // eslint-disable-next-line es/no-string-prototype-trimstart-trimend -- safe
                  } : ''.trimStart;

                  // `String.prototype.{ trimStart, trimLeft }` methods
                  // https://tc39.es/ecma262/#sec-string.prototype.trimstart
                  // https://tc39.es/ecma262/#String.prototype.trimleft
                  $({ target: 'String', proto: true, forced: FORCED }, {
                    trimStart: trimStart,
                    trimLeft: trimStart
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es.string.trim-end.js": function _module13(_require14) {
                  var $ = _require14('../internals/export');
                  var $trimEnd = _require14('../internals/string-trim').end;
                  var forcedStringTrimMethod = _require14('../internals/string-trim-forced');

                  var FORCED = forcedStringTrimMethod('trimEnd');

                  var trimEnd = FORCED ? function trimEnd() {
                    return $trimEnd(this);
                    // eslint-disable-next-line es/no-string-prototype-trimstart-trimend -- safe
                  } : ''.trimEnd;

                  // `String.prototype.{ trimEnd, trimRight }` methods
                  // https://tc39.es/ecma262/#sec-string.prototype.trimend
                  // https://tc39.es/ecma262/#String.prototype.trimright
                  $({ target: 'String', proto: true, forced: FORCED }, {
                    trimEnd: trimEnd,
                    trimRight: trimEnd
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es.symbol.async-iterator.js": function _module14(_require15) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/es.symbol.async-iterator.js              //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var defineWellKnownSymbol = _require15('../internals/define-well-known-symbol');

                  // `Symbol.asyncIterator` well-known symbol
                  // https://tc39.es/ecma262/#sec-symbol.asynciterator
                  defineWellKnownSymbol('asyncIterator');

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                } }, "internals": { "export.js": function module(_require16, _exports2, _module15) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/export.js                              //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var global = _require16('../internals/global');
                  var getOwnPropertyDescriptor = _require16('../internals/object-get-own-property-descriptor').f;
                  var createNonEnumerableProperty = _require16('../internals/create-non-enumerable-property');
                  var redefine = _require16('../internals/redefine');
                  var setGlobal = _require16('../internals/set-global');
                  var copyConstructorProperties = _require16('../internals/copy-constructor-properties');
                  var isForced = _require16('../internals/is-forced');

                  /*
                    options.target      - name of the target object
                    options.global      - target is the global object
                    options.stat        - export as static methods of target
                    options.proto       - export as prototype methods of target
                    options.real        - real prototype method for the `pure` version
                    options.forced      - export even if the native feature is available
                    options.bind        - bind methods to the target, required for the `pure` version
                    options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
                    options.unsafe      - use the simple assignment of property instead of delete + defineProperty
                    options.sham        - add a flag to not completely full polyfills
                    options.enumerable  - export as enumerable property
                    options.noTargetGet - prevent calling a getter on target
                  */
                  _module15.exports = function (options, source) {
                    var TARGET = options.target;
                    var GLOBAL = options.global;
                    var STATIC = options.stat;
                    var FORCED, target, key, targetProperty, sourceProperty, descriptor;
                    if (GLOBAL) {
                      target = global;
                    } else if (STATIC) {
                      target = global[TARGET] || setGlobal(TARGET, {});
                    } else {
                      target = (global[TARGET] || {}).prototype;
                    }
                    if (target) for (key in source) {
                      sourceProperty = source[key];
                      if (options.noTargetGet) {
                        descriptor = getOwnPropertyDescriptor(target, key);
                        targetProperty = descriptor && descriptor.value;
                      } else targetProperty = target[key];
                      FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
                      // contained in target
                      if (!FORCED && targetProperty !== undefined) {
                        if (typeof sourceProperty === typeof targetProperty) continue;
                        copyConstructorProperties(sourceProperty, targetProperty);
                      }
                      // add a flag to not completely full polyfills
                      if (options.sham || targetProperty && targetProperty.sham) {
                        createNonEnumerableProperty(sourceProperty, 'sham', true);
                      }
                      // extend global
                      redefine(target, key, sourceProperty, options);
                    }
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "global.js": function module(_require17, _exports3, _module16) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/global.js                              //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var check = function (it) {
                    return it && it.Math == Math && it;
                  };

                  // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
                  _module16.exports =
                  // eslint-disable-next-line es/no-global-this -- safe
                  check(typeof globalThis == 'object' && globalThis) || check(typeof window == 'object' && window) ||
                  // eslint-disable-next-line no-restricted-globals -- safe
                  check(typeof self == 'object' && self) || check(typeof global == 'object' && global) ||
                  // eslint-disable-next-line no-new-func -- fallback
                  function () {
                    return this;
                  }() || Function('return this')();

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "object-get-own-property-descriptor.js": function _module17(_require18, _exports4) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/object-get-own-property-descriptor.js  //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var DESCRIPTORS = _require18('../internals/descriptors');
                  var propertyIsEnumerableModule = _require18('../internals/object-property-is-enumerable');
                  var createPropertyDescriptor = _require18('../internals/create-property-descriptor');
                  var toIndexedObject = _require18('../internals/to-indexed-object');
                  var toPrimitive = _require18('../internals/to-primitive');
                  var has = _require18('../internals/has');
                  var IE8_DOM_DEFINE = _require18('../internals/ie8-dom-define');

                  // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
                  var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

                  // `Object.getOwnPropertyDescriptor` method
                  // https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
                  _exports4.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
                    O = toIndexedObject(O);
                    P = toPrimitive(P, true);
                    if (IE8_DOM_DEFINE) try {
                      return $getOwnPropertyDescriptor(O, P);
                    } catch (error) {/* empty */}
                    if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "descriptors.js": function module(_require19, _exports5, _module18) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/descriptors.js                         //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var fails = _require19('../internals/fails');

                  // Detect IE8's incomplete defineProperty implementation
                  _module18.exports = !fails(function () {
                    // eslint-disable-next-line es/no-object-defineproperty -- required for testing
                    return Object.defineProperty({}, 1, { get: function () {
                        return 7;
                      } })[1] != 7;
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "fails.js": function module(_require20, _exports6, _module19) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/fails.js                               //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  _module19.exports = function (exec) {
                    try {
                      return !!exec();
                    } catch (error) {
                      return true;
                    }
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "object-property-is-enumerable.js": function _module20(_require21, _exports7) {
                  var $propertyIsEnumerable = {}.propertyIsEnumerable;
                  // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
                  var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

                  // Nashorn ~ JDK8 bug
                  var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);

                  // `Object.prototype.propertyIsEnumerable` method implementation
                  // https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
                  _exports7.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
                    var descriptor = getOwnPropertyDescriptor(this, V);
                    return !!descriptor && descriptor.enumerable;
                  } : $propertyIsEnumerable;

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "create-property-descriptor.js": function module(_require22, _exports8, _module21) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/create-property-descriptor.js          //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  _module21.exports = function (bitmap, value) {
                    return {
                      enumerable: !(bitmap & 1),
                      configurable: !(bitmap & 2),
                      writable: !(bitmap & 4),
                      value: value
                    };
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "to-indexed-object.js": function module(_require23, _exports9, _module22) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/to-indexed-object.js                   //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // toObject with fallback for non-array-like ES3 strings
                  var IndexedObject = _require23('../internals/indexed-object');
                  var requireObjectCoercible = _require23('../internals/require-object-coercible');

                  _module22.exports = function (it) {
                    return IndexedObject(requireObjectCoercible(it));
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "indexed-object.js": function module(_require24, _exports10, _module23) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/indexed-object.js                      //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var fails = _require24('../internals/fails');
                  var classof = _require24('../internals/classof-raw');

                  var split = ''.split;

                  // fallback for non-array-like ES3 and non-enumerable old V8 strings
                  _module23.exports = fails(function () {
                    // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
                    // eslint-disable-next-line no-prototype-builtins -- safe
                    return !Object('z').propertyIsEnumerable(0);
                  }) ? function (it) {
                    return classof(it) == 'String' ? split.call(it, '') : Object(it);
                  } : Object;

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "classof-raw.js": function module(_require25, _exports11, _module24) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/classof-raw.js                         //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var toString = {}.toString;

                  _module24.exports = function (it) {
                    return toString.call(it).slice(8, -1);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "require-object-coercible.js": function module(_require26, _exports12, _module25) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/require-object-coercible.js            //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // `RequireObjectCoercible` abstract operation
                  // https://tc39.es/ecma262/#sec-requireobjectcoercible
                  _module25.exports = function (it) {
                    if (it == undefined) throw TypeError("Can't call method on " + it);
                    return it;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "to-primitive.js": function module(_require27, _exports13, _module26) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/to-primitive.js                        //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var isObject = _require27('../internals/is-object');

                  // `ToPrimitive` abstract operation
                  // https://tc39.es/ecma262/#sec-toprimitive
                  // instead of the ES6 spec version, we didn't implement @@toPrimitive case
                  // and the second argument - flag - preferred type is a string
                  _module26.exports = function (input, PREFERRED_STRING) {
                    if (!isObject(input)) return input;
                    var fn, val;
                    if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
                    if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
                    if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
                    throw TypeError("Can't convert object to primitive value");
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "is-object.js": function module(_require28, _exports14, _module27) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/is-object.js                           //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  _module27.exports = function (it) {
                    return typeof it === 'object' ? it !== null : typeof it === 'function';
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "has.js": function module(_require29, _exports15, _module28) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/has.js                                 //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var toObject = _require29('../internals/to-object');

                  var hasOwnProperty = {}.hasOwnProperty;

                  _module28.exports = Object.hasOwn || function hasOwn(it, key) {
                    return hasOwnProperty.call(toObject(it), key);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "to-object.js": function module(_require30, _exports16, _module29) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/to-object.js                           //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var requireObjectCoercible = _require30('../internals/require-object-coercible');

                  // `ToObject` abstract operation
                  // https://tc39.es/ecma262/#sec-toobject
                  _module29.exports = function (argument) {
                    return Object(requireObjectCoercible(argument));
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "ie8-dom-define.js": function module(_require31, _exports17, _module30) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/ie8-dom-define.js                      //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var DESCRIPTORS = _require31('../internals/descriptors');
                  var fails = _require31('../internals/fails');
                  var createElement = _require31('../internals/document-create-element');

                  // Thank's IE8 for his funny defineProperty
                  _module30.exports = !DESCRIPTORS && !fails(function () {
                    // eslint-disable-next-line es/no-object-defineproperty -- requied for testing
                    return Object.defineProperty(createElement('div'), 'a', {
                      get: function () {
                        return 7;
                      }
                    }).a != 7;
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "document-create-element.js": function module(_require32, _exports18, _module31) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/document-create-element.js             //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var global = _require32('../internals/global');
                  var isObject = _require32('../internals/is-object');

                  var document = global.document;
                  // typeof document.createElement is 'object' in old IE
                  var EXISTS = isObject(document) && isObject(document.createElement);

                  _module31.exports = function (it) {
                    return EXISTS ? document.createElement(it) : {};
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "create-non-enumerable-property.js": function module(_require33, _exports19, _module32) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/create-non-enumerable-property.js      //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var DESCRIPTORS = _require33('../internals/descriptors');
                  var definePropertyModule = _require33('../internals/object-define-property');
                  var createPropertyDescriptor = _require33('../internals/create-property-descriptor');

                  _module32.exports = DESCRIPTORS ? function (object, key, value) {
                    return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
                  } : function (object, key, value) {
                    object[key] = value;
                    return object;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "object-define-property.js": function _module33(_require34, _exports20) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/object-define-property.js              //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var DESCRIPTORS = _require34('../internals/descriptors');
                  var IE8_DOM_DEFINE = _require34('../internals/ie8-dom-define');
                  var anObject = _require34('../internals/an-object');
                  var toPrimitive = _require34('../internals/to-primitive');

                  // eslint-disable-next-line es/no-object-defineproperty -- safe
                  var $defineProperty = Object.defineProperty;

                  // `Object.defineProperty` method
                  // https://tc39.es/ecma262/#sec-object.defineproperty
                  _exports20.f = DESCRIPTORS ? $defineProperty : function defineProperty(O, P, Attributes) {
                    anObject(O);
                    P = toPrimitive(P, true);
                    anObject(Attributes);
                    if (IE8_DOM_DEFINE) try {
                      return $defineProperty(O, P, Attributes);
                    } catch (error) {/* empty */}
                    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
                    if ('value' in Attributes) O[P] = Attributes.value;
                    return O;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "an-object.js": function module(_require35, _exports21, _module34) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/an-object.js                           //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var isObject = _require35('../internals/is-object');

                  _module34.exports = function (it) {
                    if (!isObject(it)) {
                      throw TypeError(String(it) + ' is not an object');
                    }return it;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "redefine.js": function module(_require36, _exports22, _module35) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/redefine.js                            //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var global = _require36('../internals/global');
                  var createNonEnumerableProperty = _require36('../internals/create-non-enumerable-property');
                  var has = _require36('../internals/has');
                  var setGlobal = _require36('../internals/set-global');
                  var inspectSource = _require36('../internals/inspect-source');
                  var InternalStateModule = _require36('../internals/internal-state');

                  var getInternalState = InternalStateModule.get;
                  var enforceInternalState = InternalStateModule.enforce;
                  var TEMPLATE = String(String).split('String');

                  (_module35.exports = function (O, key, value, options) {
                    var unsafe = options ? !!options.unsafe : false;
                    var simple = options ? !!options.enumerable : false;
                    var noTargetGet = options ? !!options.noTargetGet : false;
                    var state;
                    if (typeof value == 'function') {
                      if (typeof key == 'string' && !has(value, 'name')) {
                        createNonEnumerableProperty(value, 'name', key);
                      }
                      state = enforceInternalState(value);
                      if (!state.source) {
                        state.source = TEMPLATE.join(typeof key == 'string' ? key : '');
                      }
                    }
                    if (O === global) {
                      if (simple) O[key] = value;else setGlobal(key, value);
                      return;
                    } else if (!unsafe) {
                      delete O[key];
                    } else if (!noTargetGet && O[key]) {
                      simple = true;
                    }
                    if (simple) O[key] = value;else createNonEnumerableProperty(O, key, value);
                    // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
                  })(Function.prototype, 'toString', function toString() {
                    return typeof this == 'function' && getInternalState(this).source || inspectSource(this);
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "set-global.js": function module(_require37, _exports23, _module36) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/set-global.js                          //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var global = _require37('../internals/global');
                  var createNonEnumerableProperty = _require37('../internals/create-non-enumerable-property');

                  _module36.exports = function (key, value) {
                    try {
                      createNonEnumerableProperty(global, key, value);
                    } catch (error) {
                      global[key] = value;
                    }return value;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "inspect-source.js": function module(_require38, _exports24, _module37) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/inspect-source.js                      //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var store = _require38('../internals/shared-store');

                  var functionToString = Function.toString;

                  // this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
                  if (typeof store.inspectSource != 'function') {
                    store.inspectSource = function (it) {
                      return functionToString.call(it);
                    };
                  }

                  _module37.exports = store.inspectSource;

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "shared-store.js": function module(_require39, _exports25, _module38) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/shared-store.js                        //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var global = _require39('../internals/global');
                  var setGlobal = _require39('../internals/set-global');

                  var SHARED = '__core-js_shared__';
                  var store = global[SHARED] || setGlobal(SHARED, {});

                  _module38.exports = store;

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "internal-state.js": function module(_require40, _exports26, _module39) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/internal-state.js                      //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var NATIVE_WEAK_MAP = _require40('../internals/native-weak-map');
                  var global = _require40('../internals/global');
                  var isObject = _require40('../internals/is-object');
                  var createNonEnumerableProperty = _require40('../internals/create-non-enumerable-property');
                  var objectHas = _require40('../internals/has');
                  var shared = _require40('../internals/shared-store');
                  var sharedKey = _require40('../internals/shared-key');
                  var hiddenKeys = _require40('../internals/hidden-keys');

                  var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
                  var WeakMap = global.WeakMap;
                  var set, get, has;

                  var enforce = function (it) {
                    return has(it) ? get(it) : set(it, {});
                  };

                  var getterFor = function (TYPE) {
                    return function (it) {
                      var state;
                      if (!isObject(it) || (state = get(it)).type !== TYPE) {
                        throw TypeError('Incompatible receiver, ' + TYPE + ' required');
                      }return state;
                    };
                  };

                  if (NATIVE_WEAK_MAP || shared.state) {
                    var store = shared.state || (shared.state = new WeakMap());
                    var wmget = store.get;
                    var wmhas = store.has;
                    var wmset = store.set;
                    set = function (it, metadata) {
                      if (wmhas.call(store, it)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
                      metadata.facade = it;
                      wmset.call(store, it, metadata);
                      return metadata;
                    };
                    get = function (it) {
                      return wmget.call(store, it) || {};
                    };
                    has = function (it) {
                      return wmhas.call(store, it);
                    };
                  } else {
                    var STATE = sharedKey('state');
                    hiddenKeys[STATE] = true;
                    set = function (it, metadata) {
                      if (objectHas(it, STATE)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
                      metadata.facade = it;
                      createNonEnumerableProperty(it, STATE, metadata);
                      return metadata;
                    };
                    get = function (it) {
                      return objectHas(it, STATE) ? it[STATE] : {};
                    };
                    has = function (it) {
                      return objectHas(it, STATE);
                    };
                  }

                  _module39.exports = {
                    set: set,
                    get: get,
                    has: has,
                    enforce: enforce,
                    getterFor: getterFor
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "native-weak-map.js": function module(_require41, _exports27, _module40) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/native-weak-map.js                     //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var global = _require41('../internals/global');
                  var inspectSource = _require41('../internals/inspect-source');

                  var WeakMap = global.WeakMap;

                  _module40.exports = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "shared-key.js": function module(_require42, _exports28, _module41) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/shared-key.js                          //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var shared = _require42('../internals/shared');
                  var uid = _require42('../internals/uid');

                  var keys = shared('keys');

                  _module41.exports = function (key) {
                    return keys[key] || (keys[key] = uid(key));
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "shared.js": function module(_require43, _exports29, _module42) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/shared.js                              //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var IS_PURE = _require43('../internals/is-pure');
                  var store = _require43('../internals/shared-store');

                  (_module42.exports = function (key, value) {
                    return store[key] || (store[key] = value !== undefined ? value : {});
                  })('versions', []).push({
                    version: '3.15.2',
                    mode: IS_PURE ? 'pure' : 'global',
                    copyright: '© 2021 Denis Pushkarev (zloirock.ru)'
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "is-pure.js": function module(_require44, _exports30, _module43) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/is-pure.js                             //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  _module43.exports = false;

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "uid.js": function module(_require45, _exports31, _module44) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/uid.js                                 //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var id = 0;
                  var postfix = Math.random();

                  _module44.exports = function (key) {
                    return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "hidden-keys.js": function module(_require46, _exports32, _module45) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/hidden-keys.js                         //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  _module45.exports = {};

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "copy-constructor-properties.js": function module(_require47, _exports33, _module46) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/copy-constructor-properties.js         //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var has = _require47('../internals/has');
                  var ownKeys = _require47('../internals/own-keys');
                  var getOwnPropertyDescriptorModule = _require47('../internals/object-get-own-property-descriptor');
                  var definePropertyModule = _require47('../internals/object-define-property');

                  _module46.exports = function (target, source) {
                    var keys = ownKeys(source);
                    var defineProperty = definePropertyModule.f;
                    var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
                    for (var i = 0; i < keys.length; i++) {
                      var key = keys[i];
                      if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
                    }
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "own-keys.js": function module(_require48, _exports34, _module47) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/own-keys.js                            //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var getBuiltIn = _require48('../internals/get-built-in');
                  var getOwnPropertyNamesModule = _require48('../internals/object-get-own-property-names');
                  var getOwnPropertySymbolsModule = _require48('../internals/object-get-own-property-symbols');
                  var anObject = _require48('../internals/an-object');

                  // all object keys, includes non-enumerable and symbols
                  _module47.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
                    var keys = getOwnPropertyNamesModule.f(anObject(it));
                    var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
                    return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "get-built-in.js": function module(_require49, _exports35, _module48) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/get-built-in.js                        //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var path = _require49('../internals/path');
                  var global = _require49('../internals/global');

                  var aFunction = function (variable) {
                    return typeof variable == 'function' ? variable : undefined;
                  };

                  _module48.exports = function (namespace, method) {
                    return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace]) : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "path.js": function module(_require50, _exports36, _module49) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/path.js                                //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var global = _require50('../internals/global');

                  _module49.exports = global;

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "object-get-own-property-names.js": function _module50(_require51, _exports37) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/object-get-own-property-names.js       //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var internalObjectKeys = _require51('../internals/object-keys-internal');
                  var enumBugKeys = _require51('../internals/enum-bug-keys');

                  var hiddenKeys = enumBugKeys.concat('length', 'prototype');

                  // `Object.getOwnPropertyNames` method
                  // https://tc39.es/ecma262/#sec-object.getownpropertynames
                  // eslint-disable-next-line es/no-object-getownpropertynames -- safe
                  _exports37.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
                    return internalObjectKeys(O, hiddenKeys);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "object-keys-internal.js": function module(_require52, _exports38, _module51) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/object-keys-internal.js                //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var has = _require52('../internals/has');
                  var toIndexedObject = _require52('../internals/to-indexed-object');
                  var indexOf = _require52('../internals/array-includes').indexOf;
                  var hiddenKeys = _require52('../internals/hidden-keys');

                  _module51.exports = function (object, names) {
                    var O = toIndexedObject(object);
                    var i = 0;
                    var result = [];
                    var key;
                    for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
                    // Don't enum bug & hidden keys
                    while (names.length > i) if (has(O, key = names[i++])) {
                      ~indexOf(result, key) || result.push(key);
                    }
                    return result;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "array-includes.js": function module(_require53, _exports39, _module52) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/array-includes.js                      //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var toIndexedObject = _require53('../internals/to-indexed-object');
                  var toLength = _require53('../internals/to-length');
                  var toAbsoluteIndex = _require53('../internals/to-absolute-index');

                  // `Array.prototype.{ indexOf, includes }` methods implementation
                  var createMethod = function (IS_INCLUDES) {
                    return function ($this, el, fromIndex) {
                      var O = toIndexedObject($this);
                      var length = toLength(O.length);
                      var index = toAbsoluteIndex(fromIndex, length);
                      var value;
                      // Array#includes uses SameValueZero equality algorithm
                      // eslint-disable-next-line no-self-compare -- NaN check
                      if (IS_INCLUDES && el != el) while (length > index) {
                        value = O[index++];
                        // eslint-disable-next-line no-self-compare -- NaN check
                        if (value != value) return true;
                        // Array#indexOf ignores holes, Array#includes - not
                      } else for (; length > index; index++) {
                        if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
                      }return !IS_INCLUDES && -1;
                    };
                  };

                  _module52.exports = {
                    // `Array.prototype.includes` method
                    // https://tc39.es/ecma262/#sec-array.prototype.includes
                    includes: createMethod(true),
                    // `Array.prototype.indexOf` method
                    // https://tc39.es/ecma262/#sec-array.prototype.indexof
                    indexOf: createMethod(false)
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "to-length.js": function module(_require54, _exports40, _module53) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/to-length.js                           //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var toInteger = _require54('../internals/to-integer');

                  var min = Math.min;

                  // `ToLength` abstract operation
                  // https://tc39.es/ecma262/#sec-tolength
                  _module53.exports = function (argument) {
                    return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "to-integer.js": function module(_require55, _exports41, _module54) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/to-integer.js                          //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var ceil = Math.ceil;
                  var floor = Math.floor;

                  // `ToInteger` abstract operation
                  // https://tc39.es/ecma262/#sec-tointeger
                  _module54.exports = function (argument) {
                    return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "to-absolute-index.js": function module(_require56, _exports42, _module55) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/to-absolute-index.js                   //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var toInteger = _require56('../internals/to-integer');

                  var max = Math.max;
                  var min = Math.min;

                  // Helper for a popular repeating case of the spec:
                  // Let integer be ? ToInteger(index).
                  // If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
                  _module55.exports = function (index, length) {
                    var integer = toInteger(index);
                    return integer < 0 ? max(integer + length, 0) : min(integer, length);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "enum-bug-keys.js": function module(_require57, _exports43, _module56) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/enum-bug-keys.js                       //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // IE8- don't enum bug keys
                  _module56.exports = ['constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf'];

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "object-get-own-property-symbols.js": function _module57(_require58, _exports44) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/object-get-own-property-symbols.js     //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // eslint-disable-next-line es/no-object-getownpropertysymbols -- safe
                  _exports44.f = Object.getOwnPropertySymbols;

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "is-forced.js": function module(_require59, _exports45, _module58) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/is-forced.js                           //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var fails = _require59('../internals/fails');

                  var replacement = /#|\.prototype\./;

                  var isForced = function (feature, detection) {
                    var value = data[normalize(feature)];
                    return value == POLYFILL ? true : value == NATIVE ? false : typeof detection == 'function' ? fails(detection) : !!detection;
                  };

                  var normalize = isForced.normalize = function (string) {
                    return String(string).replace(replacement, '.').toLowerCase();
                  };

                  var data = isForced.data = {};
                  var NATIVE = isForced.NATIVE = 'N';
                  var POLYFILL = isForced.POLYFILL = 'P';

                  _module58.exports = isForced;

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "create-property.js": function module(_require60, _exports46, _module59) {
                  var toPrimitive = _require60('../internals/to-primitive');
                  var definePropertyModule = _require60('../internals/object-define-property');
                  var createPropertyDescriptor = _require60('../internals/create-property-descriptor');

                  _module59.exports = function (object, key, value) {
                    var propertyKey = toPrimitive(key);
                    if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));else object[propertyKey] = value;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "same-value.js": function module(_require61, _exports47, _module60) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/same-value.js                          //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // `SameValue` abstract operation
                  // https://tc39.es/ecma262/#sec-samevalue
                  // eslint-disable-next-line es/no-object-is -- safe
                  _module60.exports = Object.is || function is(x, y) {
                    // eslint-disable-next-line no-self-compare -- NaN check
                    return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "number-is-finite.js": function module(_require62, _exports48, _module61) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/number-is-finite.js                    //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var global = _require62('../internals/global');

                  var globalIsFinite = global.isFinite;

                  // `Number.isFinite` method
                  // https://tc39.es/ecma262/#sec-number.isfinite
                  // eslint-disable-next-line es/no-number-isfinite -- safe
                  _module61.exports = Number.isFinite || function isFinite(it) {
                    return typeof it == 'number' && globalIsFinite(it);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "flatten-into-array.js": function module(_require63, _exports49, _module62) {
                  var isArray = _require63('../internals/is-array');
                  var toLength = _require63('../internals/to-length');
                  var bind = _require63('../internals/function-bind-context');

                  // `FlattenIntoArray` abstract operation
                  // https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
                  var flattenIntoArray = function (target, original, source, sourceLen, start, depth, mapper, thisArg) {
                    var targetIndex = start;
                    var sourceIndex = 0;
                    var mapFn = mapper ? bind(mapper, thisArg, 3) : false;
                    var element;

                    while (sourceIndex < sourceLen) {
                      if (sourceIndex in source) {
                        element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

                        if (depth > 0 && isArray(element)) {
                          targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
                        } else {
                          if (targetIndex >= 0x1FFFFFFFFFFFFF) throw TypeError('Exceed the acceptable array length');
                          target[targetIndex] = element;
                        }

                        targetIndex++;
                      }
                      sourceIndex++;
                    }
                    return targetIndex;
                  };

                  _module62.exports = flattenIntoArray;

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "is-array.js": function module(_require64, _exports50, _module63) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/is-array.js                            //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var classof = _require64('../internals/classof-raw');

                  // `IsArray` abstract operation
                  // https://tc39.es/ecma262/#sec-isarray
                  // eslint-disable-next-line es/no-array-isarray -- safe
                  _module63.exports = Array.isArray || function isArray(arg) {
                    return classof(arg) == 'Array';
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "function-bind-context.js": function module(_require65, _exports51, _module64) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/function-bind-context.js               //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var aFunction = _require65('../internals/a-function');

                  // optional / simple context binding
                  _module64.exports = function (fn, that, length) {
                    aFunction(fn);
                    if (that === undefined) return fn;
                    switch (length) {
                      case 0:
                        return function () {
                          return fn.call(that);
                        };
                      case 1:
                        return function (a) {
                          return fn.call(that, a);
                        };
                      case 2:
                        return function (a, b) {
                          return fn.call(that, a, b);
                        };
                      case 3:
                        return function (a, b, c) {
                          return fn.call(that, a, b, c);
                        };
                    }
                    return function () /* ...args */{
                      return fn.apply(that, arguments);
                    };
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "a-function.js": function module(_require66, _exports52, _module65) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/a-function.js                          //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  _module65.exports = function (it) {
                    if (typeof it != 'function') {
                      throw TypeError(String(it) + ' is not a function');
                    }return it;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "array-species-create.js": function module(_require67, _exports53, _module66) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/array-species-create.js                //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var isObject = _require67('../internals/is-object');
                  var isArray = _require67('../internals/is-array');
                  var wellKnownSymbol = _require67('../internals/well-known-symbol');

                  var SPECIES = wellKnownSymbol('species');

                  // `ArraySpeciesCreate` abstract operation
                  // https://tc39.es/ecma262/#sec-arrayspeciescreate
                  _module66.exports = function (originalArray, length) {
                    var C;
                    if (isArray(originalArray)) {
                      C = originalArray.constructor;
                      // cross-realm fallback
                      if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;else if (isObject(C)) {
                        C = C[SPECIES];
                        if (C === null) C = undefined;
                      }
                    }return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "well-known-symbol.js": function module(_require68, _exports54, _module67) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/well-known-symbol.js                   //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var global = _require68('../internals/global');
                  var shared = _require68('../internals/shared');
                  var has = _require68('../internals/has');
                  var uid = _require68('../internals/uid');
                  var NATIVE_SYMBOL = _require68('../internals/native-symbol');
                  var USE_SYMBOL_AS_UID = _require68('../internals/use-symbol-as-uid');

                  var WellKnownSymbolsStore = shared('wks');
                  var Symbol = global.Symbol;
                  var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;

                  _module67.exports = function (name) {
                    if (!has(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == 'string')) {
                      if (NATIVE_SYMBOL && has(Symbol, name)) {
                        WellKnownSymbolsStore[name] = Symbol[name];
                      } else {
                        WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
                      }
                    }return WellKnownSymbolsStore[name];
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "native-symbol.js": function module(_require69, _exports55, _module68) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/native-symbol.js                       //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  /* eslint-disable es/no-symbol -- required for testing */
                  var V8_VERSION = _require69('../internals/engine-v8-version');
                  var fails = _require69('../internals/fails');

                  // eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing
                  _module68.exports = !!Object.getOwnPropertySymbols && !fails(function () {
                    var symbol = Symbol();
                    // Chrome 38 Symbol has incorrect toString conversion
                    // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
                    return !String(symbol) || !(Object(symbol) instanceof Symbol) ||
                    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
                    !Symbol.sham && V8_VERSION && V8_VERSION < 41;
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "engine-v8-version.js": function module(_require70, _exports56, _module69) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/engine-v8-version.js                   //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var global = _require70('../internals/global');
                  var userAgent = _require70('../internals/engine-user-agent');

                  var process = global.process;
                  var versions = process && process.versions;
                  var v8 = versions && versions.v8;
                  var match, version;

                  if (v8) {
                    match = v8.split('.');
                    version = match[0] < 4 ? 1 : match[0] + match[1];
                  } else if (userAgent) {
                    match = userAgent.match(/Edge\/(\d+)/);
                    if (!match || match[1] >= 74) {
                      match = userAgent.match(/Chrome\/(\d+)/);
                      if (match) version = match[1];
                    }
                  }

                  _module69.exports = version && +version;

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "engine-user-agent.js": function module(_require71, _exports57, _module70) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/engine-user-agent.js                   //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var getBuiltIn = _require71('../internals/get-built-in');

                  _module70.exports = getBuiltIn('navigator', 'userAgent') || '';

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "use-symbol-as-uid.js": function module(_require72, _exports58, _module71) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/use-symbol-as-uid.js                   //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  /* eslint-disable es/no-symbol -- required for testing */
                  var NATIVE_SYMBOL = _require72('../internals/native-symbol');

                  _module71.exports = NATIVE_SYMBOL && !Symbol.sham && typeof Symbol.iterator == 'symbol';

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "iterate.js": function module(_require73, _exports59, _module72) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/iterate.js                             //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var anObject = _require73('../internals/an-object');
                  var isArrayIteratorMethod = _require73('../internals/is-array-iterator-method');
                  var toLength = _require73('../internals/to-length');
                  var bind = _require73('../internals/function-bind-context');
                  var getIteratorMethod = _require73('../internals/get-iterator-method');
                  var iteratorClose = _require73('../internals/iterator-close');

                  var Result = function (stopped, result) {
                    this.stopped = stopped;
                    this.result = result;
                  };

                  _module72.exports = function (iterable, unboundFunction, options) {
                    var that = options && options.that;
                    var AS_ENTRIES = !!(options && options.AS_ENTRIES);
                    var IS_ITERATOR = !!(options && options.IS_ITERATOR);
                    var INTERRUPTED = !!(options && options.INTERRUPTED);
                    var fn = bind(unboundFunction, that, 1 + AS_ENTRIES + INTERRUPTED);
                    var iterator, iterFn, index, length, result, next, step;

                    var stop = function (condition) {
                      if (iterator) iteratorClose(iterator);
                      return new Result(true, condition);
                    };

                    var callFn = function (value) {
                      if (AS_ENTRIES) {
                        anObject(value);
                        return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
                      }return INTERRUPTED ? fn(value, stop) : fn(value);
                    };

                    if (IS_ITERATOR) {
                      iterator = iterable;
                    } else {
                      iterFn = getIteratorMethod(iterable);
                      if (typeof iterFn != 'function') throw TypeError('Target is not iterable');
                      // optimisation for array iterators
                      if (isArrayIteratorMethod(iterFn)) {
                        for (index = 0, length = toLength(iterable.length); length > index; index++) {
                          result = callFn(iterable[index]);
                          if (result && result instanceof Result) return result;
                        }return new Result(false);
                      }
                      iterator = iterFn.call(iterable);
                    }

                    next = iterator.next;
                    while (!(step = next.call(iterator)).done) {
                      try {
                        result = callFn(step.value);
                      } catch (error) {
                        iteratorClose(iterator);
                        throw error;
                      }
                      if (typeof result == 'object' && result && result instanceof Result) return result;
                    }return new Result(false);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "is-array-iterator-method.js": function module(_require74, _exports60, _module73) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/is-array-iterator-method.js            //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var wellKnownSymbol = _require74('../internals/well-known-symbol');
                  var Iterators = _require74('../internals/iterators');

                  var ITERATOR = wellKnownSymbol('iterator');
                  var ArrayPrototype = Array.prototype;

                  // check on default Array iterator
                  _module73.exports = function (it) {
                    return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "iterators.js": function module(_require75, _exports61, _module74) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/iterators.js                           //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  _module74.exports = {};

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "get-iterator-method.js": function module(_require76, _exports62, _module75) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/get-iterator-method.js                 //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var classof = _require76('../internals/classof');
                  var Iterators = _require76('../internals/iterators');
                  var wellKnownSymbol = _require76('../internals/well-known-symbol');

                  var ITERATOR = wellKnownSymbol('iterator');

                  _module75.exports = function (it) {
                    if (it != undefined) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "classof.js": function module(_require77, _exports63, _module76) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/classof.js                             //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var TO_STRING_TAG_SUPPORT = _require77('../internals/to-string-tag-support');
                  var classofRaw = _require77('../internals/classof-raw');
                  var wellKnownSymbol = _require77('../internals/well-known-symbol');

                  var TO_STRING_TAG = wellKnownSymbol('toStringTag');
                  // ES3 wrong here
                  var CORRECT_ARGUMENTS = classofRaw(function () {
                    return arguments;
                  }()) == 'Arguments';

                  // fallback for IE11 Script Access Denied error
                  var tryGet = function (it, key) {
                    try {
                      return it[key];
                    } catch (error) {/* empty */}
                  };

                  // getting tag from ES6+ `Object.prototype.toString`
                  _module76.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {
                    var O, tag, result;
                    return it === undefined ? 'Undefined' : it === null ? 'Null'
                    // @@toStringTag case
                    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag
                    // builtinTag case
                    : CORRECT_ARGUMENTS ? classofRaw(O)
                    // ES3 arguments fallback
                    : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "to-string-tag-support.js": function module(_require78, _exports64, _module77) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/to-string-tag-support.js               //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var wellKnownSymbol = _require78('../internals/well-known-symbol');

                  var TO_STRING_TAG = wellKnownSymbol('toStringTag');
                  var test = {};

                  test[TO_STRING_TAG] = 'z';

                  _module77.exports = String(test) === '[object z]';

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "iterator-close.js": function module(_require79, _exports65, _module78) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/iterator-close.js                      //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var anObject = _require79('../internals/an-object');

                  _module78.exports = function (iterator) {
                    var returnMethod = iterator['return'];
                    if (returnMethod !== undefined) {
                      return anObject(returnMethod.call(iterator)).value;
                    }
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "string-pad.js": function module(_require80, _exports66, _module79) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/string-pad.js                          //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // https://github.com/tc39/proposal-string-pad-start-end
                  var toLength = _require80('../internals/to-length');
                  var repeat = _require80('../internals/string-repeat');
                  var requireObjectCoercible = _require80('../internals/require-object-coercible');

                  var ceil = Math.ceil;

                  // `String.prototype.{ padStart, padEnd }` methods implementation
                  var createMethod = function (IS_END) {
                    return function ($this, maxLength, fillString) {
                      var S = String(requireObjectCoercible($this));
                      var stringLength = S.length;
                      var fillStr = fillString === undefined ? ' ' : String(fillString);
                      var intMaxLength = toLength(maxLength);
                      var fillLen, stringFiller;
                      if (intMaxLength <= stringLength || fillStr == '') return S;
                      fillLen = intMaxLength - stringLength;
                      stringFiller = repeat.call(fillStr, ceil(fillLen / fillStr.length));
                      if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
                      return IS_END ? S + stringFiller : stringFiller + S;
                    };
                  };

                  _module79.exports = {
                    // `String.prototype.padStart` method
                    // https://tc39.es/ecma262/#sec-string.prototype.padstart
                    start: createMethod(false),
                    // `String.prototype.padEnd` method
                    // https://tc39.es/ecma262/#sec-string.prototype.padend
                    end: createMethod(true)
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "string-repeat.js": function module(_require81, _exports67, _module80) {
                  var toInteger = _require81('../internals/to-integer');
                  var requireObjectCoercible = _require81('../internals/require-object-coercible');

                  // `String.prototype.repeat` method implementation
                  // https://tc39.es/ecma262/#sec-string.prototype.repeat
                  _module80.exports = function repeat(count) {
                    var str = String(requireObjectCoercible(this));
                    var result = '';
                    var n = toInteger(count);
                    if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');
                    for (; n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;
                    return result;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "string-pad-webkit-bug.js": function module(_require82, _exports68, _module81) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/string-pad-webkit-bug.js               //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // https://github.com/zloirock/core-js/issues/280
                  var userAgent = _require82('../internals/engine-user-agent');

                  // eslint-disable-next-line unicorn/no-unsafe-regex -- safe
                  _module81.exports = /Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(userAgent);

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "string-trim.js": function module(_require83, _exports69, _module82) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/string-trim.js                         //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var requireObjectCoercible = _require83('../internals/require-object-coercible');
                  var whitespaces = _require83('../internals/whitespaces');

                  var whitespace = '[' + whitespaces + ']';
                  var ltrim = RegExp('^' + whitespace + whitespace + '*');
                  var rtrim = RegExp(whitespace + whitespace + '*$');

                  // `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
                  var createMethod = function (TYPE) {
                    return function ($this) {
                      var string = String(requireObjectCoercible($this));
                      if (TYPE & 1) string = string.replace(ltrim, '');
                      if (TYPE & 2) string = string.replace(rtrim, '');
                      return string;
                    };
                  };

                  _module82.exports = {
                    // `String.prototype.{ trimLeft, trimStart }` methods
                    // https://tc39.es/ecma262/#sec-string.prototype.trimstart
                    start: createMethod(1),
                    // `String.prototype.{ trimRight, trimEnd }` methods
                    // https://tc39.es/ecma262/#sec-string.prototype.trimend
                    end: createMethod(2),
                    // `String.prototype.trim` method
                    // https://tc39.es/ecma262/#sec-string.prototype.trim
                    trim: createMethod(3)
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "whitespaces.js": function module(_require84, _exports70, _module83) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/whitespaces.js                         //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // a string of all valid unicode whitespaces
                  _module83.exports = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002' + '\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "string-trim-forced.js": function module(_require85, _exports71, _module84) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/string-trim-forced.js                  //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var fails = _require85('../internals/fails');
                  var whitespaces = _require85('../internals/whitespaces');

                  var non = '\u200B\u0085\u180E';

                  // check that a method works with the correct list
                  // of whitespaces and has a correct name
                  _module84.exports = function (METHOD_NAME) {
                    return fails(function () {
                      return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;
                    });
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "define-well-known-symbol.js": function module(_require86, _exports72, _module85) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/define-well-known-symbol.js            //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var path = _require86('../internals/path');
                  var has = _require86('../internals/has');
                  var wrappedWellKnownSymbolModule = _require86('../internals/well-known-symbol-wrapped');
                  var defineProperty = _require86('../internals/object-define-property').f;

                  _module85.exports = function (NAME) {
                    var Symbol = path.Symbol || (path.Symbol = {});
                    if (!has(Symbol, NAME)) defineProperty(Symbol, NAME, {
                      value: wrappedWellKnownSymbolModule.f(NAME)
                    });
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "well-known-symbol-wrapped.js": function _module86(_require87, _exports73) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/well-known-symbol-wrapped.js           //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var wellKnownSymbol = _require87('../internals/well-known-symbol');

                  _exports73.f = wellKnownSymbol;

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                } } } } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports = _require2("/node_modules/meteor/ecmascript-runtime-client/modern.js");

  /* Exports */
  Package._define("ecmascript-runtime-client", _exports);
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var WebApp;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "webapp": { "webapp_client.js": function module(_require, _exports, _module) {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/webapp/webapp_client.js                                                                                   //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              WebApp: () => WebApp
            });
            const WebApp = {
              _isCssLoaded() {
                if (document.styleSheets.length === 0) {
                  return true;
                }

                return Array.prototype.find.call(document.styleSheets, sheet => {
                  if (sheet.cssText && !sheet.cssRules) {
                    // IE8
                    return !sheet.cssText.match(/meteor-css-not-found-error/);
                  }

                  return !Array.prototype.find.call(sheet.cssRules, rule => rule.selectorText === '.meteor-css-not-found-error');
                });
              }

            };
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/webapp/webapp_client.js");

  /* Exports */
  Package._define("webapp", _exports2, {
    WebApp: WebApp
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var Base64;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "base64": { "base64.js": function module(_require, _exports, _module) {

            ////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                        //
            // packages/base64/base64.js                                                              //
            //                                                                                        //
            ////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              Base64: () => Base64
            });
            // Base 64 encoding
            const BASE_64_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
            const BASE_64_VALS = Object.create(null);

            const getChar = val => BASE_64_CHARS.charAt(val);

            const getVal = ch => ch === '=' ? -1 : BASE_64_VALS[ch];

            for (let i = 0; i < BASE_64_CHARS.length; i++) {
              BASE_64_VALS[getChar(i)] = i;
            }

            ;

            const encode = array => {
              if (typeof array === "string") {
                const str = array;
                array = newBinary(str.length);

                for (let i = 0; i < str.length; i++) {
                  const ch = str.charCodeAt(i);

                  if (ch > 0xFF) {
                    throw new Error("Not ascii. Base64.encode can only take ascii strings.");
                  }

                  array[i] = ch;
                }
              }

              const answer = [];
              let a = null;
              let b = null;
              let c = null;
              let d = null;

              for (let i = 0; i < array.length; i++) {
                switch (i % 3) {
                  case 0:
                    a = array[i] >> 2 & 0x3F;
                    b = (array[i] & 0x03) << 4;
                    break;

                  case 1:
                    b = b | array[i] >> 4 & 0xF;
                    c = (array[i] & 0xF) << 2;
                    break;

                  case 2:
                    c = c | array[i] >> 6 & 0x03;
                    d = array[i] & 0x3F;
                    answer.push(getChar(a));
                    answer.push(getChar(b));
                    answer.push(getChar(c));
                    answer.push(getChar(d));
                    a = null;
                    b = null;
                    c = null;
                    d = null;
                    break;
                }
              }

              if (a != null) {
                answer.push(getChar(a));
                answer.push(getChar(b));

                if (c == null) {
                  answer.push('=');
                } else {
                  answer.push(getChar(c));
                }

                if (d == null) {
                  answer.push('=');
                }
              }

              return answer.join("");
            }; // XXX This is a weird place for this to live, but it's used both by
            // this package and 'ejson', and we can't put it in 'ejson' without
            // introducing a circular dependency. It should probably be in its own
            // package or as a helper in a package that both 'base64' and 'ejson'
            // use.


            const newBinary = len => {
              if (typeof Uint8Array === 'undefined' || typeof ArrayBuffer === 'undefined') {
                const ret = [];

                for (let i = 0; i < len; i++) {
                  ret.push(0);
                }

                ret.$Uint8ArrayPolyfill = true;
                return ret;
              }

              return new Uint8Array(new ArrayBuffer(len));
            };

            const decode = str => {
              let len = Math.floor(str.length * 3 / 4);

              if (str.charAt(str.length - 1) == '=') {
                len--;

                if (str.charAt(str.length - 2) == '=') {
                  len--;
                }
              }

              const arr = newBinary(len);
              let one = null;
              let two = null;
              let three = null;
              let j = 0;

              for (let i = 0; i < str.length; i++) {
                const c = str.charAt(i);
                const v = getVal(c);

                switch (i % 4) {
                  case 0:
                    if (v < 0) {
                      throw new Error('invalid base64 string');
                    }

                    one = v << 2;
                    break;

                  case 1:
                    if (v < 0) {
                      throw new Error('invalid base64 string');
                    }

                    one = one | v >> 4;
                    arr[j++] = one;
                    two = (v & 0x0F) << 4;
                    break;

                  case 2:
                    if (v >= 0) {
                      two = two | v >> 2;
                      arr[j++] = two;
                      three = (v & 0x03) << 6;
                    }

                    break;

                  case 3:
                    if (v >= 0) {
                      arr[j++] = three | v;
                    }

                    break;
                }
              }

              return arr;
            };

            const Base64 = {
              encode,
              decode,
              newBinary
            };
            ////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/base64/base64.js");

  /* Exports */
  Package._define("base64", _exports2, {
    Base64: Base64
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Base64 = Package.base64.Base64;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var EJSON;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "ejson": { "ejson.js": function module(_require, _exports, _module) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                             //
            // packages/ejson/ejson.js                                                                                     //
            //                                                                                                             //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              EJSON: () => EJSON
            });
            let isFunction, isObject, keysOf, lengthOf, hasOwn, convertMapToObject, isArguments, isInfOrNaN, handleError;
            _module.link("./utils", {
              isFunction(v) {
                isFunction = v;
              },

              isObject(v) {
                isObject = v;
              },

              keysOf(v) {
                keysOf = v;
              },

              lengthOf(v) {
                lengthOf = v;
              },

              hasOwn(v) {
                hasOwn = v;
              },

              convertMapToObject(v) {
                convertMapToObject = v;
              },

              isArguments(v) {
                isArguments = v;
              },

              isInfOrNaN(v) {
                isInfOrNaN = v;
              },

              handleError(v) {
                handleError = v;
              }

            }, 0);

            /**
             * @namespace
             * @summary Namespace for EJSON functions
             */
            const EJSON = {}; // Custom type interface definition

            /**
             * @class CustomType
             * @instanceName customType
             * @memberOf EJSON
             * @summary The interface that a class must satisfy to be able to become an
             * EJSON custom type via EJSON.addType.
             */

            /**
             * @function typeName
             * @memberOf EJSON.CustomType
             * @summary Return the tag used to identify this type.  This must match the
             *          tag used to register this type with
             *          [`EJSON.addType`](#ejson_add_type).
             * @locus Anywhere
             * @instance
             */

            /**
             * @function toJSONValue
             * @memberOf EJSON.CustomType
             * @summary Serialize this instance into a JSON-compatible value.
             * @locus Anywhere
             * @instance
             */

            /**
             * @function clone
             * @memberOf EJSON.CustomType
             * @summary Return a value `r` such that `this.equals(r)` is true, and
             *          modifications to `r` do not affect `this` and vice versa.
             * @locus Anywhere
             * @instance
             */

            /**
             * @function equals
             * @memberOf EJSON.CustomType
             * @summary Return `true` if `other` has a value equal to `this`; `false`
             *          otherwise.
             * @locus Anywhere
             * @param {Object} other Another object to compare this to.
             * @instance
             */

            const customTypes = new Map(); // Add a custom type, using a method of your choice to get to and
            // from a basic JSON-able representation.  The factory argument
            // is a function of JSON-able --> your object
            // The type you add must have:
            // - A toJSONValue() method, so that Meteor can serialize it
            // - a typeName() method, to show how to look it up in our type table.
            // It is okay if these methods are monkey-patched on.
            // EJSON.clone will use toJSONValue and the given factory to produce
            // a clone, but you may specify a method clone() that will be
            // used instead.
            // Similarly, EJSON.equals will use toJSONValue to make comparisons,
            // but you may provide a method equals() instead.

            /**
             * @summary Add a custom datatype to EJSON.
             * @locus Anywhere
             * @param {String} name A tag for your custom type; must be unique among
             *                      custom data types defined in your project, and must
             *                      match the result of your type's `typeName` method.
             * @param {Function} factory A function that deserializes a JSON-compatible
             *                           value into an instance of your type.  This should
             *                           match the serialization performed by your
             *                           type's `toJSONValue` method.
             */

            EJSON.addType = (name, factory) => {
              if (customTypes.has(name)) {
                throw new Error("Type ".concat(name, " already present"));
              }

              customTypes.set(name, factory);
            };

            const builtinConverters = [{
              // Date
              matchJSONValue(obj) {
                return hasOwn(obj, '$date') && lengthOf(obj) === 1;
              },

              matchObject(obj) {
                return obj instanceof Date;
              },

              toJSONValue(obj) {
                return {
                  $date: obj.getTime()
                };
              },

              fromJSONValue(obj) {
                return new Date(obj.$date);
              }

            }, {
              // RegExp
              matchJSONValue(obj) {
                return hasOwn(obj, '$regexp') && hasOwn(obj, '$flags') && lengthOf(obj) === 2;
              },

              matchObject(obj) {
                return obj instanceof RegExp;
              },

              toJSONValue(regexp) {
                return {
                  $regexp: regexp.source,
                  $flags: regexp.flags
                };
              },

              fromJSONValue(obj) {
                // Replaces duplicate / invalid flags.
                return new RegExp(obj.$regexp, obj.$flags // Cut off flags at 50 chars to avoid abusing RegExp for DOS.
                .slice(0, 50).replace(/[^gimuy]/g, '').replace(/(.)(?=.*\1)/g, ''));
              }

            }, {
              // NaN, Inf, -Inf. (These are the only objects with typeof !== 'object'
              // which we match.)
              matchJSONValue(obj) {
                return hasOwn(obj, '$InfNaN') && lengthOf(obj) === 1;
              },

              matchObject: isInfOrNaN,

              toJSONValue(obj) {
                let sign;

                if (Number.isNaN(obj)) {
                  sign = 0;
                } else if (obj === Infinity) {
                  sign = 1;
                } else {
                  sign = -1;
                }

                return {
                  $InfNaN: sign
                };
              },

              fromJSONValue(obj) {
                return obj.$InfNaN / 0;
              }

            }, {
              // Binary
              matchJSONValue(obj) {
                return hasOwn(obj, '$binary') && lengthOf(obj) === 1;
              },

              matchObject(obj) {
                return typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array || obj && hasOwn(obj, '$Uint8ArrayPolyfill');
              },

              toJSONValue(obj) {
                return {
                  $binary: Base64.encode(obj)
                };
              },

              fromJSONValue(obj) {
                return Base64.decode(obj.$binary);
              }

            }, {
              // Escaping one level
              matchJSONValue(obj) {
                return hasOwn(obj, '$escape') && lengthOf(obj) === 1;
              },

              matchObject(obj) {
                let match = false;

                if (obj) {
                  const keyCount = lengthOf(obj);

                  if (keyCount === 1 || keyCount === 2) {
                    match = builtinConverters.some(converter => converter.matchJSONValue(obj));
                  }
                }

                return match;
              },

              toJSONValue(obj) {
                const newObj = {};
                keysOf(obj).forEach(key => {
                  newObj[key] = EJSON.toJSONValue(obj[key]);
                });
                return {
                  $escape: newObj
                };
              },

              fromJSONValue(obj) {
                const newObj = {};
                keysOf(obj.$escape).forEach(key => {
                  newObj[key] = EJSON.fromJSONValue(obj.$escape[key]);
                });
                return newObj;
              }

            }, {
              // Custom
              matchJSONValue(obj) {
                return hasOwn(obj, '$type') && hasOwn(obj, '$value') && lengthOf(obj) === 2;
              },

              matchObject(obj) {
                return EJSON._isCustomType(obj);
              },

              toJSONValue(obj) {
                const jsonValue = Meteor._noYieldsAllowed(() => obj.toJSONValue());

                return {
                  $type: obj.typeName(),
                  $value: jsonValue
                };
              },

              fromJSONValue(obj) {
                const typeName = obj.$type;

                if (!customTypes.has(typeName)) {
                  throw new Error("Custom EJSON type ".concat(typeName, " is not defined"));
                }

                const converter = customTypes.get(typeName);
                return Meteor._noYieldsAllowed(() => converter(obj.$value));
              }

            }];

            EJSON._isCustomType = obj => obj && isFunction(obj.toJSONValue) && isFunction(obj.typeName) && customTypes.has(obj.typeName());

            EJSON._getTypes = function () {
              let isOriginal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
              return isOriginal ? customTypes : convertMapToObject(customTypes);
            };

            EJSON._getConverters = () => builtinConverters; // Either return the JSON-compatible version of the argument, or undefined (if
            // the item isn't itself replaceable, but maybe some fields in it are)


            const toJSONValueHelper = item => {
              for (let i = 0; i < builtinConverters.length; i++) {
                const converter = builtinConverters[i];

                if (converter.matchObject(item)) {
                  return converter.toJSONValue(item);
                }
              }

              return undefined;
            }; // for both arrays and objects, in-place modification.


            const adjustTypesToJSONValue = obj => {
              // Is it an atom that we need to adjust?
              if (obj === null) {
                return null;
              }

              const maybeChanged = toJSONValueHelper(obj);

              if (maybeChanged !== undefined) {
                return maybeChanged;
              } // Other atoms are unchanged.


              if (!isObject(obj)) {
                return obj;
              } // Iterate over array or object structure.


              keysOf(obj).forEach(key => {
                const value = obj[key];

                if (!isObject(value) && value !== undefined && !isInfOrNaN(value)) {
                  return; // continue
                }

                const changed = toJSONValueHelper(value);

                if (changed) {
                  obj[key] = changed;
                  return; // on to the next key
                } // if we get here, value is an object but not adjustable
                // at this level.  recurse.


                adjustTypesToJSONValue(value);
              });
              return obj;
            };

            EJSON._adjustTypesToJSONValue = adjustTypesToJSONValue;
            /**
             * @summary Serialize an EJSON-compatible value into its plain JSON
             *          representation.
             * @locus Anywhere
             * @param {EJSON} val A value to serialize to plain JSON.
             */

            EJSON.toJSONValue = item => {
              const changed = toJSONValueHelper(item);

              if (changed !== undefined) {
                return changed;
              }

              let newItem = item;

              if (isObject(item)) {
                newItem = EJSON.clone(item);
                adjustTypesToJSONValue(newItem);
              }

              return newItem;
            }; // Either return the argument changed to have the non-json
            // rep of itself (the Object version) or the argument itself.
            // DOES NOT RECURSE.  For actually getting the fully-changed value, use
            // EJSON.fromJSONValue


            const fromJSONValueHelper = value => {
              if (isObject(value) && value !== null) {
                const keys = keysOf(value);

                if (keys.length <= 2 && keys.every(k => typeof k === 'string' && k.substr(0, 1) === '$')) {
                  for (let i = 0; i < builtinConverters.length; i++) {
                    const converter = builtinConverters[i];

                    if (converter.matchJSONValue(value)) {
                      return converter.fromJSONValue(value);
                    }
                  }
                }
              }

              return value;
            }; // for both arrays and objects. Tries its best to just
            // use the object you hand it, but may return something
            // different if the object you hand it itself needs changing.


            const adjustTypesFromJSONValue = obj => {
              if (obj === null) {
                return null;
              }

              const maybeChanged = fromJSONValueHelper(obj);

              if (maybeChanged !== obj) {
                return maybeChanged;
              } // Other atoms are unchanged.


              if (!isObject(obj)) {
                return obj;
              }

              keysOf(obj).forEach(key => {
                const value = obj[key];

                if (isObject(value)) {
                  const changed = fromJSONValueHelper(value);

                  if (value !== changed) {
                    obj[key] = changed;
                    return;
                  } // if we get here, value is an object but not adjustable
                  // at this level.  recurse.


                  adjustTypesFromJSONValue(value);
                }
              });
              return obj;
            };

            EJSON._adjustTypesFromJSONValue = adjustTypesFromJSONValue;
            /**
             * @summary Deserialize an EJSON value from its plain JSON representation.
             * @locus Anywhere
             * @param {JSONCompatible} val A value to deserialize into EJSON.
             */

            EJSON.fromJSONValue = item => {
              let changed = fromJSONValueHelper(item);

              if (changed === item && isObject(item)) {
                changed = EJSON.clone(item);
                adjustTypesFromJSONValue(changed);
              }

              return changed;
            };
            /**
             * @summary Serialize a value to a string. For EJSON values, the serialization
             *          fully represents the value. For non-EJSON values, serializes the
             *          same way as `JSON.stringify`.
             * @locus Anywhere
             * @param {EJSON} val A value to stringify.
             * @param {Object} [options]
             * @param {Boolean | Integer | String} options.indent Indents objects and
             * arrays for easy readability.  When `true`, indents by 2 spaces; when an
             * integer, indents by that number of spaces; and when a string, uses the
             * string as the indentation pattern.
             * @param {Boolean} options.canonical When `true`, stringifies keys in an
             *                                    object in sorted order.
             */

            EJSON.stringify = handleError((item, options) => {
              let serialized;
              const json = EJSON.toJSONValue(item);

              if (options && (options.canonical || options.indent)) {
                let canonicalStringify;
                _module.link("./stringify", {
                  default(v) {
                    canonicalStringify = v;
                  }

                }, 1);
                serialized = canonicalStringify(json, options);
              } else {
                serialized = JSON.stringify(json);
              }

              return serialized;
            });
            /**
             * @summary Parse a string into an EJSON value. Throws an error if the string
             *          is not valid EJSON.
             * @locus Anywhere
             * @param {String} str A string to parse into an EJSON value.
             */

            EJSON.parse = item => {
              if (typeof item !== 'string') {
                throw new Error('EJSON.parse argument should be a string');
              }

              return EJSON.fromJSONValue(JSON.parse(item));
            };
            /**
             * @summary Returns true if `x` is a buffer of binary data, as returned from
             *          [`EJSON.newBinary`](#ejson_new_binary).
             * @param {Object} x The variable to check.
             * @locus Anywhere
             */

            EJSON.isBinary = obj => {
              return !!(typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array || obj && obj.$Uint8ArrayPolyfill);
            };
            /**
             * @summary Return true if `a` and `b` are equal to each other.  Return false
             *          otherwise.  Uses the `equals` method on `a` if present, otherwise
             *          performs a deep comparison.
             * @locus Anywhere
             * @param {EJSON} a
             * @param {EJSON} b
             * @param {Object} [options]
             * @param {Boolean} options.keyOrderSensitive Compare in key sensitive order,
             * if supported by the JavaScript implementation.  For example, `{a: 1, b: 2}`
             * is equal to `{b: 2, a: 1}` only when `keyOrderSensitive` is `false`.  The
             * default is `false`.
             */

            EJSON.equals = (a, b, options) => {
              let i;
              const keyOrderSensitive = !!(options && options.keyOrderSensitive);

              if (a === b) {
                return true;
              } // This differs from the IEEE spec for NaN equality, b/c we don't want
              // anything ever with a NaN to be poisoned from becoming equal to anything.


              if (Number.isNaN(a) && Number.isNaN(b)) {
                return true;
              } // if either one is falsy, they'd have to be === to be equal


              if (!a || !b) {
                return false;
              }

              if (!(isObject(a) && isObject(b))) {
                return false;
              }

              if (a instanceof Date && b instanceof Date) {
                return a.valueOf() === b.valueOf();
              }

              if (EJSON.isBinary(a) && EJSON.isBinary(b)) {
                if (a.length !== b.length) {
                  return false;
                }

                for (i = 0; i < a.length; i++) {
                  if (a[i] !== b[i]) {
                    return false;
                  }
                }

                return true;
              }

              if (isFunction(a.equals)) {
                return a.equals(b, options);
              }

              if (isFunction(b.equals)) {
                return b.equals(a, options);
              }

              if (a instanceof Array) {
                if (!(b instanceof Array)) {
                  return false;
                }

                if (a.length !== b.length) {
                  return false;
                }

                for (i = 0; i < a.length; i++) {
                  if (!EJSON.equals(a[i], b[i], options)) {
                    return false;
                  }
                }

                return true;
              } // fallback for custom types that don't implement their own equals


              switch (EJSON._isCustomType(a) + EJSON._isCustomType(b)) {
                case 1:
                  return false;

                case 2:
                  return EJSON.equals(EJSON.toJSONValue(a), EJSON.toJSONValue(b));

                default: // Do nothing

              } // fall back to structural equality of objects


              let ret;
              const aKeys = keysOf(a);
              const bKeys = keysOf(b);

              if (keyOrderSensitive) {
                i = 0;
                ret = aKeys.every(key => {
                  if (i >= bKeys.length) {
                    return false;
                  }

                  if (key !== bKeys[i]) {
                    return false;
                  }

                  if (!EJSON.equals(a[key], b[bKeys[i]], options)) {
                    return false;
                  }

                  i++;
                  return true;
                });
              } else {
                i = 0;
                ret = aKeys.every(key => {
                  if (!hasOwn(b, key)) {
                    return false;
                  }

                  if (!EJSON.equals(a[key], b[key], options)) {
                    return false;
                  }

                  i++;
                  return true;
                });
              }

              return ret && i === bKeys.length;
            };
            /**
             * @summary Return a deep copy of `val`.
             * @locus Anywhere
             * @param {EJSON} val A value to copy.
             */

            EJSON.clone = v => {
              let ret;

              if (!isObject(v)) {
                return v;
              }

              if (v === null) {
                return null; // null has typeof "object"
              }

              if (v instanceof Date) {
                return new Date(v.getTime());
              } // RegExps are not really EJSON elements (eg we don't define a serialization
              // for them), but they're immutable anyway, so we can support them in clone.


              if (v instanceof RegExp) {
                return v;
              }

              if (EJSON.isBinary(v)) {
                ret = EJSON.newBinary(v.length);

                for (let i = 0; i < v.length; i++) {
                  ret[i] = v[i];
                }

                return ret;
              }

              if (Array.isArray(v)) {
                return v.map(EJSON.clone);
              }

              if (isArguments(v)) {
                return Array.from(v).map(EJSON.clone);
              } // handle general user-defined typed Objects if they have a clone method


              if (isFunction(v.clone)) {
                return v.clone();
              } // handle other custom types


              if (EJSON._isCustomType(v)) {
                return EJSON.fromJSONValue(EJSON.clone(EJSON.toJSONValue(v)), true);
              } // handle other objects


              ret = {};
              keysOf(v).forEach(key => {
                ret[key] = EJSON.clone(v[key]);
              });
              return ret;
            };
            /**
             * @summary Allocate a new buffer of binary data that EJSON can serialize.
             * @locus Anywhere
             * @param {Number} size The number of bytes of binary data to allocate.
             */
            // EJSON.newBinary is the public documented API for this functionality,
            // but the implementation is in the 'base64' package to avoid
            // introducing a circular dependency. (If the implementation were here,
            // then 'base64' would have to use EJSON.newBinary, and 'ejson' would
            // also have to use 'base64'.)


            EJSON.newBinary = Base64.newBinary;
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "stringify.js": function module(_require3, _exports3, _module2) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                             //
            // packages/ejson/stringify.js                                                                                 //
            //                                                                                                             //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // Based on json2.js from https://github.com/douglascrockford/JSON-js
            //
            //    json2.js
            //    2012-10-08
            //
            //    Public Domain.
            //
            //    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.
            function quote(string) {
              return JSON.stringify(string);
            }

            const str = (key, holder, singleIndent, outerIndent, canonical) => {
              const value = holder[key]; // What happens next depends on the value's type.

              switch (typeof value) {
                case 'string':
                  return quote(value);

                case 'number':
                  // JSON numbers must be finite. Encode non-finite numbers as null.
                  return isFinite(value) ? String(value) : 'null';

                case 'boolean':
                  return String(value);
                // If the type is 'object', we might be dealing with an object or an array or
                // null.

                case 'object':
                  {
                    // Due to a specification blunder in ECMAScript, typeof null is 'object',
                    // so watch out for that case.
                    if (!value) {
                      return 'null';
                    } // Make an array to hold the partial results of stringifying this object
                    // value.


                    const innerIndent = outerIndent + singleIndent;
                    const partial = [];
                    let v; // Is the value an array?

                    if (Array.isArray(value) || {}.hasOwnProperty.call(value, 'callee')) {
                      // The value is an array. Stringify every element. Use null as a
                      // placeholder for non-JSON values.
                      const length = value.length;

                      for (let i = 0; i < length; i += 1) {
                        partial[i] = str(i, value, singleIndent, innerIndent, canonical) || 'null';
                      } // Join all of the elements together, separated with commas, and wrap
                      // them in brackets.


                      if (partial.length === 0) {
                        v = '[]';
                      } else if (innerIndent) {
                        v = '[\n' + innerIndent + partial.join(',\n' + innerIndent) + '\n' + outerIndent + ']';
                      } else {
                        v = '[' + partial.join(',') + ']';
                      }

                      return v;
                    } // Iterate through all of the keys in the object.


                    let keys = Object.keys(value);

                    if (canonical) {
                      keys = keys.sort();
                    }

                    keys.forEach(k => {
                      v = str(k, value, singleIndent, innerIndent, canonical);

                      if (v) {
                        partial.push(quote(k) + (innerIndent ? ': ' : ':') + v);
                      }
                    }); // Join all of the member texts together, separated with commas,
                    // and wrap them in braces.

                    if (partial.length === 0) {
                      v = '{}';
                    } else if (innerIndent) {
                      v = '{\n' + innerIndent + partial.join(',\n' + innerIndent) + '\n' + outerIndent + '}';
                    } else {
                      v = '{' + partial.join(',') + '}';
                    }

                    return v;
                  }

                default: // Do nothing

              }
            }; // If the JSON object does not yet have a stringify method, give it one.


            const canonicalStringify = (value, options) => {
              // Make a fake root object containing our value under the key of ''.
              // Return the result of stringifying the value.
              const allOptions = Object.assign({
                indent: '',
                canonical: false
              }, options);

              if (allOptions.indent === true) {
                allOptions.indent = '  ';
              } else if (typeof allOptions.indent === 'number') {
                let newIndent = '';

                for (let i = 0; i < allOptions.indent; i++) {
                  newIndent += ' ';
                }

                allOptions.indent = newIndent;
              }

              return str('', {
                '': value
              }, allOptions.indent, '', allOptions.canonical);
            };

            _module2.exportDefault(canonicalStringify);
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "utils.js": function module(_require4, _exports4, _module3) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                             //
            // packages/ejson/utils.js                                                                                     //
            //                                                                                                             //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module3.export({
              isFunction: () => isFunction,
              isObject: () => isObject,
              keysOf: () => keysOf,
              lengthOf: () => lengthOf,
              hasOwn: () => hasOwn,
              convertMapToObject: () => convertMapToObject,
              isArguments: () => isArguments,
              isInfOrNaN: () => isInfOrNaN,
              checkError: () => checkError,
              handleError: () => handleError
            });

            const isFunction = fn => typeof fn === 'function';

            const isObject = fn => typeof fn === 'object';

            const keysOf = obj => Object.keys(obj);

            const lengthOf = obj => Object.keys(obj).length;

            const hasOwn = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);

            const convertMapToObject = map => Array.from(map).reduce((acc, _ref) => {
              let [key, value] = _ref;
              // reassign to not create new object
              acc[key] = value;
              return acc;
            }, {});

            const isArguments = obj => obj != null && hasOwn(obj, 'callee');

            const isInfOrNaN = obj => Number.isNaN(obj) || obj === Infinity || obj === -Infinity;

            const checkError = {
              maxStack: msgError => new RegExp('Maximum call stack size exceeded', 'g').test(msgError)
            };

            const handleError = fn => function () {
              try {
                return fn.apply(this, arguments);
              } catch (error) {
                const isMaxStack = checkError.maxStack(error.message);

                if (isMaxStack) {
                  throw new Error('Converting circular structure to JSON');
                }

                throw error;
              }
            };
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/ejson/ejson.js");

  /* Exports */
  Package._define("ejson", _exports2, {
    EJSON: EJSON
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var EJSON = Package.ejson.EJSON;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var DiffSequence;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "diff-sequence": { "diff.js": function module(_require, _exports, _module) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                 //
            // packages/diff-sequence/diff.js                                                                  //
            //                                                                                                 //
            /////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              DiffSequence: () => DiffSequence
            });
            const DiffSequence = {};
            const hasOwn = Object.prototype.hasOwnProperty;

            function isObjEmpty(obj) {
              for (let key in Object(obj)) {
                if (hasOwn.call(obj, key)) {
                  return false;
                }
              }

              return true;
            } // ordered: bool.
            // old_results and new_results: collections of documents.
            //    if ordered, they are arrays.
            //    if unordered, they are IdMaps


            DiffSequence.diffQueryChanges = function (ordered, oldResults, newResults, observer, options) {
              if (ordered) DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer, options);else DiffSequence.diffQueryUnorderedChanges(oldResults, newResults, observer, options);
            };

            DiffSequence.diffQueryUnorderedChanges = function (oldResults, newResults, observer, options) {
              options = options || {};
              var projectionFn = options.projectionFn || EJSON.clone;

              if (observer.movedBefore) {
                throw new Error("_diffQueryUnordered called with a movedBefore observer!");
              }

              newResults.forEach(function (newDoc, id) {
                var oldDoc = oldResults.get(id);

                if (oldDoc) {
                  if (observer.changed && !EJSON.equals(oldDoc, newDoc)) {
                    var projectedNew = projectionFn(newDoc);
                    var projectedOld = projectionFn(oldDoc);
                    var changedFields = DiffSequence.makeChangedFields(projectedNew, projectedOld);

                    if (!isObjEmpty(changedFields)) {
                      observer.changed(id, changedFields);
                    }
                  }
                } else if (observer.added) {
                  var fields = projectionFn(newDoc);
                  delete fields._id;
                  observer.added(newDoc._id, fields);
                }
              });

              if (observer.removed) {
                oldResults.forEach(function (oldDoc, id) {
                  if (!newResults.has(id)) observer.removed(id);
                });
              }
            };

            DiffSequence.diffQueryOrderedChanges = function (old_results, new_results, observer, options) {
              options = options || {};
              var projectionFn = options.projectionFn || EJSON.clone;
              var new_presence_of_id = {};
              new_results.forEach(function (doc) {
                if (new_presence_of_id[doc._id]) Meteor._debug("Duplicate _id in new_results");
                new_presence_of_id[doc._id] = true;
              });
              var old_index_of_id = {};
              old_results.forEach(function (doc, i) {
                if (doc._id in old_index_of_id) Meteor._debug("Duplicate _id in old_results");
                old_index_of_id[doc._id] = i;
              }); // ALGORITHM:
              //
              // To determine which docs should be considered "moved" (and which
              // merely change position because of other docs moving) we run
              // a "longest common subsequence" (LCS) algorithm.  The LCS of the
              // old doc IDs and the new doc IDs gives the docs that should NOT be
              // considered moved.
              // To actually call the appropriate callbacks to get from the old state to the
              // new state:
              // First, we call removed() on all the items that only appear in the old
              // state.
              // Then, once we have the items that should not move, we walk through the new
              // results array group-by-group, where a "group" is a set of items that have
              // moved, anchored on the end by an item that should not move.  One by one, we
              // move each of those elements into place "before" the anchoring end-of-group
              // item, and fire changed events on them if necessary.  Then we fire a changed
              // event on the anchor, and move on to the next group.  There is always at
              // least one group; the last group is anchored by a virtual "null" id at the
              // end.
              // Asymptotically: O(N k) where k is number of ops, or potentially
              // O(N log N) if inner loop of LCS were made to be binary search.
              //////// LCS (longest common sequence, with respect to _id)
              // (see Wikipedia article on Longest Increasing Subsequence,
              // where the LIS is taken of the sequence of old indices of the
              // docs in new_results)
              //
              // unmoved: the output of the algorithm; members of the LCS,
              // in the form of indices into new_results

              var unmoved = []; // max_seq_len: length of LCS found so far

              var max_seq_len = 0; // seq_ends[i]: the index into new_results of the last doc in a
              // common subsequence of length of i+1 <= max_seq_len

              var N = new_results.length;
              var seq_ends = new Array(N); // ptrs:  the common subsequence ending with new_results[n] extends
              // a common subsequence ending with new_results[ptr[n]], unless
              // ptr[n] is -1.

              var ptrs = new Array(N); // virtual sequence of old indices of new results

              var old_idx_seq = function (i_new) {
                return old_index_of_id[new_results[i_new]._id];
              }; // for each item in new_results, use it to extend a common subsequence
              // of length j <= max_seq_len


              for (var i = 0; i < N; i++) {
                if (old_index_of_id[new_results[i]._id] !== undefined) {
                  var j = max_seq_len; // this inner loop would traditionally be a binary search,
                  // but scanning backwards we will likely find a subseq to extend
                  // pretty soon, bounded for example by the total number of ops.
                  // If this were to be changed to a binary search, we'd still want
                  // to scan backwards a bit as an optimization.

                  while (j > 0) {
                    if (old_idx_seq(seq_ends[j - 1]) < old_idx_seq(i)) break;
                    j--;
                  }

                  ptrs[i] = j === 0 ? -1 : seq_ends[j - 1];
                  seq_ends[j] = i;
                  if (j + 1 > max_seq_len) max_seq_len = j + 1;
                }
              } // pull out the LCS/LIS into unmoved


              var idx = max_seq_len === 0 ? -1 : seq_ends[max_seq_len - 1];

              while (idx >= 0) {
                unmoved.push(idx);
                idx = ptrs[idx];
              } // the unmoved item list is built backwards, so fix that


              unmoved.reverse(); // the last group is always anchored by the end of the result list, which is
              // an id of "null"

              unmoved.push(new_results.length);
              old_results.forEach(function (doc) {
                if (!new_presence_of_id[doc._id]) observer.removed && observer.removed(doc._id);
              }); // for each group of things in the new_results that is anchored by an unmoved
              // element, iterate through the things before it.

              var startOfGroup = 0;
              unmoved.forEach(function (endOfGroup) {
                var groupId = new_results[endOfGroup] ? new_results[endOfGroup]._id : null;
                var oldDoc, newDoc, fields, projectedNew, projectedOld;

                for (var i = startOfGroup; i < endOfGroup; i++) {
                  newDoc = new_results[i];

                  if (!hasOwn.call(old_index_of_id, newDoc._id)) {
                    fields = projectionFn(newDoc);
                    delete fields._id;
                    observer.addedBefore && observer.addedBefore(newDoc._id, fields, groupId);
                    observer.added && observer.added(newDoc._id, fields);
                  } else {
                    // moved
                    oldDoc = old_results[old_index_of_id[newDoc._id]];
                    projectedNew = projectionFn(newDoc);
                    projectedOld = projectionFn(oldDoc);
                    fields = DiffSequence.makeChangedFields(projectedNew, projectedOld);

                    if (!isObjEmpty(fields)) {
                      observer.changed && observer.changed(newDoc._id, fields);
                    }

                    observer.movedBefore && observer.movedBefore(newDoc._id, groupId);
                  }
                }

                if (groupId) {
                  newDoc = new_results[endOfGroup];
                  oldDoc = old_results[old_index_of_id[newDoc._id]];
                  projectedNew = projectionFn(newDoc);
                  projectedOld = projectionFn(oldDoc);
                  fields = DiffSequence.makeChangedFields(projectedNew, projectedOld);

                  if (!isObjEmpty(fields)) {
                    observer.changed && observer.changed(newDoc._id, fields);
                  }
                }

                startOfGroup = endOfGroup + 1;
              });
            }; // General helper for diff-ing two objects.
            // callbacks is an object like so:
            // { leftOnly: function (key, leftValue) {...},
            //   rightOnly: function (key, rightValue) {...},
            //   both: function (key, leftValue, rightValue) {...},
            // }


            DiffSequence.diffObjects = function (left, right, callbacks) {
              Object.keys(left).forEach(key => {
                const leftValue = left[key];

                if (hasOwn.call(right, key)) {
                  callbacks.both && callbacks.both(key, leftValue, right[key]);
                } else {
                  callbacks.leftOnly && callbacks.leftOnly(key, leftValue);
                }
              });

              if (callbacks.rightOnly) {
                Object.keys(right).forEach(key => {
                  const rightValue = right[key];

                  if (!hasOwn.call(left, key)) {
                    callbacks.rightOnly(key, rightValue);
                  }
                });
              }
            };

            DiffSequence.diffMaps = function (left, right, callbacks) {
              left.forEach(function (leftValue, key) {
                if (right.has(key)) {
                  callbacks.both && callbacks.both(key, leftValue, right.get(key));
                } else {
                  callbacks.leftOnly && callbacks.leftOnly(key, leftValue);
                }
              });

              if (callbacks.rightOnly) {
                right.forEach(function (rightValue, key) {
                  if (!left.has(key)) {
                    callbacks.rightOnly(key, rightValue);
                  }
                });
              }
            };

            DiffSequence.makeChangedFields = function (newDoc, oldDoc) {
              var fields = {};
              DiffSequence.diffObjects(oldDoc, newDoc, {
                leftOnly: function (key, value) {
                  fields[key] = undefined;
                },
                rightOnly: function (key, value) {
                  fields[key] = value;
                },
                both: function (key, leftValue, rightValue) {
                  if (!EJSON.equals(leftValue, rightValue)) fields[key] = rightValue;
                }
              });
              return fields;
            };

            DiffSequence.applyChanges = function (doc, changeFields) {
              Object.keys(changeFields).forEach(key => {
                const value = changeFields[key];

                if (typeof value === "undefined") {
                  delete doc[key];
                } else {
                  doc[key] = value;
                }
              });
            };
            /////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/diff-sequence/diff.js");

  /* Exports */
  Package._define("diff-sequence", _exports2, {
    DiffSequence: DiffSequence
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;

  /* Package-scope variables */
  var GeoJSON;

  var _require3 = meteorInstall({ "node_modules": { "meteor": { "geojson-utils": { "main.js": function _module(_require, _exports) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                         //
            // packages/geojson-utils/main.js                                                                          //
            //                                                                                                         //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _exports.GeoJSON = _require("./geojson-utils.js");

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "geojson-utils.js": function module(_require2, _exports2, _module2) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                         //
            // packages/geojson-utils/geojson-utils.js                                                                 //
            //                                                                                                         //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            (function () {
              var gju = {};

              // Export the geojson object for **CommonJS**
              if (typeof _module2 !== 'undefined' && _module2.exports) {
                _module2.exports = gju;
              }

              // adapted from http://www.kevlindev.com/gui/math/intersection/Intersection.js
              gju.lineStringsIntersect = function (l1, l2) {
                var intersects = [];
                for (var i = 0; i <= l1.coordinates.length - 2; ++i) {
                  for (var j = 0; j <= l2.coordinates.length - 2; ++j) {
                    var a1 = {
                      x: l1.coordinates[i][1],
                      y: l1.coordinates[i][0]
                    },
                        a2 = {
                      x: l1.coordinates[i + 1][1],
                      y: l1.coordinates[i + 1][0]
                    },
                        b1 = {
                      x: l2.coordinates[j][1],
                      y: l2.coordinates[j][0]
                    },
                        b2 = {
                      x: l2.coordinates[j + 1][1],
                      y: l2.coordinates[j + 1][0]
                    },
                        ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x),
                        ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x),
                        u_b = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);
                    if (u_b != 0) {
                      var ua = ua_t / u_b,
                          ub = ub_t / u_b;
                      if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {
                        intersects.push({
                          'type': 'Point',
                          'coordinates': [a1.x + ua * (a2.x - a1.x), a1.y + ua * (a2.y - a1.y)]
                        });
                      }
                    }
                  }
                }
                if (intersects.length == 0) intersects = false;
                return intersects;
              };

              // Bounding Box

              function boundingBoxAroundPolyCoords(coords) {
                var xAll = [],
                    yAll = [];

                for (var i = 0; i < coords[0].length; i++) {
                  xAll.push(coords[0][i][1]);
                  yAll.push(coords[0][i][0]);
                }

                xAll = xAll.sort(function (a, b) {
                  return a - b;
                });
                yAll = yAll.sort(function (a, b) {
                  return a - b;
                });

                return [[xAll[0], yAll[0]], [xAll[xAll.length - 1], yAll[yAll.length - 1]]];
              }

              gju.pointInBoundingBox = function (point, bounds) {
                return !(point.coordinates[1] < bounds[0][0] || point.coordinates[1] > bounds[1][0] || point.coordinates[0] < bounds[0][1] || point.coordinates[0] > bounds[1][1]);
              };

              // Point in Polygon
              // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html#Listing the Vertices

              function pnpoly(x, y, coords) {
                var vert = [[0, 0]];

                for (var i = 0; i < coords.length; i++) {
                  for (var j = 0; j < coords[i].length; j++) {
                    vert.push(coords[i][j]);
                  }
                  vert.push([0, 0]);
                }

                var inside = false;
                for (var i = 0, j = vert.length - 1; i < vert.length; j = i++) {
                  if (vert[i][0] > y != vert[j][0] > y && x < (vert[j][1] - vert[i][1]) * (y - vert[i][0]) / (vert[j][0] - vert[i][0]) + vert[i][1]) inside = !inside;
                }

                return inside;
              }

              gju.pointInPolygon = function (p, poly) {
                var coords = poly.type == "Polygon" ? [poly.coordinates] : poly.coordinates;

                var insideBox = false;
                for (var i = 0; i < coords.length; i++) {
                  if (gju.pointInBoundingBox(p, boundingBoxAroundPolyCoords(coords[i]))) insideBox = true;
                }
                if (!insideBox) return false;

                var insidePoly = false;
                for (var i = 0; i < coords.length; i++) {
                  if (pnpoly(p.coordinates[1], p.coordinates[0], coords[i])) insidePoly = true;
                }

                return insidePoly;
              };

              gju.numberToRadius = function (number) {
                return number * Math.PI / 180;
              };

              gju.numberToDegree = function (number) {
                return number * 180 / Math.PI;
              };

              // written with help from @tautologe
              gju.drawCircle = function (radiusInMeters, centerPoint, steps) {
                var center = [centerPoint.coordinates[1], centerPoint.coordinates[0]],
                    dist = radiusInMeters / 1000 / 6371,

                // convert meters to radiant
                radCenter = [gju.numberToRadius(center[0]), gju.numberToRadius(center[1])],
                    steps = steps || 15,

                // 15 sided circle
                poly = [[center[0], center[1]]];
                for (var i = 0; i < steps; i++) {
                  var brng = 2 * Math.PI * i / steps;
                  var lat = Math.asin(Math.sin(radCenter[0]) * Math.cos(dist) + Math.cos(radCenter[0]) * Math.sin(dist) * Math.cos(brng));
                  var lng = radCenter[1] + Math.atan2(Math.sin(brng) * Math.sin(dist) * Math.cos(radCenter[0]), Math.cos(dist) - Math.sin(radCenter[0]) * Math.sin(lat));
                  poly[i] = [];
                  poly[i][1] = gju.numberToDegree(lat);
                  poly[i][0] = gju.numberToDegree(lng);
                }
                return {
                  "type": "Polygon",
                  "coordinates": [poly]
                };
              };

              // assumes rectangle starts at lower left point
              gju.rectangleCentroid = function (rectangle) {
                var bbox = rectangle.coordinates[0];
                var xmin = bbox[0][0],
                    ymin = bbox[0][1],
                    xmax = bbox[2][0],
                    ymax = bbox[2][1];
                var xwidth = xmax - xmin;
                var ywidth = ymax - ymin;
                return {
                  'type': 'Point',
                  'coordinates': [xmin + xwidth / 2, ymin + ywidth / 2]
                };
              };

              // from http://www.movable-type.co.uk/scripts/latlong.html
              gju.pointDistance = function (pt1, pt2) {
                var lon1 = pt1.coordinates[0],
                    lat1 = pt1.coordinates[1],
                    lon2 = pt2.coordinates[0],
                    lat2 = pt2.coordinates[1],
                    dLat = gju.numberToRadius(lat2 - lat1),
                    dLon = gju.numberToRadius(lon2 - lon1),
                    a = Math.pow(Math.sin(dLat / 2), 2) + Math.cos(gju.numberToRadius(lat1)) * Math.cos(gju.numberToRadius(lat2)) * Math.pow(Math.sin(dLon / 2), 2),
                    c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
                // Earth radius is 6371 km
                return 6371 * c * 1000; // returns meters
              },

              // checks if geometry lies entirely within a circle
              // works with Point, LineString, Polygon
              gju.geometryWithinRadius = function (geometry, center, radius) {
                if (geometry.type == 'Point') {
                  return gju.pointDistance(geometry, center) <= radius;
                } else if (geometry.type == 'LineString' || geometry.type == 'Polygon') {
                  var point = {};
                  var coordinates;
                  if (geometry.type == 'Polygon') {
                    // it's enough to check the exterior ring of the Polygon
                    coordinates = geometry.coordinates[0];
                  } else {
                    coordinates = geometry.coordinates;
                  }
                  for (var i in coordinates) {
                    point.coordinates = coordinates[i];
                    if (gju.pointDistance(point, center) > radius) {
                      return false;
                    }
                  }
                }
                return true;
              };

              // adapted from http://paulbourke.net/geometry/polyarea/javascript.txt
              gju.area = function (polygon) {
                var area = 0;
                // TODO: polygon holes at coordinates[1]
                var points = polygon.coordinates[0];
                var j = points.length - 1;
                var p1, p2;

                for (var i = 0; i < points.length; j = i++) {
                  var p1 = {
                    x: points[i][1],
                    y: points[i][0]
                  };
                  var p2 = {
                    x: points[j][1],
                    y: points[j][0]
                  };
                  area += p1.x * p2.y;
                  area -= p1.y * p2.x;
                }

                area /= 2;
                return area;
              },

              // adapted from http://paulbourke.net/geometry/polyarea/javascript.txt
              gju.centroid = function (polygon) {
                var f,
                    x = 0,
                    y = 0;
                // TODO: polygon holes at coordinates[1]
                var points = polygon.coordinates[0];
                var j = points.length - 1;
                var p1, p2;

                for (var i = 0; i < points.length; j = i++) {
                  var p1 = {
                    x: points[i][1],
                    y: points[i][0]
                  };
                  var p2 = {
                    x: points[j][1],
                    y: points[j][0]
                  };
                  f = p1.x * p2.y - p2.x * p1.y;
                  x += (p1.x + p2.x) * f;
                  y += (p1.y + p2.y) * f;
                }

                f = gju.area(polygon) * 6;
                return {
                  'type': 'Point',
                  'coordinates': [y / f, x / f]
                };
              }, gju.simplify = function (source, kink) {
                /* source[] array of geojson points */
                /* kink	in metres, kinks above this depth kept  */
                /* kink depth is the height of the triangle abc where a-b and b-c are two consecutive line segments */
                kink = kink || 20;
                source = source.map(function (o) {
                  return {
                    lng: o.coordinates[0],
                    lat: o.coordinates[1]
                  };
                });

                var n_source, n_stack, n_dest, start, end, i, sig;
                var dev_sqr, max_dev_sqr, band_sqr;
                var x12, y12, d12, x13, y13, d13, x23, y23, d23;
                var F = Math.PI / 180.0 * 0.5;
                var index = new Array(); /* aray of indexes of source points to include in the reduced line */
                var sig_start = new Array(); /* indices of start & end of working section */
                var sig_end = new Array();

                /* check for simple cases */

                if (source.length < 3) return source; /* one or two points */

                /* more complex case. initialize stack */

                n_source = source.length;
                band_sqr = kink * 360.0 / (2.0 * Math.PI * 6378137.0); /* Now in degrees */
                band_sqr *= band_sqr;
                n_dest = 0;
                sig_start[0] = 0;
                sig_end[0] = n_source - 1;
                n_stack = 1;

                /* while the stack is not empty  ... */
                while (n_stack > 0) {

                  /* ... pop the top-most entries off the stacks */

                  start = sig_start[n_stack - 1];
                  end = sig_end[n_stack - 1];
                  n_stack--;

                  if (end - start > 1) {
                    /* any intermediate points ? */

                    /* ... yes, so find most deviant intermediate point to
                    either side of line joining start & end points */

                    x12 = source[end].lng() - source[start].lng();
                    y12 = source[end].lat() - source[start].lat();
                    if (Math.abs(x12) > 180.0) x12 = 360.0 - Math.abs(x12);
                    x12 *= Math.cos(F * (source[end].lat() + source[start].lat())); /* use avg lat to reduce lng */
                    d12 = x12 * x12 + y12 * y12;

                    for (i = start + 1, sig = start, max_dev_sqr = -1.0; i < end; i++) {

                      x13 = source[i].lng() - source[start].lng();
                      y13 = source[i].lat() - source[start].lat();
                      if (Math.abs(x13) > 180.0) x13 = 360.0 - Math.abs(x13);
                      x13 *= Math.cos(F * (source[i].lat() + source[start].lat()));
                      d13 = x13 * x13 + y13 * y13;

                      x23 = source[i].lng() - source[end].lng();
                      y23 = source[i].lat() - source[end].lat();
                      if (Math.abs(x23) > 180.0) x23 = 360.0 - Math.abs(x23);
                      x23 *= Math.cos(F * (source[i].lat() + source[end].lat()));
                      d23 = x23 * x23 + y23 * y23;

                      if (d13 >= d12 + d23) dev_sqr = d23;else if (d23 >= d12 + d13) dev_sqr = d13;else dev_sqr = (x13 * y12 - y13 * x12) * (x13 * y12 - y13 * x12) / d12; // solve triangle
                      if (dev_sqr > max_dev_sqr) {
                        sig = i;
                        max_dev_sqr = dev_sqr;
                      }
                    }

                    if (max_dev_sqr < band_sqr) {
                      /* is there a sig. intermediate point ? */
                      /* ... no, so transfer current start point */
                      index[n_dest] = start;
                      n_dest++;
                    } else {
                      /* ... yes, so push two sub-sections on stack for further processing */
                      n_stack++;
                      sig_start[n_stack - 1] = sig;
                      sig_end[n_stack - 1] = end;
                      n_stack++;
                      sig_start[n_stack - 1] = start;
                      sig_end[n_stack - 1] = sig;
                    }
                  } else {
                    /* ... no intermediate points, so transfer current start point */
                    index[n_dest] = start;
                    n_dest++;
                  }
                }

                /* transfer last point */
                index[n_dest] = n_source - 1;
                n_dest++;

                /* make return array */
                var r = new Array();
                for (var i = 0; i < n_dest; i++) r.push(source[index[i]]);

                return r.map(function (o) {
                  return {
                    type: "Point",
                    coordinates: [o.lng, o.lat]
                  };
                });
              };

              // http://www.movable-type.co.uk/scripts/latlong.html#destPoint
              gju.destinationPoint = function (pt, brng, dist) {
                dist = dist / 6371; // convert dist to angular distance in radians
                brng = gju.numberToRadius(brng);

                var lat1 = gju.numberToRadius(pt.coordinates[0]);
                var lon1 = gju.numberToRadius(pt.coordinates[1]);

                var lat2 = Math.asin(Math.sin(lat1) * Math.cos(dist) + Math.cos(lat1) * Math.sin(dist) * Math.cos(brng));
                var lon2 = lon1 + Math.atan2(Math.sin(brng) * Math.sin(dist) * Math.cos(lat1), Math.cos(dist) - Math.sin(lat1) * Math.sin(lat2));
                lon2 = (lon2 + 3 * Math.PI) % (2 * Math.PI) - Math.PI; // normalise to -180..+180º

                return {
                  'type': 'Point',
                  'coordinates': [gju.numberToDegree(lat2), gju.numberToDegree(lon2)]
                };
              };
            })();

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports3 = _require3("/node_modules/meteor/geojson-utils/main.js");

  /* Exports */
  Package._define("geojson-utils", _exports3, {
    GeoJSON: GeoJSON
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var EJSON = Package.ejson.EJSON;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var IdMap;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "id-map": { "id-map.js": function module(_require, _exports, _module) {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                //
            // packages/id-map/id-map.js                                                                                      //
            //                                                                                                                //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              IdMap: () => IdMap
            });

            class IdMap {
              constructor(idStringify, idParse) {
                this._map = new Map();
                this._idStringify = idStringify || JSON.stringify;
                this._idParse = idParse || JSON.parse;
              } // Some of these methods are designed to match methods on OrderedDict, since
              // (eg) ObserveMultiplex and _CachingChangeObserver use them interchangeably.
              // (Conceivably, this should be replaced with "UnorderedDict" with a specific
              // set of methods that overlap between the two.)


              get(id) {
                const key = this._idStringify(id);

                return this._map.get(key);
              }

              set(id, value) {
                const key = this._idStringify(id);

                this._map.set(key, value);
              }

              remove(id) {
                const key = this._idStringify(id);

                this._map.delete(key);
              }

              has(id) {
                const key = this._idStringify(id);

                return this._map.has(key);
              }

              empty() {
                return this._map.size === 0;
              }

              clear() {
                this._map.clear();
              } // Iterates over the items in the map. Return `false` to break the loop.


              forEach(iterator) {
                // don't use _.each, because we can't break out of it.
                for (let [key, value] of this._map) {
                  const breakIfFalse = iterator.call(null, value, this._idParse(key));

                  if (breakIfFalse === false) {
                    return;
                  }
                }
              }

              size() {
                return this._map.size;
              }

              setDefault(id, def) {
                const key = this._idStringify(id);

                if (this._map.has(key)) {
                  return this._map.get(key);
                }

                this._map.set(key, def);

                return def;
              } // Assumes that values are EJSON-cloneable, and that we don't need to clone
              // IDs (ie, that nobody is going to mutate an ObjectId).


              clone() {
                const clone = new IdMap(this._idStringify, this._idParse); // copy directly to avoid stringify/parse overhead

                this._map.forEach(function (value, key) {
                  clone._map.set(key, EJSON.clone(value));
                });

                return clone;
              }

            }
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/id-map/id-map.js");

  /* Exports */
  Package._define("id-map", _exports2, {
    IdMap: IdMap
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var charsCount, Random;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "random": { "main_client.js": function module(_require, _exports, _module) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                               //
            // packages/random/main_client.js                                                                //
            //                                                                                               //
            ///////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              Random: () => Random
            });
            let BrowserRandomGenerator;
            _module.link("./BrowserRandomGenerator", {
              default(v) {
                BrowserRandomGenerator = v;
              }

            }, 0);
            let createAleaGeneratorWithGeneratedSeed;
            _module.link("./createAleaGenerator", {
              default(v) {
                createAleaGeneratorWithGeneratedSeed = v;
              }

            }, 1);
            let createRandom;
            _module.link("./createRandom", {
              default(v) {
                createRandom = v;
              }

            }, 2);
            let generator;

            if (typeof window !== 'undefined' && window.crypto && window.crypto.getRandomValues) {
              generator = new BrowserRandomGenerator();
            } else {
              // On IE 10 and below, there's no browser crypto API
              // available. Fall back to Alea
              //
              // XXX looks like at the moment, we use Alea in IE 11 as well,
              // which has `window.msCrypto` instead of `window.crypto`.
              generator = createAleaGeneratorWithGeneratedSeed();
            }

            const Random = createRandom(generator);
            ///////////////////////////////////////////////////////////////////////////////////////////////////
          }, "AbstractRandomGenerator.js": function module(_require3, _exports3, _module2) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                               //
            // packages/random/AbstractRandomGenerator.js                                                    //
            //                                                                                               //
            ///////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module2.export({
              default: () => RandomGenerator
            });
            let Meteor;
            _module2.link("meteor/meteor", {
              Meteor(v) {
                Meteor = v;
              }

            }, 0);
            const UNMISTAKABLE_CHARS = '23456789ABCDEFGHJKLMNPQRSTWXYZabcdefghijkmnopqrstuvwxyz';
            const BASE64_CHARS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' + '0123456789-_'; // `type` is one of `RandomGenerator.Type` as defined below.
            //
            // options:
            // - seeds: (required, only for RandomGenerator.Type.ALEA) an array
            //   whose items will be `toString`ed and used as the seed to the Alea
            //   algorithm

            class RandomGenerator {
              /**
               * @name Random.fraction
               * @summary Return a number between 0 and 1, like `Math.random`.
               * @locus Anywhere
               */
              fraction() {
                throw new Error("Unknown random generator type");
              }
              /**
               * @name Random.hexString
               * @summary Return a random string of `n` hexadecimal digits.
               * @locus Anywhere
               * @param {Number} n Length of the string
               */

              hexString(digits) {
                return this._randomString(digits, '0123456789abcdef');
              }

              _randomString(charsCount, alphabet) {
                let result = '';

                for (let i = 0; i < charsCount; i++) {
                  result += this.choice(alphabet);
                }

                return result;
              }
              /**
               * @name Random.id
               * @summary Return a unique identifier, such as `"Jjwjg6gouWLXhMGKW"`, that is
               * likely to be unique in the whole world.
               * @locus Anywhere
               * @param {Number} [n] Optional length of the identifier in characters
               *   (defaults to 17)
               */

              id(charsCount) {
                // 17 characters is around 96 bits of entropy, which is the amount of
                // state in the Alea PRNG.
                if (charsCount === undefined) {
                  charsCount = 17;
                }

                return this._randomString(charsCount, UNMISTAKABLE_CHARS);
              }
              /**
               * @name Random.secret
               * @summary Return a random string of printable characters with 6 bits of
               * entropy per character. Use `Random.secret` for security-critical secrets
               * that are intended for machine, rather than human, consumption.
               * @locus Anywhere
               * @param {Number} [n] Optional length of the secret string (defaults to 43
               *   characters, or 256 bits of entropy)
               */

              secret(charsCount) {
                // Default to 256 bits of entropy, or 43 characters at 6 bits per
                // character.
                if (charsCount === undefined) {
                  charsCount = 43;
                }

                return this._randomString(charsCount, BASE64_CHARS);
              }
              /**
               * @name Random.choice
               * @summary Return a random element of the given array or string.
               * @locus Anywhere
               * @param {Array|String} arrayOrString Array or string to choose from
               */

              choice(arrayOrString) {
                const index = Math.floor(this.fraction() * arrayOrString.length);

                if (typeof arrayOrString === 'string') {
                  return arrayOrString.substr(index, 1);
                }

                return arrayOrString[index];
              }

            }
            ///////////////////////////////////////////////////////////////////////////////////////////////////
          }, "AleaRandomGenerator.js": function module(_require4, _exports4, _module3) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                               //
            // packages/random/AleaRandomGenerator.js                                                        //
            //                                                                                               //
            ///////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module3.export({
              default: () => AleaRandomGenerator
            });
            let RandomGenerator;
            _module3.link("./AbstractRandomGenerator", {
              default(v) {
                RandomGenerator = v;
              }

            }, 0);

            // Alea PRNG, which is not cryptographically strong
            // see http://baagoe.org/en/wiki/Better_random_numbers_for_javascript
            // for a full discussion and Alea implementation.
            function Alea(seeds) {
              function Mash() {
                let n = 0xefc8249d;

                const mash = data => {
                  data = data.toString();

                  for (let i = 0; i < data.length; i++) {
                    n += data.charCodeAt(i);
                    let h = 0.02519603282416938 * n;
                    n = h >>> 0;
                    h -= n;
                    h *= n;
                    n = h >>> 0;
                    h -= n;
                    n += h * 0x100000000; // 2^32
                  }

                  return (n >>> 0) * 2.3283064365386963e-10; // 2^-32
                };

                mash.version = 'Mash 0.9';
                return mash;
              }

              let s0 = 0;
              let s1 = 0;
              let s2 = 0;
              let c = 1;

              if (seeds.length === 0) {
                seeds = [+new Date()];
              }

              let mash = Mash();
              s0 = mash(' ');
              s1 = mash(' ');
              s2 = mash(' ');

              for (let i = 0; i < seeds.length; i++) {
                s0 -= mash(seeds[i]);

                if (s0 < 0) {
                  s0 += 1;
                }

                s1 -= mash(seeds[i]);

                if (s1 < 0) {
                  s1 += 1;
                }

                s2 -= mash(seeds[i]);

                if (s2 < 0) {
                  s2 += 1;
                }
              }

              mash = null;

              const random = () => {
                const t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32

                s0 = s1;
                s1 = s2;
                return s2 = t - (c = t | 0);
              };

              random.uint32 = () => random() * 0x100000000; // 2^32


              random.fract53 = () => random() + (random() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53


              random.version = 'Alea 0.9';
              random.args = seeds;
              return random;
            } // options:
            // - seeds: an array
            //   whose items will be `toString`ed and used as the seed to the Alea
            //   algorithm


            class AleaRandomGenerator extends RandomGenerator {
              constructor() {
                let {
                  seeds = []
                } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                super();

                if (!seeds) {
                  throw new Error('No seeds were provided for Alea PRNG');
                }

                this.alea = Alea(seeds);
              }
              /**
               * @name Random.fraction
               * @summary Return a number between 0 and 1, like `Math.random`.
               * @locus Anywhere
               */

              fraction() {
                return this.alea();
              }

            }
            ///////////////////////////////////////////////////////////////////////////////////////////////////
          }, "BrowserRandomGenerator.js": function module(_require5, _exports5, _module4) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                               //
            // packages/random/BrowserRandomGenerator.js                                                     //
            //                                                                                               //
            ///////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module4.export({
              default: () => BrowserRandomGenerator
            });
            let RandomGenerator;
            _module4.link("./AbstractRandomGenerator", {
              default(v) {
                RandomGenerator = v;
              }

            }, 0);

            class BrowserRandomGenerator extends RandomGenerator {
              /**
               * @name Random.fraction
               * @summary Return a number between 0 and 1, like `Math.random`.
               * @locus Anywhere
               */
              fraction() {
                const array = new Uint32Array(1);
                window.crypto.getRandomValues(array);
                return array[0] * 2.3283064365386963e-10; // 2^-32
              }

            }
            ///////////////////////////////////////////////////////////////////////////////////////////////////
          }, "createAleaGenerator.js": function module(_require6, _exports6, _module5) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                               //
            // packages/random/createAleaGenerator.js                                                        //
            //                                                                                               //
            ///////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module5.export({
              default: () => createAleaGenerator
            });
            let AleaRandomGenerator;
            _module5.link("./AleaRandomGenerator", {
              default(v) {
                AleaRandomGenerator = v;
              }

            }, 0);
            // instantiate RNG.  Heuristically collect entropy from various sources when a
            // cryptographic PRNG isn't available.
            // client sources
            const height = typeof window !== 'undefined' && window.innerHeight || typeof document !== 'undefined' && document.documentElement && document.documentElement.clientHeight || typeof document !== 'undefined' && document.body && document.body.clientHeight || 1;
            const width = typeof window !== 'undefined' && window.innerWidth || typeof document !== 'undefined' && document.documentElement && document.documentElement.clientWidth || typeof document !== 'undefined' && document.body && document.body.clientWidth || 1;
            const agent = typeof navigator !== 'undefined' && navigator.userAgent || '';

            function createAleaGenerator() {
              return new AleaRandomGenerator({
                seeds: [new Date(), height, width, agent, Math.random()]
              });
            }
            ///////////////////////////////////////////////////////////////////////////////////////////////////
          }, "createRandom.js": function module(_require7, _exports7, _module6) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                               //
            // packages/random/createRandom.js                                                               //
            //                                                                                               //
            ///////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module6.export({
              default: () => createRandom
            });
            let AleaRandomGenerator;
            _module6.link("./AleaRandomGenerator", {
              default(v) {
                AleaRandomGenerator = v;
              }

            }, 0);
            let createAleaGeneratorWithGeneratedSeed;
            _module6.link("./createAleaGenerator", {
              default(v) {
                createAleaGeneratorWithGeneratedSeed = v;
              }

            }, 1);

            function createRandom(generator) {
              // Create a non-cryptographically secure PRNG with a given seed (using
              // the Alea algorithm)
              generator.createWithSeeds = function () {
                for (var _len = arguments.length, seeds = new Array(_len), _key = 0; _key < _len; _key++) {
                  seeds[_key] = arguments[_key];
                }

                if (seeds.length === 0) {
                  throw new Error('No seeds were provided');
                }

                return new AleaRandomGenerator({
                  seeds
                });
              }; // Used like `Random`, but much faster and not cryptographically
              // secure


              generator.insecure = createAleaGeneratorWithGeneratedSeed();
              return generator;
            }
            ///////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/random/main_client.js");

  /* Exports */
  Package._define("random", _exports2, {
    Random: Random
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var EJSON = Package.ejson.EJSON;
  var Random = Package.random.Random;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var hexString, MongoID;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "mongo-id": { "id.js": function module(_require, _exports, _module) {

            ///////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                           //
            // packages/mongo-id/id.js                                                                   //
            //                                                                                           //
            ///////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              MongoID: () => MongoID
            });
            let EJSON;
            _module.link("meteor/ejson", {
              EJSON(v) {
                EJSON = v;
              }

            }, 0);
            let Random;
            _module.link("meteor/random", {
              Random(v) {
                Random = v;
              }

            }, 1);
            const MongoID = {};

            MongoID._looksLikeObjectID = str => str.length === 24 && str.match(/^[0-9a-f]*$/);

            MongoID.ObjectID = class ObjectID {
              constructor(hexString) {
                //random-based impl of Mongo ObjectID
                if (hexString) {
                  hexString = hexString.toLowerCase();

                  if (!MongoID._looksLikeObjectID(hexString)) {
                    throw new Error('Invalid hexadecimal string for creating an ObjectID');
                  } // meant to work with _.isEqual(), which relies on structural equality


                  this._str = hexString;
                } else {
                  this._str = Random.hexString(24);
                }
              }

              equals(other) {
                return other instanceof MongoID.ObjectID && this.valueOf() === other.valueOf();
              }

              toString() {
                return "ObjectID(\"".concat(this._str, "\")");
              }

              clone() {
                return new MongoID.ObjectID(this._str);
              }

              typeName() {
                return 'oid';
              }

              getTimestamp() {
                return Number.parseInt(this._str.substr(0, 8), 16);
              }

              valueOf() {
                return this._str;
              }

              toJSONValue() {
                return this.valueOf();
              }

              toHexString() {
                return this.valueOf();
              }

            };
            EJSON.addType('oid', str => new MongoID.ObjectID(str));

            MongoID.idStringify = id => {
              if (id instanceof MongoID.ObjectID) {
                return id.valueOf();
              } else if (typeof id === 'string') {
                var firstChar = id.charAt(0);

                if (id === '') {
                  return id;
                } else if (firstChar === '-' || // escape previously dashed strings
                firstChar === '~' || // escape escaped numbers, true, false
                MongoID._looksLikeObjectID(id) || // escape object-id-form strings
                firstChar === '{') {
                  // escape object-form strings, for maybe implementing later
                  return "-".concat(id);
                } else {
                  return id; // other strings go through unchanged.
                }
              } else if (id === undefined) {
                return '-';
              } else if (typeof id === 'object' && id !== null) {
                throw new Error('Meteor does not currently support objects other than ObjectID as ids');
              } else {
                // Numbers, true, false, null
                return "~".concat(JSON.stringify(id));
              }
            };

            MongoID.idParse = id => {
              var firstChar = id.charAt(0);

              if (id === '') {
                return id;
              } else if (id === '-') {
                return undefined;
              } else if (firstChar === '-') {
                return id.substr(1);
              } else if (firstChar === '~') {
                return JSON.parse(id.substr(1));
              } else if (MongoID._looksLikeObjectID(id)) {
                return new MongoID.ObjectID(id);
              } else {
                return id;
              }
            };
            ///////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/mongo-id/id.js");

  /* Exports */
  Package._define("mongo-id", _exports2, {
    MongoID: MongoID
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var OrderedDict;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "ordered-dict": { "ordered_dict.js": function module(_require, _exports, _module) {

            //////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                      //
            // packages/ordered-dict/ordered_dict.js                                                                //
            //                                                                                                      //
            //////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              OrderedDict: () => OrderedDict
            });

            // This file defines an ordered dictionary abstraction that is useful for
            // maintaining a dataset backed by observeChanges.  It supports ordering items
            // by specifying the item they now come before.
            // The implementation is a dictionary that contains nodes of a doubly-linked
            // list as its values.
            // constructs a new element struct
            // next and prev are whole elements, not keys.
            function element(key, value, next, prev) {
              return {
                key: key,
                value: value,
                next: next,
                prev: prev
              };
            }

            class OrderedDict {
              constructor() {
                this._dict = Object.create(null);
                this._first = null;
                this._last = null;
                this._size = 0;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                if (typeof args[0] === 'function') {
                  this._stringify = args.shift();
                } else {
                  this._stringify = function (x) {
                    return x;
                  };
                }

                args.forEach(kv => this.putBefore(kv[0], kv[1], null));
              } // the "prefix keys with a space" thing comes from here
              // https://github.com/documentcloud/underscore/issues/376#issuecomment-2815649


              _k(key) {
                return " " + this._stringify(key);
              }

              empty() {
                return !this._first;
              }

              size() {
                return this._size;
              }

              _linkEltIn(elt) {
                if (!elt.next) {
                  elt.prev = this._last;
                  if (this._last) this._last.next = elt;
                  this._last = elt;
                } else {
                  elt.prev = elt.next.prev;
                  elt.next.prev = elt;
                  if (elt.prev) elt.prev.next = elt;
                }

                if (this._first === null || this._first === elt.next) this._first = elt;
              }

              _linkEltOut(elt) {
                if (elt.next) elt.next.prev = elt.prev;
                if (elt.prev) elt.prev.next = elt.next;
                if (elt === this._last) this._last = elt.prev;
                if (elt === this._first) this._first = elt.next;
              }

              putBefore(key, item, before) {
                if (this._dict[this._k(key)]) throw new Error("Item " + key + " already present in OrderedDict");
                var elt = before ? element(key, item, this._dict[this._k(before)]) : element(key, item, null);
                if (typeof elt.next === "undefined") throw new Error("could not find item to put this one before");

                this._linkEltIn(elt);

                this._dict[this._k(key)] = elt;
                this._size++;
              }

              append(key, item) {
                this.putBefore(key, item, null);
              }

              remove(key) {
                var elt = this._dict[this._k(key)];

                if (typeof elt === "undefined") throw new Error("Item " + key + " not present in OrderedDict");

                this._linkEltOut(elt);

                this._size--;
                delete this._dict[this._k(key)];
                return elt.value;
              }

              get(key) {
                if (this.has(key)) {
                  return this._dict[this._k(key)].value;
                }
              }

              has(key) {
                return Object.prototype.hasOwnProperty.call(this._dict, this._k(key));
              } // Iterate through the items in this dictionary in order, calling
              // iter(value, key, index) on each one.
              // Stops whenever iter returns OrderedDict.BREAK, or after the last element.


              forEach(iter) {
                let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
                var i = 0;
                var elt = this._first;

                while (elt !== null) {
                  var b = iter.call(context, elt.value, elt.key, i);
                  if (b === OrderedDict.BREAK) return;
                  elt = elt.next;
                  i++;
                }
              }

              first() {
                if (this.empty()) {
                  return;
                }

                return this._first.key;
              }

              firstValue() {
                if (this.empty()) {
                  return;
                }

                return this._first.value;
              }

              last() {
                if (this.empty()) {
                  return;
                }

                return this._last.key;
              }

              lastValue() {
                if (this.empty()) {
                  return;
                }

                return this._last.value;
              }

              prev(key) {
                if (this.has(key)) {
                  var elt = this._dict[this._k(key)];

                  if (elt.prev) return elt.prev.key;
                }

                return null;
              }

              next(key) {
                if (this.has(key)) {
                  var elt = this._dict[this._k(key)];

                  if (elt.next) return elt.next.key;
                }

                return null;
              }

              moveBefore(key, before) {
                var elt = this._dict[this._k(key)];

                var eltBefore = before ? this._dict[this._k(before)] : null;

                if (typeof elt === "undefined") {
                  throw new Error("Item to move is not present");
                }

                if (typeof eltBefore === "undefined") {
                  throw new Error("Could not find element to move this one before");
                }

                if (eltBefore === elt.next) // no moving necessary
                  return; // remove from its old place

                this._linkEltOut(elt); // patch into its new place


                elt.next = eltBefore;

                this._linkEltIn(elt);
              } // Linear, sadly.


              indexOf(key) {
                var ret = null;
                this.forEach((v, k, i) => {
                  if (this._k(k) === this._k(key)) {
                    ret = i;
                    return OrderedDict.BREAK;
                  }

                  return;
                });
                return ret;
              }

              _checkRep() {
                Object.keys(this._dict).forEach(k => {
                  const v = this._dict[k];

                  if (v.next === v) {
                    throw new Error("Next is a loop");
                  }

                  if (v.prev === v) {
                    throw new Error("Prev is a loop");
                  }
                });
              }

            }

            OrderedDict.BREAK = {
              "break": true
            };
            //////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/ordered-dict/ordered_dict.js");

  /* Exports */
  Package._define("ordered-dict", _exports2, {
    OrderedDict: OrderedDict
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var Tracker, Deps, computation;

  var _require = meteorInstall({ "node_modules": { "meteor": { "tracker": { "tracker.js": function _module() {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/tracker/tracker.js                                                                                        //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            /////////////////////////////////////////////////////
            // Package docs at http://docs.meteor.com/#tracker //
            /////////////////////////////////////////////////////

            /**
             * @namespace Tracker
             * @summary The namespace for Tracker-related methods.
             */
            Tracker = {};
            /**
             * @namespace Deps
             * @deprecated
             */

            Deps = Tracker; // http://docs.meteor.com/#tracker_active

            /**
             * @summary True if there is a current computation, meaning that dependencies on reactive data sources will be tracked and potentially cause the current computation to be rerun.
             * @locus Client
             * @type {Boolean}
             */

            Tracker.active = false; // http://docs.meteor.com/#tracker_currentcomputation

            /**
             * @summary The current computation, or `null` if there isn't one.  The current computation is the [`Tracker.Computation`](#tracker_computation) object created by the innermost active call to `Tracker.autorun`, and it's the computation that gains dependencies when reactive data sources are accessed.
             * @locus Client
             * @type {Tracker.Computation}
             */

            Tracker.currentComputation = null;

            function setCurrentComputation(c) {
              Tracker.currentComputation = c;
              Tracker.active = !!c;
            }

            function _debugFunc() {
              // We want this code to work without Meteor, and also without
              // "console" (which is technically non-standard and may be missing
              // on some browser we come across, like it was on IE 7).
              //
              // Lazy evaluation because `Meteor` does not exist right away.(??)
              return typeof Meteor !== "undefined" ? Meteor._debug : typeof console !== "undefined" && console.error ? function () {
                console.error.apply(console, arguments);
              } : function () {};
            }

            function _maybeSuppressMoreLogs(messagesLength) {
              // Sometimes when running tests, we intentionally suppress logs on expected
              // printed errors. Since the current implementation of _throwOrLog can log
              // multiple separate log messages, suppress all of them if at least one suppress
              // is expected as we still want them to count as one.
              if (typeof Meteor !== "undefined") {
                if (Meteor._suppressed_log_expected()) {
                  Meteor._suppress_log(messagesLength - 1);
                }
              }
            }

            function _throwOrLog(from, e) {
              if (throwFirstError) {
                throw e;
              } else {
                var printArgs = ["Exception from Tracker " + from + " function:"];

                if (e.stack && e.message && e.name) {
                  var idx = e.stack.indexOf(e.message);

                  if (idx < 0 || idx > e.name.length + 2) {
                    // check for "Error: "
                    // message is not part of the stack
                    var message = e.name + ": " + e.message;
                    printArgs.push(message);
                  }
                }

                printArgs.push(e.stack);

                _maybeSuppressMoreLogs(printArgs.length);

                for (var i = 0; i < printArgs.length; i++) {
                  _debugFunc()(printArgs[i]);
                }
              }
            } // Takes a function `f`, and wraps it in a `Meteor._noYieldsAllowed`
            // block if we are running on the server. On the client, returns the
            // original function (since `Meteor._noYieldsAllowed` is a
            // no-op). This has the benefit of not adding an unnecessary stack
            // frame on the client.


            function withNoYieldsAllowed(f) {
              if (typeof Meteor === 'undefined' || Meteor.isClient) {
                return f;
              } else {
                return function () {
                  var args = arguments;

                  Meteor._noYieldsAllowed(function () {
                    f.apply(null, args);
                  });
                };
              }
            }

            var nextId = 1; // computations whose callbacks we should call at flush time

            var pendingComputations = []; // `true` if a Tracker.flush is scheduled, or if we are in Tracker.flush now

            var willFlush = false; // `true` if we are in Tracker.flush now

            var inFlush = false; // `true` if we are computing a computation now, either first time
            // or recompute.  This matches Tracker.active unless we are inside
            // Tracker.nonreactive, which nullfies currentComputation even though
            // an enclosing computation may still be running.

            var inCompute = false; // `true` if the `_throwFirstError` option was passed in to the call
            // to Tracker.flush that we are in. When set, throw rather than log the
            // first error encountered while flushing. Before throwing the error,
            // finish flushing (from a finally block), logging any subsequent
            // errors.

            var throwFirstError = false;
            var afterFlushCallbacks = [];

            function requireFlush() {
              if (!willFlush) {
                // We want this code to work without Meteor, see debugFunc above
                if (typeof Meteor !== "undefined") Meteor._setImmediate(Tracker._runFlush);else setTimeout(Tracker._runFlush, 0);
                willFlush = true;
              }
            } // Tracker.Computation constructor is visible but private
            // (throws an error if you try to call it)


            var constructingComputation = false; //
            // http://docs.meteor.com/#tracker_computation

            /**
             * @summary A Computation object represents code that is repeatedly rerun
             * in response to
             * reactive data changes. Computations don't have return values; they just
             * perform actions, such as rerendering a template on the screen. Computations
             * are created using Tracker.autorun. Use stop to prevent further rerunning of a
             * computation.
             * @instancename computation
             */

            Tracker.Computation = class Computation {
              constructor(f, parent, onError) {
                if (!constructingComputation) throw new Error("Tracker.Computation constructor is private; use Tracker.autorun");
                constructingComputation = false; // http://docs.meteor.com/#computation_stopped

                /**
                 * @summary True if this computation has been stopped.
                 * @locus Client
                 * @memberOf Tracker.Computation
                 * @instance
                 * @name  stopped
                 */

                this.stopped = false; // http://docs.meteor.com/#computation_invalidated

                /**
                 * @summary True if this computation has been invalidated (and not yet rerun), or if it has been stopped.
                 * @locus Client
                 * @memberOf Tracker.Computation
                 * @instance
                 * @name  invalidated
                 * @type {Boolean}
                 */

                this.invalidated = false; // http://docs.meteor.com/#computation_firstrun

                /**
                 * @summary True during the initial run of the computation at the time `Tracker.autorun` is called, and false on subsequent reruns and at other times.
                 * @locus Client
                 * @memberOf Tracker.Computation
                 * @instance
                 * @name  firstRun
                 * @type {Boolean}
                 */

                this.firstRun = true;
                this._id = nextId++;
                this._onInvalidateCallbacks = [];
                this._onStopCallbacks = []; // the plan is at some point to use the parent relation
                // to constrain the order that computations are processed

                this._parent = parent;
                this._func = f;
                this._onError = onError;
                this._recomputing = false;
                var errored = true;

                try {
                  this._compute();

                  errored = false;
                } finally {
                  this.firstRun = false;
                  if (errored) this.stop();
                }
              } // http://docs.meteor.com/#computation_oninvalidate

              /**
               * @summary Registers `callback` to run when this computation is next invalidated, or runs it immediately if the computation is already invalidated.  The callback is run exactly once and not upon future invalidations unless `onInvalidate` is called again after the computation becomes valid again.
               * @locus Client
               * @param {Function} callback Function to be called on invalidation. Receives one argument, the computation that was invalidated.
               */

              onInvalidate(f) {
                if (typeof f !== 'function') throw new Error("onInvalidate requires a function");

                if (this.invalidated) {
                  Tracker.nonreactive(() => {
                    withNoYieldsAllowed(f)(this);
                  });
                } else {
                  this._onInvalidateCallbacks.push(f);
                }
              }
              /**
               * @summary Registers `callback` to run when this computation is stopped, or runs it immediately if the computation is already stopped.  The callback is run after any `onInvalidate` callbacks.
               * @locus Client
               * @param {Function} callback Function to be called on stop. Receives one argument, the computation that was stopped.
               */

              onStop(f) {
                if (typeof f !== 'function') throw new Error("onStop requires a function");

                if (this.stopped) {
                  Tracker.nonreactive(() => {
                    withNoYieldsAllowed(f)(this);
                  });
                } else {
                  this._onStopCallbacks.push(f);
                }
              } // http://docs.meteor.com/#computation_invalidate

              /**
               * @summary Invalidates this computation so that it will be rerun.
               * @locus Client
               */

              invalidate() {
                if (!this.invalidated) {
                  // if we're currently in _recompute(), don't enqueue
                  // ourselves, since we'll rerun immediately anyway.
                  if (!this._recomputing && !this.stopped) {
                    requireFlush();
                    pendingComputations.push(this);
                  }

                  this.invalidated = true; // callbacks can't add callbacks, because
                  // this.invalidated === true.

                  for (var i = 0, f; f = this._onInvalidateCallbacks[i]; i++) {
                    Tracker.nonreactive(() => {
                      withNoYieldsAllowed(f)(this);
                    });
                  }

                  this._onInvalidateCallbacks = [];
                }
              } // http://docs.meteor.com/#computation_stop

              /**
               * @summary Prevents this computation from rerunning.
               * @locus Client
               */

              stop() {
                if (!this.stopped) {
                  this.stopped = true;
                  this.invalidate();

                  for (var i = 0, f; f = this._onStopCallbacks[i]; i++) {
                    Tracker.nonreactive(() => {
                      withNoYieldsAllowed(f)(this);
                    });
                  }

                  this._onStopCallbacks = [];
                }
              }

              _compute() {
                this.invalidated = false;
                var previous = Tracker.currentComputation;
                setCurrentComputation(this);
                var previousInCompute = inCompute;
                inCompute = true;

                try {
                  withNoYieldsAllowed(this._func)(this);
                } finally {
                  setCurrentComputation(previous);
                  inCompute = previousInCompute;
                }
              }

              _needsRecompute() {
                return this.invalidated && !this.stopped;
              }

              _recompute() {
                this._recomputing = true;

                try {
                  if (this._needsRecompute()) {
                    try {
                      this._compute();
                    } catch (e) {
                      if (this._onError) {
                        this._onError(e);
                      } else {
                        _throwOrLog("recompute", e);
                      }
                    }
                  }
                } finally {
                  this._recomputing = false;
                }
              }
              /**
               * @summary Process the reactive updates for this computation immediately
               * and ensure that the computation is rerun. The computation is rerun only
               * if it is invalidated.
               * @locus Client
               */

              flush() {
                if (this._recomputing) return;

                this._recompute();
              }
              /**
               * @summary Causes the function inside this computation to run and
               * synchronously process all reactive updtes.
               * @locus Client
               */

              run() {
                this.invalidate();
                this.flush();
              }

            }; //
            // http://docs.meteor.com/#tracker_dependency

            /**
             * @summary A Dependency represents an atomic unit of reactive data that a
             * computation might depend on. Reactive data sources such as Session or
             * Minimongo internally create different Dependency objects for different
             * pieces of data, each of which may be depended on by multiple computations.
             * When the data changes, the computations are invalidated.
             * @class
             * @instanceName dependency
             */

            Tracker.Dependency = class Dependency {
              constructor() {
                this._dependentsById = Object.create(null);
              } // http://docs.meteor.com/#dependency_depend
              //
              // Adds `computation` to this set if it is not already
              // present.  Returns true if `computation` is a new member of the set.
              // If no argument, defaults to currentComputation, or does nothing
              // if there is no currentComputation.

              /**
               * @summary Declares that the current computation (or `fromComputation` if given) depends on `dependency`.  The computation will be invalidated the next time `dependency` changes.
                If there is no current computation and `depend()` is called with no arguments, it does nothing and returns false.
                Returns true if the computation is a new dependent of `dependency` rather than an existing one.
               * @locus Client
               * @param {Tracker.Computation} [fromComputation] An optional computation declared to depend on `dependency` instead of the current computation.
               * @returns {Boolean}
               */

              depend(computation) {
                if (!computation) {
                  if (!Tracker.active) return false;
                  computation = Tracker.currentComputation;
                }

                var id = computation._id;

                if (!(id in this._dependentsById)) {
                  this._dependentsById[id] = computation;
                  computation.onInvalidate(() => {
                    delete this._dependentsById[id];
                  });
                  return true;
                }

                return false;
              } // http://docs.meteor.com/#dependency_changed

              /**
               * @summary Invalidate all dependent computations immediately and remove them as dependents.
               * @locus Client
               */

              changed() {
                for (var id in this._dependentsById) this._dependentsById[id].invalidate();
              } // http://docs.meteor.com/#dependency_hasdependents

              /**
               * @summary True if this Dependency has one or more dependent Computations, which would be invalidated if this Dependency were to change.
               * @locus Client
               * @returns {Boolean}
               */

              hasDependents() {
                for (var id in this._dependentsById) return true;

                return false;
              }

            }; // http://docs.meteor.com/#tracker_flush

            /**
             * @summary Process all reactive updates immediately and ensure that all invalidated computations are rerun.
             * @locus Client
             */

            Tracker.flush = function (options) {
              Tracker._runFlush({
                finishSynchronously: true,
                throwFirstError: options && options._throwFirstError
              });
            };
            /**
             * @summary True if we are computing a computation now, either first time or recompute.  This matches Tracker.active unless we are inside Tracker.nonreactive, which nullfies currentComputation even though an enclosing computation may still be running.
             * @locus Client
             * @returns {Boolean}
             */

            Tracker.inFlush = function () {
              return inFlush;
            }; // Run all pending computations and afterFlush callbacks.  If we were not called
            // directly via Tracker.flush, this may return before they're all done to allow
            // the event loop to run a little before continuing.


            Tracker._runFlush = function (options) {
              // XXX What part of the comment below is still true? (We no longer
              // have Spark)
              //
              // Nested flush could plausibly happen if, say, a flush causes
              // DOM mutation, which causes a "blur" event, which runs an
              // app event handler that calls Tracker.flush.  At the moment
              // Spark blocks event handlers during DOM mutation anyway,
              // because the LiveRange tree isn't valid.  And we don't have
              // any useful notion of a nested flush.
              //
              // https://app.asana.com/0/159908330244/385138233856
              if (Tracker.inFlush()) throw new Error("Can't call Tracker.flush while flushing");
              if (inCompute) throw new Error("Can't flush inside Tracker.autorun");
              options = options || {};
              inFlush = true;
              willFlush = true;
              throwFirstError = !!options.throwFirstError;
              var recomputedCount = 0;
              var finishedTry = false;

              try {
                while (pendingComputations.length || afterFlushCallbacks.length) {
                  // recompute all pending computations
                  while (pendingComputations.length) {
                    var comp = pendingComputations.shift();

                    comp._recompute();

                    if (comp._needsRecompute()) {
                      pendingComputations.unshift(comp);
                    }

                    if (!options.finishSynchronously && ++recomputedCount > 1000) {
                      finishedTry = true;
                      return;
                    }
                  }

                  if (afterFlushCallbacks.length) {
                    // call one afterFlush callback, which may
                    // invalidate more computations
                    var func = afterFlushCallbacks.shift();

                    try {
                      func();
                    } catch (e) {
                      _throwOrLog("afterFlush", e);
                    }
                  }
                }

                finishedTry = true;
              } finally {
                if (!finishedTry) {
                  // we're erroring due to throwFirstError being true.
                  inFlush = false; // needed before calling `Tracker.flush()` again
                  // finish flushing

                  Tracker._runFlush({
                    finishSynchronously: options.finishSynchronously,
                    throwFirstError: false
                  });
                }

                willFlush = false;
                inFlush = false;

                if (pendingComputations.length || afterFlushCallbacks.length) {
                  // We're yielding because we ran a bunch of computations and we aren't
                  // required to finish synchronously, so we'd like to give the event loop a
                  // chance. We should flush again soon.
                  if (options.finishSynchronously) {
                    throw new Error("still have more to do?"); // shouldn't happen
                  }

                  setTimeout(requireFlush, 10);
                }
              }
            }; // http://docs.meteor.com/#tracker_autorun
            //
            // Run f(). Record its dependencies. Rerun it whenever the
            // dependencies change.
            //
            // Returns a new Computation, which is also passed to f.
            //
            // Links the computation to the current computation
            // so that it is stopped if the current computation is invalidated.

            /**
             * @callback Tracker.ComputationFunction
             * @param {Tracker.Computation}
             */

            /**
             * @summary Run a function now and rerun it later whenever its dependencies
             * change. Returns a Computation object that can be used to stop or observe the
             * rerunning.
             * @locus Client
             * @param {Tracker.ComputationFunction} runFunc The function to run. It receives
             * one argument: the Computation object that will be returned.
             * @param {Object} [options]
             * @param {Function} options.onError Optional. The function to run when an error
             * happens in the Computation. The only argument it receives is the Error
             * thrown. Defaults to the error being logged to the console.
             * @returns {Tracker.Computation}
             */

            Tracker.autorun = function (f, options) {
              if (typeof f !== 'function') throw new Error('Tracker.autorun requires a function argument');
              options = options || {};
              constructingComputation = true;
              var c = new Tracker.Computation(f, Tracker.currentComputation, options.onError);
              if (Tracker.active) Tracker.onInvalidate(function () {
                c.stop();
              });
              return c;
            }; // http://docs.meteor.com/#tracker_nonreactive
            //
            // Run `f` with no current computation, returning the return value
            // of `f`.  Used to turn off reactivity for the duration of `f`,
            // so that reactive data sources accessed by `f` will not result in any
            // computations being invalidated.

            /**
             * @summary Run a function without tracking dependencies.
             * @locus Client
             * @param {Function} func A function to call immediately.
             */

            Tracker.nonreactive = function (f) {
              var previous = Tracker.currentComputation;
              setCurrentComputation(null);

              try {
                return f();
              } finally {
                setCurrentComputation(previous);
              }
            }; // http://docs.meteor.com/#tracker_oninvalidate

            /**
             * @summary Registers a new [`onInvalidate`](#computation_oninvalidate) callback on the current computation (which must exist), to be called immediately when the current computation is invalidated or stopped.
             * @locus Client
             * @param {Function} callback A callback function that will be invoked as `func(c)`, where `c` is the computation on which the callback is registered.
             */

            Tracker.onInvalidate = function (f) {
              if (!Tracker.active) throw new Error("Tracker.onInvalidate requires a currentComputation");
              Tracker.currentComputation.onInvalidate(f);
            }; // http://docs.meteor.com/#tracker_afterflush

            /**
             * @summary Schedules a function to be called during the next flush, or later in the current flush if one is in progress, after all invalidated computations have been rerun.  The function will be run once and not on subsequent flushes unless `afterFlush` is called again.
             * @locus Client
             * @param {Function} callback A function to call at flush time.
             */

            Tracker.afterFlush = function (f) {
              afterFlushCallbacks.push(f);
              requireFlush();
            };
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  _require("/node_modules/meteor/tracker/tracker.js");

  /* Exports */
  Package._define("tracker", {
    Tracker: Tracker,
    Deps: Deps
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var DiffSequence = Package['diff-sequence'].DiffSequence;
  var EJSON = Package.ejson.EJSON;
  var GeoJSON = Package['geojson-utils'].GeoJSON;
  var IdMap = Package['id-map'].IdMap;
  var MongoID = Package['mongo-id'].MongoID;
  var OrderedDict = Package['ordered-dict'].OrderedDict;
  var Random = Package.random.Random;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var operand, selectorValue, MinimongoTest, MinimongoError, selector, doc, callback, options, oldResults, a, b, LocalCollection, Minimongo;

  var _require3 = meteorInstall({ "node_modules": { "meteor": { "minimongo": { "minimongo_client.js": function module(_require, _exports, _module) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/minimongo_client.js                                                                              //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.link("./minimongo_common.js");
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "common.js": function module(_require2, _exports2, _module2) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/common.js                                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module2.export({
              hasOwn: () => hasOwn,
              ELEMENT_OPERATORS: () => ELEMENT_OPERATORS,
              compileDocumentSelector: () => compileDocumentSelector,
              equalityElementMatcher: () => equalityElementMatcher,
              expandArraysInBranches: () => expandArraysInBranches,
              isIndexable: () => isIndexable,
              isNumericKey: () => isNumericKey,
              isOperatorObject: () => isOperatorObject,
              makeLookupFunction: () => makeLookupFunction,
              nothingMatcher: () => nothingMatcher,
              pathsToTree: () => pathsToTree,
              populateDocumentWithQueryFields: () => populateDocumentWithQueryFields,
              projectionDetails: () => projectionDetails,
              regexpElementMatcher: () => regexpElementMatcher
            });
            let LocalCollection;
            _module2.link("./local_collection.js", {
              default(v) {
                LocalCollection = v;
              }

            }, 0);
            const hasOwn = Object.prototype.hasOwnProperty;
            const ELEMENT_OPERATORS = {
              $lt: makeInequality(cmpValue => cmpValue < 0),
              $gt: makeInequality(cmpValue => cmpValue > 0),
              $lte: makeInequality(cmpValue => cmpValue <= 0),
              $gte: makeInequality(cmpValue => cmpValue >= 0),
              $mod: {
                compileElementSelector(operand) {
                  if (!(Array.isArray(operand) && operand.length === 2 && typeof operand[0] === 'number' && typeof operand[1] === 'number')) {
                    throw Error('argument to $mod must be an array of two numbers');
                  } // XXX could require to be ints or round or something


                  const divisor = operand[0];
                  const remainder = operand[1];
                  return value => typeof value === 'number' && value % divisor === remainder;
                }

              },
              $in: {
                compileElementSelector(operand) {
                  if (!Array.isArray(operand)) {
                    throw Error('$in needs an array');
                  }

                  const elementMatchers = operand.map(option => {
                    if (option instanceof RegExp) {
                      return regexpElementMatcher(option);
                    }

                    if (isOperatorObject(option)) {
                      throw Error('cannot nest $ under $in');
                    }

                    return equalityElementMatcher(option);
                  });
                  return value => {
                    // Allow {a: {$in: [null]}} to match when 'a' does not exist.
                    if (value === undefined) {
                      value = null;
                    }

                    return elementMatchers.some(matcher => matcher(value));
                  };
                }

              },
              $size: {
                // {a: [[5, 5]]} must match {a: {$size: 1}} but not {a: {$size: 2}}, so we
                // don't want to consider the element [5,5] in the leaf array [[5,5]] as a
                // possible value.
                dontExpandLeafArrays: true,

                compileElementSelector(operand) {
                  if (typeof operand === 'string') {
                    // Don't ask me why, but by experimentation, this seems to be what Mongo
                    // does.
                    operand = 0;
                  } else if (typeof operand !== 'number') {
                    throw Error('$size needs a number');
                  }

                  return value => Array.isArray(value) && value.length === operand;
                }

              },
              $type: {
                // {a: [5]} must not match {a: {$type: 4}} (4 means array), but it should
                // match {a: {$type: 1}} (1 means number), and {a: [[5]]} must match {$a:
                // {$type: 4}}. Thus, when we see a leaf array, we *should* expand it but
                // should *not* include it itself.
                dontIncludeLeafArrays: true,

                compileElementSelector(operand) {
                  if (typeof operand === 'string') {
                    const operandAliasMap = {
                      'double': 1,
                      'string': 2,
                      'object': 3,
                      'array': 4,
                      'binData': 5,
                      'undefined': 6,
                      'objectId': 7,
                      'bool': 8,
                      'date': 9,
                      'null': 10,
                      'regex': 11,
                      'dbPointer': 12,
                      'javascript': 13,
                      'symbol': 14,
                      'javascriptWithScope': 15,
                      'int': 16,
                      'timestamp': 17,
                      'long': 18,
                      'decimal': 19,
                      'minKey': -1,
                      'maxKey': 127
                    };

                    if (!hasOwn.call(operandAliasMap, operand)) {
                      throw Error("unknown string alias for $type: ".concat(operand));
                    }

                    operand = operandAliasMap[operand];
                  } else if (typeof operand === 'number') {
                    if (operand === 0 || operand < -1 || operand > 19 && operand !== 127) {
                      throw Error("Invalid numerical $type code: ".concat(operand));
                    }
                  } else {
                    throw Error('argument to $type is not a number or a string');
                  }

                  return value => value !== undefined && LocalCollection._f._type(value) === operand;
                }

              },
              $bitsAllSet: {
                compileElementSelector(operand) {
                  const mask = getOperandBitmask(operand, '$bitsAllSet');
                  return value => {
                    const bitmask = getValueBitmask(value, mask.length);
                    return bitmask && mask.every((byte, i) => (bitmask[i] & byte) === byte);
                  };
                }

              },
              $bitsAnySet: {
                compileElementSelector(operand) {
                  const mask = getOperandBitmask(operand, '$bitsAnySet');
                  return value => {
                    const bitmask = getValueBitmask(value, mask.length);
                    return bitmask && mask.some((byte, i) => (~bitmask[i] & byte) !== byte);
                  };
                }

              },
              $bitsAllClear: {
                compileElementSelector(operand) {
                  const mask = getOperandBitmask(operand, '$bitsAllClear');
                  return value => {
                    const bitmask = getValueBitmask(value, mask.length);
                    return bitmask && mask.every((byte, i) => !(bitmask[i] & byte));
                  };
                }

              },
              $bitsAnyClear: {
                compileElementSelector(operand) {
                  const mask = getOperandBitmask(operand, '$bitsAnyClear');
                  return value => {
                    const bitmask = getValueBitmask(value, mask.length);
                    return bitmask && mask.some((byte, i) => (bitmask[i] & byte) !== byte);
                  };
                }

              },
              $regex: {
                compileElementSelector(operand, valueSelector) {
                  if (!(typeof operand === 'string' || operand instanceof RegExp)) {
                    throw Error('$regex has to be a string or RegExp');
                  }

                  let regexp;

                  if (valueSelector.$options !== undefined) {
                    // Options passed in $options (even the empty string) always overrides
                    // options in the RegExp object itself.
                    // Be clear that we only support the JS-supported options, not extended
                    // ones (eg, Mongo supports x and s). Ideally we would implement x and s
                    // by transforming the regexp, but not today...
                    if (/[^gim]/.test(valueSelector.$options)) {
                      throw new Error('Only the i, m, and g regexp options are supported');
                    }

                    const source = operand instanceof RegExp ? operand.source : operand;
                    regexp = new RegExp(source, valueSelector.$options);
                  } else if (operand instanceof RegExp) {
                    regexp = operand;
                  } else {
                    regexp = new RegExp(operand);
                  }

                  return regexpElementMatcher(regexp);
                }

              },
              $elemMatch: {
                dontExpandLeafArrays: true,

                compileElementSelector(operand, valueSelector, matcher) {
                  if (!LocalCollection._isPlainObject(operand)) {
                    throw Error('$elemMatch need an object');
                  }

                  const isDocMatcher = !isOperatorObject(Object.keys(operand).filter(key => !hasOwn.call(LOGICAL_OPERATORS, key)).reduce((a, b) => Object.assign(a, {
                    [b]: operand[b]
                  }), {}), true);
                  let subMatcher;

                  if (isDocMatcher) {
                    // This is NOT the same as compileValueSelector(operand), and not just
                    // because of the slightly different calling convention.
                    // {$elemMatch: {x: 3}} means "an element has a field x:3", not
                    // "consists only of a field x:3". Also, regexps and sub-$ are allowed.
                    subMatcher = compileDocumentSelector(operand, matcher, {
                      inElemMatch: true
                    });
                  } else {
                    subMatcher = compileValueSelector(operand, matcher);
                  }

                  return value => {
                    if (!Array.isArray(value)) {
                      return false;
                    }

                    for (let i = 0; i < value.length; ++i) {
                      const arrayElement = value[i];
                      let arg;

                      if (isDocMatcher) {
                        // We can only match {$elemMatch: {b: 3}} against objects.
                        // (We can also match against arrays, if there's numeric indices,
                        // eg {$elemMatch: {'0.b': 3}} or {$elemMatch: {0: 3}}.)
                        if (!isIndexable(arrayElement)) {
                          return false;
                        }

                        arg = arrayElement;
                      } else {
                        // dontIterate ensures that {a: {$elemMatch: {$gt: 5}}} matches
                        // {a: [8]} but not {a: [[8]]}
                        arg = [{
                          value: arrayElement,
                          dontIterate: true
                        }];
                      } // XXX support $near in $elemMatch by propagating $distance?


                      if (subMatcher(arg).result) {
                        return i; // specially understood to mean "use as arrayIndices"
                      }
                    }

                    return false;
                  };
                }

              }
            };
            // Operators that appear at the top level of a document selector.
            const LOGICAL_OPERATORS = {
              $and(subSelector, matcher, inElemMatch) {
                return andDocumentMatchers(compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch));
              },

              $or(subSelector, matcher, inElemMatch) {
                const matchers = compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch); // Special case: if there is only one matcher, use it directly, *preserving*
                // any arrayIndices it returns.

                if (matchers.length === 1) {
                  return matchers[0];
                }

                return doc => {
                  const result = matchers.some(fn => fn(doc).result); // $or does NOT set arrayIndices when it has multiple
                  // sub-expressions. (Tested against MongoDB.)

                  return {
                    result
                  };
                };
              },

              $nor(subSelector, matcher, inElemMatch) {
                const matchers = compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch);
                return doc => {
                  const result = matchers.every(fn => !fn(doc).result); // Never set arrayIndices, because we only match if nothing in particular
                  // 'matched' (and because this is consistent with MongoDB).

                  return {
                    result
                  };
                };
              },

              $where(selectorValue, matcher) {
                // Record that *any* path may be used.
                matcher._recordPathUsed('');

                matcher._hasWhere = true;

                if (!(selectorValue instanceof Function)) {
                  // XXX MongoDB seems to have more complex logic to decide where or or not
                  // to add 'return'; not sure exactly what it is.
                  selectorValue = Function('obj', "return ".concat(selectorValue));
                } // We make the document available as both `this` and `obj`.
                // // XXX not sure what we should do if this throws


                return doc => ({
                  result: selectorValue.call(doc, doc)
                });
              },

              // This is just used as a comment in the query (in MongoDB, it also ends up in
              // query logs); it has no effect on the actual selection.
              $comment() {
                return () => ({
                  result: true
                });
              }

            }; // Operators that (unlike LOGICAL_OPERATORS) pertain to individual paths in a
            // document, but (unlike ELEMENT_OPERATORS) do not have a simple definition as
            // "match each branched value independently and combine with
            // convertElementMatcherToBranchedMatcher".

            const VALUE_OPERATORS = {
              $eq(operand) {
                return convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand));
              },

              $not(operand, valueSelector, matcher) {
                return invertBranchedMatcher(compileValueSelector(operand, matcher));
              },

              $ne(operand) {
                return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand)));
              },

              $nin(operand) {
                return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(ELEMENT_OPERATORS.$in.compileElementSelector(operand)));
              },

              $exists(operand) {
                const exists = convertElementMatcherToBranchedMatcher(value => value !== undefined);
                return operand ? exists : invertBranchedMatcher(exists);
              },

              // $options just provides options for $regex; its logic is inside $regex
              $options(operand, valueSelector) {
                if (!hasOwn.call(valueSelector, '$regex')) {
                  throw Error('$options needs a $regex');
                }

                return everythingMatcher;
              },

              // $maxDistance is basically an argument to $near
              $maxDistance(operand, valueSelector) {
                if (!valueSelector.$near) {
                  throw Error('$maxDistance needs a $near');
                }

                return everythingMatcher;
              },

              $all(operand, valueSelector, matcher) {
                if (!Array.isArray(operand)) {
                  throw Error('$all requires array');
                } // Not sure why, but this seems to be what MongoDB does.


                if (operand.length === 0) {
                  return nothingMatcher;
                }

                const branchedMatchers = operand.map(criterion => {
                  // XXX handle $all/$elemMatch combination
                  if (isOperatorObject(criterion)) {
                    throw Error('no $ expressions in $all');
                  } // This is always a regexp or equality selector.


                  return compileValueSelector(criterion, matcher);
                }); // andBranchedMatchers does NOT require all selectors to return true on the
                // SAME branch.

                return andBranchedMatchers(branchedMatchers);
              },

              $near(operand, valueSelector, matcher, isRoot) {
                if (!isRoot) {
                  throw Error('$near can\'t be inside another $ operator');
                }

                matcher._hasGeoQuery = true; // There are two kinds of geodata in MongoDB: legacy coordinate pairs and
                // GeoJSON. They use different distance metrics, too. GeoJSON queries are
                // marked with a $geometry property, though legacy coordinates can be
                // matched using $geometry.

                let maxDistance, point, distance;

                if (LocalCollection._isPlainObject(operand) && hasOwn.call(operand, '$geometry')) {
                  // GeoJSON "2dsphere" mode.
                  maxDistance = operand.$maxDistance;
                  point = operand.$geometry;

                  distance = value => {
                    // XXX: for now, we don't calculate the actual distance between, say,
                    // polygon and circle. If people care about this use-case it will get
                    // a priority.
                    if (!value) {
                      return null;
                    }

                    if (!value.type) {
                      return GeoJSON.pointDistance(point, {
                        type: 'Point',
                        coordinates: pointToArray(value)
                      });
                    }

                    if (value.type === 'Point') {
                      return GeoJSON.pointDistance(point, value);
                    }

                    return GeoJSON.geometryWithinRadius(value, point, maxDistance) ? 0 : maxDistance + 1;
                  };
                } else {
                  maxDistance = valueSelector.$maxDistance;

                  if (!isIndexable(operand)) {
                    throw Error('$near argument must be coordinate pair or GeoJSON');
                  }

                  point = pointToArray(operand);

                  distance = value => {
                    if (!isIndexable(value)) {
                      return null;
                    }

                    return distanceCoordinatePairs(point, value);
                  };
                }

                return branchedValues => {
                  // There might be multiple points in the document that match the given
                  // field. Only one of them needs to be within $maxDistance, but we need to
                  // evaluate all of them and use the nearest one for the implicit sort
                  // specifier. (That's why we can't just use ELEMENT_OPERATORS here.)
                  //
                  // Note: This differs from MongoDB's implementation, where a document will
                  // actually show up *multiple times* in the result set, with one entry for
                  // each within-$maxDistance branching point.
                  const result = {
                    result: false
                  };
                  expandArraysInBranches(branchedValues).every(branch => {
                    // if operation is an update, don't skip branches, just return the first
                    // one (#3599)
                    let curDistance;

                    if (!matcher._isUpdate) {
                      if (!(typeof branch.value === 'object')) {
                        return true;
                      }

                      curDistance = distance(branch.value); // Skip branches that aren't real points or are too far away.

                      if (curDistance === null || curDistance > maxDistance) {
                        return true;
                      } // Skip anything that's a tie.


                      if (result.distance !== undefined && result.distance <= curDistance) {
                        return true;
                      }
                    }

                    result.result = true;
                    result.distance = curDistance;

                    if (branch.arrayIndices) {
                      result.arrayIndices = branch.arrayIndices;
                    } else {
                      delete result.arrayIndices;
                    }

                    return !matcher._isUpdate;
                  });
                  return result;
                };
              }

            }; // NB: We are cheating and using this function to implement 'AND' for both
            // 'document matchers' and 'branched matchers'. They both return result objects
            // but the argument is different: for the former it's a whole doc, whereas for
            // the latter it's an array of 'branched values'.

            function andSomeMatchers(subMatchers) {
              if (subMatchers.length === 0) {
                return everythingMatcher;
              }

              if (subMatchers.length === 1) {
                return subMatchers[0];
              }

              return docOrBranches => {
                const match = {};
                match.result = subMatchers.every(fn => {
                  const subResult = fn(docOrBranches); // Copy a 'distance' number out of the first sub-matcher that has
                  // one. Yes, this means that if there are multiple $near fields in a
                  // query, something arbitrary happens; this appears to be consistent with
                  // Mongo.

                  if (subResult.result && subResult.distance !== undefined && match.distance === undefined) {
                    match.distance = subResult.distance;
                  } // Similarly, propagate arrayIndices from sub-matchers... but to match
                  // MongoDB behavior, this time the *last* sub-matcher with arrayIndices
                  // wins.


                  if (subResult.result && subResult.arrayIndices) {
                    match.arrayIndices = subResult.arrayIndices;
                  }

                  return subResult.result;
                }); // If we didn't actually match, forget any extra metadata we came up with.

                if (!match.result) {
                  delete match.distance;
                  delete match.arrayIndices;
                }

                return match;
              };
            }

            const andDocumentMatchers = andSomeMatchers;
            const andBranchedMatchers = andSomeMatchers;

            function compileArrayOfDocumentSelectors(selectors, matcher, inElemMatch) {
              if (!Array.isArray(selectors) || selectors.length === 0) {
                throw Error('$and/$or/$nor must be nonempty array');
              }

              return selectors.map(subSelector => {
                if (!LocalCollection._isPlainObject(subSelector)) {
                  throw Error('$or/$and/$nor entries need to be full objects');
                }

                return compileDocumentSelector(subSelector, matcher, {
                  inElemMatch
                });
              });
            } // Takes in a selector that could match a full document (eg, the original
            // selector). Returns a function mapping document->result object.
            //
            // matcher is the Matcher object we are compiling.
            //
            // If this is the root document selector (ie, not wrapped in $and or the like),
            // then isRoot is true. (This is used by $near.)


            function compileDocumentSelector(docSelector, matcher) {
              let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
              const docMatchers = Object.keys(docSelector).map(key => {
                const subSelector = docSelector[key];

                if (key.substr(0, 1) === '$') {
                  // Outer operators are either logical operators (they recurse back into
                  // this function), or $where.
                  if (!hasOwn.call(LOGICAL_OPERATORS, key)) {
                    throw new Error("Unrecognized logical operator: ".concat(key));
                  }

                  matcher._isSimple = false;
                  return LOGICAL_OPERATORS[key](subSelector, matcher, options.inElemMatch);
                } // Record this path, but only if we aren't in an elemMatcher, since in an
                // elemMatch this is a path inside an object in an array, not in the doc
                // root.


                if (!options.inElemMatch) {
                  matcher._recordPathUsed(key);
                } // Don't add a matcher if subSelector is a function -- this is to match
                // the behavior of Meteor on the server (inherited from the node mongodb
                // driver), which is to ignore any part of a selector which is a function.


                if (typeof subSelector === 'function') {
                  return undefined;
                }

                const lookUpByIndex = makeLookupFunction(key);
                const valueMatcher = compileValueSelector(subSelector, matcher, options.isRoot);
                return doc => valueMatcher(lookUpByIndex(doc));
              }).filter(Boolean);
              return andDocumentMatchers(docMatchers);
            }

            // Takes in a selector that could match a key-indexed value in a document; eg,
            // {$gt: 5, $lt: 9}, or a regular expression, or any non-expression object (to
            // indicate equality).  Returns a branched matcher: a function mapping
            // [branched value]->result object.
            function compileValueSelector(valueSelector, matcher, isRoot) {
              if (valueSelector instanceof RegExp) {
                matcher._isSimple = false;
                return convertElementMatcherToBranchedMatcher(regexpElementMatcher(valueSelector));
              }

              if (isOperatorObject(valueSelector)) {
                return operatorBranchedMatcher(valueSelector, matcher, isRoot);
              }

              return convertElementMatcherToBranchedMatcher(equalityElementMatcher(valueSelector));
            } // Given an element matcher (which evaluates a single value), returns a branched
            // value (which evaluates the element matcher on all the branches and returns a
            // more structured return value possibly including arrayIndices).


            function convertElementMatcherToBranchedMatcher(elementMatcher) {
              let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
              return branches => {
                const expanded = options.dontExpandLeafArrays ? branches : expandArraysInBranches(branches, options.dontIncludeLeafArrays);
                const match = {};
                match.result = expanded.some(element => {
                  let matched = elementMatcher(element.value); // Special case for $elemMatch: it means "true, and use this as an array
                  // index if I didn't already have one".

                  if (typeof matched === 'number') {
                    // XXX This code dates from when we only stored a single array index
                    // (for the outermost array). Should we be also including deeper array
                    // indices from the $elemMatch match?
                    if (!element.arrayIndices) {
                      element.arrayIndices = [matched];
                    }

                    matched = true;
                  } // If some element matched, and it's tagged with array indices, include
                  // those indices in our result object.


                  if (matched && element.arrayIndices) {
                    match.arrayIndices = element.arrayIndices;
                  }

                  return matched;
                });
                return match;
              };
            } // Helpers for $near.


            function distanceCoordinatePairs(a, b) {
              const pointA = pointToArray(a);
              const pointB = pointToArray(b);
              return Math.hypot(pointA[0] - pointB[0], pointA[1] - pointB[1]);
            } // Takes something that is not an operator object and returns an element matcher
            // for equality with that thing.


            function equalityElementMatcher(elementSelector) {
              if (isOperatorObject(elementSelector)) {
                throw Error('Can\'t create equalityValueSelector for operator object');
              } // Special-case: null and undefined are equal (if you got undefined in there
              // somewhere, or if you got it due to some branch being non-existent in the
              // weird special case), even though they aren't with EJSON.equals.
              // undefined or null


              if (elementSelector == null) {
                return value => value == null;
              }

              return value => LocalCollection._f._equal(elementSelector, value);
            }

            function everythingMatcher(docOrBranchedValues) {
              return {
                result: true
              };
            }

            function expandArraysInBranches(branches, skipTheArrays) {
              const branchesOut = [];
              branches.forEach(branch => {
                const thisIsArray = Array.isArray(branch.value); // We include the branch itself, *UNLESS* we it's an array that we're going
                // to iterate and we're told to skip arrays.  (That's right, we include some
                // arrays even skipTheArrays is true: these are arrays that were found via
                // explicit numerical indices.)

                if (!(skipTheArrays && thisIsArray && !branch.dontIterate)) {
                  branchesOut.push({
                    arrayIndices: branch.arrayIndices,
                    value: branch.value
                  });
                }

                if (thisIsArray && !branch.dontIterate) {
                  branch.value.forEach((value, i) => {
                    branchesOut.push({
                      arrayIndices: (branch.arrayIndices || []).concat(i),
                      value
                    });
                  });
                }
              });
              return branchesOut;
            }

            // Helpers for $bitsAllSet/$bitsAnySet/$bitsAllClear/$bitsAnyClear.
            function getOperandBitmask(operand, selector) {
              // numeric bitmask
              // You can provide a numeric bitmask to be matched against the operand field.
              // It must be representable as a non-negative 32-bit signed integer.
              // Otherwise, $bitsAllSet will return an error.
              if (Number.isInteger(operand) && operand >= 0) {
                return new Uint8Array(new Int32Array([operand]).buffer);
              } // bindata bitmask
              // You can also use an arbitrarily large BinData instance as a bitmask.


              if (EJSON.isBinary(operand)) {
                return new Uint8Array(operand.buffer);
              } // position list
              // If querying a list of bit positions, each <position> must be a non-negative
              // integer. Bit positions start at 0 from the least significant bit.


              if (Array.isArray(operand) && operand.every(x => Number.isInteger(x) && x >= 0)) {
                const buffer = new ArrayBuffer((Math.max(...operand) >> 3) + 1);
                const view = new Uint8Array(buffer);
                operand.forEach(x => {
                  view[x >> 3] |= 1 << (x & 0x7);
                });
                return view;
              } // bad operand


              throw Error("operand to ".concat(selector, " must be a numeric bitmask (representable as a ") + 'non-negative 32-bit signed integer), a bindata bitmask or an array with ' + 'bit positions (non-negative integers)');
            }

            function getValueBitmask(value, length) {
              // The field value must be either numerical or a BinData instance. Otherwise,
              // $bits... will not match the current document.
              // numerical
              if (Number.isSafeInteger(value)) {
                // $bits... will not match numerical values that cannot be represented as a
                // signed 64-bit integer. This can be the case if a value is either too
                // large or small to fit in a signed 64-bit integer, or if it has a
                // fractional component.
                const buffer = new ArrayBuffer(Math.max(length, 2 * Uint32Array.BYTES_PER_ELEMENT));
                let view = new Uint32Array(buffer, 0, 2);
                view[0] = value % ((1 << 16) * (1 << 16)) | 0;
                view[1] = value / ((1 << 16) * (1 << 16)) | 0; // sign extension

                if (value < 0) {
                  view = new Uint8Array(buffer, 2);
                  view.forEach((byte, i) => {
                    view[i] = 0xff;
                  });
                }

                return new Uint8Array(buffer);
              } // bindata


              if (EJSON.isBinary(value)) {
                return new Uint8Array(value.buffer);
              } // no match


              return false;
            } // Actually inserts a key value into the selector document
            // However, this checks there is no ambiguity in setting
            // the value for the given key, throws otherwise


            function insertIntoDocument(document, key, value) {
              Object.keys(document).forEach(existingKey => {
                if (existingKey.length > key.length && existingKey.indexOf("".concat(key, ".")) === 0 || key.length > existingKey.length && key.indexOf("".concat(existingKey, ".")) === 0) {
                  throw new Error("cannot infer query fields to set, both paths '".concat(existingKey, "' and ") + "'".concat(key, "' are matched"));
                } else if (existingKey === key) {
                  throw new Error("cannot infer query fields to set, path '".concat(key, "' is matched twice"));
                }
              });
              document[key] = value;
            } // Returns a branched matcher that matches iff the given matcher does not.
            // Note that this implicitly "deMorganizes" the wrapped function.  ie, it
            // means that ALL branch values need to fail to match innerBranchedMatcher.


            function invertBranchedMatcher(branchedMatcher) {
              return branchValues => {
                // We explicitly choose to strip arrayIndices here: it doesn't make sense to
                // say "update the array element that does not match something", at least
                // in mongo-land.
                return {
                  result: !branchedMatcher(branchValues).result
                };
              };
            }

            function isIndexable(obj) {
              return Array.isArray(obj) || LocalCollection._isPlainObject(obj);
            }

            function isNumericKey(s) {
              return (/^[0-9]+$/.test(s)
              );
            }

            function isOperatorObject(valueSelector, inconsistentOK) {
              if (!LocalCollection._isPlainObject(valueSelector)) {
                return false;
              }

              let theseAreOperators = undefined;
              Object.keys(valueSelector).forEach(selKey => {
                const thisIsOperator = selKey.substr(0, 1) === '$';

                if (theseAreOperators === undefined) {
                  theseAreOperators = thisIsOperator;
                } else if (theseAreOperators !== thisIsOperator) {
                  if (!inconsistentOK) {
                    throw new Error("Inconsistent operator: ".concat(JSON.stringify(valueSelector)));
                  }

                  theseAreOperators = false;
                }
              });
              return !!theseAreOperators; // {} has no operators
            }

            // Helper for $lt/$gt/$lte/$gte.
            function makeInequality(cmpValueComparator) {
              return {
                compileElementSelector(operand) {
                  // Arrays never compare false with non-arrays for any inequality.
                  // XXX This was behavior we observed in pre-release MongoDB 2.5, but
                  //     it seems to have been reverted.
                  //     See https://jira.mongodb.org/browse/SERVER-11444
                  if (Array.isArray(operand)) {
                    return () => false;
                  } // Special case: consider undefined and null the same (so true with
                  // $gte/$lte).


                  if (operand === undefined) {
                    operand = null;
                  }

                  const operandType = LocalCollection._f._type(operand);

                  return value => {
                    if (value === undefined) {
                      value = null;
                    } // Comparisons are never true among things of different type (except
                    // null vs undefined).


                    if (LocalCollection._f._type(value) !== operandType) {
                      return false;
                    }

                    return cmpValueComparator(LocalCollection._f._cmp(value, operand));
                  };
                }

              };
            } // makeLookupFunction(key) returns a lookup function.
            //
            // A lookup function takes in a document and returns an array of matching
            // branches.  If no arrays are found while looking up the key, this array will
            // have exactly one branches (possibly 'undefined', if some segment of the key
            // was not found).
            //
            // If arrays are found in the middle, this can have more than one element, since
            // we 'branch'. When we 'branch', if there are more key segments to look up,
            // then we only pursue branches that are plain objects (not arrays or scalars).
            // This means we can actually end up with no branches!
            //
            // We do *NOT* branch on arrays that are found at the end (ie, at the last
            // dotted member of the key). We just return that array; if you want to
            // effectively 'branch' over the array's values, post-process the lookup
            // function with expandArraysInBranches.
            //
            // Each branch is an object with keys:
            //  - value: the value at the branch
            //  - dontIterate: an optional bool; if true, it means that 'value' is an array
            //    that expandArraysInBranches should NOT expand. This specifically happens
            //    when there is a numeric index in the key, and ensures the
            //    perhaps-surprising MongoDB behavior where {'a.0': 5} does NOT
            //    match {a: [[5]]}.
            //  - arrayIndices: if any array indexing was done during lookup (either due to
            //    explicit numeric indices or implicit branching), this will be an array of
            //    the array indices used, from outermost to innermost; it is falsey or
            //    absent if no array index is used. If an explicit numeric index is used,
            //    the index will be followed in arrayIndices by the string 'x'.
            //
            //    Note: arrayIndices is used for two purposes. First, it is used to
            //    implement the '$' modifier feature, which only ever looks at its first
            //    element.
            //
            //    Second, it is used for sort key generation, which needs to be able to tell
            //    the difference between different paths. Moreover, it needs to
            //    differentiate between explicit and implicit branching, which is why
            //    there's the somewhat hacky 'x' entry: this means that explicit and
            //    implicit array lookups will have different full arrayIndices paths. (That
            //    code only requires that different paths have different arrayIndices; it
            //    doesn't actually 'parse' arrayIndices. As an alternative, arrayIndices
            //    could contain objects with flags like 'implicit', but I think that only
            //    makes the code surrounding them more complex.)
            //
            //    (By the way, this field ends up getting passed around a lot without
            //    cloning, so never mutate any arrayIndices field/var in this package!)
            //
            //
            // At the top level, you may only pass in a plain object or array.
            //
            // See the test 'minimongo - lookup' for some examples of what lookup functions
            // return.


            function makeLookupFunction(key) {
              let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
              const parts = key.split('.');
              const firstPart = parts.length ? parts[0] : '';
              const lookupRest = parts.length > 1 && makeLookupFunction(parts.slice(1).join('.'), options);

              const omitUnnecessaryFields = result => {
                if (!result.dontIterate) {
                  delete result.dontIterate;
                }

                if (result.arrayIndices && !result.arrayIndices.length) {
                  delete result.arrayIndices;
                }

                return result;
              }; // Doc will always be a plain object or an array.
              // apply an explicit numeric index, an array.


              return function (doc) {
                let arrayIndices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

                if (Array.isArray(doc)) {
                  // If we're being asked to do an invalid lookup into an array (non-integer
                  // or out-of-bounds), return no results (which is different from returning
                  // a single undefined result, in that `null` equality checks won't match).
                  if (!(isNumericKey(firstPart) && firstPart < doc.length)) {
                    return [];
                  } // Remember that we used this array index. Include an 'x' to indicate that
                  // the previous index came from being considered as an explicit array
                  // index (not branching).


                  arrayIndices = arrayIndices.concat(+firstPart, 'x');
                } // Do our first lookup.


                const firstLevel = doc[firstPart]; // If there is no deeper to dig, return what we found.
                //
                // If what we found is an array, most value selectors will choose to treat
                // the elements of the array as matchable values in their own right, but
                // that's done outside of the lookup function. (Exceptions to this are $size
                // and stuff relating to $elemMatch.  eg, {a: {$size: 2}} does not match {a:
                // [[1, 2]]}.)
                //
                // That said, if we just did an *explicit* array lookup (on doc) to find
                // firstLevel, and firstLevel is an array too, we do NOT want value
                // selectors to iterate over it.  eg, {'a.0': 5} does not match {a: [[5]]}.
                // So in that case, we mark the return value as 'don't iterate'.

                if (!lookupRest) {
                  return [omitUnnecessaryFields({
                    arrayIndices,
                    dontIterate: Array.isArray(doc) && Array.isArray(firstLevel),
                    value: firstLevel
                  })];
                } // We need to dig deeper.  But if we can't, because what we've found is not
                // an array or plain object, we're done. If we just did a numeric index into
                // an array, we return nothing here (this is a change in Mongo 2.5 from
                // Mongo 2.4, where {'a.0.b': null} stopped matching {a: [5]}). Otherwise,
                // return a single `undefined` (which can, for example, match via equality
                // with `null`).


                if (!isIndexable(firstLevel)) {
                  if (Array.isArray(doc)) {
                    return [];
                  }

                  return [omitUnnecessaryFields({
                    arrayIndices,
                    value: undefined
                  })];
                }

                const result = [];

                const appendToResult = more => {
                  result.push(...more);
                }; // Dig deeper: look up the rest of the parts on whatever we've found.
                // (lookupRest is smart enough to not try to do invalid lookups into
                // firstLevel if it's an array.)


                appendToResult(lookupRest(firstLevel, arrayIndices)); // If we found an array, then in *addition* to potentially treating the next
                // part as a literal integer lookup, we should also 'branch': try to look up
                // the rest of the parts on each array element in parallel.
                //
                // In this case, we *only* dig deeper into array elements that are plain
                // objects. (Recall that we only got this far if we have further to dig.)
                // This makes sense: we certainly don't dig deeper into non-indexable
                // objects. And it would be weird to dig into an array: it's simpler to have
                // a rule that explicit integer indexes only apply to an outer array, not to
                // an array you find after a branching search.
                //
                // In the special case of a numeric part in a *sort selector* (not a query
                // selector), we skip the branching: we ONLY allow the numeric part to mean
                // 'look up this index' in that case, not 'also look up this index in all
                // the elements of the array'.

                if (Array.isArray(firstLevel) && !(isNumericKey(parts[1]) && options.forSort)) {
                  firstLevel.forEach((branch, arrayIndex) => {
                    if (LocalCollection._isPlainObject(branch)) {
                      appendToResult(lookupRest(branch, arrayIndices.concat(arrayIndex)));
                    }
                  });
                }

                return result;
              };
            }

            // Object exported only for unit testing.
            // Use it to export private functions to test in Tinytest.
            MinimongoTest = {
              makeLookupFunction
            };

            MinimongoError = function (message) {
              let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

              if (typeof message === 'string' && options.field) {
                message += " for field '".concat(options.field, "'");
              }

              const error = new Error(message);
              error.name = 'MinimongoError';
              return error;
            };

            function nothingMatcher(docOrBranchedValues) {
              return {
                result: false
              };
            }

            // Takes an operator object (an object with $ keys) and returns a branched
            // matcher for it.
            function operatorBranchedMatcher(valueSelector, matcher, isRoot) {
              // Each valueSelector works separately on the various branches.  So one
              // operator can match one branch and another can match another branch.  This
              // is OK.
              const operatorMatchers = Object.keys(valueSelector).map(operator => {
                const operand = valueSelector[operator];
                const simpleRange = ['$lt', '$lte', '$gt', '$gte'].includes(operator) && typeof operand === 'number';
                const simpleEquality = ['$ne', '$eq'].includes(operator) && operand !== Object(operand);
                const simpleInclusion = ['$in', '$nin'].includes(operator) && Array.isArray(operand) && !operand.some(x => x === Object(x));

                if (!(simpleRange || simpleInclusion || simpleEquality)) {
                  matcher._isSimple = false;
                }

                if (hasOwn.call(VALUE_OPERATORS, operator)) {
                  return VALUE_OPERATORS[operator](operand, valueSelector, matcher, isRoot);
                }

                if (hasOwn.call(ELEMENT_OPERATORS, operator)) {
                  const options = ELEMENT_OPERATORS[operator];
                  return convertElementMatcherToBranchedMatcher(options.compileElementSelector(operand, valueSelector, matcher), options);
                }

                throw new Error("Unrecognized operator: ".concat(operator));
              });
              return andBranchedMatchers(operatorMatchers);
            } // paths - Array: list of mongo style paths
            // newLeafFn - Function: of form function(path) should return a scalar value to
            //                       put into list created for that path
            // conflictFn - Function: of form function(node, path, fullPath) is called
            //                        when building a tree path for 'fullPath' node on
            //                        'path' was already a leaf with a value. Must return a
            //                        conflict resolution.
            // initial tree - Optional Object: starting tree.
            // @returns - Object: tree represented as a set of nested objects


            function pathsToTree(paths, newLeafFn, conflictFn) {
              let root = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
              paths.forEach(path => {
                const pathArray = path.split('.');
                let tree = root; // use .every just for iteration with break

                const success = pathArray.slice(0, -1).every((key, i) => {
                  if (!hasOwn.call(tree, key)) {
                    tree[key] = {};
                  } else if (tree[key] !== Object(tree[key])) {
                    tree[key] = conflictFn(tree[key], pathArray.slice(0, i + 1).join('.'), path); // break out of loop if we are failing for this path

                    if (tree[key] !== Object(tree[key])) {
                      return false;
                    }
                  }

                  tree = tree[key];
                  return true;
                });

                if (success) {
                  const lastKey = pathArray[pathArray.length - 1];

                  if (hasOwn.call(tree, lastKey)) {
                    tree[lastKey] = conflictFn(tree[lastKey], path, path);
                  } else {
                    tree[lastKey] = newLeafFn(path);
                  }
                }
              });
              return root;
            }

            // Makes sure we get 2 elements array and assume the first one to be x and
            // the second one to y no matter what user passes.
            // In case user passes { lon: x, lat: y } returns [x, y]
            function pointToArray(point) {
              return Array.isArray(point) ? point.slice() : [point.x, point.y];
            } // Creating a document from an upsert is quite tricky.
            // E.g. this selector: {"$or": [{"b.foo": {"$all": ["bar"]}}]}, should result
            // in: {"b.foo": "bar"}
            // But this selector: {"$or": [{"b": {"foo": {"$all": ["bar"]}}}]} should throw
            // an error
            // Some rules (found mainly with trial & error, so there might be more):
            // - handle all childs of $and (or implicit $and)
            // - handle $or nodes with exactly 1 child
            // - ignore $or nodes with more than 1 child
            // - ignore $nor and $not nodes
            // - throw when a value can not be set unambiguously
            // - every value for $all should be dealt with as separate $eq-s
            // - threat all children of $all as $eq setters (=> set if $all.length === 1,
            //   otherwise throw error)
            // - you can not mix '$'-prefixed keys and non-'$'-prefixed keys
            // - you can only have dotted keys on a root-level
            // - you can not have '$'-prefixed keys more than one-level deep in an object
            // Handles one key/value pair to put in the selector document


            function populateDocumentWithKeyValue(document, key, value) {
              if (value && Object.getPrototypeOf(value) === Object.prototype) {
                populateDocumentWithObject(document, key, value);
              } else if (!(value instanceof RegExp)) {
                insertIntoDocument(document, key, value);
              }
            } // Handles a key, value pair to put in the selector document
            // if the value is an object


            function populateDocumentWithObject(document, key, value) {
              const keys = Object.keys(value);
              const unprefixedKeys = keys.filter(op => op[0] !== '$');

              if (unprefixedKeys.length > 0 || !keys.length) {
                // Literal (possibly empty) object ( or empty object )
                // Don't allow mixing '$'-prefixed with non-'$'-prefixed fields
                if (keys.length !== unprefixedKeys.length) {
                  throw new Error("unknown operator: ".concat(unprefixedKeys[0]));
                }

                validateObject(value, key);
                insertIntoDocument(document, key, value);
              } else {
                Object.keys(value).forEach(op => {
                  const object = value[op];

                  if (op === '$eq') {
                    populateDocumentWithKeyValue(document, key, object);
                  } else if (op === '$all') {
                    // every value for $all should be dealt with as separate $eq-s
                    object.forEach(element => populateDocumentWithKeyValue(document, key, element));
                  }
                });
              }
            } // Fills a document with certain fields from an upsert selector


            function populateDocumentWithQueryFields(query) {
              let document = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

              if (Object.getPrototypeOf(query) === Object.prototype) {
                // handle implicit $and
                Object.keys(query).forEach(key => {
                  const value = query[key];

                  if (key === '$and') {
                    // handle explicit $and
                    value.forEach(element => populateDocumentWithQueryFields(element, document));
                  } else if (key === '$or') {
                    // handle $or nodes with exactly 1 child
                    if (value.length === 1) {
                      populateDocumentWithQueryFields(value[0], document);
                    }
                  } else if (key[0] !== '$') {
                    // Ignore other '$'-prefixed logical selectors
                    populateDocumentWithKeyValue(document, key, value);
                  }
                });
              } else {
                // Handle meteor-specific shortcut for selecting _id
                if (LocalCollection._selectorIsId(query)) {
                  insertIntoDocument(document, '_id', query);
                }
              }

              return document;
            }

            function projectionDetails(fields) {
              // Find the non-_id keys (_id is handled specially because it is included
              // unless explicitly excluded). Sort the keys, so that our code to detect
              // overlaps like 'foo' and 'foo.bar' can assume that 'foo' comes first.
              let fieldsKeys = Object.keys(fields).sort(); // If _id is the only field in the projection, do not remove it, since it is
              // required to determine if this is an exclusion or exclusion. Also keep an
              // inclusive _id, since inclusive _id follows the normal rules about mixing
              // inclusive and exclusive fields. If _id is not the only field in the
              // projection and is exclusive, remove it so it can be handled later by a
              // special case, since exclusive _id is always allowed.

              if (!(fieldsKeys.length === 1 && fieldsKeys[0] === '_id') && !(fieldsKeys.includes('_id') && fields._id)) {
                fieldsKeys = fieldsKeys.filter(key => key !== '_id');
              }

              let including = null; // Unknown

              fieldsKeys.forEach(keyPath => {
                const rule = !!fields[keyPath];

                if (including === null) {
                  including = rule;
                } // This error message is copied from MongoDB shell


                if (including !== rule) {
                  throw MinimongoError('You cannot currently mix including and excluding fields.');
                }
              });
              const projectionRulesTree = pathsToTree(fieldsKeys, path => including, (node, path, fullPath) => {
                // Check passed projection fields' keys: If you have two rules such as
                // 'foo.bar' and 'foo.bar.baz', then the result becomes ambiguous. If
                // that happens, there is a probability you are doing something wrong,
                // framework should notify you about such mistake earlier on cursor
                // compilation step than later during runtime.  Note, that real mongo
                // doesn't do anything about it and the later rule appears in projection
                // project, more priority it takes.
                //
                // Example, assume following in mongo shell:
                // > db.coll.insert({ a: { b: 23, c: 44 } })
                // > db.coll.find({}, { 'a': 1, 'a.b': 1 })
                // {"_id": ObjectId("520bfe456024608e8ef24af3"), "a": {"b": 23}}
                // > db.coll.find({}, { 'a.b': 1, 'a': 1 })
                // {"_id": ObjectId("520bfe456024608e8ef24af3"), "a": {"b": 23, "c": 44}}
                //
                // Note, how second time the return set of keys is different.
                const currentPath = fullPath;
                const anotherPath = path;
                throw MinimongoError("both ".concat(currentPath, " and ").concat(anotherPath, " found in fields option, ") + 'using both of them may trigger unexpected behavior. Did you mean to ' + 'use only one of them?');
              });
              return {
                including,
                tree: projectionRulesTree
              };
            }

            function regexpElementMatcher(regexp) {
              return value => {
                if (value instanceof RegExp) {
                  return value.toString() === regexp.toString();
                } // Regexps only work against strings.


                if (typeof value !== 'string') {
                  return false;
                } // Reset regexp's state to avoid inconsistent matching for objects with the
                // same value on consecutive calls of regexp.test. This happens only if the
                // regexp has the 'g' flag. Also note that ES6 introduces a new flag 'y' for
                // which we should *not* change the lastIndex but MongoDB doesn't support
                // either of these flags.


                regexp.lastIndex = 0;
                return regexp.test(value);
              };
            }

            // Validates the key in a path.
            // Objects that are nested more then 1 level cannot have dotted fields
            // or fields starting with '$'
            function validateKeyInPath(key, path) {
              if (key.includes('.')) {
                throw new Error("The dotted field '".concat(key, "' in '").concat(path, ".").concat(key, " is not valid for storage."));
              }

              if (key[0] === '$') {
                throw new Error("The dollar ($) prefixed field  '".concat(path, ".").concat(key, " is not valid for storage."));
              }
            } // Recursively validates an object that is nested more than one level deep


            function validateObject(object, path) {
              if (object && Object.getPrototypeOf(object) === Object.prototype) {
                Object.keys(object).forEach(key => {
                  validateKeyInPath(key, path);
                  validateObject(object[key], path + '.' + key);
                });
              }
            }
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "cursor.js": function module(_require4, _exports4, _module3) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/cursor.js                                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module3.export({
              default: () => Cursor
            });
            let LocalCollection;
            _module3.link("./local_collection.js", {
              default(v) {
                LocalCollection = v;
              }

            }, 0);
            let hasOwn;
            _module3.link("./common.js", {
              hasOwn(v) {
                hasOwn = v;
              }

            }, 1);

            class Cursor {
              // don't call this ctor directly.  use LocalCollection.find().
              constructor(collection, selector) {
                let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                this.collection = collection;
                this.sorter = null;
                this.matcher = new Minimongo.Matcher(selector);

                if (LocalCollection._selectorIsIdPerhapsAsObject(selector)) {
                  // stash for fast _id and { _id }
                  this._selectorId = hasOwn.call(selector, '_id') ? selector._id : selector;
                } else {
                  this._selectorId = undefined;

                  if (this.matcher.hasGeoQuery() || options.sort) {
                    this.sorter = new Minimongo.Sorter(options.sort || []);
                  }
                }

                this.skip = options.skip || 0;
                this.limit = options.limit;
                this.fields = options.fields;
                this._projectionFn = LocalCollection._compileProjection(this.fields || {});
                this._transform = LocalCollection.wrapTransform(options.transform); // by default, queries register w/ Tracker when it is available.

                if (typeof Tracker !== 'undefined') {
                  this.reactive = options.reactive === undefined ? true : options.reactive;
                }
              }
              /**
               * @summary Returns the number of documents that match a query.
               * @memberOf Mongo.Cursor
               * @method  count
               * @param {boolean} [applySkipLimit=true] If set to `false`, the value
               *                                         returned will reflect the total
               *                                         number of matching documents,
               *                                         ignoring any value supplied for
               *                                         limit
               * @instance
               * @locus Anywhere
               * @returns {Number}
               */

              count() {
                let applySkipLimit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

                if (this.reactive) {
                  // allow the observe to be unordered
                  this._depend({
                    added: true,
                    removed: true
                  }, true);
                }

                return this._getRawObjects({
                  ordered: true,
                  applySkipLimit
                }).length;
              }
              /**
               * @summary Return all matching documents as an Array.
               * @memberOf Mongo.Cursor
               * @method  fetch
               * @instance
               * @locus Anywhere
               * @returns {Object[]}
               */

              fetch() {
                const result = [];
                this.forEach(doc => {
                  result.push(doc);
                });
                return result;
              }

              [Symbol.iterator]() {
                if (this.reactive) {
                  this._depend({
                    addedBefore: true,
                    removed: true,
                    changed: true,
                    movedBefore: true
                  });
                }

                let index = 0;

                const objects = this._getRawObjects({
                  ordered: true
                });

                return {
                  next: () => {
                    if (index < objects.length) {
                      // This doubles as a clone operation.
                      let element = this._projectionFn(objects[index++]);

                      if (this._transform) element = this._transform(element);
                      return {
                        value: element
                      };
                    }

                    return {
                      done: true
                    };
                  }
                };
              }
              /**
               * @callback IterationCallback
               * @param {Object} doc
               * @param {Number} index
               */

              /**
               * @summary Call `callback` once for each matching document, sequentially and
               *          synchronously.
               * @locus Anywhere
               * @method  forEach
               * @instance
               * @memberOf Mongo.Cursor
               * @param {IterationCallback} callback Function to call. It will be called
               *                                     with three arguments: the document, a
               *                                     0-based index, and <em>cursor</em>
               *                                     itself.
               * @param {Any} [thisArg] An object which will be the value of `this` inside
               *                        `callback`.
               */

              forEach(callback, thisArg) {
                if (this.reactive) {
                  this._depend({
                    addedBefore: true,
                    removed: true,
                    changed: true,
                    movedBefore: true
                  });
                }

                this._getRawObjects({
                  ordered: true
                }).forEach((element, i) => {
                  // This doubles as a clone operation.
                  element = this._projectionFn(element);

                  if (this._transform) {
                    element = this._transform(element);
                  }

                  callback.call(thisArg, element, i, this);
                });
              }

              getTransform() {
                return this._transform;
              }
              /**
               * @summary Map callback over all matching documents.  Returns an Array.
               * @locus Anywhere
               * @method map
               * @instance
               * @memberOf Mongo.Cursor
               * @param {IterationCallback} callback Function to call. It will be called
               *                                     with three arguments: the document, a
               *                                     0-based index, and <em>cursor</em>
               *                                     itself.
               * @param {Any} [thisArg] An object which will be the value of `this` inside
               *                        `callback`.
               */

              map(callback, thisArg) {
                const result = [];
                this.forEach((doc, i) => {
                  result.push(callback.call(thisArg, doc, i, this));
                });
                return result;
              } // options to contain:
              //  * callbacks for observe():
              //    - addedAt (document, atIndex)
              //    - added (document)
              //    - changedAt (newDocument, oldDocument, atIndex)
              //    - changed (newDocument, oldDocument)
              //    - removedAt (document, atIndex)
              //    - removed (document)
              //    - movedTo (document, oldIndex, newIndex)
              //
              // attributes available on returned query handle:
              //  * stop(): end updates
              //  * collection: the collection this query is querying
              //
              // iff x is a returned query handle, (x instanceof
              // LocalCollection.ObserveHandle) is true
              //
              // initial results delivered through added callback
              // XXX maybe callbacks should take a list of objects, to expose transactions?
              // XXX maybe support field limiting (to limit what you're notified on)

              /**
               * @summary Watch a query.  Receive callbacks as the result set changes.
               * @locus Anywhere
               * @memberOf Mongo.Cursor
               * @instance
               * @param {Object} callbacks Functions to call to deliver the result set as it
               *                           changes
               */

              observe(options) {
                return LocalCollection._observeFromObserveChanges(this, options);
              }
              /**
               * @summary Watch a query. Receive callbacks as the result set changes. Only
               *          the differences between the old and new documents are passed to
               *          the callbacks.
               * @locus Anywhere
               * @memberOf Mongo.Cursor
               * @instance
               * @param {Object} callbacks Functions to call to deliver the result set as it
               *                           changes
               */

              observeChanges(options) {
                const ordered = LocalCollection._observeChangesCallbacksAreOrdered(options); // there are several places that assume you aren't combining skip/limit with
                // unordered observe.  eg, update's EJSON.clone, and the "there are several"
                // comment in _modifyAndNotify
                // XXX allow skip/limit with unordered observe


                if (!options._allow_unordered && !ordered && (this.skip || this.limit)) {
                  throw new Error("Must use an ordered observe with skip or limit (i.e. 'addedBefore' " + "for observeChanges or 'addedAt' for observe, instead of 'added').");
                }

                if (this.fields && (this.fields._id === 0 || this.fields._id === false)) {
                  throw Error('You may not observe a cursor with {fields: {_id: 0}}');
                }

                const distances = this.matcher.hasGeoQuery() && ordered && new LocalCollection._IdMap();
                const query = {
                  cursor: this,
                  dirty: false,
                  distances,
                  matcher: this.matcher,
                  // not fast pathed
                  ordered,
                  projectionFn: this._projectionFn,
                  resultsSnapshot: null,
                  sorter: ordered && this.sorter
                };
                let qid; // Non-reactive queries call added[Before] and then never call anything
                // else.

                if (this.reactive) {
                  qid = this.collection.next_qid++;
                  this.collection.queries[qid] = query;
                }

                query.results = this._getRawObjects({
                  ordered,
                  distances: query.distances
                });

                if (this.collection.paused) {
                  query.resultsSnapshot = ordered ? [] : new LocalCollection._IdMap();
                } // wrap callbacks we were passed. callbacks only fire when not paused and
                // are never undefined
                // Filters out blacklisted fields according to cursor's projection.
                // XXX wrong place for this?
                // furthermore, callbacks enqueue until the operation we're working on is
                // done.


                const wrapCallback = fn => {
                  if (!fn) {
                    return () => {};
                  }

                  const self = this;
                  return function () {
                    if (self.collection.paused) {
                      return;
                    }

                    const args = arguments;

                    self.collection._observeQueue.queueTask(() => {
                      fn.apply(this, args);
                    });
                  };
                };

                query.added = wrapCallback(options.added);
                query.changed = wrapCallback(options.changed);
                query.removed = wrapCallback(options.removed);

                if (ordered) {
                  query.addedBefore = wrapCallback(options.addedBefore);
                  query.movedBefore = wrapCallback(options.movedBefore);
                }

                if (!options._suppress_initial && !this.collection.paused) {
                  query.results.forEach(doc => {
                    const fields = EJSON.clone(doc);
                    delete fields._id;

                    if (ordered) {
                      query.addedBefore(doc._id, this._projectionFn(fields), null);
                    }

                    query.added(doc._id, this._projectionFn(fields));
                  });
                }

                const handle = Object.assign(new LocalCollection.ObserveHandle(), {
                  collection: this.collection,
                  stop: () => {
                    if (this.reactive) {
                      delete this.collection.queries[qid];
                    }
                  }
                });

                if (this.reactive && Tracker.active) {
                  // XXX in many cases, the same observe will be recreated when
                  // the current autorun is rerun.  we could save work by
                  // letting it linger across rerun and potentially get
                  // repurposed if the same observe is performed, using logic
                  // similar to that of Meteor.subscribe.
                  Tracker.onInvalidate(() => {
                    handle.stop();
                  });
                } // run the observe callbacks resulting from the initial contents
                // before we leave the observe.


                this.collection._observeQueue.drain();

                return handle;
              } // XXX Maybe we need a version of observe that just calls a callback if
              // anything changed.


              _depend(changers, _allow_unordered) {
                if (Tracker.active) {
                  const dependency = new Tracker.Dependency();
                  const notify = dependency.changed.bind(dependency);
                  dependency.depend();
                  const options = {
                    _allow_unordered,
                    _suppress_initial: true
                  };
                  ['added', 'addedBefore', 'changed', 'movedBefore', 'removed'].forEach(fn => {
                    if (changers[fn]) {
                      options[fn] = notify;
                    }
                  }); // observeChanges will stop() when this computation is invalidated

                  this.observeChanges(options);
                }
              }

              _getCollectionName() {
                return this.collection.name;
              } // Returns a collection of matching objects, but doesn't deep copy them.
              //
              // If ordered is set, returns a sorted array, respecting sorter, skip, and
              // limit properties of the query provided that options.applySkipLimit is
              // not set to false (#1201). If sorter is falsey, no sort -- you get the
              // natural order.
              //
              // If ordered is not set, returns an object mapping from ID to doc (sorter,
              // skip and limit should not be set).
              //
              // If ordered is set and this cursor is a $near geoquery, then this function
              // will use an _IdMap to track each distance from the $near argument point in
              // order to use it as a sort key. If an _IdMap is passed in the 'distances'
              // argument, this function will clear it and use it for this purpose
              // (otherwise it will just create its own _IdMap). The observeChanges
              // implementation uses this to remember the distances after this function
              // returns.


              _getRawObjects() {
                let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                // By default this method will respect skip and limit because .fetch(),
                // .forEach() etc... expect this behaviour. It can be forced to ignore
                // skip and limit by setting applySkipLimit to false (.count() does this,
                // for example)
                const applySkipLimit = options.applySkipLimit !== false; // XXX use OrderedDict instead of array, and make IdMap and OrderedDict
                // compatible

                const results = options.ordered ? [] : new LocalCollection._IdMap(); // fast path for single ID value

                if (this._selectorId !== undefined) {
                  // If you have non-zero skip and ask for a single id, you get nothing.
                  // This is so it matches the behavior of the '{_id: foo}' path.
                  if (applySkipLimit && this.skip) {
                    return results;
                  }

                  const selectedDoc = this.collection._docs.get(this._selectorId);

                  if (selectedDoc) {
                    if (options.ordered) {
                      results.push(selectedDoc);
                    } else {
                      results.set(this._selectorId, selectedDoc);
                    }
                  }

                  return results;
                } // slow path for arbitrary selector, sort, skip, limit
                // in the observeChanges case, distances is actually part of the "query"
                // (ie, live results set) object.  in other cases, distances is only used
                // inside this function.


                let distances;

                if (this.matcher.hasGeoQuery() && options.ordered) {
                  if (options.distances) {
                    distances = options.distances;
                    distances.clear();
                  } else {
                    distances = new LocalCollection._IdMap();
                  }
                }

                this.collection._docs.forEach((doc, id) => {
                  const matchResult = this.matcher.documentMatches(doc);

                  if (matchResult.result) {
                    if (options.ordered) {
                      results.push(doc);

                      if (distances && matchResult.distance !== undefined) {
                        distances.set(id, matchResult.distance);
                      }
                    } else {
                      results.set(id, doc);
                    }
                  } // Override to ensure all docs are matched if ignoring skip & limit


                  if (!applySkipLimit) {
                    return true;
                  } // Fast path for limited unsorted queries.
                  // XXX 'length' check here seems wrong for ordered


                  return !this.limit || this.skip || this.sorter || results.length !== this.limit;
                });

                if (!options.ordered) {
                  return results;
                }

                if (this.sorter) {
                  results.sort(this.sorter.getComparator({
                    distances
                  }));
                } // Return the full set of results if there is no skip or limit or if we're
                // ignoring them


                if (!applySkipLimit || !this.limit && !this.skip) {
                  return results;
                }

                return results.slice(this.skip, this.limit ? this.limit + this.skip : results.length);
              }

              _publishCursor(subscription) {
                // XXX minimongo should not depend on mongo-livedata!
                if (!Package.mongo) {
                  throw new Error('Can\'t publish from Minimongo without the `mongo` package.');
                }

                if (!this.collection.name) {
                  throw new Error('Can\'t publish a cursor from a collection without a name.');
                }

                return Package.mongo.Mongo.Collection._publishCursor(this, subscription, this.collection.name);
              }

            }
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "local_collection.js": function module(_require5, _exports5, _module4) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/local_collection.js                                                                              //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            let _objectSpread;

            _module4.link("@babel/runtime/helpers/objectSpread2", {
              default(v) {
                _objectSpread = v;
              }

            }, 0);
            _module4.export({
              default: () => LocalCollection
            });
            let Cursor;
            _module4.link("./cursor.js", {
              default(v) {
                Cursor = v;
              }

            }, 0);
            let ObserveHandle;
            _module4.link("./observe_handle.js", {
              default(v) {
                ObserveHandle = v;
              }

            }, 1);
            let hasOwn, isIndexable, isNumericKey, isOperatorObject, populateDocumentWithQueryFields, projectionDetails;
            _module4.link("./common.js", {
              hasOwn(v) {
                hasOwn = v;
              },

              isIndexable(v) {
                isIndexable = v;
              },

              isNumericKey(v) {
                isNumericKey = v;
              },

              isOperatorObject(v) {
                isOperatorObject = v;
              },

              populateDocumentWithQueryFields(v) {
                populateDocumentWithQueryFields = v;
              },

              projectionDetails(v) {
                projectionDetails = v;
              }

            }, 2);

            class LocalCollection {
              constructor(name) {
                this.name = name; // _id -> document (also containing id)

                this._docs = new LocalCollection._IdMap();
                this._observeQueue = new Meteor._SynchronousQueue();
                this.next_qid = 1; // live query id generator
                // qid -> live query object. keys:
                //  ordered: bool. ordered queries have addedBefore/movedBefore callbacks.
                //  results: array (ordered) or object (unordered) of current results
                //    (aliased with this._docs!)
                //  resultsSnapshot: snapshot of results. null if not paused.
                //  cursor: Cursor object for the query.
                //  selector, sorter, (callbacks): functions

                this.queries = Object.create(null); // null if not saving originals; an IdMap from id to original document value
                // if saving originals. See comments before saveOriginals().

                this._savedOriginals = null; // True when observers are paused and we should not send callbacks.

                this.paused = false;
              } // options may include sort, skip, limit, reactive
              // sort may be any of these forms:
              //     {a: 1, b: -1}
              //     [["a", "asc"], ["b", "desc"]]
              //     ["a", ["b", "desc"]]
              //   (in the first form you're beholden to key enumeration order in
              //   your javascript VM)
              //
              // reactive: if given, and false, don't register with Tracker (default
              // is true)
              //
              // XXX possibly should support retrieving a subset of fields? and
              // have it be a hint (ignored on the client, when not copying the
              // doc?)
              //
              // XXX sort does not yet support subkeys ('a.b') .. fix that!
              // XXX add one more sort form: "key"
              // XXX tests


              find(selector, options) {
                // default syntax for everything is to omit the selector argument.
                // but if selector is explicitly passed in as false or undefined, we
                // want a selector that matches nothing.
                if (arguments.length === 0) {
                  selector = {};
                }

                return new LocalCollection.Cursor(this, selector, options);
              }

              findOne(selector) {
                let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                if (arguments.length === 0) {
                  selector = {};
                } // NOTE: by setting limit 1 here, we end up using very inefficient
                // code that recomputes the whole query on each update. The upside is
                // that when you reactively depend on a findOne you only get
                // invalidated when the found object changes, not any object in the
                // collection. Most findOne will be by id, which has a fast path, so
                // this might not be a big deal. In most cases, invalidation causes
                // the called to re-query anyway, so this should be a net performance
                // improvement.


                options.limit = 1;
                return this.find(selector, options).fetch()[0];
              } // XXX possibly enforce that 'undefined' does not appear (we assume
              // this in our handling of null and $exists)


              insert(doc, callback) {
                doc = EJSON.clone(doc);
                assertHasValidFieldNames(doc); // if you really want to use ObjectIDs, set this global.
                // Mongo.Collection specifies its own ids and does not use this code.

                if (!hasOwn.call(doc, '_id')) {
                  doc._id = LocalCollection._useOID ? new MongoID.ObjectID() : Random.id();
                }

                const id = doc._id;

                if (this._docs.has(id)) {
                  throw MinimongoError("Duplicate _id '".concat(id, "'"));
                }

                this._saveOriginal(id, undefined);

                this._docs.set(id, doc);

                const queriesToRecompute = []; // trigger live queries that match

                Object.keys(this.queries).forEach(qid => {
                  const query = this.queries[qid];

                  if (query.dirty) {
                    return;
                  }

                  const matchResult = query.matcher.documentMatches(doc);

                  if (matchResult.result) {
                    if (query.distances && matchResult.distance !== undefined) {
                      query.distances.set(id, matchResult.distance);
                    }

                    if (query.cursor.skip || query.cursor.limit) {
                      queriesToRecompute.push(qid);
                    } else {
                      LocalCollection._insertInResults(query, doc);
                    }
                  }
                });
                queriesToRecompute.forEach(qid => {
                  if (this.queries[qid]) {
                    this._recomputeResults(this.queries[qid]);
                  }
                });

                this._observeQueue.drain(); // Defer because the caller likely doesn't expect the callback to be run
                // immediately.


                if (callback) {
                  Meteor.defer(() => {
                    callback(null, id);
                  });
                }

                return id;
              } // Pause the observers. No callbacks from observers will fire until
              // 'resumeObservers' is called.


              pauseObservers() {
                // No-op if already paused.
                if (this.paused) {
                  return;
                } // Set the 'paused' flag such that new observer messages don't fire.


                this.paused = true; // Take a snapshot of the query results for each query.

                Object.keys(this.queries).forEach(qid => {
                  const query = this.queries[qid];
                  query.resultsSnapshot = EJSON.clone(query.results);
                });
              }

              remove(selector, callback) {
                // Easy special case: if we're not calling observeChanges callbacks and
                // we're not saving originals and we got asked to remove everything, then
                // just empty everything directly.
                if (this.paused && !this._savedOriginals && EJSON.equals(selector, {})) {
                  const result = this._docs.size();

                  this._docs.clear();

                  Object.keys(this.queries).forEach(qid => {
                    const query = this.queries[qid];

                    if (query.ordered) {
                      query.results = [];
                    } else {
                      query.results.clear();
                    }
                  });

                  if (callback) {
                    Meteor.defer(() => {
                      callback(null, result);
                    });
                  }

                  return result;
                }

                const matcher = new Minimongo.Matcher(selector);
                const remove = [];

                this._eachPossiblyMatchingDoc(selector, (doc, id) => {
                  if (matcher.documentMatches(doc).result) {
                    remove.push(id);
                  }
                });

                const queriesToRecompute = [];
                const queryRemove = [];

                for (let i = 0; i < remove.length; i++) {
                  const removeId = remove[i];

                  const removeDoc = this._docs.get(removeId);

                  Object.keys(this.queries).forEach(qid => {
                    const query = this.queries[qid];

                    if (query.dirty) {
                      return;
                    }

                    if (query.matcher.documentMatches(removeDoc).result) {
                      if (query.cursor.skip || query.cursor.limit) {
                        queriesToRecompute.push(qid);
                      } else {
                        queryRemove.push({
                          qid,
                          doc: removeDoc
                        });
                      }
                    }
                  });

                  this._saveOriginal(removeId, removeDoc);

                  this._docs.remove(removeId);
                } // run live query callbacks _after_ we've removed the documents.


                queryRemove.forEach(remove => {
                  const query = this.queries[remove.qid];

                  if (query) {
                    query.distances && query.distances.remove(remove.doc._id);

                    LocalCollection._removeFromResults(query, remove.doc);
                  }
                });
                queriesToRecompute.forEach(qid => {
                  const query = this.queries[qid];

                  if (query) {
                    this._recomputeResults(query);
                  }
                });

                this._observeQueue.drain();

                const result = remove.length;

                if (callback) {
                  Meteor.defer(() => {
                    callback(null, result);
                  });
                }

                return result;
              } // Resume the observers. Observers immediately receive change
              // notifications to bring them to the current state of the
              // database. Note that this is not just replaying all the changes that
              // happened during the pause, it is a smarter 'coalesced' diff.


              resumeObservers() {
                // No-op if not paused.
                if (!this.paused) {
                  return;
                } // Unset the 'paused' flag. Make sure to do this first, otherwise
                // observer methods won't actually fire when we trigger them.


                this.paused = false;
                Object.keys(this.queries).forEach(qid => {
                  const query = this.queries[qid];

                  if (query.dirty) {
                    query.dirty = false; // re-compute results will perform `LocalCollection._diffQueryChanges`
                    // automatically.

                    this._recomputeResults(query, query.resultsSnapshot);
                  } else {
                    // Diff the current results against the snapshot and send to observers.
                    // pass the query object for its observer callbacks.
                    LocalCollection._diffQueryChanges(query.ordered, query.resultsSnapshot, query.results, query, {
                      projectionFn: query.projectionFn
                    });
                  }

                  query.resultsSnapshot = null;
                });

                this._observeQueue.drain();
              }

              retrieveOriginals() {
                if (!this._savedOriginals) {
                  throw new Error('Called retrieveOriginals without saveOriginals');
                }

                const originals = this._savedOriginals;
                this._savedOriginals = null;
                return originals;
              } // To track what documents are affected by a piece of code, call
              // saveOriginals() before it and retrieveOriginals() after it.
              // retrieveOriginals returns an object whose keys are the ids of the documents
              // that were affected since the call to saveOriginals(), and the values are
              // equal to the document's contents at the time of saveOriginals. (In the case
              // of an inserted document, undefined is the value.) You must alternate
              // between calls to saveOriginals() and retrieveOriginals().


              saveOriginals() {
                if (this._savedOriginals) {
                  throw new Error('Called saveOriginals twice without retrieveOriginals');
                }

                this._savedOriginals = new LocalCollection._IdMap();
              } // XXX atomicity: if multi is true, and one modification fails, do
              // we rollback the whole operation, or what?


              update(selector, mod, options, callback) {
                if (!callback && options instanceof Function) {
                  callback = options;
                  options = null;
                }

                if (!options) {
                  options = {};
                }

                const matcher = new Minimongo.Matcher(selector, true); // Save the original results of any query that we might need to
                // _recomputeResults on, because _modifyAndNotify will mutate the objects in
                // it. (We don't need to save the original results of paused queries because
                // they already have a resultsSnapshot and we won't be diffing in
                // _recomputeResults.)

                const qidToOriginalResults = {}; // We should only clone each document once, even if it appears in multiple
                // queries

                const docMap = new LocalCollection._IdMap();

                const idsMatched = LocalCollection._idsMatchedBySelector(selector);

                Object.keys(this.queries).forEach(qid => {
                  const query = this.queries[qid];

                  if ((query.cursor.skip || query.cursor.limit) && !this.paused) {
                    // Catch the case of a reactive `count()` on a cursor with skip
                    // or limit, which registers an unordered observe. This is a
                    // pretty rare case, so we just clone the entire result set with
                    // no optimizations for documents that appear in these result
                    // sets and other queries.
                    if (query.results instanceof LocalCollection._IdMap) {
                      qidToOriginalResults[qid] = query.results.clone();
                      return;
                    }

                    if (!(query.results instanceof Array)) {
                      throw new Error('Assertion failed: query.results not an array');
                    } // Clones a document to be stored in `qidToOriginalResults`
                    // because it may be modified before the new and old result sets
                    // are diffed. But if we know exactly which document IDs we're
                    // going to modify, then we only need to clone those.


                    const memoizedCloneIfNeeded = doc => {
                      if (docMap.has(doc._id)) {
                        return docMap.get(doc._id);
                      }

                      const docToMemoize = idsMatched && !idsMatched.some(id => EJSON.equals(id, doc._id)) ? doc : EJSON.clone(doc);
                      docMap.set(doc._id, docToMemoize);
                      return docToMemoize;
                    };

                    qidToOriginalResults[qid] = query.results.map(memoizedCloneIfNeeded);
                  }
                });
                const recomputeQids = {};
                let updateCount = 0;

                this._eachPossiblyMatchingDoc(selector, (doc, id) => {
                  const queryResult = matcher.documentMatches(doc);

                  if (queryResult.result) {
                    // XXX Should we save the original even if mod ends up being a no-op?
                    this._saveOriginal(id, doc);

                    this._modifyAndNotify(doc, mod, recomputeQids, queryResult.arrayIndices);

                    ++updateCount;

                    if (!options.multi) {
                      return false; // break
                    }
                  }

                  return true;
                });

                Object.keys(recomputeQids).forEach(qid => {
                  const query = this.queries[qid];

                  if (query) {
                    this._recomputeResults(query, qidToOriginalResults[qid]);
                  }
                });

                this._observeQueue.drain(); // If we are doing an upsert, and we didn't modify any documents yet, then
                // it's time to do an insert. Figure out what document we are inserting, and
                // generate an id for it.


                let insertedId;

                if (updateCount === 0 && options.upsert) {
                  const doc = LocalCollection._createUpsertDocument(selector, mod);

                  if (!doc._id && options.insertedId) {
                    doc._id = options.insertedId;
                  }

                  insertedId = this.insert(doc);
                  updateCount = 1;
                } // Return the number of affected documents, or in the upsert case, an object
                // containing the number of affected docs and the id of the doc that was
                // inserted, if any.


                let result;

                if (options._returnObject) {
                  result = {
                    numberAffected: updateCount
                  };

                  if (insertedId !== undefined) {
                    result.insertedId = insertedId;
                  }
                } else {
                  result = updateCount;
                }

                if (callback) {
                  Meteor.defer(() => {
                    callback(null, result);
                  });
                }

                return result;
              } // A convenience wrapper on update. LocalCollection.upsert(sel, mod) is
              // equivalent to LocalCollection.update(sel, mod, {upsert: true,
              // _returnObject: true}).


              upsert(selector, mod, options, callback) {
                if (!callback && typeof options === 'function') {
                  callback = options;
                  options = {};
                }

                return this.update(selector, mod, Object.assign({}, options, {
                  upsert: true,
                  _returnObject: true
                }), callback);
              } // Iterates over a subset of documents that could match selector; calls
              // fn(doc, id) on each of them.  Specifically, if selector specifies
              // specific _id's, it only looks at those.  doc is *not* cloned: it is the
              // same object that is in _docs.


              _eachPossiblyMatchingDoc(selector, fn) {
                const specificIds = LocalCollection._idsMatchedBySelector(selector);

                if (specificIds) {
                  specificIds.some(id => {
                    const doc = this._docs.get(id);

                    if (doc) {
                      return fn(doc, id) === false;
                    }
                  });
                } else {
                  this._docs.forEach(fn);
                }
              }

              _modifyAndNotify(doc, mod, recomputeQids, arrayIndices) {
                const matched_before = {};
                Object.keys(this.queries).forEach(qid => {
                  const query = this.queries[qid];

                  if (query.dirty) {
                    return;
                  }

                  if (query.ordered) {
                    matched_before[qid] = query.matcher.documentMatches(doc).result;
                  } else {
                    // Because we don't support skip or limit (yet) in unordered queries, we
                    // can just do a direct lookup.
                    matched_before[qid] = query.results.has(doc._id);
                  }
                });
                const old_doc = EJSON.clone(doc);

                LocalCollection._modify(doc, mod, {
                  arrayIndices
                });

                Object.keys(this.queries).forEach(qid => {
                  const query = this.queries[qid];

                  if (query.dirty) {
                    return;
                  }

                  const afterMatch = query.matcher.documentMatches(doc);
                  const after = afterMatch.result;
                  const before = matched_before[qid];

                  if (after && query.distances && afterMatch.distance !== undefined) {
                    query.distances.set(doc._id, afterMatch.distance);
                  }

                  if (query.cursor.skip || query.cursor.limit) {
                    // We need to recompute any query where the doc may have been in the
                    // cursor's window either before or after the update. (Note that if skip
                    // or limit is set, "before" and "after" being true do not necessarily
                    // mean that the document is in the cursor's output after skip/limit is
                    // applied... but if they are false, then the document definitely is NOT
                    // in the output. So it's safe to skip recompute if neither before or
                    // after are true.)
                    if (before || after) {
                      recomputeQids[qid] = true;
                    }
                  } else if (before && !after) {
                    LocalCollection._removeFromResults(query, doc);
                  } else if (!before && after) {
                    LocalCollection._insertInResults(query, doc);
                  } else if (before && after) {
                    LocalCollection._updateInResults(query, doc, old_doc);
                  }
                });
              } // Recomputes the results of a query and runs observe callbacks for the
              // difference between the previous results and the current results (unless
              // paused). Used for skip/limit queries.
              //
              // When this is used by insert or remove, it can just use query.results for
              // the old results (and there's no need to pass in oldResults), because these
              // operations don't mutate the documents in the collection. Update needs to
              // pass in an oldResults which was deep-copied before the modifier was
              // applied.
              //
              // oldResults is guaranteed to be ignored if the query is not paused.


              _recomputeResults(query, oldResults) {
                if (this.paused) {
                  // There's no reason to recompute the results now as we're still paused.
                  // By flagging the query as "dirty", the recompute will be performed
                  // when resumeObservers is called.
                  query.dirty = true;
                  return;
                }

                if (!this.paused && !oldResults) {
                  oldResults = query.results;
                }

                if (query.distances) {
                  query.distances.clear();
                }

                query.results = query.cursor._getRawObjects({
                  distances: query.distances,
                  ordered: query.ordered
                });

                if (!this.paused) {
                  LocalCollection._diffQueryChanges(query.ordered, oldResults, query.results, query, {
                    projectionFn: query.projectionFn
                  });
                }
              }

              _saveOriginal(id, doc) {
                // Are we even trying to save originals?
                if (!this._savedOriginals) {
                  return;
                } // Have we previously mutated the original (and so 'doc' is not actually
                // original)?  (Note the 'has' check rather than truth: we store undefined
                // here for inserted docs!)


                if (this._savedOriginals.has(id)) {
                  return;
                }

                this._savedOriginals.set(id, EJSON.clone(doc));
              }

            }

            LocalCollection.Cursor = Cursor;
            LocalCollection.ObserveHandle = ObserveHandle; // XXX maybe move these into another ObserveHelpers package or something
            // _CachingChangeObserver is an object which receives observeChanges callbacks
            // and keeps a cache of the current cursor state up to date in this.docs. Users
            // of this class should read the docs field but not modify it. You should pass
            // the "applyChange" field as the callbacks to the underlying observeChanges
            // call. Optionally, you can specify your own observeChanges callbacks which are
            // invoked immediately before the docs field is updated; this object is made
            // available as `this` to those callbacks.

            LocalCollection._CachingChangeObserver = class _CachingChangeObserver {
              constructor() {
                let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                const orderedFromCallbacks = options.callbacks && LocalCollection._observeChangesCallbacksAreOrdered(options.callbacks);

                if (hasOwn.call(options, 'ordered')) {
                  this.ordered = options.ordered;

                  if (options.callbacks && options.ordered !== orderedFromCallbacks) {
                    throw Error('ordered option doesn\'t match callbacks');
                  }
                } else if (options.callbacks) {
                  this.ordered = orderedFromCallbacks;
                } else {
                  throw Error('must provide ordered or callbacks');
                }

                const callbacks = options.callbacks || {};

                if (this.ordered) {
                  this.docs = new OrderedDict(MongoID.idStringify);
                  this.applyChange = {
                    addedBefore: (id, fields, before) => {
                      // Take a shallow copy since the top-level properties can be changed
                      const doc = _objectSpread({}, fields);

                      doc._id = id;

                      if (callbacks.addedBefore) {
                        callbacks.addedBefore.call(this, id, EJSON.clone(fields), before);
                      } // This line triggers if we provide added with movedBefore.


                      if (callbacks.added) {
                        callbacks.added.call(this, id, EJSON.clone(fields));
                      } // XXX could `before` be a falsy ID?  Technically
                      // idStringify seems to allow for them -- though
                      // OrderedDict won't call stringify on a falsy arg.


                      this.docs.putBefore(id, doc, before || null);
                    },
                    movedBefore: (id, before) => {
                      const doc = this.docs.get(id);

                      if (callbacks.movedBefore) {
                        callbacks.movedBefore.call(this, id, before);
                      }

                      this.docs.moveBefore(id, before || null);
                    }
                  };
                } else {
                  this.docs = new LocalCollection._IdMap();
                  this.applyChange = {
                    added: (id, fields) => {
                      // Take a shallow copy since the top-level properties can be changed
                      const doc = _objectSpread({}, fields);

                      if (callbacks.added) {
                        callbacks.added.call(this, id, EJSON.clone(fields));
                      }

                      doc._id = id;
                      this.docs.set(id, doc);
                    }
                  };
                } // The methods in _IdMap and OrderedDict used by these callbacks are
                // identical.


                this.applyChange.changed = (id, fields) => {
                  const doc = this.docs.get(id);

                  if (!doc) {
                    throw new Error("Unknown id for changed: ".concat(id));
                  }

                  if (callbacks.changed) {
                    callbacks.changed.call(this, id, EJSON.clone(fields));
                  }

                  DiffSequence.applyChanges(doc, fields);
                };

                this.applyChange.removed = id => {
                  if (callbacks.removed) {
                    callbacks.removed.call(this, id);
                  }

                  this.docs.remove(id);
                };
              }

            };
            LocalCollection._IdMap = class _IdMap extends IdMap {
              constructor() {
                super(MongoID.idStringify, MongoID.idParse);
              }

            }; // Wrap a transform function to return objects that have the _id field
            // of the untransformed document. This ensures that subsystems such as
            // the observe-sequence package that call `observe` can keep track of
            // the documents identities.
            //
            // - Require that it returns objects
            // - If the return value has an _id field, verify that it matches the
            //   original _id field
            // - If the return value doesn't have an _id field, add it back.

            LocalCollection.wrapTransform = transform => {
              if (!transform) {
                return null;
              } // No need to doubly-wrap transforms.


              if (transform.__wrappedTransform__) {
                return transform;
              }

              const wrapped = doc => {
                if (!hasOwn.call(doc, '_id')) {
                  // XXX do we ever have a transform on the oplog's collection? because that
                  // collection has no _id.
                  throw new Error('can only transform documents with _id');
                }

                const id = doc._id; // XXX consider making tracker a weak dependency and checking
                // Package.tracker here

                const transformed = Tracker.nonreactive(() => transform(doc));

                if (!LocalCollection._isPlainObject(transformed)) {
                  throw new Error('transform must return object');
                }

                if (hasOwn.call(transformed, '_id')) {
                  if (!EJSON.equals(transformed._id, id)) {
                    throw new Error('transformed document can\'t have different _id');
                  }
                } else {
                  transformed._id = id;
                }

                return transformed;
              };

              wrapped.__wrappedTransform__ = true;
              return wrapped;
            }; // XXX the sorted-query logic below is laughably inefficient. we'll
            // need to come up with a better datastructure for this.
            //
            // XXX the logic for observing with a skip or a limit is even more
            // laughably inefficient. we recompute the whole results every time!
            // This binary search puts a value between any equal values, and the first
            // lesser value.


            LocalCollection._binarySearch = (cmp, array, value) => {
              let first = 0;
              let range = array.length;

              while (range > 0) {
                const halfRange = Math.floor(range / 2);

                if (cmp(value, array[first + halfRange]) >= 0) {
                  first += halfRange + 1;
                  range -= halfRange + 1;
                } else {
                  range = halfRange;
                }
              }

              return first;
            };

            LocalCollection._checkSupportedProjection = fields => {
              if (fields !== Object(fields) || Array.isArray(fields)) {
                throw MinimongoError('fields option must be an object');
              }

              Object.keys(fields).forEach(keyPath => {
                if (keyPath.split('.').includes('$')) {
                  throw MinimongoError('Minimongo doesn\'t support $ operator in projections yet.');
                }

                const value = fields[keyPath];

                if (typeof value === 'object' && ['$elemMatch', '$meta', '$slice'].some(key => hasOwn.call(value, key))) {
                  throw MinimongoError('Minimongo doesn\'t support operators in projections yet.');
                }

                if (![1, 0, true, false].includes(value)) {
                  throw MinimongoError('Projection values should be one of 1, 0, true, or false');
                }
              });
            }; // Knows how to compile a fields projection to a predicate function.
            // @returns - Function: a closure that filters out an object according to the
            //            fields projection rules:
            //            @param obj - Object: MongoDB-styled document
            //            @returns - Object: a document with the fields filtered out
            //                       according to projection rules. Doesn't retain subfields
            //                       of passed argument.


            LocalCollection._compileProjection = fields => {
              LocalCollection._checkSupportedProjection(fields);

              const _idProjection = fields._id === undefined ? true : fields._id;

              const details = projectionDetails(fields); // returns transformed doc according to ruleTree

              const transform = (doc, ruleTree) => {
                // Special case for "sets"
                if (Array.isArray(doc)) {
                  return doc.map(subdoc => transform(subdoc, ruleTree));
                }

                const result = details.including ? {} : EJSON.clone(doc);
                Object.keys(ruleTree).forEach(key => {
                  if (doc == null || !hasOwn.call(doc, key)) {
                    return;
                  }

                  const rule = ruleTree[key];

                  if (rule === Object(rule)) {
                    // For sub-objects/subsets we branch
                    if (doc[key] === Object(doc[key])) {
                      result[key] = transform(doc[key], rule);
                    }
                  } else if (details.including) {
                    // Otherwise we don't even touch this subfield
                    result[key] = EJSON.clone(doc[key]);
                  } else {
                    delete result[key];
                  }
                });
                return doc != null ? result : doc;
              };

              return doc => {
                const result = transform(doc, details.tree);

                if (_idProjection && hasOwn.call(doc, '_id')) {
                  result._id = doc._id;
                }

                if (!_idProjection && hasOwn.call(result, '_id')) {
                  delete result._id;
                }

                return result;
              };
            }; // Calculates the document to insert in case we're doing an upsert and the
            // selector does not match any elements


            LocalCollection._createUpsertDocument = (selector, modifier) => {
              const selectorDocument = populateDocumentWithQueryFields(selector);

              const isModify = LocalCollection._isModificationMod(modifier);

              const newDoc = {};

              if (selectorDocument._id) {
                newDoc._id = selectorDocument._id;
                delete selectorDocument._id;
              } // This double _modify call is made to help with nested properties (see issue
              // #8631). We do this even if it's a replacement for validation purposes (e.g.
              // ambiguous id's)


              LocalCollection._modify(newDoc, {
                $set: selectorDocument
              });

              LocalCollection._modify(newDoc, modifier, {
                isInsert: true
              });

              if (isModify) {
                return newDoc;
              } // Replacement can take _id from query document


              const replacement = Object.assign({}, modifier);

              if (newDoc._id) {
                replacement._id = newDoc._id;
              }

              return replacement;
            };

            LocalCollection._diffObjects = (left, right, callbacks) => {
              return DiffSequence.diffObjects(left, right, callbacks);
            }; // ordered: bool.
            // old_results and new_results: collections of documents.
            //    if ordered, they are arrays.
            //    if unordered, they are IdMaps


            LocalCollection._diffQueryChanges = (ordered, oldResults, newResults, observer, options) => DiffSequence.diffQueryChanges(ordered, oldResults, newResults, observer, options);

            LocalCollection._diffQueryOrderedChanges = (oldResults, newResults, observer, options) => DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer, options);

            LocalCollection._diffQueryUnorderedChanges = (oldResults, newResults, observer, options) => DiffSequence.diffQueryUnorderedChanges(oldResults, newResults, observer, options);

            LocalCollection._findInOrderedResults = (query, doc) => {
              if (!query.ordered) {
                throw new Error('Can\'t call _findInOrderedResults on unordered query');
              }

              for (let i = 0; i < query.results.length; i++) {
                if (query.results[i] === doc) {
                  return i;
                }
              }

              throw Error('object missing from query');
            }; // If this is a selector which explicitly constrains the match by ID to a finite
            // number of documents, returns a list of their IDs.  Otherwise returns
            // null. Note that the selector may have other restrictions so it may not even
            // match those document!  We care about $in and $and since those are generated
            // access-controlled update and remove.


            LocalCollection._idsMatchedBySelector = selector => {
              // Is the selector just an ID?
              if (LocalCollection._selectorIsId(selector)) {
                return [selector];
              }

              if (!selector) {
                return null;
              } // Do we have an _id clause?


              if (hasOwn.call(selector, '_id')) {
                // Is the _id clause just an ID?
                if (LocalCollection._selectorIsId(selector._id)) {
                  return [selector._id];
                } // Is the _id clause {_id: {$in: ["x", "y", "z"]}}?


                if (selector._id && Array.isArray(selector._id.$in) && selector._id.$in.length && selector._id.$in.every(LocalCollection._selectorIsId)) {
                  return selector._id.$in;
                }

                return null;
              } // If this is a top-level $and, and any of the clauses constrain their
              // documents, then the whole selector is constrained by any one clause's
              // constraint. (Well, by their intersection, but that seems unlikely.)


              if (Array.isArray(selector.$and)) {
                for (let i = 0; i < selector.$and.length; ++i) {
                  const subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]);

                  if (subIds) {
                    return subIds;
                  }
                }
              }

              return null;
            };

            LocalCollection._insertInResults = (query, doc) => {
              const fields = EJSON.clone(doc);
              delete fields._id;

              if (query.ordered) {
                if (!query.sorter) {
                  query.addedBefore(doc._id, query.projectionFn(fields), null);
                  query.results.push(doc);
                } else {
                  const i = LocalCollection._insertInSortedList(query.sorter.getComparator({
                    distances: query.distances
                  }), query.results, doc);

                  let next = query.results[i + 1];

                  if (next) {
                    next = next._id;
                  } else {
                    next = null;
                  }

                  query.addedBefore(doc._id, query.projectionFn(fields), next);
                }

                query.added(doc._id, query.projectionFn(fields));
              } else {
                query.added(doc._id, query.projectionFn(fields));
                query.results.set(doc._id, doc);
              }
            };

            LocalCollection._insertInSortedList = (cmp, array, value) => {
              if (array.length === 0) {
                array.push(value);
                return 0;
              }

              const i = LocalCollection._binarySearch(cmp, array, value);

              array.splice(i, 0, value);
              return i;
            };

            LocalCollection._isModificationMod = mod => {
              let isModify = false;
              let isReplace = false;
              Object.keys(mod).forEach(key => {
                if (key.substr(0, 1) === '$') {
                  isModify = true;
                } else {
                  isReplace = true;
                }
              });

              if (isModify && isReplace) {
                throw new Error('Update parameter cannot have both modifier and non-modifier fields.');
              }

              return isModify;
            }; // XXX maybe this should be EJSON.isObject, though EJSON doesn't know about
            // RegExp
            // XXX note that _type(undefined) === 3!!!!


            LocalCollection._isPlainObject = x => {
              return x && LocalCollection._f._type(x) === 3;
            }; // XXX need a strategy for passing the binding of $ into this
            // function, from the compiled selector
            //
            // maybe just {key.up.to.just.before.dollarsign: array_index}
            //
            // XXX atomicity: if one modification fails, do we roll back the whole
            // change?
            //
            // options:
            //   - isInsert is set when _modify is being called to compute the document to
            //     insert as part of an upsert operation. We use this primarily to figure
            //     out when to set the fields in $setOnInsert, if present.


            LocalCollection._modify = function (doc, modifier) {
              let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

              if (!LocalCollection._isPlainObject(modifier)) {
                throw MinimongoError('Modifier must be an object');
              } // Make sure the caller can't mutate our data structures.


              modifier = EJSON.clone(modifier);
              const isModifier = isOperatorObject(modifier);
              const newDoc = isModifier ? EJSON.clone(doc) : modifier;

              if (isModifier) {
                // apply modifiers to the doc.
                Object.keys(modifier).forEach(operator => {
                  // Treat $setOnInsert as $set if this is an insert.
                  const setOnInsert = options.isInsert && operator === '$setOnInsert';
                  const modFunc = MODIFIERS[setOnInsert ? '$set' : operator];
                  const operand = modifier[operator];

                  if (!modFunc) {
                    throw MinimongoError("Invalid modifier specified ".concat(operator));
                  }

                  Object.keys(operand).forEach(keypath => {
                    const arg = operand[keypath];

                    if (keypath === '') {
                      throw MinimongoError('An empty update path is not valid.');
                    }

                    const keyparts = keypath.split('.');

                    if (!keyparts.every(Boolean)) {
                      throw MinimongoError("The update path '".concat(keypath, "' contains an empty field name, ") + 'which is not allowed.');
                    }

                    const target = findModTarget(newDoc, keyparts, {
                      arrayIndices: options.arrayIndices,
                      forbidArray: operator === '$rename',
                      noCreate: NO_CREATE_MODIFIERS[operator]
                    });
                    modFunc(target, keyparts.pop(), arg, keypath, newDoc);
                  });
                });

                if (doc._id && !EJSON.equals(doc._id, newDoc._id)) {
                  throw MinimongoError("After applying the update to the document {_id: \"".concat(doc._id, "\", ...},") + ' the (immutable) field \'_id\' was found to have been altered to ' + "_id: \"".concat(newDoc._id, "\""));
                }
              } else {
                if (doc._id && modifier._id && !EJSON.equals(doc._id, modifier._id)) {
                  throw MinimongoError("The _id field cannot be changed from {_id: \"".concat(doc._id, "\"} to ") + "{_id: \"".concat(modifier._id, "\"}"));
                } // replace the whole document


                assertHasValidFieldNames(modifier);
              } // move new document into place.


              Object.keys(doc).forEach(key => {
                // Note: this used to be for (var key in doc) however, this does not
                // work right in Opera. Deleting from a doc while iterating over it
                // would sometimes cause opera to skip some keys.
                if (key !== '_id') {
                  delete doc[key];
                }
              });
              Object.keys(newDoc).forEach(key => {
                doc[key] = newDoc[key];
              });
            };

            LocalCollection._observeFromObserveChanges = (cursor, observeCallbacks) => {
              const transform = cursor.getTransform() || (doc => doc);

              let suppressed = !!observeCallbacks._suppress_initial;
              let observeChangesCallbacks;

              if (LocalCollection._observeCallbacksAreOrdered(observeCallbacks)) {
                // The "_no_indices" option sets all index arguments to -1 and skips the
                // linear scans required to generate them.  This lets observers that don't
                // need absolute indices benefit from the other features of this API --
                // relative order, transforms, and applyChanges -- without the speed hit.
                const indices = !observeCallbacks._no_indices;
                observeChangesCallbacks = {
                  addedBefore(id, fields, before) {
                    if (suppressed || !(observeCallbacks.addedAt || observeCallbacks.added)) {
                      return;
                    }

                    const doc = transform(Object.assign(fields, {
                      _id: id
                    }));

                    if (observeCallbacks.addedAt) {
                      observeCallbacks.addedAt(doc, indices ? before ? this.docs.indexOf(before) : this.docs.size() : -1, before);
                    } else {
                      observeCallbacks.added(doc);
                    }
                  },

                  changed(id, fields) {
                    if (!(observeCallbacks.changedAt || observeCallbacks.changed)) {
                      return;
                    }

                    let doc = EJSON.clone(this.docs.get(id));

                    if (!doc) {
                      throw new Error("Unknown id for changed: ".concat(id));
                    }

                    const oldDoc = transform(EJSON.clone(doc));
                    DiffSequence.applyChanges(doc, fields);

                    if (observeCallbacks.changedAt) {
                      observeCallbacks.changedAt(transform(doc), oldDoc, indices ? this.docs.indexOf(id) : -1);
                    } else {
                      observeCallbacks.changed(transform(doc), oldDoc);
                    }
                  },

                  movedBefore(id, before) {
                    if (!observeCallbacks.movedTo) {
                      return;
                    }

                    const from = indices ? this.docs.indexOf(id) : -1;
                    let to = indices ? before ? this.docs.indexOf(before) : this.docs.size() : -1; // When not moving backwards, adjust for the fact that removing the
                    // document slides everything back one slot.

                    if (to > from) {
                      --to;
                    }

                    observeCallbacks.movedTo(transform(EJSON.clone(this.docs.get(id))), from, to, before || null);
                  },

                  removed(id) {
                    if (!(observeCallbacks.removedAt || observeCallbacks.removed)) {
                      return;
                    } // technically maybe there should be an EJSON.clone here, but it's about
                    // to be removed from this.docs!


                    const doc = transform(this.docs.get(id));

                    if (observeCallbacks.removedAt) {
                      observeCallbacks.removedAt(doc, indices ? this.docs.indexOf(id) : -1);
                    } else {
                      observeCallbacks.removed(doc);
                    }
                  }

                };
              } else {
                observeChangesCallbacks = {
                  added(id, fields) {
                    if (!suppressed && observeCallbacks.added) {
                      observeCallbacks.added(transform(Object.assign(fields, {
                        _id: id
                      })));
                    }
                  },

                  changed(id, fields) {
                    if (observeCallbacks.changed) {
                      const oldDoc = this.docs.get(id);
                      const doc = EJSON.clone(oldDoc);
                      DiffSequence.applyChanges(doc, fields);
                      observeCallbacks.changed(transform(doc), transform(EJSON.clone(oldDoc)));
                    }
                  },

                  removed(id) {
                    if (observeCallbacks.removed) {
                      observeCallbacks.removed(transform(this.docs.get(id)));
                    }
                  }

                };
              }

              const changeObserver = new LocalCollection._CachingChangeObserver({
                callbacks: observeChangesCallbacks
              }); // CachingChangeObserver clones all received input on its callbacks
              // So we can mark it as safe to reduce the ejson clones.
              // This is tested by the `mongo-livedata - (extended) scribbling` tests

              changeObserver.applyChange._fromObserve = true;
              const handle = cursor.observeChanges(changeObserver.applyChange, {
                nonMutatingCallbacks: true
              });
              suppressed = false;
              return handle;
            };

            LocalCollection._observeCallbacksAreOrdered = callbacks => {
              if (callbacks.added && callbacks.addedAt) {
                throw new Error('Please specify only one of added() and addedAt()');
              }

              if (callbacks.changed && callbacks.changedAt) {
                throw new Error('Please specify only one of changed() and changedAt()');
              }

              if (callbacks.removed && callbacks.removedAt) {
                throw new Error('Please specify only one of removed() and removedAt()');
              }

              return !!(callbacks.addedAt || callbacks.changedAt || callbacks.movedTo || callbacks.removedAt);
            };

            LocalCollection._observeChangesCallbacksAreOrdered = callbacks => {
              if (callbacks.added && callbacks.addedBefore) {
                throw new Error('Please specify only one of added() and addedBefore()');
              }

              return !!(callbacks.addedBefore || callbacks.movedBefore);
            };

            LocalCollection._removeFromResults = (query, doc) => {
              if (query.ordered) {
                const i = LocalCollection._findInOrderedResults(query, doc);

                query.removed(doc._id);
                query.results.splice(i, 1);
              } else {
                const id = doc._id; // in case callback mutates doc

                query.removed(doc._id);
                query.results.remove(id);
              }
            }; // Is this selector just shorthand for lookup by _id?


            LocalCollection._selectorIsId = selector => typeof selector === 'number' || typeof selector === 'string' || selector instanceof MongoID.ObjectID; // Is the selector just lookup by _id (shorthand or not)?


            LocalCollection._selectorIsIdPerhapsAsObject = selector => LocalCollection._selectorIsId(selector) || LocalCollection._selectorIsId(selector && selector._id) && Object.keys(selector).length === 1;

            LocalCollection._updateInResults = (query, doc, old_doc) => {
              if (!EJSON.equals(doc._id, old_doc._id)) {
                throw new Error('Can\'t change a doc\'s _id while updating');
              }

              const projectionFn = query.projectionFn;
              const changedFields = DiffSequence.makeChangedFields(projectionFn(doc), projectionFn(old_doc));

              if (!query.ordered) {
                if (Object.keys(changedFields).length) {
                  query.changed(doc._id, changedFields);
                  query.results.set(doc._id, doc);
                }

                return;
              }

              const old_idx = LocalCollection._findInOrderedResults(query, doc);

              if (Object.keys(changedFields).length) {
                query.changed(doc._id, changedFields);
              }

              if (!query.sorter) {
                return;
              } // just take it out and put it back in again, and see if the index changes


              query.results.splice(old_idx, 1);

              const new_idx = LocalCollection._insertInSortedList(query.sorter.getComparator({
                distances: query.distances
              }), query.results, doc);

              if (old_idx !== new_idx) {
                let next = query.results[new_idx + 1];

                if (next) {
                  next = next._id;
                } else {
                  next = null;
                }

                query.movedBefore && query.movedBefore(doc._id, next);
              }
            };

            const MODIFIERS = {
              $currentDate(target, field, arg) {
                if (typeof arg === 'object' && hasOwn.call(arg, '$type')) {
                  if (arg.$type !== 'date') {
                    throw MinimongoError('Minimongo does currently only support the date type in ' + '$currentDate modifiers', {
                      field
                    });
                  }
                } else if (arg !== true) {
                  throw MinimongoError('Invalid $currentDate modifier', {
                    field
                  });
                }

                target[field] = new Date();
              },

              $inc(target, field, arg) {
                if (typeof arg !== 'number') {
                  throw MinimongoError('Modifier $inc allowed for numbers only', {
                    field
                  });
                }

                if (field in target) {
                  if (typeof target[field] !== 'number') {
                    throw MinimongoError('Cannot apply $inc modifier to non-number', {
                      field
                    });
                  }

                  target[field] += arg;
                } else {
                  target[field] = arg;
                }
              },

              $min(target, field, arg) {
                if (typeof arg !== 'number') {
                  throw MinimongoError('Modifier $min allowed for numbers only', {
                    field
                  });
                }

                if (field in target) {
                  if (typeof target[field] !== 'number') {
                    throw MinimongoError('Cannot apply $min modifier to non-number', {
                      field
                    });
                  }

                  if (target[field] > arg) {
                    target[field] = arg;
                  }
                } else {
                  target[field] = arg;
                }
              },

              $max(target, field, arg) {
                if (typeof arg !== 'number') {
                  throw MinimongoError('Modifier $max allowed for numbers only', {
                    field
                  });
                }

                if (field in target) {
                  if (typeof target[field] !== 'number') {
                    throw MinimongoError('Cannot apply $max modifier to non-number', {
                      field
                    });
                  }

                  if (target[field] < arg) {
                    target[field] = arg;
                  }
                } else {
                  target[field] = arg;
                }
              },

              $mul(target, field, arg) {
                if (typeof arg !== 'number') {
                  throw MinimongoError('Modifier $mul allowed for numbers only', {
                    field
                  });
                }

                if (field in target) {
                  if (typeof target[field] !== 'number') {
                    throw MinimongoError('Cannot apply $mul modifier to non-number', {
                      field
                    });
                  }

                  target[field] *= arg;
                } else {
                  target[field] = 0;
                }
              },

              $rename(target, field, arg, keypath, doc) {
                // no idea why mongo has this restriction..
                if (keypath === arg) {
                  throw MinimongoError('$rename source must differ from target', {
                    field
                  });
                }

                if (target === null) {
                  throw MinimongoError('$rename source field invalid', {
                    field
                  });
                }

                if (typeof arg !== 'string') {
                  throw MinimongoError('$rename target must be a string', {
                    field
                  });
                }

                if (arg.includes('\0')) {
                  // Null bytes are not allowed in Mongo field names
                  // https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names
                  throw MinimongoError('The \'to\' field for $rename cannot contain an embedded null byte', {
                    field
                  });
                }

                if (target === undefined) {
                  return;
                }

                const object = target[field];
                delete target[field];
                const keyparts = arg.split('.');
                const target2 = findModTarget(doc, keyparts, {
                  forbidArray: true
                });

                if (target2 === null) {
                  throw MinimongoError('$rename target field invalid', {
                    field
                  });
                }

                target2[keyparts.pop()] = object;
              },

              $set(target, field, arg) {
                if (target !== Object(target)) {
                  // not an array or an object
                  const error = MinimongoError('Cannot set property on non-object field', {
                    field
                  });
                  error.setPropertyError = true;
                  throw error;
                }

                if (target === null) {
                  const error = MinimongoError('Cannot set property on null', {
                    field
                  });
                  error.setPropertyError = true;
                  throw error;
                }

                assertHasValidFieldNames(arg);
                target[field] = arg;
              },

              $setOnInsert(target, field, arg) {// converted to `$set` in `_modify`
              },

              $unset(target, field, arg) {
                if (target !== undefined) {
                  if (target instanceof Array) {
                    if (field in target) {
                      target[field] = null;
                    }
                  } else {
                    delete target[field];
                  }
                }
              },

              $push(target, field, arg) {
                if (target[field] === undefined) {
                  target[field] = [];
                }

                if (!(target[field] instanceof Array)) {
                  throw MinimongoError('Cannot apply $push modifier to non-array', {
                    field
                  });
                }

                if (!(arg && arg.$each)) {
                  // Simple mode: not $each
                  assertHasValidFieldNames(arg);
                  target[field].push(arg);
                  return;
                } // Fancy mode: $each (and maybe $slice and $sort and $position)


                const toPush = arg.$each;

                if (!(toPush instanceof Array)) {
                  throw MinimongoError('$each must be an array', {
                    field
                  });
                }

                assertHasValidFieldNames(toPush); // Parse $position

                let position = undefined;

                if ('$position' in arg) {
                  if (typeof arg.$position !== 'number') {
                    throw MinimongoError('$position must be a numeric value', {
                      field
                    });
                  } // XXX should check to make sure integer


                  if (arg.$position < 0) {
                    throw MinimongoError('$position in $push must be zero or positive', {
                      field
                    });
                  }

                  position = arg.$position;
                } // Parse $slice.


                let slice = undefined;

                if ('$slice' in arg) {
                  if (typeof arg.$slice !== 'number') {
                    throw MinimongoError('$slice must be a numeric value', {
                      field
                    });
                  } // XXX should check to make sure integer


                  slice = arg.$slice;
                } // Parse $sort.


                let sortFunction = undefined;

                if (arg.$sort) {
                  if (slice === undefined) {
                    throw MinimongoError('$sort requires $slice to be present', {
                      field
                    });
                  } // XXX this allows us to use a $sort whose value is an array, but that's
                  // actually an extension of the Node driver, so it won't work
                  // server-side. Could be confusing!
                  // XXX is it correct that we don't do geo-stuff here?


                  sortFunction = new Minimongo.Sorter(arg.$sort).getComparator();
                  toPush.forEach(element => {
                    if (LocalCollection._f._type(element) !== 3) {
                      throw MinimongoError('$push like modifiers using $sort require all elements to be ' + 'objects', {
                        field
                      });
                    }
                  });
                } // Actually push.


                if (position === undefined) {
                  toPush.forEach(element => {
                    target[field].push(element);
                  });
                } else {
                  const spliceArguments = [position, 0];
                  toPush.forEach(element => {
                    spliceArguments.push(element);
                  });
                  target[field].splice(...spliceArguments);
                } // Actually sort.


                if (sortFunction) {
                  target[field].sort(sortFunction);
                } // Actually slice.


                if (slice !== undefined) {
                  if (slice === 0) {
                    target[field] = []; // differs from Array.slice!
                  } else if (slice < 0) {
                    target[field] = target[field].slice(slice);
                  } else {
                    target[field] = target[field].slice(0, slice);
                  }
                }
              },

              $pushAll(target, field, arg) {
                if (!(typeof arg === 'object' && arg instanceof Array)) {
                  throw MinimongoError('Modifier $pushAll/pullAll allowed for arrays only');
                }

                assertHasValidFieldNames(arg);
                const toPush = target[field];

                if (toPush === undefined) {
                  target[field] = arg;
                } else if (!(toPush instanceof Array)) {
                  throw MinimongoError('Cannot apply $pushAll modifier to non-array', {
                    field
                  });
                } else {
                  toPush.push(...arg);
                }
              },

              $addToSet(target, field, arg) {
                let isEach = false;

                if (typeof arg === 'object') {
                  // check if first key is '$each'
                  const keys = Object.keys(arg);

                  if (keys[0] === '$each') {
                    isEach = true;
                  }
                }

                const values = isEach ? arg.$each : [arg];
                assertHasValidFieldNames(values);
                const toAdd = target[field];

                if (toAdd === undefined) {
                  target[field] = values;
                } else if (!(toAdd instanceof Array)) {
                  throw MinimongoError('Cannot apply $addToSet modifier to non-array', {
                    field
                  });
                } else {
                  values.forEach(value => {
                    if (toAdd.some(element => LocalCollection._f._equal(value, element))) {
                      return;
                    }

                    toAdd.push(value);
                  });
                }
              },

              $pop(target, field, arg) {
                if (target === undefined) {
                  return;
                }

                const toPop = target[field];

                if (toPop === undefined) {
                  return;
                }

                if (!(toPop instanceof Array)) {
                  throw MinimongoError('Cannot apply $pop modifier to non-array', {
                    field
                  });
                }

                if (typeof arg === 'number' && arg < 0) {
                  toPop.splice(0, 1);
                } else {
                  toPop.pop();
                }
              },

              $pull(target, field, arg) {
                if (target === undefined) {
                  return;
                }

                const toPull = target[field];

                if (toPull === undefined) {
                  return;
                }

                if (!(toPull instanceof Array)) {
                  throw MinimongoError('Cannot apply $pull/pullAll modifier to non-array', {
                    field
                  });
                }

                let out;

                if (arg != null && typeof arg === 'object' && !(arg instanceof Array)) {
                  // XXX would be much nicer to compile this once, rather than
                  // for each document we modify.. but usually we're not
                  // modifying that many documents, so we'll let it slide for
                  // now
                  // XXX Minimongo.Matcher isn't up for the job, because we need
                  // to permit stuff like {$pull: {a: {$gt: 4}}}.. something
                  // like {$gt: 4} is not normally a complete selector.
                  // same issue as $elemMatch possibly?
                  const matcher = new Minimongo.Matcher(arg);
                  out = toPull.filter(element => !matcher.documentMatches(element).result);
                } else {
                  out = toPull.filter(element => !LocalCollection._f._equal(element, arg));
                }

                target[field] = out;
              },

              $pullAll(target, field, arg) {
                if (!(typeof arg === 'object' && arg instanceof Array)) {
                  throw MinimongoError('Modifier $pushAll/pullAll allowed for arrays only', {
                    field
                  });
                }

                if (target === undefined) {
                  return;
                }

                const toPull = target[field];

                if (toPull === undefined) {
                  return;
                }

                if (!(toPull instanceof Array)) {
                  throw MinimongoError('Cannot apply $pull/pullAll modifier to non-array', {
                    field
                  });
                }

                target[field] = toPull.filter(object => !arg.some(element => LocalCollection._f._equal(object, element)));
              },

              $bit(target, field, arg) {
                // XXX mongo only supports $bit on integers, and we only support
                // native javascript numbers (doubles) so far, so we can't support $bit
                throw MinimongoError('$bit is not supported', {
                  field
                });
              },

              $v() {// As discussed in https://github.com/meteor/meteor/issues/9623,
                // the `$v` operator is not needed by Meteor, but problems can occur if
                // it's not at least callable (as of Mongo >= 3.6). It's defined here as
                // a no-op to work around these problems.
              }

            };
            const NO_CREATE_MODIFIERS = {
              $pop: true,
              $pull: true,
              $pullAll: true,
              $rename: true,
              $unset: true
            }; // Make sure field names do not contain Mongo restricted
            // characters ('.', '$', '\0').
            // https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names

            const invalidCharMsg = {
              $: 'start with \'$\'',
              '.': 'contain \'.\'',
              '\0': 'contain null bytes'
            }; // checks if all field names in an object are valid

            function assertHasValidFieldNames(doc) {
              if (doc && typeof doc === 'object') {
                JSON.stringify(doc, (key, value) => {
                  assertIsValidFieldName(key);
                  return value;
                });
              }
            }

            function assertIsValidFieldName(key) {
              let match;

              if (typeof key === 'string' && (match = key.match(/^\$|\.|\0/))) {
                throw MinimongoError("Key ".concat(key, " must not ").concat(invalidCharMsg[match[0]]));
              }
            } // for a.b.c.2.d.e, keyparts should be ['a', 'b', 'c', '2', 'd', 'e'],
            // and then you would operate on the 'e' property of the returned
            // object.
            //
            // if options.noCreate is falsey, creates intermediate levels of
            // structure as necessary, like mkdir -p (and raises an exception if
            // that would mean giving a non-numeric property to an array.) if
            // options.noCreate is true, return undefined instead.
            //
            // may modify the last element of keyparts to signal to the caller that it needs
            // to use a different value to index into the returned object (for example,
            // ['a', '01'] -> ['a', 1]).
            //
            // if forbidArray is true, return null if the keypath goes through an array.
            //
            // if options.arrayIndices is set, use its first element for the (first) '$' in
            // the path.


            function findModTarget(doc, keyparts) {
              let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
              let usedArrayIndex = false;

              for (let i = 0; i < keyparts.length; i++) {
                const last = i === keyparts.length - 1;
                let keypart = keyparts[i];

                if (!isIndexable(doc)) {
                  if (options.noCreate) {
                    return undefined;
                  }

                  const error = MinimongoError("cannot use the part '".concat(keypart, "' to traverse ").concat(doc));
                  error.setPropertyError = true;
                  throw error;
                }

                if (doc instanceof Array) {
                  if (options.forbidArray) {
                    return null;
                  }

                  if (keypart === '$') {
                    if (usedArrayIndex) {
                      throw MinimongoError('Too many positional (i.e. \'$\') elements');
                    }

                    if (!options.arrayIndices || !options.arrayIndices.length) {
                      throw MinimongoError('The positional operator did not find the match needed from the ' + 'query');
                    }

                    keypart = options.arrayIndices[0];
                    usedArrayIndex = true;
                  } else if (isNumericKey(keypart)) {
                    keypart = parseInt(keypart);
                  } else {
                    if (options.noCreate) {
                      return undefined;
                    }

                    throw MinimongoError("can't append to array using string field name [".concat(keypart, "]"));
                  }

                  if (last) {
                    keyparts[i] = keypart; // handle 'a.01'
                  }

                  if (options.noCreate && keypart >= doc.length) {
                    return undefined;
                  }

                  while (doc.length < keypart) {
                    doc.push(null);
                  }

                  if (!last) {
                    if (doc.length === keypart) {
                      doc.push({});
                    } else if (typeof doc[keypart] !== 'object') {
                      throw MinimongoError("can't modify field '".concat(keyparts[i + 1], "' of list value ") + JSON.stringify(doc[keypart]));
                    }
                  }
                } else {
                  assertIsValidFieldName(keypart);

                  if (!(keypart in doc)) {
                    if (options.noCreate) {
                      return undefined;
                    }

                    if (!last) {
                      doc[keypart] = {};
                    }
                  }
                }

                if (last) {
                  return doc;
                }

                doc = doc[keypart];
              } // notreached
            }
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "matcher.js": function module(_require6, _exports6, _module5) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/matcher.js                                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var _Package$mongoDecima;

            _module5.export({
              default: () => Matcher
            });
            let LocalCollection;
            _module5.link("./local_collection.js", {
              default(v) {
                LocalCollection = v;
              }

            }, 0);
            let compileDocumentSelector, hasOwn, nothingMatcher;
            _module5.link("./common.js", {
              compileDocumentSelector(v) {
                compileDocumentSelector = v;
              },

              hasOwn(v) {
                hasOwn = v;
              },

              nothingMatcher(v) {
                nothingMatcher = v;
              }

            }, 1);
            const Decimal = ((_Package$mongoDecima = Package['mongo-decimal']) === null || _Package$mongoDecima === void 0 ? void 0 : _Package$mongoDecima.Decimal) || class DecimalStub {}; // The minimongo selector compiler!
            // Terminology:
            //  - a 'selector' is the EJSON object representing a selector
            //  - a 'matcher' is its compiled form (whether a full Minimongo.Matcher
            //    object or one of the component lambdas that matches parts of it)
            //  - a 'result object' is an object with a 'result' field and maybe
            //    distance and arrayIndices.
            //  - a 'branched value' is an object with a 'value' field and maybe
            //    'dontIterate' and 'arrayIndices'.
            //  - a 'document' is a top-level object that can be stored in a collection.
            //  - a 'lookup function' is a function that takes in a document and returns
            //    an array of 'branched values'.
            //  - a 'branched matcher' maps from an array of branched values to a result
            //    object.
            //  - an 'element matcher' maps from a single value to a bool.
            // Main entry point.
            //   var matcher = new Minimongo.Matcher({a: {$gt: 5}});
            //   if (matcher.documentMatches({a: 7})) ...

            class Matcher {
              constructor(selector, isUpdate) {
                // A set (object mapping string -> *) of all of the document paths looked
                // at by the selector. Also includes the empty string if it may look at any
                // path (eg, $where).
                this._paths = {}; // Set to true if compilation finds a $near.

                this._hasGeoQuery = false; // Set to true if compilation finds a $where.

                this._hasWhere = false; // Set to false if compilation finds anything other than a simple equality
                // or one or more of '$gt', '$gte', '$lt', '$lte', '$ne', '$in', '$nin' used
                // with scalars as operands.

                this._isSimple = true; // Set to a dummy document which always matches this Matcher. Or set to null
                // if such document is too hard to find.

                this._matchingDocument = undefined; // A clone of the original selector. It may just be a function if the user
                // passed in a function; otherwise is definitely an object (eg, IDs are
                // translated into {_id: ID} first. Used by canBecomeTrueByModifier and
                // Sorter._useWithMatcher.

                this._selector = null;
                this._docMatcher = this._compileSelector(selector); // Set to true if selection is done for an update operation
                // Default is false
                // Used for $near array update (issue #3599)

                this._isUpdate = isUpdate;
              }

              documentMatches(doc) {
                if (doc !== Object(doc)) {
                  throw Error('documentMatches needs a document');
                }

                return this._docMatcher(doc);
              }

              hasGeoQuery() {
                return this._hasGeoQuery;
              }

              hasWhere() {
                return this._hasWhere;
              }

              isSimple() {
                return this._isSimple;
              } // Given a selector, return a function that takes one argument, a
              // document. It returns a result object.


              _compileSelector(selector) {
                // you can pass a literal function instead of a selector
                if (selector instanceof Function) {
                  this._isSimple = false;
                  this._selector = selector;

                  this._recordPathUsed('');

                  return doc => ({
                    result: !!selector.call(doc)
                  });
                } // shorthand -- scalar _id


                if (LocalCollection._selectorIsId(selector)) {
                  this._selector = {
                    _id: selector
                  };

                  this._recordPathUsed('_id');

                  return doc => ({
                    result: EJSON.equals(doc._id, selector)
                  });
                } // protect against dangerous selectors.  falsey and {_id: falsey} are both
                // likely programmer error, and not what you want, particularly for
                // destructive operations.


                if (!selector || hasOwn.call(selector, '_id') && !selector._id) {
                  this._isSimple = false;
                  return nothingMatcher;
                } // Top level can't be an array or true or binary.


                if (Array.isArray(selector) || EJSON.isBinary(selector) || typeof selector === 'boolean') {
                  throw new Error("Invalid selector: ".concat(selector));
                }

                this._selector = EJSON.clone(selector);
                return compileDocumentSelector(selector, this, {
                  isRoot: true
                });
              } // Returns a list of key paths the given selector is looking for. It includes
              // the empty string if there is a $where.


              _getPaths() {
                return Object.keys(this._paths);
              }

              _recordPathUsed(path) {
                this._paths[path] = true;
              }

            }

            // helpers used by compiled selector code
            LocalCollection._f = {
              // XXX for _all and _in, consider building 'inquery' at compile time..
              _type(v) {
                if (typeof v === 'number') {
                  return 1;
                }

                if (typeof v === 'string') {
                  return 2;
                }

                if (typeof v === 'boolean') {
                  return 8;
                }

                if (Array.isArray(v)) {
                  return 4;
                }

                if (v === null) {
                  return 10;
                } // note that typeof(/x/) === "object"


                if (v instanceof RegExp) {
                  return 11;
                }

                if (typeof v === 'function') {
                  return 13;
                }

                if (v instanceof Date) {
                  return 9;
                }

                if (EJSON.isBinary(v)) {
                  return 5;
                }

                if (v instanceof MongoID.ObjectID) {
                  return 7;
                }

                if (v instanceof Decimal) {
                  return 1;
                } // object


                return 3; // XXX support some/all of these:
                // 14, symbol
                // 15, javascript code with scope
                // 16, 18: 32-bit/64-bit integer
                // 17, timestamp
                // 255, minkey
                // 127, maxkey
              },

              // deep equality test: use for literal document and array matches
              _equal(a, b) {
                return EJSON.equals(a, b, {
                  keyOrderSensitive: true
                });
              },

              // maps a type code to a value that can be used to sort values of different
              // types
              _typeorder(t) {
                // http://www.mongodb.org/display/DOCS/What+is+the+Compare+Order+for+BSON+Types
                // XXX what is the correct sort position for Javascript code?
                // ('100' in the matrix below)
                // XXX minkey/maxkey
                return [-1, // (not a type)
                1, // number
                2, // string
                3, // object
                4, // array
                5, // binary
                -1, // deprecated
                6, // ObjectID
                7, // bool
                8, // Date
                0, // null
                9, // RegExp
                -1, // deprecated
                100, // JS code
                2, // deprecated (symbol)
                100, // JS code
                1, // 32-bit int
                8, // Mongo timestamp
                1 // 64-bit int
                ][t];
              },

              // compare two values of unknown type according to BSON ordering
              // semantics. (as an extension, consider 'undefined' to be less than
              // any other value.) return negative if a is less, positive if b is
              // less, or 0 if equal
              _cmp(a, b) {
                if (a === undefined) {
                  return b === undefined ? 0 : -1;
                }

                if (b === undefined) {
                  return 1;
                }

                let ta = LocalCollection._f._type(a);

                let tb = LocalCollection._f._type(b);

                const oa = LocalCollection._f._typeorder(ta);

                const ob = LocalCollection._f._typeorder(tb);

                if (oa !== ob) {
                  return oa < ob ? -1 : 1;
                } // XXX need to implement this if we implement Symbol or integers, or
                // Timestamp


                if (ta !== tb) {
                  throw Error('Missing type coercion logic in _cmp');
                }

                if (ta === 7) {
                  // ObjectID
                  // Convert to string.
                  ta = tb = 2;
                  a = a.toHexString();
                  b = b.toHexString();
                }

                if (ta === 9) {
                  // Date
                  // Convert to millis.
                  ta = tb = 1;
                  a = a.getTime();
                  b = b.getTime();
                }

                if (ta === 1) {
                  // double
                  if (a instanceof Decimal) {
                    return a.minus(b).toNumber();
                  } else {
                    return a - b;
                  }
                }

                if (tb === 2) // string
                  return a < b ? -1 : a === b ? 0 : 1;

                if (ta === 3) {
                  // Object
                  // this could be much more efficient in the expected case ...
                  const toArray = object => {
                    const result = [];
                    Object.keys(object).forEach(key => {
                      result.push(key, object[key]);
                    });
                    return result;
                  };

                  return LocalCollection._f._cmp(toArray(a), toArray(b));
                }

                if (ta === 4) {
                  // Array
                  for (let i = 0;; i++) {
                    if (i === a.length) {
                      return i === b.length ? 0 : -1;
                    }

                    if (i === b.length) {
                      return 1;
                    }

                    const s = LocalCollection._f._cmp(a[i], b[i]);

                    if (s !== 0) {
                      return s;
                    }
                  }
                }

                if (ta === 5) {
                  // binary
                  // Surprisingly, a small binary blob is always less than a large one in
                  // Mongo.
                  if (a.length !== b.length) {
                    return a.length - b.length;
                  }

                  for (let i = 0; i < a.length; i++) {
                    if (a[i] < b[i]) {
                      return -1;
                    }

                    if (a[i] > b[i]) {
                      return 1;
                    }
                  }

                  return 0;
                }

                if (ta === 8) {
                  // boolean
                  if (a) {
                    return b ? 0 : 1;
                  }

                  return b ? -1 : 0;
                }

                if (ta === 10) // null
                  return 0;
                if (ta === 11) // regexp
                  throw Error('Sorting not supported on regular expression'); // XXX
                // 13: javascript code
                // 14: symbol
                // 15: javascript code with scope
                // 16: 32-bit integer
                // 17: timestamp
                // 18: 64-bit integer
                // 255: minkey
                // 127: maxkey

                if (ta === 13) // javascript code
                  throw Error('Sorting not supported on Javascript code'); // XXX

                throw Error('Unknown type to sort');
              }

            };
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "minimongo_common.js": function module(_require7, _exports7, _module6) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/minimongo_common.js                                                                              //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            let LocalCollection_;
            _module6.link("./local_collection.js", {
              default(v) {
                LocalCollection_ = v;
              }

            }, 0);
            let Matcher;
            _module6.link("./matcher.js", {
              default(v) {
                Matcher = v;
              }

            }, 1);
            let Sorter;
            _module6.link("./sorter.js", {
              default(v) {
                Sorter = v;
              }

            }, 2);
            LocalCollection = LocalCollection_;
            Minimongo = {
              LocalCollection: LocalCollection_,
              Matcher,
              Sorter
            };
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "observe_handle.js": function module(_require8, _exports8, _module7) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/observe_handle.js                                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module7.export({
              default: () => ObserveHandle
            });

            class ObserveHandle {}
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "sorter.js": function module(_require9, _exports9, _module8) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/sorter.js                                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module8.export({
              default: () => Sorter
            });
            let ELEMENT_OPERATORS, equalityElementMatcher, expandArraysInBranches, hasOwn, isOperatorObject, makeLookupFunction, regexpElementMatcher;
            _module8.link("./common.js", {
              ELEMENT_OPERATORS(v) {
                ELEMENT_OPERATORS = v;
              },

              equalityElementMatcher(v) {
                equalityElementMatcher = v;
              },

              expandArraysInBranches(v) {
                expandArraysInBranches = v;
              },

              hasOwn(v) {
                hasOwn = v;
              },

              isOperatorObject(v) {
                isOperatorObject = v;
              },

              makeLookupFunction(v) {
                makeLookupFunction = v;
              },

              regexpElementMatcher(v) {
                regexpElementMatcher = v;
              }

            }, 0);

            class Sorter {
              constructor(spec) {
                this._sortSpecParts = [];
                this._sortFunction = null;

                const addSpecPart = (path, ascending) => {
                  if (!path) {
                    throw Error('sort keys must be non-empty');
                  }

                  if (path.charAt(0) === '$') {
                    throw Error("unsupported sort key: ".concat(path));
                  }

                  this._sortSpecParts.push({
                    ascending,
                    lookup: makeLookupFunction(path, {
                      forSort: true
                    }),
                    path
                  });
                };

                if (spec instanceof Array) {
                  spec.forEach(element => {
                    if (typeof element === 'string') {
                      addSpecPart(element, true);
                    } else {
                      addSpecPart(element[0], element[1] !== 'desc');
                    }
                  });
                } else if (typeof spec === 'object') {
                  Object.keys(spec).forEach(key => {
                    addSpecPart(key, spec[key] >= 0);
                  });
                } else if (typeof spec === 'function') {
                  this._sortFunction = spec;
                } else {
                  throw Error("Bad sort specification: ".concat(JSON.stringify(spec)));
                } // If a function is specified for sorting, we skip the rest.


                if (this._sortFunction) {
                  return;
                } // To implement affectedByModifier, we piggy-back on top of Matcher's
                // affectedByModifier code; we create a selector that is affected by the
                // same modifiers as this sort order. This is only implemented on the
                // server.


                if (this.affectedByModifier) {
                  const selector = {};

                  this._sortSpecParts.forEach(spec => {
                    selector[spec.path] = 1;
                  });

                  this._selectorForAffectedByModifier = new Minimongo.Matcher(selector);
                }

                this._keyComparator = composeComparators(this._sortSpecParts.map((spec, i) => this._keyFieldComparator(i)));
              }

              getComparator(options) {
                // If sort is specified or have no distances, just use the comparator from
                // the source specification (which defaults to "everything is equal".
                // issue #3599
                // https://docs.mongodb.com/manual/reference/operator/query/near/#sort-operation
                // sort effectively overrides $near
                if (this._sortSpecParts.length || !options || !options.distances) {
                  return this._getBaseComparator();
                }

                const distances = options.distances; // Return a comparator which compares using $near distances.

                return (a, b) => {
                  if (!distances.has(a._id)) {
                    throw Error("Missing distance for ".concat(a._id));
                  }

                  if (!distances.has(b._id)) {
                    throw Error("Missing distance for ".concat(b._id));
                  }

                  return distances.get(a._id) - distances.get(b._id);
                };
              } // Takes in two keys: arrays whose lengths match the number of spec
              // parts. Returns negative, 0, or positive based on using the sort spec to
              // compare fields.


              _compareKeys(key1, key2) {
                if (key1.length !== this._sortSpecParts.length || key2.length !== this._sortSpecParts.length) {
                  throw Error('Key has wrong length');
                }

                return this._keyComparator(key1, key2);
              } // Iterates over each possible "key" from doc (ie, over each branch), calling
              // 'cb' with the key.


              _generateKeysFromDoc(doc, cb) {
                if (this._sortSpecParts.length === 0) {
                  throw new Error('can\'t generate keys without a spec');
                }

                const pathFromIndices = indices => "".concat(indices.join(','), ",");

                let knownPaths = null; // maps index -> ({'' -> value} or {path -> value})

                const valuesByIndexAndPath = this._sortSpecParts.map(spec => {
                  // Expand any leaf arrays that we find, and ignore those arrays
                  // themselves.  (We never sort based on an array itself.)
                  let branches = expandArraysInBranches(spec.lookup(doc), true); // If there are no values for a key (eg, key goes to an empty array),
                  // pretend we found one undefined value.

                  if (!branches.length) {
                    branches = [{
                      value: void 0
                    }];
                  }

                  const element = Object.create(null);
                  let usedPaths = false;
                  branches.forEach(branch => {
                    if (!branch.arrayIndices) {
                      // If there are no array indices for a branch, then it must be the
                      // only branch, because the only thing that produces multiple branches
                      // is the use of arrays.
                      if (branches.length > 1) {
                        throw Error('multiple branches but no array used?');
                      }

                      element[''] = branch.value;
                      return;
                    }

                    usedPaths = true;
                    const path = pathFromIndices(branch.arrayIndices);

                    if (hasOwn.call(element, path)) {
                      throw Error("duplicate path: ".concat(path));
                    }

                    element[path] = branch.value; // If two sort fields both go into arrays, they have to go into the
                    // exact same arrays and we have to find the same paths.  This is
                    // roughly the same condition that makes MongoDB throw this strange
                    // error message.  eg, the main thing is that if sort spec is {a: 1,
                    // b:1} then a and b cannot both be arrays.
                    //
                    // (In MongoDB it seems to be OK to have {a: 1, 'a.x.y': 1} where 'a'
                    // and 'a.x.y' are both arrays, but we don't allow this for now.
                    // #NestedArraySort
                    // XXX achieve full compatibility here

                    if (knownPaths && !hasOwn.call(knownPaths, path)) {
                      throw Error('cannot index parallel arrays');
                    }
                  });

                  if (knownPaths) {
                    // Similarly to above, paths must match everywhere, unless this is a
                    // non-array field.
                    if (!hasOwn.call(element, '') && Object.keys(knownPaths).length !== Object.keys(element).length) {
                      throw Error('cannot index parallel arrays!');
                    }
                  } else if (usedPaths) {
                    knownPaths = {};
                    Object.keys(element).forEach(path => {
                      knownPaths[path] = true;
                    });
                  }

                  return element;
                });

                if (!knownPaths) {
                  // Easy case: no use of arrays.
                  const soleKey = valuesByIndexAndPath.map(values => {
                    if (!hasOwn.call(values, '')) {
                      throw Error('no value in sole key case?');
                    }

                    return values[''];
                  });
                  cb(soleKey);
                  return;
                }

                Object.keys(knownPaths).forEach(path => {
                  const key = valuesByIndexAndPath.map(values => {
                    if (hasOwn.call(values, '')) {
                      return values[''];
                    }

                    if (!hasOwn.call(values, path)) {
                      throw Error('missing path?');
                    }

                    return values[path];
                  });
                  cb(key);
                });
              } // Returns a comparator that represents the sort specification (but not
              // including a possible geoquery distance tie-breaker).


              _getBaseComparator() {
                if (this._sortFunction) {
                  return this._sortFunction;
                } // If we're only sorting on geoquery distance and no specs, just say
                // everything is equal.


                if (!this._sortSpecParts.length) {
                  return (doc1, doc2) => 0;
                }

                return (doc1, doc2) => {
                  const key1 = this._getMinKeyFromDoc(doc1);

                  const key2 = this._getMinKeyFromDoc(doc2);

                  return this._compareKeys(key1, key2);
                };
              } // Finds the minimum key from the doc, according to the sort specs.  (We say
              // "minimum" here but this is with respect to the sort spec, so "descending"
              // sort fields mean we're finding the max for that field.)
              //
              // Note that this is NOT "find the minimum value of the first field, the
              // minimum value of the second field, etc"... it's "choose the
              // lexicographically minimum value of the key vector, allowing only keys which
              // you can find along the same paths".  ie, for a doc {a: [{x: 0, y: 5}, {x:
              // 1, y: 3}]} with sort spec {'a.x': 1, 'a.y': 1}, the only keys are [0,5] and
              // [1,3], and the minimum key is [0,5]; notably, [0,3] is NOT a key.


              _getMinKeyFromDoc(doc) {
                let minKey = null;

                this._generateKeysFromDoc(doc, key => {
                  if (minKey === null) {
                    minKey = key;
                    return;
                  }

                  if (this._compareKeys(key, minKey) < 0) {
                    minKey = key;
                  }
                });

                return minKey;
              }

              _getPaths() {
                return this._sortSpecParts.map(part => part.path);
              } // Given an index 'i', returns a comparator that compares two key arrays based
              // on field 'i'.


              _keyFieldComparator(i) {
                const invert = !this._sortSpecParts[i].ascending;
                return (key1, key2) => {
                  const compare = LocalCollection._f._cmp(key1[i], key2[i]);

                  return invert ? -compare : compare;
                };
              }

            }

            // Given an array of comparators
            // (functions (a,b)->(negative or positive or zero)), returns a single
            // comparator which uses each comparator in order and returns the first
            // non-zero value.
            function composeComparators(comparatorArray) {
              return (a, b) => {
                for (let i = 0; i < comparatorArray.length; ++i) {
                  const compare = comparatorArray[i](a, b);

                  if (compare !== 0) {
                    return compare;
                  }
                }

                return 0;
              };
            }
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports3 = _require3("/node_modules/meteor/minimongo/minimongo_client.js");

  /* Exports */
  Package._define("minimongo", _exports3, {
    LocalCollection: LocalCollection,
    Minimongo: Minimongo,
    MinimongoTest: MinimongoTest,
    MinimongoError: MinimongoError
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var EJSON = Package.ejson.EJSON;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var check, Match;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "check": { "match.js": function module(_require, _exports, _module) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                               //
            // packages/check/match.js                                                                                       //
            //                                                                                                               //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              check: () => check,
              Match: () => Match
            });
            let isPlainObject;
            _module.link("./isPlainObject", {
              isPlainObject(v) {
                isPlainObject = v;
              }

            }, 0);
            // Things we explicitly do NOT support:
            //    - heterogenous arrays
            const currentArgumentChecker = new Meteor.EnvironmentVariable();
            const hasOwn = Object.prototype.hasOwnProperty;
            /**
             * @summary Check that a value matches a [pattern](#matchpatterns).
             * If the value does not match the pattern, throw a `Match.Error`.
             *
             * Particularly useful to assert that arguments to a function have the right
             * types and structure.
             * @locus Anywhere
             * @param {Any} value The value to check
             * @param {MatchPattern} pattern The pattern to match `value` against
             */

            function check(value, pattern) {
              // Record that check got called, if somebody cared.
              //
              // We use getOrNullIfOutsideFiber so that it's OK to call check()
              // from non-Fiber server contexts; the downside is that if you forget to
              // bindEnvironment on some random callback in your method/publisher,
              // it might not find the argumentChecker and you'll get an error about
              // not checking an argument that it looks like you're checking (instead
              // of just getting a "Node code must run in a Fiber" error).
              const argChecker = currentArgumentChecker.getOrNullIfOutsideFiber();

              if (argChecker) {
                argChecker.checking(value);
              }

              const result = testSubtree(value, pattern);

              if (result) {
                const err = new Match.Error(result.message);

                if (result.path) {
                  err.message += " in field ".concat(result.path);
                  err.path = result.path;
                }

                throw err;
              }
            }

            ;
            /**
             * @namespace Match
             * @summary The namespace for all Match types and methods.
             */

            const Match = {
              Optional: function (pattern) {
                return new Optional(pattern);
              },
              Maybe: function (pattern) {
                return new Maybe(pattern);
              },
              OneOf: function () {
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                return new OneOf(args);
              },
              Any: ['__any__'],
              Where: function (condition) {
                return new Where(condition);
              },
              ObjectIncluding: function (pattern) {
                return new ObjectIncluding(pattern);
              },
              ObjectWithValues: function (pattern) {
                return new ObjectWithValues(pattern);
              },
              // Matches only signed 32-bit integers
              Integer: ['__integer__'],
              // XXX matchers should know how to describe themselves for errors
              Error: Meteor.makeErrorType('Match.Error', function (msg) {
                this.message = "Match error: ".concat(msg); // The path of the value that failed to match. Initially empty, this gets
                // populated by catching and rethrowing the exception as it goes back up the
                // stack.
                // E.g.: "vals[3].entity.created"

                this.path = ''; // If this gets sent over DDP, don't give full internal details but at least
                // provide something better than 500 Internal server error.

                this.sanitizedError = new Meteor.Error(400, 'Match failed');
              }),

              // Tests to see if value matches pattern. Unlike check, it merely returns true
              // or false (unless an error other than Match.Error was thrown). It does not
              // interact with _failIfArgumentsAreNotAllChecked.
              // XXX maybe also implement a Match.match which returns more information about
              //     failures but without using exception handling or doing what check()
              //     does with _failIfArgumentsAreNotAllChecked and Meteor.Error conversion

              /**
               * @summary Returns true if the value matches the pattern.
               * @locus Anywhere
               * @param {Any} value The value to check
               * @param {MatchPattern} pattern The pattern to match `value` against
               */
              test(value, pattern) {
                return !testSubtree(value, pattern);
              },

              // Runs `f.apply(context, args)`. If check() is not called on every element of
              // `args` (either directly or in the first level of an array), throws an error
              // (using `description` in the message).
              _failIfArgumentsAreNotAllChecked(f, context, args, description) {
                const argChecker = new ArgumentChecker(args, description);
                const result = currentArgumentChecker.withValue(argChecker, () => f.apply(context, args)); // If f didn't itself throw, make sure it checked all of its arguments.

                argChecker.throwUnlessAllArgumentsHaveBeenChecked();
                return result;
              }

            };

            class Optional {
              constructor(pattern) {
                this.pattern = pattern;
              }

            }

            class Maybe {
              constructor(pattern) {
                this.pattern = pattern;
              }

            }

            class OneOf {
              constructor(choices) {
                if (!choices || choices.length === 0) {
                  throw new Error('Must provide at least one choice to Match.OneOf');
                }

                this.choices = choices;
              }

            }

            class Where {
              constructor(condition) {
                this.condition = condition;
              }

            }

            class ObjectIncluding {
              constructor(pattern) {
                this.pattern = pattern;
              }

            }

            class ObjectWithValues {
              constructor(pattern) {
                this.pattern = pattern;
              }

            }

            const stringForErrorMessage = function (value) {
              let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

              if (value === null) {
                return 'null';
              }

              if (options.onlyShowType) {
                return typeof value;
              } // Your average non-object things.  Saves from doing the try/catch below for.


              if (typeof value !== 'object') {
                return EJSON.stringify(value);
              }

              try {
                // Find objects with circular references since EJSON doesn't support them yet (Issue #4778 + Unaccepted PR)
                // If the native stringify is going to choke, EJSON.stringify is going to choke too.
                JSON.stringify(value);
              } catch (stringifyError) {
                if (stringifyError.name === 'TypeError') {
                  return typeof value;
                }
              }

              return EJSON.stringify(value);
            };

            const typeofChecks = [[String, 'string'], [Number, 'number'], [Boolean, 'boolean'], // While we don't allow undefined/function in EJSON, this is good for optional
            // arguments with OneOf.
            [Function, 'function'], [undefined, 'undefined']]; // Return `false` if it matches. Otherwise, return an object with a `message` and a `path` field.

            const testSubtree = (value, pattern) => {
              // Match anything!
              if (pattern === Match.Any) {
                return false;
              } // Basic atomic types.
              // Do not match boxed objects (e.g. String, Boolean)


              for (let i = 0; i < typeofChecks.length; ++i) {
                if (pattern === typeofChecks[i][0]) {
                  if (typeof value === typeofChecks[i][1]) {
                    return false;
                  }

                  return {
                    message: "Expected ".concat(typeofChecks[i][1], ", got ").concat(stringForErrorMessage(value, {
                      onlyShowType: true
                    })),
                    path: ''
                  };
                }
              }

              if (pattern === null) {
                if (value === null) {
                  return false;
                }

                return {
                  message: "Expected null, got ".concat(stringForErrorMessage(value)),
                  path: ''
                };
              } // Strings, numbers, and booleans match literally. Goes well with Match.OneOf.


              if (typeof pattern === 'string' || typeof pattern === 'number' || typeof pattern === 'boolean') {
                if (value === pattern) {
                  return false;
                }

                return {
                  message: "Expected ".concat(pattern, ", got ").concat(stringForErrorMessage(value)),
                  path: ''
                };
              } // Match.Integer is special type encoded with array


              if (pattern === Match.Integer) {
                // There is no consistent and reliable way to check if variable is a 64-bit
                // integer. One of the popular solutions is to get reminder of division by 1
                // but this method fails on really large floats with big precision.
                // E.g.: 1.348192308491824e+23 % 1 === 0 in V8
                // Bitwise operators work consistantly but always cast variable to 32-bit
                // signed integer according to JavaScript specs.
                if (typeof value === 'number' && (value | 0) === value) {
                  return false;
                }

                return {
                  message: "Expected Integer, got ".concat(stringForErrorMessage(value)),
                  path: ''
                };
              } // 'Object' is shorthand for Match.ObjectIncluding({});


              if (pattern === Object) {
                pattern = Match.ObjectIncluding({});
              } // Array (checked AFTER Any, which is implemented as an Array).


              if (pattern instanceof Array) {
                if (pattern.length !== 1) {
                  return {
                    message: "Bad pattern: arrays must have one type element ".concat(stringForErrorMessage(pattern)),
                    path: ''
                  };
                }

                if (!Array.isArray(value) && !isArguments(value)) {
                  return {
                    message: "Expected array, got ".concat(stringForErrorMessage(value)),
                    path: ''
                  };
                }

                for (let i = 0, length = value.length; i < length; i++) {
                  const result = testSubtree(value[i], pattern[0]);

                  if (result) {
                    result.path = _prependPath(i, result.path);
                    return result;
                  }
                }

                return false;
              } // Arbitrary validation checks. The condition can return false or throw a
              // Match.Error (ie, it can internally use check()) to fail.


              if (pattern instanceof Where) {
                let result;

                try {
                  result = pattern.condition(value);
                } catch (err) {
                  if (!(err instanceof Match.Error)) {
                    throw err;
                  }

                  return {
                    message: err.message,
                    path: err.path
                  };
                }

                if (result) {
                  return false;
                } // XXX this error is terrible


                return {
                  message: 'Failed Match.Where validation',
                  path: ''
                };
              }

              if (pattern instanceof Maybe) {
                pattern = Match.OneOf(undefined, null, pattern.pattern);
              } else if (pattern instanceof Optional) {
                pattern = Match.OneOf(undefined, pattern.pattern);
              }

              if (pattern instanceof OneOf) {
                for (let i = 0; i < pattern.choices.length; ++i) {
                  const result = testSubtree(value, pattern.choices[i]);

                  if (!result) {
                    // No error? Yay, return.
                    return false;
                  } // Match errors just mean try another choice.
                } // XXX this error is terrible


                return {
                  message: 'Failed Match.OneOf, Match.Maybe or Match.Optional validation',
                  path: ''
                };
              } // A function that isn't something we special-case is assumed to be a
              // constructor.


              if (pattern instanceof Function) {
                if (value instanceof pattern) {
                  return false;
                }

                return {
                  message: "Expected ".concat(pattern.name || 'particular constructor'),
                  path: ''
                };
              }

              let unknownKeysAllowed = false;
              let unknownKeyPattern;

              if (pattern instanceof ObjectIncluding) {
                unknownKeysAllowed = true;
                pattern = pattern.pattern;
              }

              if (pattern instanceof ObjectWithValues) {
                unknownKeysAllowed = true;
                unknownKeyPattern = [pattern.pattern];
                pattern = {}; // no required keys
              }

              if (typeof pattern !== 'object') {
                return {
                  message: 'Bad pattern: unknown pattern type',
                  path: ''
                };
              } // An object, with required and optional keys. Note that this does NOT do
              // structural matches against objects of special types that happen to match
              // the pattern: this really needs to be a plain old {Object}!


              if (typeof value !== 'object') {
                return {
                  message: "Expected object, got ".concat(typeof value),
                  path: ''
                };
              }

              if (value === null) {
                return {
                  message: "Expected object, got null",
                  path: ''
                };
              }

              if (!isPlainObject(value)) {
                return {
                  message: "Expected plain object",
                  path: ''
                };
              }

              const requiredPatterns = Object.create(null);
              const optionalPatterns = Object.create(null);
              Object.keys(pattern).forEach(key => {
                const subPattern = pattern[key];

                if (subPattern instanceof Optional || subPattern instanceof Maybe) {
                  optionalPatterns[key] = subPattern.pattern;
                } else {
                  requiredPatterns[key] = subPattern;
                }
              });

              for (let key in Object(value)) {
                const subValue = value[key];

                if (hasOwn.call(requiredPatterns, key)) {
                  const result = testSubtree(subValue, requiredPatterns[key]);

                  if (result) {
                    result.path = _prependPath(key, result.path);
                    return result;
                  }

                  delete requiredPatterns[key];
                } else if (hasOwn.call(optionalPatterns, key)) {
                  const result = testSubtree(subValue, optionalPatterns[key]);

                  if (result) {
                    result.path = _prependPath(key, result.path);
                    return result;
                  }
                } else {
                  if (!unknownKeysAllowed) {
                    return {
                      message: 'Unknown key',
                      path: key
                    };
                  }

                  if (unknownKeyPattern) {
                    const result = testSubtree(subValue, unknownKeyPattern[0]);

                    if (result) {
                      result.path = _prependPath(key, result.path);
                      return result;
                    }
                  }
                }
              }

              const keys = Object.keys(requiredPatterns);

              if (keys.length) {
                return {
                  message: "Missing key '".concat(keys[0], "'"),
                  path: ''
                };
              }
            };

            class ArgumentChecker {
              constructor(args, description) {
                // Make a SHALLOW copy of the arguments. (We'll be doing identity checks
                // against its contents.)
                this.args = [...args]; // Since the common case will be to check arguments in order, and we splice
                // out arguments when we check them, make it so we splice out from the end
                // rather than the beginning.

                this.args.reverse();
                this.description = description;
              }

              checking(value) {
                if (this._checkingOneValue(value)) {
                  return;
                } // Allow check(arguments, [String]) or check(arguments.slice(1), [String])
                // or check([foo, bar], [String]) to count... but only if value wasn't
                // itself an argument.


                if (Array.isArray(value) || isArguments(value)) {
                  Array.prototype.forEach.call(value, this._checkingOneValue.bind(this));
                }
              }

              _checkingOneValue(value) {
                for (let i = 0; i < this.args.length; ++i) {
                  // Is this value one of the arguments? (This can have a false positive if
                  // the argument is an interned primitive, but it's still a good enough
                  // check.)
                  // (NaN is not === to itself, so we have to check specially.)
                  if (value === this.args[i] || Number.isNaN(value) && Number.isNaN(this.args[i])) {
                    this.args.splice(i, 1);
                    return true;
                  }
                }

                return false;
              }

              throwUnlessAllArgumentsHaveBeenChecked() {
                if (this.args.length > 0) throw new Error("Did not check() all arguments during ".concat(this.description));
              }

            }

            const _jsKeywords = ['do', 'if', 'in', 'for', 'let', 'new', 'try', 'var', 'case', 'else', 'enum', 'eval', 'false', 'null', 'this', 'true', 'void', 'with', 'break', 'catch', 'class', 'const', 'super', 'throw', 'while', 'yield', 'delete', 'export', 'import', 'public', 'return', 'static', 'switch', 'typeof', 'default', 'extends', 'finally', 'package', 'private', 'continue', 'debugger', 'function', 'arguments', 'interface', 'protected', 'implements', 'instanceof']; // Assumes the base of path is already escaped properly
            // returns key + base

            const _prependPath = (key, base) => {
              if (typeof key === 'number' || key.match(/^[0-9]+$/)) {
                key = "[".concat(key, "]");
              } else if (!key.match(/^[a-z_$][0-9a-z_$]*$/i) || _jsKeywords.indexOf(key) >= 0) {
                key = JSON.stringify([key]);
              }

              if (base && base[0] !== '[') {
                return "".concat(key, ".").concat(base);
              }

              return key + base;
            };

            const isObject = value => typeof value === 'object' && value !== null;

            const baseIsArguments = item => isObject(item) && Object.prototype.toString.call(item) === '[object Arguments]';

            const isArguments = baseIsArguments(function () {
              return arguments;
            }()) ? baseIsArguments : value => isObject(value) && typeof value.callee === 'function';
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "isPlainObject.js": function module(_require3, _exports3, _module2) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                               //
            // packages/check/isPlainObject.js                                                                               //
            //                                                                                                               //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module2.export({
              isPlainObject: () => isPlainObject
            });
            // Copy of jQuery.isPlainObject for the server side from jQuery v3.1.1.
            const class2type = {};
            const toString = class2type.toString;
            const hasOwn = Object.prototype.hasOwnProperty;
            const fnToString = hasOwn.toString;
            const ObjectFunctionString = fnToString.call(Object);
            const getProto = Object.getPrototypeOf;

            const isPlainObject = obj => {
              let proto;
              let Ctor; // Detect obvious negatives
              // Use toString instead of jQuery.type to catch host objects

              if (!obj || toString.call(obj) !== '[object Object]') {
                return false;
              }

              proto = getProto(obj); // Objects with no prototype (e.g., `Object.create( null )`) are plain

              if (!proto) {
                return true;
              } // Objects with prototype are plain iff they were constructed by a global Object function


              Ctor = hasOwn.call(proto, 'constructor') && proto.constructor;
              return typeof Ctor === 'function' && fnToString.call(Ctor) === ObjectFunctionString;
            };
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/check/match.js");

  /* Exports */
  Package._define("check", _exports2, {
    check: check,
    Match: Match
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Random = Package.random.Random;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var Retry;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "retry": { "retry.js": function module(_require, _exports, _module) {

            //////////////////////////////////////////////////////////////////////////////////
            //                                                                              //
            // packages/retry/retry.js                                                      //
            //                                                                              //
            //////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              Retry: () => Retry
            });

            class Retry {
              constructor() {
                let {
                  baseTimeout = 1000,
                  exponent = 2.2,
                  // The default is high-ish to ensure a server can recover from a
                  // failure caused by load.
                  maxTimeout = 5 * 60 * 1000,
                  minTimeout = 10,
                  minCount = 2,
                  fuzz = 0.5
                } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                this.baseTimeout = baseTimeout;
                this.exponent = exponent;
                this.maxTimeout = maxTimeout;
                this.minTimeout = minTimeout;
                this.minCount = minCount;
                this.fuzz = fuzz;
                this.retryTimer = null;
              } // Reset a pending retry, if any.


              clear() {
                if (this.retryTimer) {
                  clearTimeout(this.retryTimer);
                }

                this.retryTimer = null;
              } // Calculate how long to wait in milliseconds to retry, based on the
              // `count` of which retry this is.


              _timeout(count) {
                if (count < this.minCount) {
                  return this.minTimeout;
                } // fuzz the timeout randomly, to avoid reconnect storms when a
                // server goes down.


                var timeout = Math.min(this.maxTimeout, this.baseTimeout * Math.pow(this.exponent, count)) * (Random.fraction() * this.fuzz + (1 - this.fuzz / 2));
                return timeout;
              } // Call `fn` after a delay, based on the `count` of which retry this is.


              retryLater(count, fn) {
                var timeout = this._timeout(count);

                if (this.retryTimer) clearTimeout(this.retryTimer);
                this.retryTimer = Meteor.setTimeout(fn, timeout);
                return timeout;
              }

            }
            //////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/retry/retry.js");

  /* Exports */
  Package._define("retry", _exports2, {
    Retry: Retry
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var options, callback, Hook;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "callback-hook": { "hook.js": function module(_require, _exports, _module) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                 //
            // packages/callback-hook/hook.js                                                                  //
            //                                                                                                 //
            /////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              Hook: () => Hook
            });
            // XXX This pattern is under development. Do not add more callsites
            // using this package for now. See:
            // https://meteor.hackpad.com/Design-proposal-Hooks-YxvgEW06q6f
            //
            // Encapsulates the pattern of registering callbacks on a hook.
            //
            // The `each` method of the hook calls its iterator function argument
            // with each registered callback.  This allows the hook to
            // conditionally decide not to call the callback (if, for example, the
            // observed object has been closed or terminated).
            //
            // By default, callbacks are bound with `Meteor.bindEnvironment`, so they will be
            // called with the Meteor environment of the calling code that
            // registered the callback. Override by passing { bindEnvironment: false }
            // to the constructor.
            //
            // Registering a callback returns an object with a single `stop`
            // method which unregisters the callback.
            //
            // The code is careful to allow a callback to be safely unregistered
            // while the callbacks are being iterated over.
            //
            // If the hook is configured with the `exceptionHandler` option, the
            // handler will be called if a called callback throws an exception.
            // By default (if the exception handler doesn't itself throw an
            // exception, or if the iterator function doesn't return a falsy value
            // to terminate the calling of callbacks), the remaining callbacks
            // will still be called.
            //
            // Alternatively, the `debugPrintExceptions` option can be specified
            // as string describing the callback.  On an exception the string and
            // the exception will be printed to the console log with
            // `Meteor._debug`, and the exception otherwise ignored.
            //
            // If an exception handler isn't specified, exceptions thrown in the
            // callback will propagate up to the iterator function, and will
            // terminate calling the remaining callbacks if not caught.
            const hasOwn = Object.prototype.hasOwnProperty;

            class Hook {
              constructor(options) {
                options = options || {};
                this.nextCallbackId = 0;
                this.callbacks = Object.create(null); // Whether to wrap callbacks with Meteor.bindEnvironment

                this.bindEnvironment = true;

                if (options.bindEnvironment === false) {
                  this.bindEnvironment = false;
                }

                if (options.exceptionHandler) {
                  this.exceptionHandler = options.exceptionHandler;
                } else if (options.debugPrintExceptions) {
                  if (typeof options.debugPrintExceptions !== "string") {
                    throw new Error("Hook option debugPrintExceptions should be a string");
                  }

                  this.exceptionHandler = options.debugPrintExceptions;
                }
              }

              register(callback) {
                const exceptionHandler = this.exceptionHandler || function (exception) {
                  // Note: this relies on the undocumented fact that if bindEnvironment's
                  // onException throws, and you are invoking the callback either in the
                  // browser or from within a Fiber in Node, the exception is propagated.
                  throw exception;
                };

                if (this.bindEnvironment) {
                  callback = Meteor.bindEnvironment(callback, exceptionHandler);
                } else {
                  callback = dontBindEnvironment(callback, exceptionHandler);
                }

                const id = this.nextCallbackId++;
                this.callbacks[id] = callback;
                return {
                  callback,
                  stop: () => {
                    delete this.callbacks[id];
                  }
                };
              }
              /**
               * For each registered callback, call the passed iterator function with the callback.
               *
               * The iterator function can choose whether or not to call the
               * callback.  (For example, it might not call the callback if the
               * observed object has been closed or terminated).
               * The iteration is stopped if the iterator function returns a falsy
               * value or throws an exception.
               *
               * @param iterator
               */

              forEach(iterator) {
                // Invoking bindEnvironment'd callbacks outside of a Fiber in Node doesn't
                // run them to completion (and exceptions thrown from onException are not
                // propagated), so we need to be in a Fiber.
                Meteor._nodeCodeMustBeInFiber();

                const ids = Object.keys(this.callbacks);

                for (let i = 0; i < ids.length; ++i) {
                  const id = ids[i]; // check to see if the callback was removed during iteration

                  if (hasOwn.call(this.callbacks, id)) {
                    const callback = this.callbacks[id];

                    if (!iterator(callback)) {
                      break;
                    }
                  }
                }
              }
              /**
               * @deprecated use forEach
               * @param iterator
               */

              each(iterator) {
                return this.forEach(iterator);
              }

            }

            // Copied from Meteor.bindEnvironment and removed all the env stuff.
            function dontBindEnvironment(func, onException, _this) {
              if (!onException || typeof onException === 'string') {
                const description = onException || "callback of async function";

                onException = function (error) {
                  Meteor._debug("Exception in " + description, error);
                };
              }

              return function () {
                let ret;

                try {
                  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                  }

                  ret = func.apply(_this, args);
                } catch (e) {
                  onException(e);
                }

                return ret;
              };
            }
            /////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/callback-hook/hook.js");

  /* Exports */
  Package._define("callback-hook", _exports2, {
    Hook: Hook
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var check = Package.check.check;
  var Match = Package.check.Match;
  var Random = Package.random.Random;
  var EJSON = Package.ejson.EJSON;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var Retry = Package.retry.Retry;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var DDPCommon;

  var _require = meteorInstall({ "node_modules": { "meteor": { "ddp-common": { "namespace.js": function _module() {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/ddp-common/namespace.js                                                                                   //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            /**
             * @namespace DDPCommon
             * @summary Namespace for DDPCommon-related methods/classes. Shared between 
             * `ddp-client` and `ddp-server`, where the ddp-client is the implementation
             * of a ddp client for both client AND server; and the ddp server is the
             * implementation of the livedata server and stream server. Common 
             * functionality shared between both can be shared under this namespace
             */
            DDPCommon = {};
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "heartbeat.js": function _module2() {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/ddp-common/heartbeat.js                                                                                   //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // Heartbeat options:
            //   heartbeatInterval: interval to send pings, in milliseconds.
            //   heartbeatTimeout: timeout to close the connection if a reply isn't
            //     received, in milliseconds.
            //   sendPing: function to call to send a ping on the connection.
            //   onTimeout: function to call to close the connection.
            DDPCommon.Heartbeat = class Heartbeat {
              constructor(options) {
                this.heartbeatInterval = options.heartbeatInterval;
                this.heartbeatTimeout = options.heartbeatTimeout;
                this._sendPing = options.sendPing;
                this._onTimeout = options.onTimeout;
                this._seenPacket = false;
                this._heartbeatIntervalHandle = null;
                this._heartbeatTimeoutHandle = null;
              }

              stop() {
                this._clearHeartbeatIntervalTimer();

                this._clearHeartbeatTimeoutTimer();
              }

              start() {
                this.stop();

                this._startHeartbeatIntervalTimer();
              }

              _startHeartbeatIntervalTimer() {
                this._heartbeatIntervalHandle = Meteor.setInterval(() => this._heartbeatIntervalFired(), this.heartbeatInterval);
              }

              _startHeartbeatTimeoutTimer() {
                this._heartbeatTimeoutHandle = Meteor.setTimeout(() => this._heartbeatTimeoutFired(), this.heartbeatTimeout);
              }

              _clearHeartbeatIntervalTimer() {
                if (this._heartbeatIntervalHandle) {
                  Meteor.clearInterval(this._heartbeatIntervalHandle);
                  this._heartbeatIntervalHandle = null;
                }
              }

              _clearHeartbeatTimeoutTimer() {
                if (this._heartbeatTimeoutHandle) {
                  Meteor.clearTimeout(this._heartbeatTimeoutHandle);
                  this._heartbeatTimeoutHandle = null;
                }
              } // The heartbeat interval timer is fired when we should send a ping.


              _heartbeatIntervalFired() {
                // don't send ping if we've seen a packet since we last checked,
                // *or* if we have already sent a ping and are awaiting a timeout.
                // That shouldn't happen, but it's possible if
                // `this.heartbeatInterval` is smaller than
                // `this.heartbeatTimeout`.
                if (!this._seenPacket && !this._heartbeatTimeoutHandle) {
                  this._sendPing(); // Set up timeout, in case a pong doesn't arrive in time.


                  this._startHeartbeatTimeoutTimer();
                }

                this._seenPacket = false;
              } // The heartbeat timeout timer is fired when we sent a ping, but we
              // timed out waiting for the pong.


              _heartbeatTimeoutFired() {
                this._heartbeatTimeoutHandle = null;

                this._onTimeout();
              }

              messageReceived() {
                // Tell periodic checkin that we have seen a packet, and thus it
                // does not need to send a ping this cycle.
                this._seenPacket = true; // If we were waiting for a pong, we got it.

                if (this._heartbeatTimeoutHandle) {
                  this._clearHeartbeatTimeoutTimer();
                }
              }

            };
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "utils.js": function module(_require2, _exports, _module3) {

            _module3.export({
              hasOwn: () => hasOwn,
              slice: () => slice,
              keys: () => keys,
              isEmpty: () => isEmpty,
              last: () => last
            });
            const hasOwn = Object.prototype.hasOwnProperty;
            const slice = Array.prototype.slice;

            function keys(obj) {
              return Object.keys(Object(obj));
            }

            function isEmpty(obj) {
              if (obj == null) {
                return true;
              }

              if (Array.isArray(obj) || typeof obj === "string") {
                return obj.length === 0;
              }

              for (const key in obj) {
                if (hasOwn.call(obj, key)) {
                  return false;
                }
              }

              return true;
            }

            function last(array, n, guard) {
              if (array == null) {
                return;
              }

              if (n == null || guard) {
                return array[array.length - 1];
              }

              return slice.call(array, Math.max(array.length - n, 0));
            }

            DDPCommon.SUPPORTED_DDP_VERSIONS = ['1', 'pre2', 'pre1'];

            DDPCommon.parseDDP = function (stringMessage) {
              try {
                var msg = JSON.parse(stringMessage);
              } catch (e) {
                Meteor._debug("Discarding message with invalid JSON", stringMessage);

                return null;
              } // DDP messages must be objects.


              if (msg === null || typeof msg !== 'object') {
                Meteor._debug("Discarding non-object DDP message", stringMessage);

                return null;
              } // massage msg to get it into "abstract ddp" rather than "wire ddp" format.
              // switch between "cleared" rep of unsetting fields and "undefined"
              // rep of same


              if (hasOwn.call(msg, 'cleared')) {
                if (!hasOwn.call(msg, 'fields')) {
                  msg.fields = {};
                }

                msg.cleared.forEach(clearKey => {
                  msg.fields[clearKey] = undefined;
                });
                delete msg.cleared;
              }

              ['fields', 'params', 'result'].forEach(field => {
                if (hasOwn.call(msg, field)) {
                  msg[field] = EJSON._adjustTypesFromJSONValue(msg[field]);
                }
              });
              return msg;
            };

            DDPCommon.stringifyDDP = function (msg) {
              const copy = EJSON.clone(msg); // swizzle 'changed' messages from 'fields undefined' rep to 'fields
              // and cleared' rep

              if (hasOwn.call(msg, 'fields')) {
                const cleared = [];
                Object.keys(msg.fields).forEach(key => {
                  const value = msg.fields[key];

                  if (typeof value === "undefined") {
                    cleared.push(key);
                    delete copy.fields[key];
                  }
                });

                if (!isEmpty(cleared)) {
                  copy.cleared = cleared;
                }

                if (isEmpty(copy.fields)) {
                  delete copy.fields;
                }
              } // adjust types to basic


              ['fields', 'params', 'result'].forEach(field => {
                if (hasOwn.call(copy, field)) {
                  copy[field] = EJSON._adjustTypesToJSONValue(copy[field]);
                }
              });

              if (msg.id && typeof msg.id !== 'string') {
                throw new Error("Message id is not a string");
              }

              return JSON.stringify(copy);
            };
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "method_invocation.js": function _module4() {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/ddp-common/method_invocation.js                                                                           //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // Instance name is this because it is usually referred to as this inside a
            // method definition

            /**
             * @summary The state for a single invocation of a method, referenced by this
             * inside a method definition.
             * @param {Object} options
             * @instanceName this
             * @showInstanceName true
             */
            DDPCommon.MethodInvocation = class MethodInvocation {
              constructor(options) {
                // true if we're running not the actual method, but a stub (that is,
                // if we're on a client (which may be a browser, or in the future a
                // server connecting to another server) and presently running a
                // simulation of a server-side method for latency compensation
                // purposes). not currently true except in a client such as a browser,
                // since there's usually no point in running stubs unless you have a
                // zero-latency connection to the user.

                /**
                 * @summary Access inside a method invocation.  Boolean value, true if this invocation is a stub.
                 * @locus Anywhere
                 * @name  isSimulation
                 * @memberOf DDPCommon.MethodInvocation
                 * @instance
                 * @type {Boolean}
                 */
                this.isSimulation = options.isSimulation; // call this function to allow other method invocations (from the
                // same client) to continue running without waiting for this one to
                // complete.

                this._unblock = options.unblock || function () {};

                this._calledUnblock = false; // current user id

                /**
                 * @summary The id of the user that made this method call, or `null` if no user was logged in.
                 * @locus Anywhere
                 * @name  userId
                 * @memberOf DDPCommon.MethodInvocation
                 * @instance
                 */

                this.userId = options.userId; // sets current user id in all appropriate server contexts and
                // reruns subscriptions

                this._setUserId = options.setUserId || function () {}; // On the server, the connection this method call came in on.

                /**
                 * @summary Access inside a method invocation. The [connection](#meteor_onconnection) that this method was received on. `null` if the method is not associated with a connection, eg. a server initiated method call. Calls to methods made from a server method which was in turn initiated from the client share the same `connection`.
                 * @locus Server
                 * @name  connection
                 * @memberOf DDPCommon.MethodInvocation
                 * @instance
                 */

                this.connection = options.connection; // The seed for randomStream value generation

                this.randomSeed = options.randomSeed; // This is set by RandomStream.get; and holds the random stream state

                this.randomStream = null;
              }
              /**
               * @summary Call inside a method invocation.  Allow subsequent method from this client to begin running in a new fiber.
               * @locus Server
               * @memberOf DDPCommon.MethodInvocation
               * @instance
               */

              unblock() {
                this._calledUnblock = true;

                this._unblock();
              }
              /**
               * @summary Set the logged in user.
               * @locus Server
               * @memberOf DDPCommon.MethodInvocation
               * @instance
               * @param {String | null} userId The value that should be returned by `userId` on this connection.
               */

              setUserId(userId) {
                if (this._calledUnblock) {
                  throw new Error("Can't call setUserId in a method after calling unblock");
                }

                this.userId = userId;

                this._setUserId(userId);
              }

            };
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "random_stream.js": function _module5() {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/ddp-common/random_stream.js                                                                               //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // RandomStream allows for generation of pseudo-random values, from a seed.
            //
            // We use this for consistent 'random' numbers across the client and server.
            // We want to generate probably-unique IDs on the client, and we ideally want
            // the server to generate the same IDs when it executes the method.
            //
            // For generated values to be the same, we must seed ourselves the same way,
            // and we must keep track of the current state of our pseudo-random generators.
            // We call this state the scope. By default, we use the current DDP method
            // invocation as our scope.  DDP now allows the client to specify a randomSeed.
            // If a randomSeed is provided it will be used to seed our random sequences.
            // In this way, client and server method calls will generate the same values.
            //
            // We expose multiple named streams; each stream is independent
            // and is seeded differently (but predictably from the name).
            // By using multiple streams, we support reordering of requests,
            // as long as they occur on different streams.
            //
            // @param options {Optional Object}
            //   seed: Array or value - Seed value(s) for the generator.
            //                          If an array, will be used as-is
            //                          If a value, will be converted to a single-value array
            //                          If omitted, a random array will be used as the seed.
            DDPCommon.RandomStream = class RandomStream {
              constructor(options) {
                this.seed = [].concat(options.seed || randomToken());
                this.sequences = Object.create(null);
              } // Get a random sequence with the specified name, creating it if does not exist.
              // New sequences are seeded with the seed concatenated with the name.
              // By passing a seed into Random.create, we use the Alea generator.


              _sequence(name) {
                var self = this;
                var sequence = self.sequences[name] || null;

                if (sequence === null) {
                  var sequenceSeed = self.seed.concat(name);

                  for (var i = 0; i < sequenceSeed.length; i++) {
                    if (typeof sequenceSeed[i] === "function") {
                      sequenceSeed[i] = sequenceSeed[i]();
                    }
                  }

                  self.sequences[name] = sequence = Random.createWithSeeds.apply(null, sequenceSeed);
                }

                return sequence;
              }

            }; // Returns a random string of sufficient length for a random seed.
            // This is a placeholder function; a similar function is planned
            // for Random itself; when that is added we should remove this function,
            // and call Random's randomToken instead.

            function randomToken() {
              return Random.hexString(20);
            }

            ; // Returns the random stream with the specified name, in the specified
            // scope. If a scope is passed, then we use that to seed a (not
            // cryptographically secure) PRNG using the fast Alea algorithm.  If
            // scope is null (or otherwise falsey) then we use a generated seed.
            //
            // However, scope will normally be the current DDP method invocation,
            // so we'll use the stream with the specified name, and we should get
            // consistent values on the client and server sides of a method call.

            DDPCommon.RandomStream.get = function (scope, name) {
              if (!name) {
                name = "default";
              }

              if (!scope) {
                // There was no scope passed in; the sequence won't actually be
                // reproducible. but make it fast (and not cryptographically
                // secure) anyways, so that the behavior is similar to what you'd
                // get by passing in a scope.
                return Random.insecure;
              }

              var randomStream = scope.randomStream;

              if (!randomStream) {
                scope.randomStream = randomStream = new DDPCommon.RandomStream({
                  seed: scope.randomSeed
                });
              }

              return randomStream._sequence(name);
            }; // Creates a randomSeed for passing to a method call.
            // Note that we take enclosing as an argument,
            // though we expect it to be DDP._CurrentMethodInvocation.get()
            // However, we often evaluate makeRpcSeed lazily, and thus the relevant
            // invocation may not be the one currently in scope.
            // If enclosing is null, we'll use Random and values won't be repeatable.


            DDPCommon.makeRpcSeed = function (enclosing, methodName) {
              var stream = DDPCommon.RandomStream.get(enclosing, '/rpc/' + methodName);
              return stream.hexString(20);
            };
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  _require("/node_modules/meteor/ddp-common/namespace.js");
  _require("/node_modules/meteor/ddp-common/heartbeat.js");
  _require("/node_modules/meteor/ddp-common/utils.js");
  _require("/node_modules/meteor/ddp-common/method_invocation.js");
  _require("/node_modules/meteor/ddp-common/random_stream.js");

  /* Exports */
  Package._define("ddp-common", {
    DDPCommon: DDPCommon
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var Reload;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "reload": { "reload.js": function module(_require, _exports, _module) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                             //
            // packages/reload/reload.js                                                                                   //
            //                                                                                                             //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              Reload: () => Reload
            });
            const Reload = {};
            const reloadSettings = Meteor.settings && Meteor.settings.public && Meteor.settings.public.packages && Meteor.settings.public.packages.reload || {};

            function debug(message, context) {
              if (!reloadSettings.debug) {
                return;
              } // eslint-disable-next-line no-console


              console.log("[reload] ".concat(message), JSON.stringify(context));
            }

            const KEY_NAME = 'Meteor_Reload';
            let old_data = {}; // read in old data at startup.

            let old_json; // This logic for sessionStorage detection is based on browserstate/history.js

            let safeSessionStorage = null;

            try {
              // This throws a SecurityError on Chrome if cookies & localStorage are
              // explicitly disabled
              //
              // On Firefox with dom.storage.enabled set to false, sessionStorage is null
              //
              // We can't even do (typeof sessionStorage) on Chrome, it throws.  So we rely
              // on the throw if sessionStorage == null; the alternative is browser
              // detection, but this seems better.
              safeSessionStorage = window.sessionStorage; // Check we can actually use it

              if (safeSessionStorage) {
                safeSessionStorage.setItem('__dummy__', '1');
                safeSessionStorage.removeItem('__dummy__');
              } else {
                // Be consistently null, for safety
                safeSessionStorage = null;
              }
            } catch (e) {
              // Expected on chrome with strict security, or if sessionStorage not supported
              safeSessionStorage = null;
            } // Exported for test.


            Reload._getData = function () {
              return safeSessionStorage && safeSessionStorage.getItem(KEY_NAME);
            };

            if (safeSessionStorage) {
              old_json = Reload._getData();
              safeSessionStorage.removeItem(KEY_NAME);
            } else {// Unsupported browser (IE 6,7) or locked down security settings.
              // No session resumption.
              // Meteor._debug("XXX UNSUPPORTED BROWSER/SETTINGS");
            }

            if (!old_json) old_json = '{}';
            let old_parsed = {};

            try {
              old_parsed = JSON.parse(old_json);

              if (typeof old_parsed !== 'object') {
                Meteor._debug('Got bad data on reload. Ignoring.');

                old_parsed = {};
              }
            } catch (err) {
              Meteor._debug('Got invalid JSON on reload. Ignoring.');
            }

            if (old_parsed.reload && typeof old_parsed.data === 'object') {
              // Meteor._debug("Restoring reload data.");
              old_data = old_parsed.data;
            }

            let providers = []; ////////// External API //////////
            // Packages that support migration should register themselves by calling
            // this function. When it's time to migrate, callback will be called
            // with one argument, the "retry function," and an optional 'option'
            // argument (containing a key 'immediateMigration'). If the package
            // is ready to migrate, it should return [true, data], where data is
            // its migration data, an arbitrary JSON value (or [true] if it has
            // no migration data this time). If the package needs more time
            // before it is ready to migrate, it should return false. Then, once
            // it is ready to migrating again, it should call the retry
            // function. The retry function will return immediately, but will
            // schedule the migration to be retried, meaning that every package
            // will be polled once again for its migration data. If they are all
            // ready this time, then the migration will happen. name must be set if there
            // is migration data. If 'immediateMigration' is set in the options
            // argument, then it doesn't matter whether the package is ready to
            // migrate or not; the reload will happen immediately without waiting
            // (used for OAuth redirect login).
            //

            Reload._onMigrate = function (name, callback) {
              debug('_onMigrate', {
                name
              });

              if (!callback) {
                // name not provided, so first arg is callback.
                callback = name;
                name = undefined;
                debug('_onMigrate no callback');
              }

              providers.push({
                name: name,
                callback: callback
              });
            }; // Called by packages when they start up.
            // Returns the object that was saved, or undefined if none saved.
            //


            Reload._migrationData = function (name) {
              debug('_migrationData', {
                name
              });
              return old_data[name];
            }; // Options are the same as for `Reload._migrate`.


            const pollProviders = function (tryReload, options) {
              debug('pollProviders', {
                options
              });

              tryReload = tryReload || function () {};

              options = options || {};
              const {
                immediateMigration
              } = options;
              debug("pollProviders is ".concat(immediateMigration ? '' : 'NOT ', "immediateMigration"), {
                options
              });
              const migrationData = {};
              let allReady = true;
              providers.forEach(p => {
                const {
                  callback,
                  name
                } = p || {};
                const [ready, data] = callback(tryReload, options) || [];
                debug("pollProviders provider ".concat(name || 'unknown', " is ").concat(ready ? 'ready' : 'NOT ready'), {
                  options
                });

                if (!ready) {
                  allReady = false;
                }

                if (data !== undefined && name) {
                  migrationData[name] = data;
                }
              });

              if (allReady) {
                debug('pollProviders allReady', {
                  options,
                  migrationData
                });
                return migrationData;
              }

              if (immediateMigration) {
                debug('pollProviders immediateMigration', {
                  options,
                  migrationData
                });
                return migrationData;
              }

              return null;
            }; // Options are:
            //  - immediateMigration: true if the page will be reloaded immediately
            //    regardless of whether packages report that they are ready or not.


            Reload._migrate = function (tryReload, options) {
              debug('_migrate', {
                options
              }); // Make sure each package is ready to go, and collect their
              // migration data

              const migrationData = pollProviders(tryReload, options);

              if (migrationData === null) {
                return false; // not ready yet..
              }

              let json;

              try {
                // Persist the migration data
                json = JSON.stringify({
                  data: migrationData,
                  reload: true
                });
              } catch (err) {
                Meteor._debug("Couldn't serialize data for migration", migrationData);

                throw err;
              }

              if (safeSessionStorage) {
                try {
                  safeSessionStorage.setItem(KEY_NAME, json);
                } catch (err) {
                  // We should have already checked this, but just log - don't throw
                  Meteor._debug("Couldn't save data for migration to sessionStorage", err);
                }
              } else {
                Meteor._debug('Browser does not support sessionStorage. Not saving migration state.');
              }

              return true;
            }; // Allows tests to isolate the list of providers.


            Reload._withFreshProvidersForTest = function (f) {
              const originalProviders = providers.slice(0);
              providers = [];

              try {
                f();
              } finally {
                providers = originalProviders;
              }
            }; // Migrating reload: reload this page (presumably to pick up a new
            // version of the code or assets), but save the program state and
            // migrate it over. This function returns immediately. The reload
            // will happen at some point in the future once all of the packages
            // are ready to migrate.
            //


            let reloading = false;

            Reload._reload = function (options) {
              debug('_reload', {
                options
              });
              options = options || {};

              if (reloading) {
                debug('reloading in progress already', {
                  options
                });
                return;
              }

              reloading = true;

              function tryReload() {
                debug('tryReload');
                setTimeout(reload, 1);
              }

              function forceBrowserReload() {
                debug('forceBrowserReload'); // We'd like to make the browser reload the page using location.replace()
                // instead of location.reload(), because this avoids validating assets
                // with the server if we still have a valid cached copy. This doesn't work
                // when the location contains a hash however, because that wouldn't reload
                // the page and just scroll to the hash location instead.

                if (window.location.hash || window.location.href.endsWith('#')) {
                  window.location.reload();
                  return;
                }

                window.location.replace(window.location.href);
              }

              function reload() {
                debug('reload');

                if (!Reload._migrate(tryReload, options)) {
                  return;
                }

                if (Meteor.isCordova) {
                  WebAppLocalServer.switchToPendingVersion(() => {
                    forceBrowserReload();
                  });
                  return;
                }

                forceBrowserReload();
              }

              tryReload();
            };
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/reload/reload.js");

  /* Exports */
  Package._define("reload", _exports2, {
    Reload: Reload
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Retry = Package.retry.Retry;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var options, SockJS;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "socket-stream-client": { "browser.js": function module(_require, _exports, _module) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/socket-stream-client/browser.js                                                                            //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            let _objectSpread;

            _module.link("@babel/runtime/helpers/objectSpread2", {
              default(v) {
                _objectSpread = v;
              }

            }, 0);
            _module.export({
              ClientStream: () => ClientStream
            });
            let toSockjsUrl, toWebsocketUrl;
            _module.link("./urls.js", {
              toSockjsUrl(v) {
                toSockjsUrl = v;
              },

              toWebsocketUrl(v) {
                toWebsocketUrl = v;
              }

            }, 0);
            let StreamClientCommon;
            _module.link("./common.js", {
              StreamClientCommon(v) {
                StreamClientCommon = v;
              }

            }, 1);
            _module.link("./sockjs-0.3.4.js");

            class ClientStream extends StreamClientCommon {
              // @param url {String} URL to Meteor app
              //   "http://subdomain.meteor.com/" or "/" or
              //   "ddp+sockjs://foo-**.meteor.com/sockjs"
              constructor(url, options) {
                super(options);

                this._initCommon(this.options); //// Constants
                // how long between hearing heartbeat from the server until we declare
                // the connection dead. heartbeats come every 45s (stream_server.js)
                //
                // NOTE: this is a older timeout mechanism. We now send heartbeats at
                // the DDP level (https://github.com/meteor/meteor/pull/1865), and
                // expect those timeouts to kill a non-responsive connection before
                // this timeout fires. This is kept around for compatibility (when
                // talking to a server that doesn't support DDP heartbeats) and can be
                // removed later.


                this.HEARTBEAT_TIMEOUT = 100 * 1000;
                this.rawUrl = url;
                this.socket = null;
                this.lastError = null;
                this.heartbeatTimer = null; // Listen to global 'online' event if we are running in a browser.

                window.addEventListener('online', this._online.bind(this), false
                /* useCapture */
                ); //// Kickoff!

                this._launchConnection();
              } // data is a utf8 string. Data sent while not connected is dropped on
              // the floor, and it is up the user of this API to retransmit lost
              // messages on 'reset'


              send(data) {
                if (this.currentStatus.connected) {
                  this.socket.send(data);
                }
              } // Changes where this connection points


              _changeUrl(url) {
                this.rawUrl = url;
              }

              _connected() {
                if (this.connectionTimer) {
                  clearTimeout(this.connectionTimer);
                  this.connectionTimer = null;
                }

                if (this.currentStatus.connected) {
                  // already connected. do nothing. this probably shouldn't happen.
                  return;
                } // update status


                this.currentStatus.status = 'connected';
                this.currentStatus.connected = true;
                this.currentStatus.retryCount = 0;
                this.statusChanged(); // fire resets. This must come after status change so that clients
                // can call send from within a reset callback.

                this.forEachCallback('reset', callback => {
                  callback();
                });
              }

              _cleanup(maybeError) {
                this._clearConnectionAndHeartbeatTimers();

                if (this.socket) {
                  this.socket.onmessage = this.socket.onclose = this.socket.onerror = this.socket.onheartbeat = () => {};

                  this.socket.close();
                  this.socket = null;
                }

                this.forEachCallback('disconnect', callback => {
                  callback(maybeError);
                });
              }

              _clearConnectionAndHeartbeatTimers() {
                if (this.connectionTimer) {
                  clearTimeout(this.connectionTimer);
                  this.connectionTimer = null;
                }

                if (this.heartbeatTimer) {
                  clearTimeout(this.heartbeatTimer);
                  this.heartbeatTimer = null;
                }
              }

              _heartbeat_timeout() {
                console.log('Connection timeout. No sockjs heartbeat received.');

                this._lostConnection(new this.ConnectionError("Heartbeat timed out"));
              }

              _heartbeat_received() {
                // If we've already permanently shut down this stream, the timeout is
                // already cleared, and we don't need to set it again.
                if (this._forcedToDisconnect) return;
                if (this.heartbeatTimer) clearTimeout(this.heartbeatTimer);
                this.heartbeatTimer = setTimeout(this._heartbeat_timeout.bind(this), this.HEARTBEAT_TIMEOUT);
              }

              _sockjsProtocolsWhitelist() {
                // only allow polling protocols. no streaming.  streaming
                // makes safari spin.
                var protocolsWhitelist = ['xdr-polling', 'xhr-polling', 'iframe-xhr-polling', 'jsonp-polling']; // iOS 4 and 5 and below crash when using websockets over certain
                // proxies. this seems to be resolved with iOS 6. eg
                // https://github.com/LearnBoost/socket.io/issues/193#issuecomment-7308865.
                //
                // iOS <4 doesn't support websockets at all so sockjs will just
                // immediately fall back to http

                var noWebsockets = navigator && /iPhone|iPad|iPod/.test(navigator.userAgent) && /OS 4_|OS 5_/.test(navigator.userAgent);
                if (!noWebsockets) protocolsWhitelist = ['websocket'].concat(protocolsWhitelist);
                return protocolsWhitelist;
              }

              _launchConnection() {
                this._cleanup(); // cleanup the old socket, if there was one.


                var options = _objectSpread({
                  protocols_whitelist: this._sockjsProtocolsWhitelist()
                }, this.options._sockjsOptions);

                const hasSockJS = typeof SockJS === "function";
                this.socket = hasSockJS // Convert raw URL to SockJS URL each time we open a connection, so
                // that we can connect to random hostnames and get around browser
                // per-host connection limits.
                ? new SockJS(toSockjsUrl(this.rawUrl), undefined, options) : new WebSocket(toWebsocketUrl(this.rawUrl));

                this.socket.onopen = data => {
                  this.lastError = null;

                  this._connected();
                };

                this.socket.onmessage = data => {
                  this.lastError = null;

                  this._heartbeat_received();

                  if (this.currentStatus.connected) {
                    this.forEachCallback('message', callback => {
                      callback(data.data);
                    });
                  }
                };

                this.socket.onclose = () => {
                  this._lostConnection();
                };

                this.socket.onerror = error => {
                  const {
                    lastError
                  } = this;
                  this.lastError = error;
                  if (lastError) return;
                  console.error('stream error', error, new Date().toDateString());
                };

                this.socket.onheartbeat = () => {
                  this.lastError = null;

                  this._heartbeat_received();
                };

                if (this.connectionTimer) clearTimeout(this.connectionTimer);
                this.connectionTimer = setTimeout(() => {
                  this._lostConnection(new this.ConnectionError("DDP connection timed out"));
                }, this.CONNECT_TIMEOUT);
              }

            }
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "common.js": function module(_require3, _exports2, _module2) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/socket-stream-client/common.js                                                                             //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            let _objectSpread;

            _module2.link("@babel/runtime/helpers/objectSpread2", {
              default(v) {
                _objectSpread = v;
              }

            }, 0);
            _module2.export({
              StreamClientCommon: () => StreamClientCommon
            });
            let Retry;
            _module2.link("meteor/retry", {
              Retry(v) {
                Retry = v;
              }

            }, 0);
            const forcedReconnectError = new Error("forced reconnect");

            class StreamClientCommon {
              constructor(options) {
                this.options = _objectSpread({
                  retry: true
                }, options || null);
                this.ConnectionError = options && options.ConnectionError || Error;
              } // Register for callbacks.


              on(name, callback) {
                if (name !== 'message' && name !== 'reset' && name !== 'disconnect') throw new Error('unknown event type: ' + name);
                if (!this.eventCallbacks[name]) this.eventCallbacks[name] = [];
                this.eventCallbacks[name].push(callback);
              }

              forEachCallback(name, cb) {
                if (!this.eventCallbacks[name] || !this.eventCallbacks[name].length) {
                  return;
                }

                this.eventCallbacks[name].forEach(cb);
              }

              _initCommon(options) {
                options = options || Object.create(null); //// Constants
                // how long to wait until we declare the connection attempt
                // failed.

                this.CONNECT_TIMEOUT = options.connectTimeoutMs || 10000;
                this.eventCallbacks = Object.create(null); // name -> [callback]

                this._forcedToDisconnect = false; //// Reactive status

                this.currentStatus = {
                  status: 'connecting',
                  connected: false,
                  retryCount: 0
                };

                if (Package.tracker) {
                  this.statusListeners = new Package.tracker.Tracker.Dependency();
                }

                this.statusChanged = () => {
                  if (this.statusListeners) {
                    this.statusListeners.changed();
                  }
                }; //// Retry logic


                this._retry = new Retry();
                this.connectionTimer = null;
              } // Trigger a reconnect.


              reconnect(options) {
                options = options || Object.create(null);

                if (options.url) {
                  this._changeUrl(options.url);
                }

                if (options._sockjsOptions) {
                  this.options._sockjsOptions = options._sockjsOptions;
                }

                if (this.currentStatus.connected) {
                  if (options._force || options.url) {
                    this._lostConnection(forcedReconnectError);
                  }

                  return;
                } // if we're mid-connection, stop it.


                if (this.currentStatus.status === 'connecting') {
                  // Pretend it's a clean close.
                  this._lostConnection();
                }

                this._retry.clear();

                this.currentStatus.retryCount -= 1; // don't count manual retries

                this._retryNow();
              }

              disconnect(options) {
                options = options || Object.create(null); // Failed is permanent. If we're failed, don't let people go back
                // online by calling 'disconnect' then 'reconnect'.

                if (this._forcedToDisconnect) return; // If _permanent is set, permanently disconnect a stream. Once a stream
                // is forced to disconnect, it can never reconnect. This is for
                // error cases such as ddp version mismatch, where trying again
                // won't fix the problem.

                if (options._permanent) {
                  this._forcedToDisconnect = true;
                }

                this._cleanup();

                this._retry.clear();

                this.currentStatus = {
                  status: options._permanent ? 'failed' : 'offline',
                  connected: false,
                  retryCount: 0
                };
                if (options._permanent && options._error) this.currentStatus.reason = options._error;
                this.statusChanged();
              } // maybeError is set unless it's a clean protocol-level close.


              _lostConnection(maybeError) {
                this._cleanup(maybeError);

                this._retryLater(maybeError); // sets status. no need to do it here.
              } // fired when we detect that we've gone online. try to reconnect
              // immediately.


              _online() {
                // if we've requested to be offline by disconnecting, don't reconnect.
                if (this.currentStatus.status != 'offline') this.reconnect();
              }

              _retryLater(maybeError) {
                var timeout = 0;

                if (this.options.retry || maybeError === forcedReconnectError) {
                  timeout = this._retry.retryLater(this.currentStatus.retryCount, this._retryNow.bind(this));
                  this.currentStatus.status = 'waiting';
                  this.currentStatus.retryTime = new Date().getTime() + timeout;
                } else {
                  this.currentStatus.status = 'failed';
                  delete this.currentStatus.retryTime;
                }

                this.currentStatus.connected = false;
                this.statusChanged();
              }

              _retryNow() {
                if (this._forcedToDisconnect) return;
                this.currentStatus.retryCount += 1;
                this.currentStatus.status = 'connecting';
                this.currentStatus.connected = false;
                delete this.currentStatus.retryTime;
                this.statusChanged();

                this._launchConnection();
              } // Get current status. Reactive.


              status() {
                if (this.statusListeners) {
                  this.statusListeners.depend();
                }

                return this.currentStatus;
              }

            }
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "sockjs-0.3.4.js": function _module3(_require4) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/socket-stream-client/sockjs-0.3.4.js                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // XXX METEOR changes in <METEOR>

            /* SockJS client, version 0.3.4, http://sockjs.org, MIT License
            
            Copyright (c) 2011-2012 VMware, Inc.
            
            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:
            
            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.
            
            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */
            // <METEOR> Commented out JSO implementation (use json package instead).
            // JSON2 by Douglas Crockford (minified).
            // var JSON;JSON||(JSON={}),function(){function str(a,b){var c,d,e,f,g=gap,h,i=b[a];i&&typeof i=="object"&&typeof i.toJSON=="function"&&(i=i.toJSON(a)),typeof rep=="function"&&(i=rep.call(b,a,i));switch(typeof i){case"string":return quote(i);case"number":return isFinite(i)?String(i):"null";case"boolean":case"null":return String(i);case"object":if(!i)return"null";gap+=indent,h=[];if(Object.prototype.toString.apply(i)==="[object Array]"){f=i.length;for(c=0;c<f;c+=1)h[c]=str(c,i)||"null";e=h.length===0?"[]":gap?"[\n"+gap+h.join(",\n"+gap)+"\n"+g+"]":"["+h.join(",")+"]",gap=g;return e}if(rep&&typeof rep=="object"){f=rep.length;for(c=0;c<f;c+=1)typeof rep[c]=="string"&&(d=rep[c],e=str(d,i),e&&h.push(quote(d)+(gap?": ":":")+e))}else for(d in i)Object.prototype.hasOwnProperty.call(i,d)&&(e=str(d,i),e&&h.push(quote(d)+(gap?": ":":")+e));e=h.length===0?"{}":gap?"{\n"+gap+h.join(",\n"+gap)+"\n"+g+"}":"{"+h.join(",")+"}",gap=g;return e}}function quote(a){escapable.lastIndex=0;return escapable.test(a)?'"'+a.replace(escapable,function(a){var b=meta[a];return typeof b=="string"?b:"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)})+'"':'"'+a+'"'}function f(a){return a<10?"0"+a:a}"use strict",typeof Date.prototype.toJSON!="function"&&(Date.prototype.toJSON=function(a){return isFinite(this.valueOf())?this.getUTCFullYear()+"-"+f(this.getUTCMonth()+1)+"-"+f(this.getUTCDate())+"T"+f(this.getUTCHours())+":"+f(this.getUTCMinutes())+":"+f(this.getUTCSeconds())+"Z":null},String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(a){return this.valueOf()});var cx=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,escapable=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,gap,indent,meta={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"},rep;typeof JSON.stringify!="function"&&(JSON.stringify=function(a,b,c){var d;gap="",indent="";if(typeof c=="number")for(d=0;d<c;d+=1)indent+=" ";else typeof c=="string"&&(indent=c);rep=b;if(!b||typeof b=="function"||typeof b=="object"&&typeof b.length=="number")return str("",{"":a});throw new Error("JSON.stringify")}),typeof JSON.parse!="function"&&(JSON.parse=function(text,reviver){function walk(a,b){var c,d,e=a[b];if(e&&typeof e=="object")for(c in e)Object.prototype.hasOwnProperty.call(e,c)&&(d=walk(e,c),d!==undefined?e[c]=d:delete e[c]);return reviver.call(a,b,e)}var j;text=String(text),cx.lastIndex=0,cx.test(text)&&(text=text.replace(cx,function(a){return"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)}));if(/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,"@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:\s*\[)+/g,""))){j=eval("("+text+")");return typeof reviver=="function"?walk({"":j},""):j}throw new SyntaxError("JSON.parse")})}()
            // </METEOR>
            //     [*] Including lib/index.js
            // Public object
            SockJS = function () {
              var _document = document;
              var _window = window;
              var utils = {}; //         [*] Including lib/reventtarget.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              /* Simplified implementation of DOM2 EventTarget.
               *   http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget
               */

              var REventTarget = function () {};

              REventTarget.prototype.addEventListener = function (eventType, listener) {
                if (!this._listeners) {
                  this._listeners = {};
                }

                if (!(eventType in this._listeners)) {
                  this._listeners[eventType] = [];
                }

                var arr = this._listeners[eventType];

                if (utils.arrIndexOf(arr, listener) === -1) {
                  arr.push(listener);
                }

                return;
              };

              REventTarget.prototype.removeEventListener = function (eventType, listener) {
                if (!(this._listeners && eventType in this._listeners)) {
                  return;
                }

                var arr = this._listeners[eventType];
                var idx = utils.arrIndexOf(arr, listener);

                if (idx !== -1) {
                  if (arr.length > 1) {
                    this._listeners[eventType] = arr.slice(0, idx).concat(arr.slice(idx + 1));
                  } else {
                    delete this._listeners[eventType];
                  }

                  return;
                }

                return;
              };

              REventTarget.prototype.dispatchEvent = function (event) {
                var t = event.type;
                var args = Array.prototype.slice.call(arguments, 0);

                if (this['on' + t]) {
                  this['on' + t].apply(this, args);
                }

                if (this._listeners && t in this._listeners) {
                  for (var i = 0; i < this._listeners[t].length; i++) {
                    this._listeners[t][i].apply(this, args);
                  }
                }
              }; //         [*] End of lib/reventtarget.js
              //         [*] Including lib/simpleevent.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var SimpleEvent = function (type, obj) {
                this.type = type;

                if (typeof obj !== 'undefined') {
                  for (var k in obj) {
                    if (!obj.hasOwnProperty(k)) continue;
                    this[k] = obj[k];
                  }
                }
              };

              SimpleEvent.prototype.toString = function () {
                var r = [];

                for (var k in this) {
                  if (!this.hasOwnProperty(k)) continue;
                  var v = this[k];
                  if (typeof v === 'function') v = '[function]';
                  r.push(k + '=' + v);
                }

                return 'SimpleEvent(' + r.join(', ') + ')';
              }; //         [*] End of lib/simpleevent.js
              //         [*] Including lib/eventemitter.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var EventEmitter = function (events) {
                var that = this;
                that._events = events || [];
                that._listeners = {};
              };

              EventEmitter.prototype.emit = function (type) {
                var that = this;

                that._verifyType(type);

                if (that._nuked) return;
                var args = Array.prototype.slice.call(arguments, 1);

                if (that['on' + type]) {
                  that['on' + type].apply(that, args);
                }

                if (type in that._listeners) {
                  for (var i = 0; i < that._listeners[type].length; i++) {
                    that._listeners[type][i].apply(that, args);
                  }
                }
              };

              EventEmitter.prototype.on = function (type, callback) {
                var that = this;

                that._verifyType(type);

                if (that._nuked) return;

                if (!(type in that._listeners)) {
                  that._listeners[type] = [];
                }

                that._listeners[type].push(callback);
              };

              EventEmitter.prototype._verifyType = function (type) {
                var that = this;

                if (utils.arrIndexOf(that._events, type) === -1) {
                  utils.log('Event ' + JSON.stringify(type) + ' not listed ' + JSON.stringify(that._events) + ' in ' + that);
                }
              };

              EventEmitter.prototype.nuke = function () {
                var that = this;
                that._nuked = true;

                for (var i = 0; i < that._events.length; i++) {
                  delete that[that._events[i]];
                }

                that._listeners = {};
              }; //         [*] End of lib/eventemitter.js
              //         [*] Including lib/utils.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var random_string_chars = 'abcdefghijklmnopqrstuvwxyz0123456789_';

              utils.random_string = function (length, max) {
                max = max || random_string_chars.length;
                var i,
                    ret = [];

                for (i = 0; i < length; i++) {
                  ret.push(random_string_chars.substr(Math.floor(Math.random() * max), 1));
                }

                return ret.join('');
              };

              utils.random_number = function (max) {
                return Math.floor(Math.random() * max);
              };

              utils.random_number_string = function (max) {
                var t = ('' + (max - 1)).length;
                var p = Array(t + 1).join('0');
                return (p + utils.random_number(max)).slice(-t);
              }; // Assuming that url looks like: http://asdasd:111/asd


              utils.getOrigin = function (url) {
                url += '/';
                var parts = url.split('/').slice(0, 3);
                return parts.join('/');
              };

              utils.isSameOriginUrl = function (url_a, url_b) {
                // location.origin would do, but it's not always available.
                if (!url_b) url_b = _window.location.href;
                return url_a.split('/').slice(0, 3).join('/') === url_b.split('/').slice(0, 3).join('/');
              }; // <METEOR>
              // https://github.com/sockjs/sockjs-client/issues/79


              utils.isSameOriginScheme = function (url_a, url_b) {
                if (!url_b) url_b = _window.location.href;
                return url_a.split(':')[0] === url_b.split(':')[0];
              }; // </METEOR>


              utils.getParentDomain = function (url) {
                // ipv4 ip address
                if (/^[0-9.]*$/.test(url)) return url; // ipv6 ip address

                if (/^\[/.test(url)) return url; // no dots

                if (!/[.]/.test(url)) return url;
                var parts = url.split('.').slice(1);
                return parts.join('.');
              };

              utils.objectExtend = function (dst, src) {
                for (var k in src) {
                  if (src.hasOwnProperty(k)) {
                    dst[k] = src[k];
                  }
                }

                return dst;
              };

              var WPrefix = '_jp';

              utils.polluteGlobalNamespace = function () {
                if (!(WPrefix in _window)) {
                  _window[WPrefix] = {};
                }
              };

              utils.closeFrame = function (code, reason) {
                return 'c' + JSON.stringify([code, reason]);
              };

              utils.userSetCode = function (code) {
                return code === 1000 || code >= 3000 && code <= 4999;
              }; // See: http://www.erg.abdn.ac.uk/~gerrit/dccp/notes/ccid2/rto_estimator/
              // and RFC 2988.


              utils.countRTO = function (rtt) {
                var rto;

                if (rtt > 100) {
                  rto = 3 * rtt; // rto > 300msec
                } else {
                  rto = rtt + 200; // 200msec < rto <= 300msec
                }

                return rto;
              };

              utils.log = function () {
                if (_window.console && console.log && console.log.apply) {
                  console.log.apply(console, arguments);
                }
              };

              utils.debug = function () {
                if (_window.console && console.debug && console.debug.apply) {
                  console.debug.apply(console, arguments);
                }
              };

              utils.bind = function (fun, that) {
                if (fun.bind) {
                  return fun.bind(that);
                } else {
                  return function () {
                    return fun.apply(that, arguments);
                  };
                }
              };

              utils.flatUrl = function (url) {
                return url.indexOf('?') === -1 && url.indexOf('#') === -1;
              }; // `relativeTo` is an optional absolute URL. If provided, `url` will be
              // interpreted relative to `relativeTo`. Defaults to `document.location`.
              // <METEOR>


              utils.amendUrl = function (url, relativeTo) {
                var baseUrl;

                if (relativeTo === undefined) {
                  baseUrl = _document.location;
                } else {
                  var protocolMatch = /^([a-z0-9.+-]+:)/i.exec(relativeTo);

                  if (protocolMatch) {
                    var protocol = protocolMatch[0].toLowerCase();
                    var rest = relativeTo.substring(protocol.length);
                    var hostMatch = /[a-z0-9\.-]+(:[0-9]+)?/.exec(rest);
                    if (hostMatch) var host = hostMatch[0];
                  }

                  if (!protocol || !host) throw new Error("relativeTo must be an absolute url");
                  baseUrl = {
                    protocol: protocol,
                    host: host
                  };
                }

                if (!url) {
                  throw new Error('Wrong url for SockJS');
                }

                if (!utils.flatUrl(url)) {
                  throw new Error('Only basic urls are supported in SockJS');
                } //  '//abc' --> 'http://abc'


                if (url.indexOf('//') === 0) {
                  url = baseUrl.protocol + url;
                } // '/abc' --> 'http://localhost:1234/abc'


                if (url.indexOf('/') === 0) {
                  url = baseUrl.protocol + '//' + baseUrl.host + url;
                } // </METEOR>
                // strip trailing slashes


                url = url.replace(/[/]+$/, ''); // We have a full url here, with proto and host. For some browsers
                // http://localhost:80/ is not in the same origin as http://localhost/
                // Remove explicit :80 or :443 in such cases. See #74

                var parts = url.split("/");

                if (parts[0] === "http:" && /:80$/.test(parts[2]) || parts[0] === "https:" && /:443$/.test(parts[2])) {
                  parts[2] = parts[2].replace(/:(80|443)$/, "");
                }

                url = parts.join("/");
                return url;
              }; // IE doesn't support [].indexOf.


              utils.arrIndexOf = function (arr, obj) {
                for (var i = 0; i < arr.length; i++) {
                  if (arr[i] === obj) {
                    return i;
                  }
                }

                return -1;
              };

              utils.arrSkip = function (arr, obj) {
                var idx = utils.arrIndexOf(arr, obj);

                if (idx === -1) {
                  return arr.slice();
                } else {
                  var dst = arr.slice(0, idx);
                  return dst.concat(arr.slice(idx + 1));
                }
              }; // Via: https://gist.github.com/1133122/2121c601c5549155483f50be3da5305e83b8c5df


              utils.isArray = Array.isArray || function (value) {
                return {}.toString.call(value).indexOf('Array') >= 0;
              };

              utils.delay = function (t, fun) {
                if (typeof t === 'function') {
                  fun = t;
                  t = 0;
                }

                return setTimeout(fun, t);
              }; // Chars worth escaping, as defined by Douglas Crockford:
              //   https://github.com/douglascrockford/JSON-js/blob/47a9882cddeb1e8529e07af9736218075372b8ac/json2.js#L196


              var json_escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
                  json_lookup = {
                "\0": "\\u0000",
                "\x01": "\\u0001",
                "\x02": "\\u0002",
                "\x03": "\\u0003",
                "\x04": "\\u0004",
                "\x05": "\\u0005",
                "\x06": "\\u0006",
                "\x07": "\\u0007",
                "\b": "\\b",
                "\t": "\\t",
                "\n": "\\n",
                "\x0B": "\\u000b",
                "\f": "\\f",
                "\r": "\\r",
                "\x0E": "\\u000e",
                "\x0F": "\\u000f",
                "\x10": "\\u0010",
                "\x11": "\\u0011",
                "\x12": "\\u0012",
                "\x13": "\\u0013",
                "\x14": "\\u0014",
                "\x15": "\\u0015",
                "\x16": "\\u0016",
                "\x17": "\\u0017",
                "\x18": "\\u0018",
                "\x19": "\\u0019",
                "\x1A": "\\u001a",
                "\x1B": "\\u001b",
                "\x1C": "\\u001c",
                "\x1D": "\\u001d",
                "\x1E": "\\u001e",
                "\x1F": "\\u001f",
                "\"": "\\\"",
                "\\": "\\\\",
                "\x7F": "\\u007f",
                "\x80": "\\u0080",
                "\x81": "\\u0081",
                "\x82": "\\u0082",
                "\x83": "\\u0083",
                "\x84": "\\u0084",
                "\x85": "\\u0085",
                "\x86": "\\u0086",
                "\x87": "\\u0087",
                "\x88": "\\u0088",
                "\x89": "\\u0089",
                "\x8A": "\\u008a",
                "\x8B": "\\u008b",
                "\x8C": "\\u008c",
                "\x8D": "\\u008d",
                "\x8E": "\\u008e",
                "\x8F": "\\u008f",
                "\x90": "\\u0090",
                "\x91": "\\u0091",
                "\x92": "\\u0092",
                "\x93": "\\u0093",
                "\x94": "\\u0094",
                "\x95": "\\u0095",
                "\x96": "\\u0096",
                "\x97": "\\u0097",
                "\x98": "\\u0098",
                "\x99": "\\u0099",
                "\x9A": "\\u009a",
                "\x9B": "\\u009b",
                "\x9C": "\\u009c",
                "\x9D": "\\u009d",
                "\x9E": "\\u009e",
                "\x9F": "\\u009f",
                "\xAD": "\\u00ad",
                "\u0600": "\\u0600",
                "\u0601": "\\u0601",
                "\u0602": "\\u0602",
                "\u0603": "\\u0603",
                "\u0604": "\\u0604",
                "\u070F": "\\u070f",
                "\u17B4": "\\u17b4",
                "\u17B5": "\\u17b5",
                "\u200C": "\\u200c",
                "\u200D": "\\u200d",
                "\u200E": "\\u200e",
                "\u200F": "\\u200f",
                "\u2028": "\\u2028",
                "\u2029": "\\u2029",
                "\u202A": "\\u202a",
                "\u202B": "\\u202b",
                "\u202C": "\\u202c",
                "\u202D": "\\u202d",
                "\u202E": "\\u202e",
                "\u202F": "\\u202f",
                "\u2060": "\\u2060",
                "\u2061": "\\u2061",
                "\u2062": "\\u2062",
                "\u2063": "\\u2063",
                "\u2064": "\\u2064",
                "\u2065": "\\u2065",
                "\u2066": "\\u2066",
                "\u2067": "\\u2067",
                "\u2068": "\\u2068",
                "\u2069": "\\u2069",
                "\u206A": "\\u206a",
                "\u206B": "\\u206b",
                "\u206C": "\\u206c",
                "\u206D": "\\u206d",
                "\u206E": "\\u206e",
                "\u206F": "\\u206f",
                "\uFEFF": "\\ufeff",
                "\uFFF0": "\\ufff0",
                "\uFFF1": "\\ufff1",
                "\uFFF2": "\\ufff2",
                "\uFFF3": "\\ufff3",
                "\uFFF4": "\\ufff4",
                "\uFFF5": "\\ufff5",
                "\uFFF6": "\\ufff6",
                "\uFFF7": "\\ufff7",
                "\uFFF8": "\\ufff8",
                "\uFFF9": "\\ufff9",
                "\uFFFA": "\\ufffa",
                "\uFFFB": "\\ufffb",
                "\uFFFC": "\\ufffc",
                "\uFFFD": "\\ufffd",
                "\uFFFE": "\\ufffe",
                "\uFFFF": "\\uffff"
              }; // Some extra characters that Chrome gets wrong, and substitutes with
              // something else on the wire.

              var extra_escapable = /[\x00-\x1f\ud800-\udfff\ufffe\uffff\u0300-\u0333\u033d-\u0346\u034a-\u034c\u0350-\u0352\u0357-\u0358\u035c-\u0362\u0374\u037e\u0387\u0591-\u05af\u05c4\u0610-\u0617\u0653-\u0654\u0657-\u065b\u065d-\u065e\u06df-\u06e2\u06eb-\u06ec\u0730\u0732-\u0733\u0735-\u0736\u073a\u073d\u073f-\u0741\u0743\u0745\u0747\u07eb-\u07f1\u0951\u0958-\u095f\u09dc-\u09dd\u09df\u0a33\u0a36\u0a59-\u0a5b\u0a5e\u0b5c-\u0b5d\u0e38-\u0e39\u0f43\u0f4d\u0f52\u0f57\u0f5c\u0f69\u0f72-\u0f76\u0f78\u0f80-\u0f83\u0f93\u0f9d\u0fa2\u0fa7\u0fac\u0fb9\u1939-\u193a\u1a17\u1b6b\u1cda-\u1cdb\u1dc0-\u1dcf\u1dfc\u1dfe\u1f71\u1f73\u1f75\u1f77\u1f79\u1f7b\u1f7d\u1fbb\u1fbe\u1fc9\u1fcb\u1fd3\u1fdb\u1fe3\u1feb\u1fee-\u1fef\u1ff9\u1ffb\u1ffd\u2000-\u2001\u20d0-\u20d1\u20d4-\u20d7\u20e7-\u20e9\u2126\u212a-\u212b\u2329-\u232a\u2adc\u302b-\u302c\uaab2-\uaab3\uf900-\ufa0d\ufa10\ufa12\ufa15-\ufa1e\ufa20\ufa22\ufa25-\ufa26\ufa2a-\ufa2d\ufa30-\ufa6d\ufa70-\ufad9\ufb1d\ufb1f\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufb4e\ufff0-\uffff]/g,
                  extra_lookup; // JSON Quote string. Use native implementation when possible.

              var JSONQuote = JSON && JSON.stringify || function (string) {
                json_escapable.lastIndex = 0;

                if (json_escapable.test(string)) {
                  string = string.replace(json_escapable, function (a) {
                    return json_lookup[a];
                  });
                }

                return '"' + string + '"';
              }; // This may be quite slow, so let's delay until user actually uses bad
              // characters.


              var unroll_lookup = function (escapable) {
                var i;
                var unrolled = {};
                var c = [];

                for (i = 0; i < 65536; i++) {
                  c.push(String.fromCharCode(i));
                }

                escapable.lastIndex = 0;
                c.join('').replace(escapable, function (a) {
                  unrolled[a] = "\\u" + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                  return '';
                });
                escapable.lastIndex = 0;
                return unrolled;
              }; // Quote string, also taking care of unicode characters that browsers
              // often break. Especially, take care of unicode surrogates:
              //    http://en.wikipedia.org/wiki/Mapping_of_Unicode_characters#Surrogates


              utils.quote = function (string) {
                var quoted = JSONQuote(string); // In most cases this should be very fast and good enough.

                extra_escapable.lastIndex = 0;

                if (!extra_escapable.test(quoted)) {
                  return quoted;
                }

                if (!extra_lookup) extra_lookup = unroll_lookup(extra_escapable);
                return quoted.replace(extra_escapable, function (a) {
                  return extra_lookup[a];
                });
              };

              var _all_protocols = ['websocket', 'xdr-streaming', 'xhr-streaming', 'iframe-eventsource', 'iframe-htmlfile', 'xdr-polling', 'xhr-polling', 'iframe-xhr-polling', 'jsonp-polling'];

              utils.probeProtocols = function () {
                var probed = {};

                for (var i = 0; i < _all_protocols.length; i++) {
                  var protocol = _all_protocols[i]; // User can have a typo in protocol name.

                  probed[protocol] = SockJS[protocol] && SockJS[protocol].enabled();
                }

                return probed;
              };

              utils.detectProtocols = function (probed, protocols_whitelist, info) {
                var pe = {},
                    protocols = [];
                if (!protocols_whitelist) protocols_whitelist = _all_protocols;

                for (var i = 0; i < protocols_whitelist.length; i++) {
                  var protocol = protocols_whitelist[i];
                  pe[protocol] = probed[protocol];
                }

                var maybe_push = function (protos) {
                  var proto = protos.shift();

                  if (pe[proto]) {
                    protocols.push(proto);
                  } else {
                    if (protos.length > 0) {
                      maybe_push(protos);
                    }
                  }
                }; // 1. Websocket


                if (info.websocket !== false) {
                  maybe_push(['websocket']);
                } // 2. Streaming


                if (pe['xhr-streaming'] && !info.null_origin) {
                  protocols.push('xhr-streaming');
                } else {
                  if (pe['xdr-streaming'] && !info.cookie_needed && !info.null_origin) {
                    protocols.push('xdr-streaming');
                  } else {
                    maybe_push(['iframe-eventsource', 'iframe-htmlfile']);
                  }
                } // 3. Polling


                if (pe['xhr-polling'] && !info.null_origin) {
                  protocols.push('xhr-polling');
                } else {
                  if (pe['xdr-polling'] && !info.cookie_needed && !info.null_origin) {
                    protocols.push('xdr-polling');
                  } else {
                    maybe_push(['iframe-xhr-polling', 'jsonp-polling']);
                  }
                }

                return protocols;
              }; //         [*] End of lib/utils.js
              //         [*] Including lib/dom.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */
              // May be used by htmlfile jsonp and transports.


              var MPrefix = '_sockjs_global';

              utils.createHook = function () {
                var window_id = 'a' + utils.random_string(8);

                if (!(MPrefix in _window)) {
                  var map = {};

                  _window[MPrefix] = function (window_id) {
                    if (!(window_id in map)) {
                      map[window_id] = {
                        id: window_id,
                        del: function () {
                          delete map[window_id];
                        }
                      };
                    }

                    return map[window_id];
                  };
                }

                return _window[MPrefix](window_id);
              };

              utils.attachMessage = function (listener) {
                utils.attachEvent('message', listener);
              };

              utils.attachEvent = function (event, listener) {
                if (typeof _window.addEventListener !== 'undefined') {
                  _window.addEventListener(event, listener, false);
                } else {
                  // IE quirks.
                  // According to: http://stevesouders.com/misc/test-postmessage.php
                  // the message gets delivered only to 'document', not 'window'.
                  _document.attachEvent("on" + event, listener); // I get 'window' for ie8.


                  _window.attachEvent("on" + event, listener);
                }
              };

              utils.detachMessage = function (listener) {
                utils.detachEvent('message', listener);
              };

              utils.detachEvent = function (event, listener) {
                if (typeof _window.addEventListener !== 'undefined') {
                  _window.removeEventListener(event, listener, false);
                } else {
                  _document.detachEvent("on" + event, listener);

                  _window.detachEvent("on" + event, listener);
                }
              };

              var on_unload = {}; // Things registered after beforeunload are to be called immediately.

              var after_unload = false;

              var trigger_unload_callbacks = function () {
                for (var ref in on_unload) {
                  on_unload[ref]();
                  delete on_unload[ref];
                }

                ;
              };

              var unload_triggered = function () {
                if (after_unload) return;
                after_unload = true;
                trigger_unload_callbacks();
              }; // 'unload' alone is not reliable in opera within an iframe, but we
              // can't use `beforeunload` as IE fires it on javascript: links.


              utils.attachEvent('unload', unload_triggered);

              utils.unload_add = function (listener) {
                var ref = utils.random_string(8);
                on_unload[ref] = listener;

                if (after_unload) {
                  utils.delay(trigger_unload_callbacks);
                }

                return ref;
              };

              utils.unload_del = function (ref) {
                if (ref in on_unload) delete on_unload[ref];
              };

              utils.createIframe = function (iframe_url, error_callback) {
                var iframe = _document.createElement('iframe');

                var tref, unload_ref;

                var unattach = function () {
                  clearTimeout(tref); // Explorer had problems with that.

                  try {
                    iframe.onload = null;
                  } catch (x) {}

                  iframe.onerror = null;
                };

                var cleanup = function () {
                  if (iframe) {
                    unattach(); // This timeout makes chrome fire onbeforeunload event
                    // within iframe. Without the timeout it goes straight to
                    // onunload.

                    setTimeout(function () {
                      if (iframe) {
                        iframe.parentNode.removeChild(iframe);
                      }

                      iframe = null;
                    }, 0);
                    utils.unload_del(unload_ref);
                  }
                };

                var onerror = function (r) {
                  if (iframe) {
                    cleanup();
                    error_callback(r);
                  }
                };

                var post = function (msg, origin) {
                  try {
                    // When the iframe is not loaded, IE raises an exception
                    // on 'contentWindow'.
                    if (iframe && iframe.contentWindow) {
                      iframe.contentWindow.postMessage(msg, origin);
                    }
                  } catch (x) {}

                  ;
                };

                iframe.src = iframe_url;
                iframe.style.display = 'none';
                iframe.style.position = 'absolute';

                iframe.onerror = function () {
                  onerror('onerror');
                };

                iframe.onload = function () {
                  // `onload` is triggered before scripts on the iframe are
                  // executed. Give it few seconds to actually load stuff.
                  clearTimeout(tref);
                  tref = setTimeout(function () {
                    onerror('onload timeout');
                  }, 2000);
                };

                _document.body.appendChild(iframe);

                tref = setTimeout(function () {
                  onerror('timeout');
                }, 15000);
                unload_ref = utils.unload_add(cleanup);
                return {
                  post: post,
                  cleanup: cleanup,
                  loaded: unattach
                };
              };

              utils.createHtmlfile = function (iframe_url, error_callback) {
                var doc = new ActiveXObject('htmlfile');
                var tref, unload_ref;
                var iframe;

                var unattach = function () {
                  clearTimeout(tref);
                };

                var cleanup = function () {
                  if (doc) {
                    unattach();
                    utils.unload_del(unload_ref);
                    iframe.parentNode.removeChild(iframe);
                    iframe = doc = null;
                    CollectGarbage();
                  }
                };

                var onerror = function (r) {
                  if (doc) {
                    cleanup();
                    error_callback(r);
                  }
                };

                var post = function (msg, origin) {
                  try {
                    // When the iframe is not loaded, IE raises an exception
                    // on 'contentWindow'.
                    if (iframe && iframe.contentWindow) {
                      iframe.contentWindow.postMessage(msg, origin);
                    }
                  } catch (x) {}

                  ;
                };

                doc.open();
                doc.write('<html><s' + 'cript>' + 'document.domain="' + document.domain + '";' + '</s' + 'cript></html>');
                doc.close();
                doc.parentWindow[WPrefix] = _window[WPrefix];
                var c = doc.createElement('div');
                doc.body.appendChild(c);
                iframe = doc.createElement('iframe');
                c.appendChild(iframe);
                iframe.src = iframe_url;
                tref = setTimeout(function () {
                  onerror('timeout');
                }, 15000);
                unload_ref = utils.unload_add(cleanup);
                return {
                  post: post,
                  cleanup: cleanup,
                  loaded: unattach
                };
              }; //         [*] End of lib/dom.js
              //         [*] Including lib/dom2.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var AbstractXHRObject = function () {};

              AbstractXHRObject.prototype = new EventEmitter(['chunk', 'finish']);

              AbstractXHRObject.prototype._start = function (method, url, payload, opts) {
                var that = this;

                try {
                  that.xhr = new XMLHttpRequest();
                } catch (x) {}

                ;

                if (!that.xhr) {
                  try {
                    that.xhr = new _window.ActiveXObject('Microsoft.XMLHTTP');
                  } catch (x) {}

                  ;
                }

                if (_window.ActiveXObject || _window.XDomainRequest) {
                  // IE8 caches even POSTs
                  url += (url.indexOf('?') === -1 ? '?' : '&') + 't=' + +new Date();
                } // Explorer tends to keep connection open, even after the
                // tab gets closed: http://bugs.jquery.com/ticket/5280


                that.unload_ref = utils.unload_add(function () {
                  that._cleanup(true);
                });

                try {
                  that.xhr.open(method, url, true);
                } catch (e) {
                  // IE raises an exception on wrong port.
                  that.emit('finish', 0, '');

                  that._cleanup();

                  return;
                }

                ;

                if (!opts || !opts.no_credentials) {
                  // Mozilla docs says https://developer.mozilla.org/en/XMLHttpRequest :
                  // "This never affects same-site requests."
                  that.xhr.withCredentials = 'true';
                }

                if (opts && opts.headers) {
                  for (var key in opts.headers) {
                    that.xhr.setRequestHeader(key, opts.headers[key]);
                  }
                }

                that.xhr.onreadystatechange = function () {
                  if (that.xhr) {
                    var x = that.xhr;

                    switch (x.readyState) {
                      case 3:
                        // IE doesn't like peeking into responseText or status
                        // on Microsoft.XMLHTTP and readystate=3
                        try {
                          var status = x.status;
                          var text = x.responseText;
                        } catch (x) {}

                        ; // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450

                        if (status === 1223) status = 204; // IE does return readystate == 3 for 404 answers.

                        if (text && text.length > 0) {
                          that.emit('chunk', status, text);
                        }

                        break;

                      case 4:
                        var status = x.status; // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450

                        if (status === 1223) status = 204;
                        that.emit('finish', status, x.responseText);

                        that._cleanup(false);

                        break;
                    }
                  }
                };

                that.xhr.send(payload);
              };

              AbstractXHRObject.prototype._cleanup = function (abort) {
                var that = this;
                if (!that.xhr) return;
                utils.unload_del(that.unload_ref); // IE needs this field to be a function

                that.xhr.onreadystatechange = function () {};

                if (abort) {
                  try {
                    that.xhr.abort();
                  } catch (x) {}

                  ;
                }

                that.unload_ref = that.xhr = null;
              };

              AbstractXHRObject.prototype.close = function () {
                var that = this;
                that.nuke();

                that._cleanup(true);
              };

              var XHRCorsObject = utils.XHRCorsObject = function () {
                var that = this,
                    args = arguments;
                utils.delay(function () {
                  that._start.apply(that, args);
                });
              };

              XHRCorsObject.prototype = new AbstractXHRObject();

              var XHRLocalObject = utils.XHRLocalObject = function (method, url, payload) {
                var that = this;
                utils.delay(function () {
                  that._start(method, url, payload, {
                    no_credentials: true
                  });
                });
              };

              XHRLocalObject.prototype = new AbstractXHRObject(); // References:
              //   http://ajaxian.com/archives/100-line-ajax-wrapper
              //   http://msdn.microsoft.com/en-us/library/cc288060(v=VS.85).aspx

              var XDRObject = utils.XDRObject = function (method, url, payload) {
                var that = this;
                utils.delay(function () {
                  that._start(method, url, payload);
                });
              };

              XDRObject.prototype = new EventEmitter(['chunk', 'finish']);

              XDRObject.prototype._start = function (method, url, payload) {
                var that = this;
                var xdr = new XDomainRequest(); // IE caches even POSTs

                url += (url.indexOf('?') === -1 ? '?' : '&') + 't=' + +new Date();

                var onerror = xdr.ontimeout = xdr.onerror = function () {
                  that.emit('finish', 0, '');

                  that._cleanup(false);
                };

                xdr.onprogress = function () {
                  that.emit('chunk', 200, xdr.responseText);
                };

                xdr.onload = function () {
                  that.emit('finish', 200, xdr.responseText);

                  that._cleanup(false);
                };

                that.xdr = xdr;
                that.unload_ref = utils.unload_add(function () {
                  that._cleanup(true);
                });

                try {
                  // Fails with AccessDenied if port number is bogus
                  that.xdr.open(method, url);
                  that.xdr.send(payload);
                } catch (x) {
                  onerror();
                }
              };

              XDRObject.prototype._cleanup = function (abort) {
                var that = this;
                if (!that.xdr) return;
                utils.unload_del(that.unload_ref);
                that.xdr.ontimeout = that.xdr.onerror = that.xdr.onprogress = that.xdr.onload = null;

                if (abort) {
                  try {
                    that.xdr.abort();
                  } catch (x) {}

                  ;
                }

                that.unload_ref = that.xdr = null;
              };

              XDRObject.prototype.close = function () {
                var that = this;
                that.nuke();

                that._cleanup(true);
              }; // 1. Is natively via XHR
              // 2. Is natively via XDR
              // 3. Nope, but postMessage is there so it should work via the Iframe.
              // 4. Nope, sorry.


              utils.isXHRCorsCapable = function () {
                if (_window.XMLHttpRequest && 'withCredentials' in new XMLHttpRequest()) {
                  return 1;
                } // XDomainRequest doesn't work if page is served from file://


                if (_window.XDomainRequest && _document.domain) {
                  return 2;
                }

                if (IframeTransport.enabled()) {
                  return 3;
                }

                return 4;
              }; //         [*] End of lib/dom2.js
              //         [*] Including lib/sockjs.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var SockJS = function (url, dep_protocols_whitelist, options) {
                if (!(this instanceof SockJS)) {
                  // makes `new` optional
                  return new SockJS(url, dep_protocols_whitelist, options);
                }

                var that = this,
                    protocols_whitelist;
                that._options = {
                  devel: false,
                  debug: false,
                  protocols_whitelist: [],
                  info: undefined,
                  rtt: undefined
                };

                if (options) {
                  utils.objectExtend(that._options, options);
                }

                that._base_url = utils.amendUrl(url);
                that._server = that._options.server || utils.random_number_string(1000);

                if (that._options.protocols_whitelist && that._options.protocols_whitelist.length) {
                  protocols_whitelist = that._options.protocols_whitelist;
                } else {
                  // Deprecated API
                  if (typeof dep_protocols_whitelist === 'string' && dep_protocols_whitelist.length > 0) {
                    protocols_whitelist = [dep_protocols_whitelist];
                  } else if (utils.isArray(dep_protocols_whitelist)) {
                    protocols_whitelist = dep_protocols_whitelist;
                  } else {
                    protocols_whitelist = null;
                  }

                  if (protocols_whitelist) {
                    that._debug('Deprecated API: Use "protocols_whitelist" option ' + 'instead of supplying protocol list as a second ' + 'parameter to SockJS constructor.');
                  }
                }

                that._protocols = [];
                that.protocol = null;
                that.readyState = SockJS.CONNECTING;
                that._ir = createInfoReceiver(that._base_url);

                that._ir.onfinish = function (info, rtt) {
                  that._ir = null;

                  if (info) {
                    if (that._options.info) {
                      // Override if user supplies the option
                      info = utils.objectExtend(info, that._options.info);
                    }

                    if (that._options.rtt) {
                      rtt = that._options.rtt;
                    }

                    that._applyInfo(info, rtt, protocols_whitelist);

                    that._didClose();
                  } else {
                    that._didClose(1002, 'Can\'t connect to server', true);
                  }
                };
              }; // Inheritance


              SockJS.prototype = new REventTarget();
              SockJS.version = "0.3.4";
              SockJS.CONNECTING = 0;
              SockJS.OPEN = 1;
              SockJS.CLOSING = 2;
              SockJS.CLOSED = 3;

              SockJS.prototype._debug = function () {
                if (this._options.debug) utils.log.apply(utils, arguments);
              };

              SockJS.prototype._dispatchOpen = function () {
                var that = this;

                if (that.readyState === SockJS.CONNECTING) {
                  if (that._transport_tref) {
                    clearTimeout(that._transport_tref);
                    that._transport_tref = null;
                  }

                  that.readyState = SockJS.OPEN;
                  that.dispatchEvent(new SimpleEvent("open"));
                } else {
                  // The server might have been restarted, and lost track of our
                  // connection.
                  that._didClose(1006, "Server lost session");
                }
              };

              SockJS.prototype._dispatchMessage = function (data) {
                var that = this;
                if (that.readyState !== SockJS.OPEN) return;
                that.dispatchEvent(new SimpleEvent("message", {
                  data: data
                }));
              };

              SockJS.prototype._dispatchHeartbeat = function (data) {
                var that = this;
                if (that.readyState !== SockJS.OPEN) return;
                that.dispatchEvent(new SimpleEvent('heartbeat', {}));
              };

              SockJS.prototype._didClose = function (code, reason, force) {
                var that = this;

                if (that.readyState !== SockJS.CONNECTING && that.readyState !== SockJS.OPEN && that.readyState !== SockJS.CLOSING) {
                  utils.debug('INVALID_STATE_ERR', that.readyState);
                  return;
                }

                if (that._ir) {
                  that._ir.nuke();

                  that._ir = null;
                }

                if (that._transport) {
                  that._transport.doCleanup();

                  that._transport = null;
                }

                var close_event = new SimpleEvent("close", {
                  code: code,
                  reason: reason,
                  wasClean: utils.userSetCode(code)
                });

                if (!utils.userSetCode(code) && that.readyState === SockJS.CONNECTING && !force) {
                  if (that._try_next_protocol(close_event)) {
                    return;
                  }

                  close_event = new SimpleEvent("close", {
                    code: 2000,
                    reason: "All transports failed",
                    wasClean: false,
                    last_event: close_event
                  });
                }

                that.readyState = SockJS.CLOSED;
                utils.delay(function () {
                  that.dispatchEvent(close_event);
                });
              };

              SockJS.prototype._didMessage = function (data) {
                var that = this;
                var type = data.slice(0, 1);

                switch (type) {
                  case 'o':
                    that._dispatchOpen();

                    break;

                  case 'a':
                    var payload = JSON.parse(data.slice(1) || '[]');

                    for (var i = 0; i < payload.length; i++) {
                      that._dispatchMessage(payload[i]);
                    }

                    break;

                  case 'm':
                    var payload = JSON.parse(data.slice(1) || 'null');

                    that._dispatchMessage(payload);

                    break;

                  case 'c':
                    var payload = JSON.parse(data.slice(1) || '[]');

                    that._didClose(payload[0], payload[1]);

                    break;

                  case 'h':
                    that._dispatchHeartbeat();

                    break;
                }
              };

              SockJS.prototype._try_next_protocol = function (close_event) {
                var that = this;

                if (that.protocol) {
                  that._debug('Closed transport:', that.protocol, '' + close_event);

                  that.protocol = null;
                }

                if (that._transport_tref) {
                  clearTimeout(that._transport_tref);
                  that._transport_tref = null;
                }

                while (1) {
                  var protocol = that.protocol = that._protocols.shift();

                  if (!protocol) {
                    return false;
                  } // Some protocols require access to `body`, what if were in
                  // the `head`?


                  if (SockJS[protocol] && SockJS[protocol].need_body === true && (!_document.body || typeof _document.readyState !== 'undefined' && _document.readyState !== 'complete')) {
                    that._protocols.unshift(protocol);

                    that.protocol = 'waiting-for-load';
                    utils.attachEvent('load', function () {
                      that._try_next_protocol();
                    });
                    return true;
                  }

                  if (!SockJS[protocol] || !SockJS[protocol].enabled(that._options)) {
                    that._debug('Skipping transport:', protocol);
                  } else {
                    var roundTrips = SockJS[protocol].roundTrips || 1;
                    var to = (that._options.rto || 0) * roundTrips || 5000;
                    that._transport_tref = utils.delay(to, function () {
                      if (that.readyState === SockJS.CONNECTING) {
                        // I can't understand how it is possible to run
                        // this timer, when the state is CLOSED, but
                        // apparently in IE everythin is possible.
                        that._didClose(2007, "Transport timeouted");
                      }
                    });
                    var connid = utils.random_string(8);
                    var trans_url = that._base_url + '/' + that._server + '/' + connid;

                    that._debug('Opening transport:', protocol, ' url:' + trans_url, ' RTO:' + that._options.rto);

                    that._transport = new SockJS[protocol](that, trans_url, that._base_url);
                    return true;
                  }
                }
              };

              SockJS.prototype.close = function (code, reason) {
                var that = this;
                if (code && !utils.userSetCode(code)) throw new Error("INVALID_ACCESS_ERR");

                if (that.readyState !== SockJS.CONNECTING && that.readyState !== SockJS.OPEN) {
                  return false;
                }

                that.readyState = SockJS.CLOSING;

                that._didClose(code || 1000, reason || "Normal closure");

                return true;
              };

              SockJS.prototype.send = function (data) {
                var that = this;
                if (that.readyState === SockJS.CONNECTING) throw new Error('INVALID_STATE_ERR');

                if (that.readyState === SockJS.OPEN) {
                  that._transport.doSend(utils.quote('' + data));
                }

                return true;
              };

              SockJS.prototype._applyInfo = function (info, rtt, protocols_whitelist) {
                var that = this;
                that._options.info = info;
                that._options.rtt = rtt;
                that._options.rto = utils.countRTO(rtt);
                that._options.info.null_origin = !_document.domain; // Servers can override base_url, eg to provide a randomized domain name and
                // avoid browser per-domain connection limits.

                if (info.base_url) // <METEOR>
                  that._base_url = utils.amendUrl(info.base_url, that._base_url); // </METEOR>

                var probed = utils.probeProtocols();
                that._protocols = utils.detectProtocols(probed, protocols_whitelist, info); // <METEOR>
                // https://github.com/sockjs/sockjs-client/issues/79
                // Hack to avoid XDR when using different protocols
                // We're on IE trying to do cross-protocol. jsonp only.

                if (!utils.isSameOriginScheme(that._base_url) && 2 === utils.isXHRCorsCapable()) {
                  that._protocols = ['jsonp-polling'];
                } // </METEOR>
              }; //         [*] End of lib/sockjs.js
              //         [*] Including lib/trans-websocket.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var WebSocketTransport = SockJS.websocket = function (ri, trans_url) {
                var that = this;
                var url = trans_url + '/websocket';

                if (url.slice(0, 5) === 'https') {
                  url = 'wss' + url.slice(5);
                } else {
                  url = 'ws' + url.slice(4);
                }

                that.ri = ri;
                that.url = url;
                var Constructor = _window.WebSocket || _window.MozWebSocket;
                that.ws = new Constructor(that.url);

                that.ws.onmessage = function (e) {
                  that.ri._didMessage(e.data);
                }; // Firefox has an interesting bug. If a websocket connection is
                // created after onunload, it stays alive even when user
                // navigates away from the page. In such situation let's lie -
                // let's not open the ws connection at all. See:
                // https://github.com/sockjs/sockjs-client/issues/28
                // https://bugzilla.mozilla.org/show_bug.cgi?id=696085


                that.unload_ref = utils.unload_add(function () {
                  that.ws.close();
                });

                that.ws.onclose = function () {
                  that.ri._didMessage(utils.closeFrame(1006, "WebSocket connection broken"));
                };
              };

              WebSocketTransport.prototype.doSend = function (data) {
                this.ws.send('[' + data + ']');
              };

              WebSocketTransport.prototype.doCleanup = function () {
                var that = this;
                var ws = that.ws;

                if (ws) {
                  ws.onmessage = ws.onclose = null;
                  ws.close();
                  utils.unload_del(that.unload_ref);
                  that.unload_ref = that.ri = that.ws = null;
                }
              };

              WebSocketTransport.enabled = function () {
                return !!(_window.WebSocket || _window.MozWebSocket);
              }; // In theory, ws should require 1 round trip. But in chrome, this is
              // not very stable over SSL. Most likely a ws connection requires a
              // separate SSL connection, in which case 2 round trips are an
              // absolute minumum.


              WebSocketTransport.roundTrips = 2; //         [*] End of lib/trans-websocket.js
              //         [*] Including lib/trans-sender.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var BufferedSender = function () {};

              BufferedSender.prototype.send_constructor = function (sender) {
                var that = this;
                that.send_buffer = [];
                that.sender = sender;
              };

              BufferedSender.prototype.doSend = function (message) {
                var that = this;
                that.send_buffer.push(message);

                if (!that.send_stop) {
                  that.send_schedule();
                }
              }; // For polling transports in a situation when in the message callback,
              // new message is being send. If the sending connection was started
              // before receiving one, it is possible to saturate the network and
              // timeout due to the lack of receiving socket. To avoid that we delay
              // sending messages by some small time, in order to let receiving
              // connection be started beforehand. This is only a halfmeasure and
              // does not fix the big problem, but it does make the tests go more
              // stable on slow networks.


              BufferedSender.prototype.send_schedule_wait = function () {
                var that = this;
                var tref;

                that.send_stop = function () {
                  that.send_stop = null;
                  clearTimeout(tref);
                };

                tref = utils.delay(25, function () {
                  that.send_stop = null;
                  that.send_schedule();
                });
              };

              BufferedSender.prototype.send_schedule = function () {
                var that = this;

                if (that.send_buffer.length > 0) {
                  var payload = '[' + that.send_buffer.join(',') + ']';
                  that.send_stop = that.sender(that.trans_url, payload, function (success, abort_reason) {
                    that.send_stop = null;

                    if (success === false) {
                      that.ri._didClose(1006, 'Sending error ' + abort_reason);
                    } else {
                      that.send_schedule_wait();
                    }
                  });
                  that.send_buffer = [];
                }
              };

              BufferedSender.prototype.send_destructor = function () {
                var that = this;

                if (that._send_stop) {
                  that._send_stop();
                }

                that._send_stop = null;
              };

              var jsonPGenericSender = function (url, payload, callback) {
                var that = this;

                if (!('_send_form' in that)) {
                  var form = that._send_form = _document.createElement('form');

                  var area = that._send_area = _document.createElement('textarea');

                  area.name = 'd';
                  form.style.display = 'none';
                  form.style.position = 'absolute';
                  form.method = 'POST';
                  form.enctype = 'application/x-www-form-urlencoded';
                  form.acceptCharset = "UTF-8";
                  form.appendChild(area);

                  _document.body.appendChild(form);
                }

                var form = that._send_form;
                var area = that._send_area;
                var id = 'a' + utils.random_string(8);
                form.target = id;
                form.action = url + '/jsonp_send?i=' + id;
                var iframe;

                try {
                  // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
                  iframe = _document.createElement('<iframe name="' + id + '">');
                } catch (x) {
                  iframe = _document.createElement('iframe');
                  iframe.name = id;
                }

                iframe.id = id;
                form.appendChild(iframe);
                iframe.style.display = 'none';

                try {
                  area.value = payload;
                } catch (e) {
                  utils.log('Your browser is seriously broken. Go home! ' + e.message);
                }

                form.submit();

                var completed = function (e) {
                  if (!iframe.onerror) return;
                  iframe.onreadystatechange = iframe.onerror = iframe.onload = null; // Opera mini doesn't like if we GC iframe
                  // immediately, thus this timeout.

                  utils.delay(500, function () {
                    iframe.parentNode.removeChild(iframe);
                    iframe = null;
                  });
                  area.value = ''; // It is not possible to detect if the iframe succeeded or
                  // failed to submit our form.

                  callback(true);
                };

                iframe.onerror = iframe.onload = completed;

                iframe.onreadystatechange = function (e) {
                  if (iframe.readyState == 'complete') completed();
                };

                return completed;
              };

              var createAjaxSender = function (AjaxObject) {
                return function (url, payload, callback) {
                  var xo = new AjaxObject('POST', url + '/xhr_send', payload);

                  xo.onfinish = function (status, text) {
                    callback(status === 200 || status === 204, 'http status ' + status);
                  };

                  return function (abort_reason) {
                    callback(false, abort_reason);
                  };
                };
              }; //         [*] End of lib/trans-sender.js
              //         [*] Including lib/trans-jsonp-receiver.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */
              // Parts derived from Socket.io:
              //    https://github.com/LearnBoost/socket.io/blob/0.6.17/lib/socket.io/transports/jsonp-polling.js
              // and jQuery-JSONP:
              //    https://code.google.com/p/jquery-jsonp/source/browse/trunk/core/jquery.jsonp.js


              var jsonPGenericReceiver = function (url, callback) {
                var tref;

                var script = _document.createElement('script');

                var script2; // Opera synchronous load trick.

                var close_script = function (frame) {
                  if (script2) {
                    script2.parentNode.removeChild(script2);
                    script2 = null;
                  }

                  if (script) {
                    clearTimeout(tref); // Unfortunately, you can't really abort script loading of
                    // the script.

                    script.parentNode.removeChild(script);
                    script.onreadystatechange = script.onerror = script.onload = script.onclick = null;
                    script = null;
                    callback(frame);
                    callback = null;
                  }
                }; // IE9 fires 'error' event after orsc or before, in random order.


                var loaded_okay = false;
                var error_timer = null;
                script.id = 'a' + utils.random_string(8);
                script.src = url;
                script.type = 'text/javascript';
                script.charset = 'UTF-8';

                script.onerror = function (e) {
                  if (!error_timer) {
                    // Delay firing close_script.
                    error_timer = setTimeout(function () {
                      if (!loaded_okay) {
                        close_script(utils.closeFrame(1006, "JSONP script loaded abnormally (onerror)"));
                      }
                    }, 1000);
                  }
                };

                script.onload = function (e) {
                  close_script(utils.closeFrame(1006, "JSONP script loaded abnormally (onload)"));
                };

                script.onreadystatechange = function (e) {
                  if (/loaded|closed/.test(script.readyState)) {
                    if (script && script.htmlFor && script.onclick) {
                      loaded_okay = true;

                      try {
                        // In IE, actually execute the script.
                        script.onclick();
                      } catch (x) {}
                    }

                    if (script) {
                      close_script(utils.closeFrame(1006, "JSONP script loaded abnormally (onreadystatechange)"));
                    }
                  }
                }; // IE: event/htmlFor/onclick trick.
                // One can't rely on proper order for onreadystatechange. In order to
                // make sure, set a 'htmlFor' and 'event' properties, so that
                // script code will be installed as 'onclick' handler for the
                // script object. Later, onreadystatechange, manually execute this
                // code. FF and Chrome doesn't work with 'event' and 'htmlFor'
                // set. For reference see:
                //   http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html
                // Also, read on that about script ordering:
                //   http://wiki.whatwg.org/wiki/Dynamic_Script_Execution_Order


                if (typeof script.async === 'undefined' && _document.attachEvent) {
                  // According to mozilla docs, in recent browsers script.async defaults
                  // to 'true', so we may use it to detect a good browser:
                  // https://developer.mozilla.org/en/HTML/Element/script
                  if (!/opera/i.test(navigator.userAgent)) {
                    // Naively assume we're in IE
                    try {
                      script.htmlFor = script.id;
                      script.event = "onclick";
                    } catch (x) {}

                    script.async = true;
                  } else {
                    // Opera, second sync script hack
                    script2 = _document.createElement('script');
                    script2.text = "try{var a = document.getElementById('" + script.id + "'); if(a)a.onerror();}catch(x){};";
                    script.async = script2.async = false;
                  }
                }

                if (typeof script.async !== 'undefined') {
                  script.async = true;
                } // Fallback mostly for Konqueror - stupid timer, 35 seconds shall be plenty.


                tref = setTimeout(function () {
                  close_script(utils.closeFrame(1006, "JSONP script loaded abnormally (timeout)"));
                }, 35000);

                var head = _document.getElementsByTagName('head')[0];

                head.insertBefore(script, head.firstChild);

                if (script2) {
                  head.insertBefore(script2, head.firstChild);
                }

                return close_script;
              }; //         [*] End of lib/trans-jsonp-receiver.js
              //         [*] Including lib/trans-jsonp-polling.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */
              // The simplest and most robust transport, using the well-know cross
              // domain hack - JSONP. This transport is quite inefficient - one
              // mssage could use up to one http request. But at least it works almost
              // everywhere.
              // Known limitations:
              //   o you will get a spinning cursor
              //   o for Konqueror a dumb timer is needed to detect errors


              var JsonPTransport = SockJS['jsonp-polling'] = function (ri, trans_url) {
                utils.polluteGlobalNamespace();
                var that = this;
                that.ri = ri;
                that.trans_url = trans_url;
                that.send_constructor(jsonPGenericSender);

                that._schedule_recv();
              }; // Inheritnace


              JsonPTransport.prototype = new BufferedSender();

              JsonPTransport.prototype._schedule_recv = function () {
                var that = this;

                var callback = function (data) {
                  that._recv_stop = null;

                  if (data) {
                    // no data - heartbeat;
                    if (!that._is_closing) {
                      that.ri._didMessage(data);
                    }
                  } // The message can be a close message, and change is_closing state.


                  if (!that._is_closing) {
                    that._schedule_recv();
                  }
                };

                that._recv_stop = jsonPReceiverWrapper(that.trans_url + '/jsonp', jsonPGenericReceiver, callback);
              };

              JsonPTransport.enabled = function () {
                return true;
              };

              JsonPTransport.need_body = true;

              JsonPTransport.prototype.doCleanup = function () {
                var that = this;
                that._is_closing = true;

                if (that._recv_stop) {
                  that._recv_stop();
                }

                that.ri = that._recv_stop = null;
                that.send_destructor();
              }; // Abstract away code that handles global namespace pollution.


              var jsonPReceiverWrapper = function (url, constructReceiver, user_callback) {
                var id = 'a' + utils.random_string(6);
                var url_id = url + '?c=' + escape(WPrefix + '.' + id); // Unfortunately it is not possible to abort loading of the
                // script. We need to keep track of frake close frames.

                var aborting = 0; // Callback will be called exactly once.

                var callback = function (frame) {
                  switch (aborting) {
                    case 0:
                      // Normal behaviour - delete hook _and_ emit message.
                      delete _window[WPrefix][id];
                      user_callback(frame);
                      break;

                    case 1:
                      // Fake close frame - emit but don't delete hook.
                      user_callback(frame);
                      aborting = 2;
                      break;

                    case 2:
                      // Got frame after connection was closed, delete hook, don't emit.
                      delete _window[WPrefix][id];
                      break;
                  }
                };

                var close_script = constructReceiver(url_id, callback);
                _window[WPrefix][id] = close_script;

                var stop = function () {
                  if (_window[WPrefix][id]) {
                    aborting = 1;

                    _window[WPrefix][id](utils.closeFrame(1000, "JSONP user aborted read"));
                  }
                };

                return stop;
              }; //         [*] End of lib/trans-jsonp-polling.js
              //         [*] Including lib/trans-xhr.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var AjaxBasedTransport = function () {};

              AjaxBasedTransport.prototype = new BufferedSender();

              AjaxBasedTransport.prototype.run = function (ri, trans_url, url_suffix, Receiver, AjaxObject) {
                var that = this;
                that.ri = ri;
                that.trans_url = trans_url;
                that.send_constructor(createAjaxSender(AjaxObject));
                that.poll = new Polling(ri, Receiver, trans_url + url_suffix, AjaxObject);
              };

              AjaxBasedTransport.prototype.doCleanup = function () {
                var that = this;

                if (that.poll) {
                  that.poll.abort();
                  that.poll = null;
                }
              }; // xhr-streaming


              var XhrStreamingTransport = SockJS['xhr-streaming'] = function (ri, trans_url) {
                this.run(ri, trans_url, '/xhr_streaming', XhrReceiver, utils.XHRCorsObject);
              };

              XhrStreamingTransport.prototype = new AjaxBasedTransport();

              XhrStreamingTransport.enabled = function () {
                // Support for CORS Ajax aka Ajax2? Opera 12 claims CORS but
                // doesn't do streaming.
                return _window.XMLHttpRequest && 'withCredentials' in new XMLHttpRequest() && !/opera/i.test(navigator.userAgent);
              };

              XhrStreamingTransport.roundTrips = 2; // preflight, ajax
              // Safari gets confused when a streaming ajax request is started
              // before onload. This causes the load indicator to spin indefinetely.

              XhrStreamingTransport.need_body = true; // According to:
              //   http://stackoverflow.com/questions/1641507/detect-browser-support-for-cross-domain-xmlhttprequests
              //   http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/
              // xdr-streaming

              var XdrStreamingTransport = SockJS['xdr-streaming'] = function (ri, trans_url) {
                this.run(ri, trans_url, '/xhr_streaming', XhrReceiver, utils.XDRObject);
              };

              XdrStreamingTransport.prototype = new AjaxBasedTransport();

              XdrStreamingTransport.enabled = function () {
                return !!_window.XDomainRequest;
              };

              XdrStreamingTransport.roundTrips = 2; // preflight, ajax
              // xhr-polling

              var XhrPollingTransport = SockJS['xhr-polling'] = function (ri, trans_url) {
                this.run(ri, trans_url, '/xhr', XhrReceiver, utils.XHRCorsObject);
              };

              XhrPollingTransport.prototype = new AjaxBasedTransport();
              XhrPollingTransport.enabled = XhrStreamingTransport.enabled;
              XhrPollingTransport.roundTrips = 2; // preflight, ajax
              // xdr-polling

              var XdrPollingTransport = SockJS['xdr-polling'] = function (ri, trans_url) {
                this.run(ri, trans_url, '/xhr', XhrReceiver, utils.XDRObject);
              };

              XdrPollingTransport.prototype = new AjaxBasedTransport();
              XdrPollingTransport.enabled = XdrStreamingTransport.enabled;
              XdrPollingTransport.roundTrips = 2; // preflight, ajax
              //         [*] End of lib/trans-xhr.js
              //         [*] Including lib/trans-iframe.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */
              // Few cool transports do work only for same-origin. In order to make
              // them working cross-domain we shall use iframe, served form the
              // remote domain. New browsers, have capabilities to communicate with
              // cross domain iframe, using postMessage(). In IE it was implemented
              // from IE 8+, but of course, IE got some details wrong:
              //    http://msdn.microsoft.com/en-us/library/cc197015(v=VS.85).aspx
              //    http://stevesouders.com/misc/test-postmessage.php

              var IframeTransport = function () {};

              IframeTransport.prototype.i_constructor = function (ri, trans_url, base_url) {
                var that = this;
                that.ri = ri;
                that.origin = utils.getOrigin(base_url);
                that.base_url = base_url;
                that.trans_url = trans_url;
                var iframe_url = base_url + '/iframe.html';

                if (that.ri._options.devel) {
                  iframe_url += '?t=' + +new Date();
                }

                that.window_id = utils.random_string(8);
                iframe_url += '#' + that.window_id;
                that.iframeObj = utils.createIframe(iframe_url, function (r) {
                  that.ri._didClose(1006, "Unable to load an iframe (" + r + ")");
                });
                that.onmessage_cb = utils.bind(that.onmessage, that);
                utils.attachMessage(that.onmessage_cb);
              };

              IframeTransport.prototype.doCleanup = function () {
                var that = this;

                if (that.iframeObj) {
                  utils.detachMessage(that.onmessage_cb);

                  try {
                    // When the iframe is not loaded, IE raises an exception
                    // on 'contentWindow'.
                    if (that.iframeObj.iframe.contentWindow) {
                      that.postMessage('c');
                    }
                  } catch (x) {}

                  that.iframeObj.cleanup();
                  that.iframeObj = null;
                  that.onmessage_cb = that.iframeObj = null;
                }
              };

              IframeTransport.prototype.onmessage = function (e) {
                var that = this;
                if (e.origin !== that.origin) return;
                var window_id = e.data.slice(0, 8);
                var type = e.data.slice(8, 9);
                var data = e.data.slice(9);
                if (window_id !== that.window_id) return;

                switch (type) {
                  case 's':
                    that.iframeObj.loaded();
                    that.postMessage('s', JSON.stringify([SockJS.version, that.protocol, that.trans_url, that.base_url]));
                    break;

                  case 't':
                    that.ri._didMessage(data);

                    break;
                }
              };

              IframeTransport.prototype.postMessage = function (type, data) {
                var that = this;
                that.iframeObj.post(that.window_id + type + (data || ''), that.origin);
              };

              IframeTransport.prototype.doSend = function (message) {
                this.postMessage('m', message);
              };

              IframeTransport.enabled = function () {
                // postMessage misbehaves in konqueror 4.6.5 - the messages are delivered with
                // huge delay, or not at all.
                var konqueror = navigator && navigator.userAgent && navigator.userAgent.indexOf('Konqueror') !== -1;
                return (typeof _window.postMessage === 'function' || typeof _window.postMessage === 'object') && !konqueror;
              }; //         [*] End of lib/trans-iframe.js
              //         [*] Including lib/trans-iframe-within.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var curr_window_id;

              var postMessage = function (type, data) {
                if (parent !== _window) {
                  parent.postMessage(curr_window_id + type + (data || ''), '*');
                } else {
                  utils.log("Can't postMessage, no parent window.", type, data);
                }
              };

              var FacadeJS = function () {};

              FacadeJS.prototype._didClose = function (code, reason) {
                postMessage('t', utils.closeFrame(code, reason));
              };

              FacadeJS.prototype._didMessage = function (frame) {
                postMessage('t', frame);
              };

              FacadeJS.prototype._doSend = function (data) {
                this._transport.doSend(data);
              };

              FacadeJS.prototype._doCleanup = function () {
                this._transport.doCleanup();
              };

              utils.parent_origin = undefined;

              SockJS.bootstrap_iframe = function () {
                var facade;
                curr_window_id = _document.location.hash.slice(1);

                var onMessage = function (e) {
                  if (e.source !== parent) return;
                  if (typeof utils.parent_origin === 'undefined') utils.parent_origin = e.origin;
                  if (e.origin !== utils.parent_origin) return;
                  var window_id = e.data.slice(0, 8);
                  var type = e.data.slice(8, 9);
                  var data = e.data.slice(9);
                  if (window_id !== curr_window_id) return;

                  switch (type) {
                    case 's':
                      var p = JSON.parse(data);
                      var version = p[0];
                      var protocol = p[1];
                      var trans_url = p[2];
                      var base_url = p[3];

                      if (version !== SockJS.version) {
                        utils.log("Incompatibile SockJS! Main site uses:" + " \"" + version + "\", the iframe:" + " \"" + SockJS.version + "\".");
                      }

                      if (!utils.flatUrl(trans_url) || !utils.flatUrl(base_url)) {
                        utils.log("Only basic urls are supported in SockJS");
                        return;
                      }

                      if (!utils.isSameOriginUrl(trans_url) || !utils.isSameOriginUrl(base_url)) {
                        utils.log("Can't connect to different domain from within an " + "iframe. (" + JSON.stringify([_window.location.href, trans_url, base_url]) + ")");
                        return;
                      }

                      facade = new FacadeJS();
                      facade._transport = new FacadeJS[protocol](facade, trans_url, base_url);
                      break;

                    case 'm':
                      facade._doSend(data);

                      break;

                    case 'c':
                      if (facade) facade._doCleanup();
                      facade = null;
                      break;
                  }
                }; // alert('test ticker');
                // facade = new FacadeJS();
                // facade._transport = new FacadeJS['w-iframe-xhr-polling'](facade, 'http://host.com:9999/ticker/12/basd');


                utils.attachMessage(onMessage); // Start

                postMessage('s');
              }; //         [*] End of lib/trans-iframe-within.js
              //         [*] Including lib/info.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var InfoReceiver = function (base_url, AjaxObject) {
                var that = this;
                utils.delay(function () {
                  that.doXhr(base_url, AjaxObject);
                });
              };

              InfoReceiver.prototype = new EventEmitter(['finish']);

              InfoReceiver.prototype.doXhr = function (base_url, AjaxObject) {
                var that = this;
                var t0 = new Date().getTime(); // <METEOR>
                // https://github.com/sockjs/sockjs-client/pull/129
                // var xo = new AjaxObject('GET', base_url + '/info');

                var xo = new AjaxObject( // add cachebusting parameter to url to work around a chrome bug:
                // https://code.google.com/p/chromium/issues/detail?id=263981
                // or misbehaving proxies.
                'GET', base_url + '/info?cb=' + utils.random_string(10)); // </METEOR>

                var tref = utils.delay(8000, function () {
                  xo.ontimeout();
                });

                xo.onfinish = function (status, text) {
                  clearTimeout(tref);
                  tref = null;

                  if (status === 200) {
                    var rtt = new Date().getTime() - t0;
                    var info = JSON.parse(text);
                    if (typeof info !== 'object') info = {};
                    that.emit('finish', info, rtt);
                  } else {
                    that.emit('finish');
                  }
                };

                xo.ontimeout = function () {
                  xo.close();
                  that.emit('finish');
                };
              };

              var InfoReceiverIframe = function (base_url) {
                var that = this;

                var go = function () {
                  var ifr = new IframeTransport();
                  ifr.protocol = 'w-iframe-info-receiver';

                  var fun = function (r) {
                    if (typeof r === 'string' && r.substr(0, 1) === 'm') {
                      var d = JSON.parse(r.substr(1));
                      var info = d[0],
                          rtt = d[1];
                      that.emit('finish', info, rtt);
                    } else {
                      that.emit('finish');
                    }

                    ifr.doCleanup();
                    ifr = null;
                  };

                  var mock_ri = {
                    _options: {},
                    _didClose: fun,
                    _didMessage: fun
                  };
                  ifr.i_constructor(mock_ri, base_url, base_url);
                };

                if (!_document.body) {
                  utils.attachEvent('load', go);
                } else {
                  go();
                }
              };

              InfoReceiverIframe.prototype = new EventEmitter(['finish']);

              var InfoReceiverFake = function () {
                // It may not be possible to do cross domain AJAX to get the info
                // data, for example for IE7. But we want to run JSONP, so let's
                // fake the response, with rtt=2s (rto=6s).
                var that = this;
                utils.delay(function () {
                  that.emit('finish', {}, 2000);
                });
              };

              InfoReceiverFake.prototype = new EventEmitter(['finish']);

              var createInfoReceiver = function (base_url) {
                if (utils.isSameOriginUrl(base_url)) {
                  // If, for some reason, we have SockJS locally - there's no
                  // need to start up the complex machinery. Just use ajax.
                  return new InfoReceiver(base_url, utils.XHRLocalObject);
                }

                switch (utils.isXHRCorsCapable()) {
                  case 1:
                    // XHRLocalObject -> no_credentials=true
                    return new InfoReceiver(base_url, utils.XHRLocalObject);

                  case 2:
                    // <METEOR>
                    // https://github.com/sockjs/sockjs-client/issues/79
                    // XDR doesn't work across different schemes
                    // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
                    if (utils.isSameOriginScheme(base_url)) return new InfoReceiver(base_url, utils.XDRObject);else return new InfoReceiverFake();
                  // </METEOR>

                  case 3:
                    // Opera
                    return new InfoReceiverIframe(base_url);

                  default:
                    // IE 7
                    return new InfoReceiverFake();
                }

                ;
              };

              var WInfoReceiverIframe = FacadeJS['w-iframe-info-receiver'] = function (ri, _trans_url, base_url) {
                var ir = new InfoReceiver(base_url, utils.XHRLocalObject);

                ir.onfinish = function (info, rtt) {
                  ri._didMessage('m' + JSON.stringify([info, rtt]));

                  ri._didClose();
                };
              };

              WInfoReceiverIframe.prototype.doCleanup = function () {}; //         [*] End of lib/info.js
              //         [*] Including lib/trans-iframe-eventsource.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var EventSourceIframeTransport = SockJS['iframe-eventsource'] = function () {
                var that = this;
                that.protocol = 'w-iframe-eventsource';
                that.i_constructor.apply(that, arguments);
              };

              EventSourceIframeTransport.prototype = new IframeTransport();

              EventSourceIframeTransport.enabled = function () {
                return 'EventSource' in _window && IframeTransport.enabled();
              };

              EventSourceIframeTransport.need_body = true;
              EventSourceIframeTransport.roundTrips = 3; // html, javascript, eventsource
              // w-iframe-eventsource

              var EventSourceTransport = FacadeJS['w-iframe-eventsource'] = function (ri, trans_url) {
                this.run(ri, trans_url, '/eventsource', EventSourceReceiver, utils.XHRLocalObject);
              };

              EventSourceTransport.prototype = new AjaxBasedTransport(); //         [*] End of lib/trans-iframe-eventsource.js
              //         [*] Including lib/trans-iframe-xhr-polling.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var XhrPollingIframeTransport = SockJS['iframe-xhr-polling'] = function () {
                var that = this;
                that.protocol = 'w-iframe-xhr-polling';
                that.i_constructor.apply(that, arguments);
              };

              XhrPollingIframeTransport.prototype = new IframeTransport();

              XhrPollingIframeTransport.enabled = function () {
                return _window.XMLHttpRequest && IframeTransport.enabled();
              };

              XhrPollingIframeTransport.need_body = true;
              XhrPollingIframeTransport.roundTrips = 3; // html, javascript, xhr
              // w-iframe-xhr-polling

              var XhrPollingITransport = FacadeJS['w-iframe-xhr-polling'] = function (ri, trans_url) {
                this.run(ri, trans_url, '/xhr', XhrReceiver, utils.XHRLocalObject);
              };

              XhrPollingITransport.prototype = new AjaxBasedTransport(); //         [*] End of lib/trans-iframe-xhr-polling.js
              //         [*] Including lib/trans-iframe-htmlfile.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */
              // This transport generally works in any browser, but will cause a
              // spinning cursor to appear in any browser other than IE.
              // We may test this transport in all browsers - why not, but in
              // production it should be only run in IE.

              var HtmlFileIframeTransport = SockJS['iframe-htmlfile'] = function () {
                var that = this;
                that.protocol = 'w-iframe-htmlfile';
                that.i_constructor.apply(that, arguments);
              }; // Inheritance.


              HtmlFileIframeTransport.prototype = new IframeTransport();

              HtmlFileIframeTransport.enabled = function () {
                return IframeTransport.enabled();
              };

              HtmlFileIframeTransport.need_body = true;
              HtmlFileIframeTransport.roundTrips = 3; // html, javascript, htmlfile
              // w-iframe-htmlfile

              var HtmlFileTransport = FacadeJS['w-iframe-htmlfile'] = function (ri, trans_url) {
                this.run(ri, trans_url, '/htmlfile', HtmlfileReceiver, utils.XHRLocalObject);
              };

              HtmlFileTransport.prototype = new AjaxBasedTransport(); //         [*] End of lib/trans-iframe-htmlfile.js
              //         [*] Including lib/trans-polling.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var Polling = function (ri, Receiver, recv_url, AjaxObject) {
                var that = this;
                that.ri = ri;
                that.Receiver = Receiver;
                that.recv_url = recv_url;
                that.AjaxObject = AjaxObject;

                that._scheduleRecv();
              };

              Polling.prototype._scheduleRecv = function () {
                var that = this;
                var poll = that.poll = new that.Receiver(that.recv_url, that.AjaxObject);
                var msg_counter = 0;

                poll.onmessage = function (e) {
                  msg_counter += 1;

                  that.ri._didMessage(e.data);
                };

                poll.onclose = function (e) {
                  that.poll = poll = poll.onmessage = poll.onclose = null;

                  if (!that.poll_is_closing) {
                    if (e.reason === 'permanent') {
                      that.ri._didClose(1006, 'Polling error (' + e.reason + ')');
                    } else {
                      that._scheduleRecv();
                    }
                  }
                };
              };

              Polling.prototype.abort = function () {
                var that = this;
                that.poll_is_closing = true;

                if (that.poll) {
                  that.poll.abort();
                }
              }; //         [*] End of lib/trans-polling.js
              //         [*] Including lib/trans-receiver-eventsource.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var EventSourceReceiver = function (url) {
                var that = this;
                var es = new EventSource(url);

                es.onmessage = function (e) {
                  that.dispatchEvent(new SimpleEvent('message', {
                    'data': unescape(e.data)
                  }));
                };

                that.es_close = es.onerror = function (e, abort_reason) {
                  // ES on reconnection has readyState = 0 or 1.
                  // on network error it's CLOSED = 2
                  var reason = abort_reason ? 'user' : es.readyState !== 2 ? 'network' : 'permanent';
                  that.es_close = es.onmessage = es.onerror = null; // EventSource reconnects automatically.

                  es.close();
                  es = null; // Safari and chrome < 15 crash if we close window before
                  // waiting for ES cleanup. See:
                  //   https://code.google.com/p/chromium/issues/detail?id=89155

                  utils.delay(200, function () {
                    that.dispatchEvent(new SimpleEvent('close', {
                      reason: reason
                    }));
                  });
                };
              };

              EventSourceReceiver.prototype = new REventTarget();

              EventSourceReceiver.prototype.abort = function () {
                var that = this;

                if (that.es_close) {
                  that.es_close({}, true);
                }
              }; //         [*] End of lib/trans-receiver-eventsource.js
              //         [*] Including lib/trans-receiver-htmlfile.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var _is_ie_htmlfile_capable;

              var isIeHtmlfileCapable = function () {
                if (_is_ie_htmlfile_capable === undefined) {
                  if ('ActiveXObject' in _window) {
                    try {
                      _is_ie_htmlfile_capable = !!new ActiveXObject('htmlfile');
                    } catch (x) {}
                  } else {
                    _is_ie_htmlfile_capable = false;
                  }
                }

                return _is_ie_htmlfile_capable;
              };

              var HtmlfileReceiver = function (url) {
                var that = this;
                utils.polluteGlobalNamespace();
                that.id = 'a' + utils.random_string(6, 26);
                url += (url.indexOf('?') === -1 ? '?' : '&') + 'c=' + escape(WPrefix + '.' + that.id);
                var constructor = isIeHtmlfileCapable() ? utils.createHtmlfile : utils.createIframe;
                var iframeObj;
                _window[WPrefix][that.id] = {
                  start: function () {
                    iframeObj.loaded();
                  },
                  message: function (data) {
                    that.dispatchEvent(new SimpleEvent('message', {
                      'data': data
                    }));
                  },
                  stop: function () {
                    that.iframe_close({}, 'network');
                  }
                };

                that.iframe_close = function (e, abort_reason) {
                  iframeObj.cleanup();
                  that.iframe_close = iframeObj = null;
                  delete _window[WPrefix][that.id];
                  that.dispatchEvent(new SimpleEvent('close', {
                    reason: abort_reason
                  }));
                };

                iframeObj = constructor(url, function (e) {
                  that.iframe_close({}, 'permanent');
                });
              };

              HtmlfileReceiver.prototype = new REventTarget();

              HtmlfileReceiver.prototype.abort = function () {
                var that = this;

                if (that.iframe_close) {
                  that.iframe_close({}, 'user');
                }
              }; //         [*] End of lib/trans-receiver-htmlfile.js
              //         [*] Including lib/trans-receiver-xhr.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var XhrReceiver = function (url, AjaxObject) {
                var that = this;
                var buf_pos = 0;
                that.xo = new AjaxObject('POST', url, null);

                that.xo.onchunk = function (status, text) {
                  if (status !== 200) return;

                  while (1) {
                    var buf = text.slice(buf_pos);
                    var p = buf.indexOf('\n');
                    if (p === -1) break;
                    buf_pos += p + 1;
                    var msg = buf.slice(0, p);
                    that.dispatchEvent(new SimpleEvent('message', {
                      data: msg
                    }));
                  }
                };

                that.xo.onfinish = function (status, text) {
                  that.xo.onchunk(status, text);
                  that.xo = null;
                  var reason = status === 200 ? 'network' : 'permanent';
                  that.dispatchEvent(new SimpleEvent('close', {
                    reason: reason
                  }));
                };
              };

              XhrReceiver.prototype = new REventTarget();

              XhrReceiver.prototype.abort = function () {
                var that = this;

                if (that.xo) {
                  that.xo.close();
                  that.dispatchEvent(new SimpleEvent('close', {
                    reason: 'user'
                  }));
                  that.xo = null;
                }
              }; //         [*] End of lib/trans-receiver-xhr.js
              //         [*] Including lib/test-hooks.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */
              // For testing


              SockJS.getUtils = function () {
                return utils;
              };

              SockJS.getIframeTransport = function () {
                return IframeTransport;
              }; //         [*] End of lib/test-hooks.js


              return SockJS;
            }();

            if ('_sockjs_onload' in window) setTimeout(_sockjs_onload, 1); // AMD compliance

            if (typeof define === 'function' && define.amd) {
              define('sockjs', [], function () {
                return SockJS;
              });
            } //     [*] End of lib/index.js
            // [*] End of lib/all.js
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "urls.js": function module(_require5, _exports3, _module4) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/socket-stream-client/urls.js                                                                               //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module4.export({
              toSockjsUrl: () => toSockjsUrl,
              toWebsocketUrl: () => toWebsocketUrl
            });
            let Meteor;
            _module4.link("meteor/meteor", {
              Meteor(v) {
                Meteor = v;
              }

            }, 0);

            // @param url {String} URL to Meteor app, eg:
            //   "/" or "madewith.meteor.com" or "https://foo.meteor.com"
            //   or "ddp+sockjs://ddp--****-foo.meteor.com/sockjs"
            // @returns {String} URL to the endpoint with the specific scheme and subPath, e.g.
            // for scheme "http" and subPath "sockjs"
            //   "http://subdomain.meteor.com/sockjs" or "/sockjs"
            //   or "https://ddp--1234-foo.meteor.com/sockjs"
            function translateUrl(url, newSchemeBase, subPath) {
              if (!newSchemeBase) {
                newSchemeBase = 'http';
              }

              if (subPath !== "sockjs" && url.startsWith("/")) {
                url = Meteor.absoluteUrl(url.substr(1));
              }

              var ddpUrlMatch = url.match(/^ddp(i?)\+sockjs:\/\//);
              var httpUrlMatch = url.match(/^http(s?):\/\//);
              var newScheme;

              if (ddpUrlMatch) {
                // Remove scheme and split off the host.
                var urlAfterDDP = url.substr(ddpUrlMatch[0].length);
                newScheme = ddpUrlMatch[1] === 'i' ? newSchemeBase : newSchemeBase + 's';
                var slashPos = urlAfterDDP.indexOf('/');
                var host = slashPos === -1 ? urlAfterDDP : urlAfterDDP.substr(0, slashPos);
                var rest = slashPos === -1 ? '' : urlAfterDDP.substr(slashPos); // In the host (ONLY!), change '*' characters into random digits. This
                // allows different stream connections to connect to different hostnames
                // and avoid browser per-hostname connection limits.

                host = host.replace(/\*/g, () => Math.floor(Math.random() * 10));
                return newScheme + '://' + host + rest;
              } else if (httpUrlMatch) {
                newScheme = !httpUrlMatch[1] ? newSchemeBase : newSchemeBase + 's';
                var urlAfterHttp = url.substr(httpUrlMatch[0].length);
                url = newScheme + '://' + urlAfterHttp;
              } // Prefix FQDNs but not relative URLs


              if (url.indexOf('://') === -1 && !url.startsWith('/')) {
                url = newSchemeBase + '://' + url;
              } // XXX This is not what we should be doing: if I have a site
              // deployed at "/foo", then DDP.connect("/") should actually connect
              // to "/", not to "/foo". "/" is an absolute path. (Contrast: if
              // deployed at "/foo", it would be reasonable for DDP.connect("bar")
              // to connect to "/foo/bar").
              //
              // We should make this properly honor absolute paths rather than
              // forcing the path to be relative to the site root. Simultaneously,
              // we should set DDP_DEFAULT_CONNECTION_URL to include the site
              // root. See also client_convenience.js #RationalizingRelativeDDPURLs


              url = Meteor._relativeToSiteRootUrl(url);
              if (url.endsWith('/')) return url + subPath;else return url + '/' + subPath;
            }

            function toSockjsUrl(url) {
              return translateUrl(url, 'http', 'sockjs');
            }

            function toWebsocketUrl(url) {
              return translateUrl(url, 'ws', 'websocket');
            }
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  /* Exports */
  Package._define("socket-stream-client");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var check = Package.check.check;
  var Match = Package.check.Match;
  var Random = Package.random.Random;
  var EJSON = Package.ejson.EJSON;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var Retry = Package.retry.Retry;
  var IdMap = Package['id-map'].IdMap;
  var Hook = Package['callback-hook'].Hook;
  var DDPCommon = Package['ddp-common'].DDPCommon;
  var Reload = Package.reload.Reload;
  var DiffSequence = Package['diff-sequence'].DiffSequence;
  var MongoID = Package['mongo-id'].MongoID;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var options, args, callback, DDP;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "ddp-client": { "client": { "client.js": function module(_require, _exports, _module) {

              ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                    //
              // packages/ddp-client/client/client.js                                                                               //
              //                                                                                                                    //
              ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module.link("../common/namespace.js", {
                DDP: "DDP"
              }, 0);
              _module.link("../common/livedata_connection");
              _module.link("./client_convenience");
              ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "client_convenience.js": function module(_require3, _exports3, _module2) {

              ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                    //
              // packages/ddp-client/client/client_convenience.js                                                                   //
              //                                                                                                                    //
              ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              let DDP;
              _module2.link("../common/namespace.js", {
                DDP(v) {
                  DDP = v;
                }

              }, 0);
              let Meteor;
              _module2.link("meteor/meteor", {
                Meteor(v) {
                  Meteor = v;
                }

              }, 1);

              // Meteor.refresh can be called on the client (if you're in common code) but it
              // only has an effect on the server.
              Meteor.refresh = () => {}; // By default, try to connect back to the same endpoint as the page
              // was served from.
              //
              // XXX We should be doing this a different way. Right now we don't
              // include ROOT_URL_PATH_PREFIX when computing ddpUrl. (We don't
              // include it on the server when computing
              // DDP_DEFAULT_CONNECTION_URL, and we don't include it in our
              // default, '/'.) We get by with this because DDP.connect then
              // forces the URL passed to it to be interpreted relative to the
              // app's deploy path, even if it is absolute. Instead, we should
              // make DDP_DEFAULT_CONNECTION_URL, if set, include the path prefix;
              // make the default ddpUrl be '' rather that '/'; and make
              // _translateUrl in stream_client_common.js not force absolute paths
              // to be treated like relative paths. See also
              // stream_client_common.js #RationalizingRelativeDDPURLs


              const runtimeConfig = typeof __meteor_runtime_config__ !== 'undefined' ? __meteor_runtime_config__ : Object.create(null);
              const ddpUrl = runtimeConfig.DDP_DEFAULT_CONNECTION_URL || '/';
              const retry = new Retry();

              function onDDPVersionNegotiationFailure(description) {
                Meteor._debug(description);

                if (Package.reload) {
                  const migrationData = Package.reload.Reload._migrationData('livedata') || Object.create(null);
                  let failures = migrationData.DDPVersionNegotiationFailures || 0;
                  ++failures;

                  Package.reload.Reload._onMigrate('livedata', () => [true, {
                    DDPVersionNegotiationFailures: failures
                  }]);

                  retry.retryLater(failures, () => {
                    Package.reload.Reload._reload({
                      immediateMigration: true
                    });
                  });
                }
              }

              Meteor.connection = DDP.connect(ddpUrl, {
                onDDPVersionNegotiationFailure: onDDPVersionNegotiationFailure
              }); // Proxy the public methods of Meteor.connection so they can
              // be called directly on Meteor.

              ['subscribe', 'methods', 'call', 'apply', 'status', 'reconnect', 'disconnect'].forEach(name => {
                Meteor[name] = Meteor.connection[name].bind(Meteor.connection);
              });
              ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            } }, "common": { "MethodInvoker.js": function module(_require4, _exports4, _module3) {

              ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                    //
              // packages/ddp-client/common/MethodInvoker.js                                                                        //
              //                                                                                                                    //
              ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module3.export({
                default: () => MethodInvoker
              });

              class MethodInvoker {
                constructor(options) {
                  // Public (within this file) fields.
                  this.methodId = options.methodId;
                  this.sentMessage = false;
                  this._callback = options.callback;
                  this._connection = options.connection;
                  this._message = options.message;

                  this._onResultReceived = options.onResultReceived || (() => {});

                  this._wait = options.wait;
                  this.noRetry = options.noRetry;
                  this._methodResult = null;
                  this._dataVisible = false; // Register with the connection.

                  this._connection._methodInvokers[this.methodId] = this;
                } // Sends the method message to the server. May be called additional times if
                // we lose the connection and reconnect before receiving a result.


                sendMessage() {
                  // This function is called before sending a method (including resending on
                  // reconnect). We should only (re)send methods where we don't already have a
                  // result!
                  if (this.gotResult()) throw new Error('sendingMethod is called on method with result'); // If we're re-sending it, it doesn't matter if data was written the first
                  // time.

                  this._dataVisible = false;
                  this.sentMessage = true; // If this is a wait method, make all data messages be buffered until it is
                  // done.

                  if (this._wait) this._connection._methodsBlockingQuiescence[this.methodId] = true; // Actually send the message.

                  this._connection._send(this._message);
                } // Invoke the callback, if we have both a result and know that all data has
                // been written to the local cache.


                _maybeInvokeCallback() {
                  if (this._methodResult && this._dataVisible) {
                    // Call the callback. (This won't throw: the callback was wrapped with
                    // bindEnvironment.)
                    this._callback(this._methodResult[0], this._methodResult[1]); // Forget about this method.


                    delete this._connection._methodInvokers[this.methodId]; // Let the connection know that this method is finished, so it can try to
                    // move on to the next block of methods.

                    this._connection._outstandingMethodFinished();
                  }
                } // Call with the result of the method from the server. Only may be called
                // once; once it is called, you should not call sendMessage again.
                // If the user provided an onResultReceived callback, call it immediately.
                // Then invoke the main callback if data is also visible.


                receiveResult(err, result) {
                  if (this.gotResult()) throw new Error('Methods should only receive results once');
                  this._methodResult = [err, result];

                  this._onResultReceived(err, result);

                  this._maybeInvokeCallback();
                } // Call this when all data written by the method is visible. This means that
                // the method has returns its "data is done" message *AND* all server
                // documents that are buffered at that time have been written to the local
                // cache. Invokes the main callback if the result has been received.


                dataVisible() {
                  this._dataVisible = true;

                  this._maybeInvokeCallback();
                } // True if receiveResult has been called.


                gotResult() {
                  return !!this._methodResult;
                }

              }
              ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "livedata_connection.js": function module(_require5, _exports5, _module4) {

              ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                    //
              // packages/ddp-client/common/livedata_connection.js                                                                  //
              //                                                                                                                    //
              ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              let _objectSpread;

              _module4.link("@babel/runtime/helpers/objectSpread2", {
                default(v) {
                  _objectSpread = v;
                }

              }, 0);
              _module4.export({
                Connection: () => Connection
              });
              let Meteor;
              _module4.link("meteor/meteor", {
                Meteor(v) {
                  Meteor = v;
                }

              }, 0);
              let DDPCommon;
              _module4.link("meteor/ddp-common", {
                DDPCommon(v) {
                  DDPCommon = v;
                }

              }, 1);
              let Tracker;
              _module4.link("meteor/tracker", {
                Tracker(v) {
                  Tracker = v;
                }

              }, 2);
              let EJSON;
              _module4.link("meteor/ejson", {
                EJSON(v) {
                  EJSON = v;
                }

              }, 3);
              let Random;
              _module4.link("meteor/random", {
                Random(v) {
                  Random = v;
                }

              }, 4);
              let Hook;
              _module4.link("meteor/callback-hook", {
                Hook(v) {
                  Hook = v;
                }

              }, 5);
              let MongoID;
              _module4.link("meteor/mongo-id", {
                MongoID(v) {
                  MongoID = v;
                }

              }, 6);
              let DDP;
              _module4.link("./namespace.js", {
                DDP(v) {
                  DDP = v;
                }

              }, 7);
              let MethodInvoker;
              _module4.link("./MethodInvoker.js", {
                default(v) {
                  MethodInvoker = v;
                }

              }, 8);
              let hasOwn, slice, keys, isEmpty, last;
              _module4.link("meteor/ddp-common/utils.js", {
                hasOwn(v) {
                  hasOwn = v;
                },

                slice(v) {
                  slice = v;
                },

                keys(v) {
                  keys = v;
                },

                isEmpty(v) {
                  isEmpty = v;
                },

                last(v) {
                  last = v;
                }

              }, 9);
              let Fiber;
              let Future;

              if (Meteor.isServer) {
                Fiber = Npm.require('fibers');
                Future = Npm.require('fibers/future');
              }

              class MongoIDMap extends IdMap {
                constructor() {
                  super(MongoID.idStringify, MongoID.idParse);
                }

              } // @param url {String|Object} URL to Meteor app,
              //   or an object as a test hook (see code)
              // Options:
              //   reloadWithOutstanding: is it OK to reload if there are outstanding methods?
              //   headers: extra headers to send on the websockets connection, for
              //     server-to-server DDP only
              //   _sockjsOptions: Specifies options to pass through to the sockjs client
              //   onDDPNegotiationVersionFailure: callback when version negotiation fails.
              //
              // XXX There should be a way to destroy a DDP connection, causing all
              // outstanding method calls to fail.
              //
              // XXX Our current way of handling failure and reconnection is great
              // for an app (where we want to tolerate being disconnected as an
              // expect state, and keep trying forever to reconnect) but cumbersome
              // for something like a command line tool that wants to make a
              // connection, call a method, and print an error if connection
              // fails. We should have better usability in the latter case (while
              // still transparently reconnecting if it's just a transient failure
              // or the server migrating us).


              class Connection {
                constructor(url, options) {
                  const self = this;
                  this.options = options = _objectSpread({
                    onConnected() {},

                    onDDPVersionNegotiationFailure(description) {
                      Meteor._debug(description);
                    },

                    heartbeatInterval: 17500,
                    heartbeatTimeout: 15000,
                    npmFayeOptions: Object.create(null),
                    // These options are only for testing.
                    reloadWithOutstanding: false,
                    supportedDDPVersions: DDPCommon.SUPPORTED_DDP_VERSIONS,
                    retry: true,
                    respondToPings: true,
                    // When updates are coming within this ms interval, batch them together.
                    bufferedWritesInterval: 5,
                    // Flush buffers immediately if writes are happening continuously for more than this many ms.
                    bufferedWritesMaxAge: 500
                  }, options); // If set, called when we reconnect, queuing method calls _before_ the
                  // existing outstanding ones.
                  // NOTE: This feature has been preserved for backwards compatibility. The
                  // preferred method of setting a callback on reconnect is to use
                  // DDP.onReconnect.

                  self.onReconnect = null; // as a test hook, allow passing a stream instead of a url.

                  if (typeof url === 'object') {
                    self._stream = url;
                  } else {
                    const {
                      ClientStream
                    } = _require5("meteor/socket-stream-client");

                    self._stream = new ClientStream(url, {
                      retry: options.retry,
                      ConnectionError: DDP.ConnectionError,
                      headers: options.headers,
                      _sockjsOptions: options._sockjsOptions,
                      // Used to keep some tests quiet, or for other cases in which
                      // the right thing to do with connection errors is to silently
                      // fail (e.g. sending package usage stats). At some point we
                      // should have a real API for handling client-stream-level
                      // errors.
                      _dontPrintErrors: options._dontPrintErrors,
                      connectTimeoutMs: options.connectTimeoutMs,
                      npmFayeOptions: options.npmFayeOptions
                    });
                  }

                  self._lastSessionId = null;
                  self._versionSuggestion = null; // The last proposed DDP version.

                  self._version = null; // The DDP version agreed on by client and server.

                  self._stores = Object.create(null); // name -> object with methods

                  self._methodHandlers = Object.create(null); // name -> func

                  self._nextMethodId = 1;
                  self._supportedDDPVersions = options.supportedDDPVersions;
                  self._heartbeatInterval = options.heartbeatInterval;
                  self._heartbeatTimeout = options.heartbeatTimeout; // Tracks methods which the user has tried to call but which have not yet
                  // called their user callback (ie, they are waiting on their result or for all
                  // of their writes to be written to the local cache). Map from method ID to
                  // MethodInvoker object.

                  self._methodInvokers = Object.create(null); // Tracks methods which the user has called but whose result messages have not
                  // arrived yet.
                  //
                  // _outstandingMethodBlocks is an array of blocks of methods. Each block
                  // represents a set of methods that can run at the same time. The first block
                  // represents the methods which are currently in flight; subsequent blocks
                  // must wait for previous blocks to be fully finished before they can be sent
                  // to the server.
                  //
                  // Each block is an object with the following fields:
                  // - methods: a list of MethodInvoker objects
                  // - wait: a boolean; if true, this block had a single method invoked with
                  //         the "wait" option
                  //
                  // There will never be adjacent blocks with wait=false, because the only thing
                  // that makes methods need to be serialized is a wait method.
                  //
                  // Methods are removed from the first block when their "result" is
                  // received. The entire first block is only removed when all of the in-flight
                  // methods have received their results (so the "methods" list is empty) *AND*
                  // all of the data written by those methods are visible in the local cache. So
                  // it is possible for the first block's methods list to be empty, if we are
                  // still waiting for some objects to quiesce.
                  //
                  // Example:
                  //  _outstandingMethodBlocks = [
                  //    {wait: false, methods: []},
                  //    {wait: true, methods: [<MethodInvoker for 'login'>]},
                  //    {wait: false, methods: [<MethodInvoker for 'foo'>,
                  //                            <MethodInvoker for 'bar'>]}]
                  // This means that there were some methods which were sent to the server and
                  // which have returned their results, but some of the data written by
                  // the methods may not be visible in the local cache. Once all that data is
                  // visible, we will send a 'login' method. Once the login method has returned
                  // and all the data is visible (including re-running subs if userId changes),
                  // we will send the 'foo' and 'bar' methods in parallel.

                  self._outstandingMethodBlocks = []; // method ID -> array of objects with keys 'collection' and 'id', listing
                  // documents written by a given method's stub. keys are associated with
                  // methods whose stub wrote at least one document, and whose data-done message
                  // has not yet been received.

                  self._documentsWrittenByStub = {}; // collection -> IdMap of "server document" object. A "server document" has:
                  // - "document": the version of the document according the
                  //   server (ie, the snapshot before a stub wrote it, amended by any changes
                  //   received from the server)
                  //   It is undefined if we think the document does not exist
                  // - "writtenByStubs": a set of method IDs whose stubs wrote to the document
                  //   whose "data done" messages have not yet been processed

                  self._serverDocuments = {}; // Array of callbacks to be called after the next update of the local
                  // cache. Used for:
                  //  - Calling methodInvoker.dataVisible and sub ready callbacks after
                  //    the relevant data is flushed.
                  //  - Invoking the callbacks of "half-finished" methods after reconnect
                  //    quiescence. Specifically, methods whose result was received over the old
                  //    connection (so we don't re-send it) but whose data had not been made
                  //    visible.

                  self._afterUpdateCallbacks = []; // In two contexts, we buffer all incoming data messages and then process them
                  // all at once in a single update:
                  //   - During reconnect, we buffer all data messages until all subs that had
                  //     been ready before reconnect are ready again, and all methods that are
                  //     active have returned their "data done message"; then
                  //   - During the execution of a "wait" method, we buffer all data messages
                  //     until the wait method gets its "data done" message. (If the wait method
                  //     occurs during reconnect, it doesn't get any special handling.)
                  // all data messages are processed in one update.
                  //
                  // The following fields are used for this "quiescence" process.
                  // This buffers the messages that aren't being processed yet.

                  self._messagesBufferedUntilQuiescence = []; // Map from method ID -> true. Methods are removed from this when their
                  // "data done" message is received, and we will not quiesce until it is
                  // empty.

                  self._methodsBlockingQuiescence = {}; // map from sub ID -> true for subs that were ready (ie, called the sub
                  // ready callback) before reconnect but haven't become ready again yet

                  self._subsBeingRevived = {}; // map from sub._id -> true
                  // if true, the next data update should reset all stores. (set during
                  // reconnect.)

                  self._resetStores = false; // name -> array of updates for (yet to be created) collections

                  self._updatesForUnknownStores = {}; // if we're blocking a migration, the retry func

                  self._retryMigrate = null;
                  self.__flushBufferedWrites = Meteor.bindEnvironment(self._flushBufferedWrites, 'flushing DDP buffered writes', self); // Collection name -> array of messages.

                  self._bufferedWrites = {}; // When current buffer of updates must be flushed at, in ms timestamp.

                  self._bufferedWritesFlushAt = null; // Timeout handle for the next processing of all pending writes

                  self._bufferedWritesFlushHandle = null;
                  self._bufferedWritesInterval = options.bufferedWritesInterval;
                  self._bufferedWritesMaxAge = options.bufferedWritesMaxAge; // metadata for subscriptions.  Map from sub ID to object with keys:
                  //   - id
                  //   - name
                  //   - params
                  //   - inactive (if true, will be cleaned up if not reused in re-run)
                  //   - ready (has the 'ready' message been received?)
                  //   - readyCallback (an optional callback to call when ready)
                  //   - errorCallback (an optional callback to call if the sub terminates with
                  //                    an error, XXX COMPAT WITH 1.0.3.1)
                  //   - stopCallback (an optional callback to call when the sub terminates
                  //     for any reason, with an error argument if an error triggered the stop)

                  self._subscriptions = {}; // Reactive userId.

                  self._userId = null;
                  self._userIdDeps = new Tracker.Dependency(); // Block auto-reload while we're waiting for method responses.

                  if (Meteor.isClient && Package.reload && !options.reloadWithOutstanding) {
                    Package.reload.Reload._onMigrate(retry => {
                      if (!self._readyToMigrate()) {
                        self._retryMigrate = retry;
                        return [false];
                      } else {
                        return [true];
                      }
                    });
                  }

                  const onDisconnect = () => {
                    if (self._heartbeat) {
                      self._heartbeat.stop();

                      self._heartbeat = null;
                    }
                  };

                  if (Meteor.isServer) {
                    self._stream.on('message', Meteor.bindEnvironment(this.onMessage.bind(this), 'handling DDP message'));

                    self._stream.on('reset', Meteor.bindEnvironment(this.onReset.bind(this), 'handling DDP reset'));

                    self._stream.on('disconnect', Meteor.bindEnvironment(onDisconnect, 'handling DDP disconnect'));
                  } else {
                    self._stream.on('message', this.onMessage.bind(this));

                    self._stream.on('reset', this.onReset.bind(this));

                    self._stream.on('disconnect', onDisconnect);
                  }
                } // 'name' is the name of the data on the wire that should go in the
                // store. 'wrappedStore' should be an object with methods beginUpdate, update,
                // endUpdate, saveOriginals, retrieveOriginals. see Collection for an example.


                registerStore(name, wrappedStore) {
                  const self = this;
                  if (name in self._stores) return false; // Wrap the input object in an object which makes any store method not
                  // implemented by 'store' into a no-op.

                  const store = Object.create(null);
                  const keysOfStore = ['update', 'beginUpdate', 'endUpdate', 'saveOriginals', 'retrieveOriginals', 'getDoc', '_getCollection'];
                  keysOfStore.forEach(method => {
                    store[method] = function () {
                      if (wrappedStore[method]) {
                        return wrappedStore[method](...arguments);
                      }
                    };
                  });
                  self._stores[name] = store;
                  const queued = self._updatesForUnknownStores[name];

                  if (Array.isArray(queued)) {
                    store.beginUpdate(queued.length, false);
                    queued.forEach(msg => {
                      store.update(msg);
                    });
                    store.endUpdate();
                    delete self._updatesForUnknownStores[name];
                  }

                  return true;
                }
                /**
                 * @memberOf Meteor
                 * @importFromPackage meteor
                 * @alias Meteor.subscribe
                 * @summary Subscribe to a record set.  Returns a handle that provides
                 * `stop()` and `ready()` methods.
                 * @locus Client
                 * @param {String} name Name of the subscription.  Matches the name of the
                 * server's `publish()` call.
                 * @param {EJSONable} [arg1,arg2...] Optional arguments passed to publisher
                 * function on server.
                 * @param {Function|Object} [callbacks] Optional. May include `onStop`
                 * and `onReady` callbacks. If there is an error, it is passed as an
                 * argument to `onStop`. If a function is passed instead of an object, it
                 * is interpreted as an `onReady` callback.
                 */

                subscribe(name
                /* .. [arguments] .. (callback|callbacks) */
                ) {
                  const self = this;
                  const params = slice.call(arguments, 1);
                  let callbacks = Object.create(null);

                  if (params.length) {
                    const lastParam = params[params.length - 1];

                    if (typeof lastParam === 'function') {
                      callbacks.onReady = params.pop();
                    } else if (lastParam && [lastParam.onReady, // XXX COMPAT WITH 1.0.3.1 onError used to exist, but now we use
                    // onStop with an error callback instead.
                    lastParam.onError, lastParam.onStop].some(f => typeof f === "function")) {
                      callbacks = params.pop();
                    }
                  } // Is there an existing sub with the same name and param, run in an
                  // invalidated Computation? This will happen if we are rerunning an
                  // existing computation.
                  //
                  // For example, consider a rerun of:
                  //
                  //     Tracker.autorun(function () {
                  //       Meteor.subscribe("foo", Session.get("foo"));
                  //       Meteor.subscribe("bar", Session.get("bar"));
                  //     });
                  //
                  // If "foo" has changed but "bar" has not, we will match the "bar"
                  // subcribe to an existing inactive subscription in order to not
                  // unsub and resub the subscription unnecessarily.
                  //
                  // We only look for one such sub; if there are N apparently-identical subs
                  // being invalidated, we will require N matching subscribe calls to keep
                  // them all active.


                  const existing = Object.values(self._subscriptions).find(sub => sub.inactive && sub.name === name && EJSON.equals(sub.params, params));
                  let id;

                  if (existing) {
                    id = existing.id;
                    existing.inactive = false; // reactivate

                    if (callbacks.onReady) {
                      // If the sub is not already ready, replace any ready callback with the
                      // one provided now. (It's not really clear what users would expect for
                      // an onReady callback inside an autorun; the semantics we provide is
                      // that at the time the sub first becomes ready, we call the last
                      // onReady callback provided, if any.)
                      // If the sub is already ready, run the ready callback right away.
                      // It seems that users would expect an onReady callback inside an
                      // autorun to trigger once the the sub first becomes ready and also
                      // when re-subs happens.
                      if (existing.ready) {
                        callbacks.onReady();
                      } else {
                        existing.readyCallback = callbacks.onReady;
                      }
                    } // XXX COMPAT WITH 1.0.3.1 we used to have onError but now we call
                    // onStop with an optional error argument


                    if (callbacks.onError) {
                      // Replace existing callback if any, so that errors aren't
                      // double-reported.
                      existing.errorCallback = callbacks.onError;
                    }

                    if (callbacks.onStop) {
                      existing.stopCallback = callbacks.onStop;
                    }
                  } else {
                    // New sub! Generate an id, save it locally, and send message.
                    id = Random.id();
                    self._subscriptions[id] = {
                      id: id,
                      name: name,
                      params: EJSON.clone(params),
                      inactive: false,
                      ready: false,
                      readyDeps: new Tracker.Dependency(),
                      readyCallback: callbacks.onReady,
                      // XXX COMPAT WITH 1.0.3.1 #errorCallback
                      errorCallback: callbacks.onError,
                      stopCallback: callbacks.onStop,
                      connection: self,

                      remove() {
                        delete this.connection._subscriptions[this.id];
                        this.ready && this.readyDeps.changed();
                      },

                      stop() {
                        this.connection._send({
                          msg: 'unsub',
                          id: id
                        });

                        this.remove();

                        if (callbacks.onStop) {
                          callbacks.onStop();
                        }
                      }

                    };

                    self._send({
                      msg: 'sub',
                      id: id,
                      name: name,
                      params: params
                    });
                  } // return a handle to the application.


                  const handle = {
                    stop() {
                      if (!hasOwn.call(self._subscriptions, id)) {
                        return;
                      }

                      self._subscriptions[id].stop();
                    },

                    ready() {
                      // return false if we've unsubscribed.
                      if (!hasOwn.call(self._subscriptions, id)) {
                        return false;
                      }

                      const record = self._subscriptions[id];
                      record.readyDeps.depend();
                      return record.ready;
                    },

                    subscriptionId: id
                  };

                  if (Tracker.active) {
                    // We're in a reactive computation, so we'd like to unsubscribe when the
                    // computation is invalidated... but not if the rerun just re-subscribes
                    // to the same subscription!  When a rerun happens, we use onInvalidate
                    // as a change to mark the subscription "inactive" so that it can
                    // be reused from the rerun.  If it isn't reused, it's killed from
                    // an afterFlush.
                    Tracker.onInvalidate(c => {
                      if (hasOwn.call(self._subscriptions, id)) {
                        self._subscriptions[id].inactive = true;
                      }

                      Tracker.afterFlush(() => {
                        if (hasOwn.call(self._subscriptions, id) && self._subscriptions[id].inactive) {
                          handle.stop();
                        }
                      });
                    });
                  }

                  return handle;
                } // options:
                // - onLateError {Function(error)} called if an error was received after the ready event.
                //     (errors received before ready cause an error to be thrown)


                _subscribeAndWait(name, args, options) {
                  const self = this;
                  const f = new Future();
                  let ready = false;
                  args = args || [];
                  args.push({
                    onReady() {
                      ready = true;
                      f['return']();
                    },

                    onError(e) {
                      if (!ready) f['throw'](e);else options && options.onLateError && options.onLateError(e);
                    }

                  });
                  const handle = self.subscribe.apply(self, [name].concat(args));
                  f.wait();
                  return handle;
                }

                methods(methods) {
                  Object.entries(methods).forEach(_ref => {
                    let [name, func] = _ref;

                    if (typeof func !== 'function') {
                      throw new Error("Method '" + name + "' must be a function");
                    }

                    if (this._methodHandlers[name]) {
                      throw new Error("A method named '" + name + "' is already defined");
                    }

                    this._methodHandlers[name] = func;
                  });
                }
                /**
                 * @memberOf Meteor
                 * @importFromPackage meteor
                 * @alias Meteor.call
                 * @summary Invokes a method passing any number of arguments.
                 * @locus Anywhere
                 * @param {String} name Name of method to invoke
                 * @param {EJSONable} [arg1,arg2...] Optional method arguments
                 * @param {Function} [asyncCallback] Optional callback, which is called asynchronously with the error or result after the method is complete. If not provided, the method runs synchronously if possible (see below).
                 */

                call(name
                /* .. [arguments] .. callback */
                ) {
                  // if it's a function, the last argument is the result callback,
                  // not a parameter to the remote method.
                  const args = slice.call(arguments, 1);
                  let callback;

                  if (args.length && typeof args[args.length - 1] === 'function') {
                    callback = args.pop();
                  }

                  return this.apply(name, args, callback);
                }
                /**
                 * @memberOf Meteor
                 * @importFromPackage meteor
                 * @alias Meteor.apply
                 * @summary Invoke a method passing an array of arguments.
                 * @locus Anywhere
                 * @param {String} name Name of method to invoke
                 * @param {EJSONable[]} args Method arguments
                 * @param {Object} [options]
                 * @param {Boolean} options.wait (Client only) If true, don't send this method until all previous method calls have completed, and don't send any subsequent method calls until this one is completed.
                 * @param {Function} options.onResultReceived (Client only) This callback is invoked with the error or result of the method (just like `asyncCallback`) as soon as the error or result is available. The local cache may not yet reflect the writes performed by the method.
                 * @param {Boolean} options.noRetry (Client only) if true, don't send this method again on reload, simply call the callback an error with the error code 'invocation-failed'.
                 * @param {Boolean} options.throwStubExceptions (Client only) If true, exceptions thrown by method stubs will be thrown instead of logged, and the method will not be invoked on the server.
                 * @param {Boolean} options.returnStubValue (Client only) If true then in cases where we would have otherwise discarded the stub's return value and returned undefined, instead we go ahead and return it. Specifically, this is any time other than when (a) we are already inside a stub or (b) we are in Node and no callback was provided. Currently we require this flag to be explicitly passed to reduce the likelihood that stub return values will be confused with server return values; we may improve this in future.
                 * @param {Function} [asyncCallback] Optional callback; same semantics as in [`Meteor.call`](#meteor_call).
                 */

                apply(name, args, options, callback) {
                  const self = this; // We were passed 3 arguments. They may be either (name, args, options)
                  // or (name, args, callback)

                  if (!callback && typeof options === 'function') {
                    callback = options;
                    options = Object.create(null);
                  }

                  options = options || Object.create(null);

                  if (callback) {
                    // XXX would it be better form to do the binding in stream.on,
                    // or caller, instead of here?
                    // XXX improve error message (and how we report it)
                    callback = Meteor.bindEnvironment(callback, "delivering result of invoking '" + name + "'");
                  } // Keep our args safe from mutation (eg if we don't send the message for a
                  // while because of a wait method).


                  args = EJSON.clone(args);

                  const enclosing = DDP._CurrentMethodInvocation.get();

                  const alreadyInSimulation = enclosing && enclosing.isSimulation; // Lazily generate a randomSeed, only if it is requested by the stub.
                  // The random streams only have utility if they're used on both the client
                  // and the server; if the client doesn't generate any 'random' values
                  // then we don't expect the server to generate any either.
                  // Less commonly, the server may perform different actions from the client,
                  // and may in fact generate values where the client did not, but we don't
                  // have any client-side values to match, so even here we may as well just
                  // use a random seed on the server.  In that case, we don't pass the
                  // randomSeed to save bandwidth, and we don't even generate it to save a
                  // bit of CPU and to avoid consuming entropy.

                  let randomSeed = null;

                  const randomSeedGenerator = () => {
                    if (randomSeed === null) {
                      randomSeed = DDPCommon.makeRpcSeed(enclosing, name);
                    }

                    return randomSeed;
                  }; // Run the stub, if we have one. The stub is supposed to make some
                  // temporary writes to the database to give the user a smooth experience
                  // until the actual result of executing the method comes back from the
                  // server (whereupon the temporary writes to the database will be reversed
                  // during the beginUpdate/endUpdate process.)
                  //
                  // Normally, we ignore the return value of the stub (even if it is an
                  // exception), in favor of the real return value from the server. The
                  // exception is if the *caller* is a stub. In that case, we're not going
                  // to do a RPC, so we use the return value of the stub as our return
                  // value.


                  let stubReturnValue;
                  let exception;
                  const stub = self._methodHandlers[name];

                  if (stub) {
                    const setUserId = userId => {
                      self.setUserId(userId);
                    };

                    const invocation = new DDPCommon.MethodInvocation({
                      isSimulation: true,
                      userId: self.userId(),
                      setUserId: setUserId,

                      randomSeed() {
                        return randomSeedGenerator();
                      }

                    });
                    if (!alreadyInSimulation) self._saveOriginals();

                    try {
                      // Note that unlike in the corresponding server code, we never audit
                      // that stubs check() their arguments.
                      stubReturnValue = DDP._CurrentMethodInvocation.withValue(invocation, () => {
                        if (Meteor.isServer) {
                          // Because saveOriginals and retrieveOriginals aren't reentrant,
                          // don't allow stubs to yield.
                          return Meteor._noYieldsAllowed(() => {
                            // re-clone, so that the stub can't affect our caller's values
                            return stub.apply(invocation, EJSON.clone(args));
                          });
                        } else {
                          return stub.apply(invocation, EJSON.clone(args));
                        }
                      });
                    } catch (e) {
                      exception = e;
                    }
                  } // If we're in a simulation, stop and return the result we have,
                  // rather than going on to do an RPC. If there was no stub,
                  // we'll end up returning undefined.


                  if (alreadyInSimulation) {
                    if (callback) {
                      callback(exception, stubReturnValue);
                      return undefined;
                    }

                    if (exception) throw exception;
                    return stubReturnValue;
                  } // We only create the methodId here because we don't actually need one if
                  // we're already in a simulation


                  const methodId = '' + self._nextMethodId++;

                  if (stub) {
                    self._retrieveAndStoreOriginals(methodId);
                  } // Generate the DDP message for the method call. Note that on the client,
                  // it is important that the stub have finished before we send the RPC, so
                  // that we know we have a complete list of which local documents the stub
                  // wrote.


                  const message = {
                    msg: 'method',
                    id: methodId,
                    method: name,
                    params: args
                  }; // If an exception occurred in a stub, and we're ignoring it
                  // because we're doing an RPC and want to use what the server
                  // returns instead, log it so the developer knows
                  // (unless they explicitly ask to see the error).
                  //
                  // Tests can set the '_expectedByTest' flag on an exception so it won't
                  // go to log.

                  if (exception) {
                    if (options.throwStubExceptions) {
                      throw exception;
                    } else if (!exception._expectedByTest) {
                      Meteor._debug("Exception while simulating the effect of invoking '" + name + "'", exception);
                    }
                  } // At this point we're definitely doing an RPC, and we're going to
                  // return the value of the RPC to the caller.
                  // If the caller didn't give a callback, decide what to do.


                  let future;

                  if (!callback) {
                    if (Meteor.isClient) {
                      // On the client, we don't have fibers, so we can't block. The
                      // only thing we can do is to return undefined and discard the
                      // result of the RPC. If an error occurred then print the error
                      // to the console.
                      callback = err => {
                        err && Meteor._debug("Error invoking Method '" + name + "'", err);
                      };
                    } else {
                      // On the server, make the function synchronous. Throw on
                      // errors, return on success.
                      future = new Future();
                      callback = future.resolver();
                    }
                  } // Send the randomSeed only if we used it


                  if (randomSeed !== null) {
                    message.randomSeed = randomSeed;
                  }

                  const methodInvoker = new MethodInvoker({
                    methodId,
                    callback: callback,
                    connection: self,
                    onResultReceived: options.onResultReceived,
                    wait: !!options.wait,
                    message: message,
                    noRetry: !!options.noRetry
                  });

                  if (options.wait) {
                    // It's a wait method! Wait methods go in their own block.
                    self._outstandingMethodBlocks.push({
                      wait: true,
                      methods: [methodInvoker]
                    });
                  } else {
                    // Not a wait method. Start a new block if the previous block was a wait
                    // block, and add it to the last block of methods.
                    if (isEmpty(self._outstandingMethodBlocks) || last(self._outstandingMethodBlocks).wait) {
                      self._outstandingMethodBlocks.push({
                        wait: false,
                        methods: []
                      });
                    }

                    last(self._outstandingMethodBlocks).methods.push(methodInvoker);
                  } // If we added it to the first block, send it out now.


                  if (self._outstandingMethodBlocks.length === 1) methodInvoker.sendMessage(); // If we're using the default callback on the server,
                  // block waiting for the result.

                  if (future) {
                    return future.wait();
                  }

                  return options.returnStubValue ? stubReturnValue : undefined;
                } // Before calling a method stub, prepare all stores to track changes and allow
                // _retrieveAndStoreOriginals to get the original versions of changed
                // documents.


                _saveOriginals() {
                  if (!this._waitingForQuiescence()) {
                    this._flushBufferedWrites();
                  }

                  Object.values(this._stores).forEach(store => {
                    store.saveOriginals();
                  });
                } // Retrieves the original versions of all documents modified by the stub for
                // method 'methodId' from all stores and saves them to _serverDocuments (keyed
                // by document) and _documentsWrittenByStub (keyed by method ID).


                _retrieveAndStoreOriginals(methodId) {
                  const self = this;
                  if (self._documentsWrittenByStub[methodId]) throw new Error('Duplicate methodId in _retrieveAndStoreOriginals');
                  const docsWritten = [];
                  Object.entries(self._stores).forEach(_ref2 => {
                    let [collection, store] = _ref2;
                    const originals = store.retrieveOriginals(); // not all stores define retrieveOriginals

                    if (!originals) return;
                    originals.forEach((doc, id) => {
                      docsWritten.push({
                        collection,
                        id
                      });

                      if (!hasOwn.call(self._serverDocuments, collection)) {
                        self._serverDocuments[collection] = new MongoIDMap();
                      }

                      const serverDoc = self._serverDocuments[collection].setDefault(id, Object.create(null));

                      if (serverDoc.writtenByStubs) {
                        // We're not the first stub to write this doc. Just add our method ID
                        // to the record.
                        serverDoc.writtenByStubs[methodId] = true;
                      } else {
                        // First stub! Save the original value and our method ID.
                        serverDoc.document = doc;
                        serverDoc.flushCallbacks = [];
                        serverDoc.writtenByStubs = Object.create(null);
                        serverDoc.writtenByStubs[methodId] = true;
                      }
                    });
                  });

                  if (!isEmpty(docsWritten)) {
                    self._documentsWrittenByStub[methodId] = docsWritten;
                  }
                } // This is very much a private function we use to make the tests
                // take up fewer server resources after they complete.


                _unsubscribeAll() {
                  Object.values(this._subscriptions).forEach(sub => {
                    // Avoid killing the autoupdate subscription so that developers
                    // still get hot code pushes when writing tests.
                    //
                    // XXX it's a hack to encode knowledge about autoupdate here,
                    // but it doesn't seem worth it yet to have a special API for
                    // subscriptions to preserve after unit tests.
                    if (sub.name !== 'meteor_autoupdate_clientVersions') {
                      sub.stop();
                    }
                  });
                } // Sends the DDP stringification of the given message object


                _send(obj) {
                  this._stream.send(DDPCommon.stringifyDDP(obj));
                } // We detected via DDP-level heartbeats that we've lost the
                // connection.  Unlike `disconnect` or `close`, a lost connection
                // will be automatically retried.


                _lostConnection(error) {
                  this._stream._lostConnection(error);
                }
                /**
                 * @memberOf Meteor
                 * @importFromPackage meteor
                 * @alias Meteor.status
                 * @summary Get the current connection status. A reactive data source.
                 * @locus Client
                 */

                status() {
                  return this._stream.status(...arguments);
                }
                /**
                 * @summary Force an immediate reconnection attempt if the client is not connected to the server.
                 This method does nothing if the client is already connected.
                 * @memberOf Meteor
                 * @importFromPackage meteor
                 * @alias Meteor.reconnect
                 * @locus Client
                 */

                reconnect() {
                  return this._stream.reconnect(...arguments);
                }
                /**
                 * @memberOf Meteor
                 * @importFromPackage meteor
                 * @alias Meteor.disconnect
                 * @summary Disconnect the client from the server.
                 * @locus Client
                 */

                disconnect() {
                  return this._stream.disconnect(...arguments);
                }

                close() {
                  return this._stream.disconnect({
                    _permanent: true
                  });
                } ///
                /// Reactive user system
                ///


                userId() {
                  if (this._userIdDeps) this._userIdDeps.depend();
                  return this._userId;
                }

                setUserId(userId) {
                  // Avoid invalidating dependents if setUserId is called with current value.
                  if (this._userId === userId) return;
                  this._userId = userId;
                  if (this._userIdDeps) this._userIdDeps.changed();
                } // Returns true if we are in a state after reconnect of waiting for subs to be
                // revived or early methods to finish their data, or we are waiting for a
                // "wait" method to finish.


                _waitingForQuiescence() {
                  return !isEmpty(this._subsBeingRevived) || !isEmpty(this._methodsBlockingQuiescence);
                } // Returns true if any method whose message has been sent to the server has
                // not yet invoked its user callback.


                _anyMethodsAreOutstanding() {
                  const invokers = this._methodInvokers;
                  return Object.values(invokers).some(invoker => !!invoker.sentMessage);
                }

                _livedata_connected(msg) {
                  const self = this;

                  if (self._version !== 'pre1' && self._heartbeatInterval !== 0) {
                    self._heartbeat = new DDPCommon.Heartbeat({
                      heartbeatInterval: self._heartbeatInterval,
                      heartbeatTimeout: self._heartbeatTimeout,

                      onTimeout() {
                        self._lostConnection(new DDP.ConnectionError('DDP heartbeat timed out'));
                      },

                      sendPing() {
                        self._send({
                          msg: 'ping'
                        });
                      }

                    });

                    self._heartbeat.start();
                  } // If this is a reconnect, we'll have to reset all stores.


                  if (self._lastSessionId) self._resetStores = true;
                  let reconnectedToPreviousSession;

                  if (typeof msg.session === 'string') {
                    reconnectedToPreviousSession = self._lastSessionId === msg.session;
                    self._lastSessionId = msg.session;
                  }

                  if (reconnectedToPreviousSession) {
                    // Successful reconnection -- pick up where we left off.  Note that right
                    // now, this never happens: the server never connects us to a previous
                    // session, because DDP doesn't provide enough data for the server to know
                    // what messages the client has processed. We need to improve DDP to make
                    // this possible, at which point we'll probably need more code here.
                    return;
                  } // Server doesn't have our data any more. Re-sync a new session.
                  // Forget about messages we were buffering for unknown collections. They'll
                  // be resent if still relevant.


                  self._updatesForUnknownStores = Object.create(null);

                  if (self._resetStores) {
                    // Forget about the effects of stubs. We'll be resetting all collections
                    // anyway.
                    self._documentsWrittenByStub = Object.create(null);
                    self._serverDocuments = Object.create(null);
                  } // Clear _afterUpdateCallbacks.


                  self._afterUpdateCallbacks = []; // Mark all named subscriptions which are ready (ie, we already called the
                  // ready callback) as needing to be revived.
                  // XXX We should also block reconnect quiescence until unnamed subscriptions
                  //     (eg, autopublish) are done re-publishing to avoid flicker!

                  self._subsBeingRevived = Object.create(null);
                  Object.entries(self._subscriptions).forEach(_ref3 => {
                    let [id, sub] = _ref3;

                    if (sub.ready) {
                      self._subsBeingRevived[id] = true;
                    }
                  }); // Arrange for "half-finished" methods to have their callbacks run, and
                  // track methods that were sent on this connection so that we don't
                  // quiesce until they are all done.
                  //
                  // Start by clearing _methodsBlockingQuiescence: methods sent before
                  // reconnect don't matter, and any "wait" methods sent on the new connection
                  // that we drop here will be restored by the loop below.

                  self._methodsBlockingQuiescence = Object.create(null);

                  if (self._resetStores) {
                    const invokers = self._methodInvokers;
                    keys(invokers).forEach(id => {
                      const invoker = invokers[id];

                      if (invoker.gotResult()) {
                        // This method already got its result, but it didn't call its callback
                        // because its data didn't become visible. We did not resend the
                        // method RPC. We'll call its callback when we get a full quiesce,
                        // since that's as close as we'll get to "data must be visible".
                        self._afterUpdateCallbacks.push(function () {
                          return invoker.dataVisible(...arguments);
                        });
                      } else if (invoker.sentMessage) {
                        // This method has been sent on this connection (maybe as a resend
                        // from the last connection, maybe from onReconnect, maybe just very
                        // quickly before processing the connected message).
                        //
                        // We don't need to do anything special to ensure its callbacks get
                        // called, but we'll count it as a method which is preventing
                        // reconnect quiescence. (eg, it might be a login method that was run
                        // from onReconnect, and we don't want to see flicker by seeing a
                        // logged-out state.)
                        self._methodsBlockingQuiescence[invoker.methodId] = true;
                      }
                    });
                  }

                  self._messagesBufferedUntilQuiescence = []; // If we're not waiting on any methods or subs, we can reset the stores and
                  // call the callbacks immediately.

                  if (!self._waitingForQuiescence()) {
                    if (self._resetStores) {
                      Object.values(self._stores).forEach(store => {
                        store.beginUpdate(0, true);
                        store.endUpdate();
                      });
                      self._resetStores = false;
                    }

                    self._runAfterUpdateCallbacks();
                  }
                }

                _processOneDataMessage(msg, updates) {
                  const messageType = msg.msg; // msg is one of ['added', 'changed', 'removed', 'ready', 'updated']

                  if (messageType === 'added') {
                    this._process_added(msg, updates);
                  } else if (messageType === 'changed') {
                    this._process_changed(msg, updates);
                  } else if (messageType === 'removed') {
                    this._process_removed(msg, updates);
                  } else if (messageType === 'ready') {
                    this._process_ready(msg, updates);
                  } else if (messageType === 'updated') {
                    this._process_updated(msg, updates);
                  } else if (messageType === 'nosub') {// ignore this
                  } else {
                    Meteor._debug('discarding unknown livedata data message type', msg);
                  }
                }

                _livedata_data(msg) {
                  const self = this;

                  if (self._waitingForQuiescence()) {
                    self._messagesBufferedUntilQuiescence.push(msg);

                    if (msg.msg === 'nosub') {
                      delete self._subsBeingRevived[msg.id];
                    }

                    if (msg.subs) {
                      msg.subs.forEach(subId => {
                        delete self._subsBeingRevived[subId];
                      });
                    }

                    if (msg.methods) {
                      msg.methods.forEach(methodId => {
                        delete self._methodsBlockingQuiescence[methodId];
                      });
                    }

                    if (self._waitingForQuiescence()) {
                      return;
                    } // No methods or subs are blocking quiescence!
                    // We'll now process and all of our buffered messages, reset all stores,
                    // and apply them all at once.


                    const bufferedMessages = self._messagesBufferedUntilQuiescence;
                    Object.values(bufferedMessages).forEach(bufferedMessage => {
                      self._processOneDataMessage(bufferedMessage, self._bufferedWrites);
                    });
                    self._messagesBufferedUntilQuiescence = [];
                  } else {
                    self._processOneDataMessage(msg, self._bufferedWrites);
                  } // Immediately flush writes when:
                  //  1. Buffering is disabled. Or;
                  //  2. any non-(added/changed/removed) message arrives.


                  const standardWrite = msg.msg === "added" || msg.msg === "changed" || msg.msg === "removed";

                  if (self._bufferedWritesInterval === 0 || !standardWrite) {
                    self._flushBufferedWrites();

                    return;
                  }

                  if (self._bufferedWritesFlushAt === null) {
                    self._bufferedWritesFlushAt = new Date().valueOf() + self._bufferedWritesMaxAge;
                  } else if (self._bufferedWritesFlushAt < new Date().valueOf()) {
                    self._flushBufferedWrites();

                    return;
                  }

                  if (self._bufferedWritesFlushHandle) {
                    clearTimeout(self._bufferedWritesFlushHandle);
                  }

                  self._bufferedWritesFlushHandle = setTimeout(self.__flushBufferedWrites, self._bufferedWritesInterval);
                }

                _flushBufferedWrites() {
                  const self = this;

                  if (self._bufferedWritesFlushHandle) {
                    clearTimeout(self._bufferedWritesFlushHandle);
                    self._bufferedWritesFlushHandle = null;
                  }

                  self._bufferedWritesFlushAt = null; // We need to clear the buffer before passing it to
                  //  performWrites. As there's no guarantee that it
                  //  will exit cleanly.

                  const writes = self._bufferedWrites;
                  self._bufferedWrites = Object.create(null);

                  self._performWrites(writes);
                }

                _performWrites(updates) {
                  const self = this;

                  if (self._resetStores || !isEmpty(updates)) {
                    // Begin a transactional update of each store.
                    Object.entries(self._stores).forEach(_ref4 => {
                      let [storeName, store] = _ref4;
                      store.beginUpdate(hasOwn.call(updates, storeName) ? updates[storeName].length : 0, self._resetStores);
                    });
                    self._resetStores = false;
                    Object.entries(updates).forEach(_ref5 => {
                      let [storeName, updateMessages] = _ref5;
                      const store = self._stores[storeName];

                      if (store) {
                        updateMessages.forEach(updateMessage => {
                          store.update(updateMessage);
                        });
                      } else {
                        // Nobody's listening for this data. Queue it up until
                        // someone wants it.
                        // XXX memory use will grow without bound if you forget to
                        // create a collection or just don't care about it... going
                        // to have to do something about that.
                        const updates = self._updatesForUnknownStores;

                        if (!hasOwn.call(updates, storeName)) {
                          updates[storeName] = [];
                        }

                        updates[storeName].push(...updateMessages);
                      }
                    }); // End update transaction.

                    Object.values(self._stores).forEach(store => {
                      store.endUpdate();
                    });
                  }

                  self._runAfterUpdateCallbacks();
                } // Call any callbacks deferred with _runWhenAllServerDocsAreFlushed whose
                // relevant docs have been flushed, as well as dataVisible callbacks at
                // reconnect-quiescence time.


                _runAfterUpdateCallbacks() {
                  const self = this;
                  const callbacks = self._afterUpdateCallbacks;
                  self._afterUpdateCallbacks = [];
                  callbacks.forEach(c => {
                    c();
                  });
                }

                _pushUpdate(updates, collection, msg) {
                  if (!hasOwn.call(updates, collection)) {
                    updates[collection] = [];
                  }

                  updates[collection].push(msg);
                }

                _getServerDoc(collection, id) {
                  const self = this;

                  if (!hasOwn.call(self._serverDocuments, collection)) {
                    return null;
                  }

                  const serverDocsForCollection = self._serverDocuments[collection];
                  return serverDocsForCollection.get(id) || null;
                }

                _process_added(msg, updates) {
                  const self = this;
                  const id = MongoID.idParse(msg.id);

                  const serverDoc = self._getServerDoc(msg.collection, id);

                  if (serverDoc) {
                    // Some outstanding stub wrote here.
                    const isExisting = serverDoc.document !== undefined;
                    serverDoc.document = msg.fields || Object.create(null);
                    serverDoc.document._id = id;

                    if (self._resetStores) {
                      // During reconnect the server is sending adds for existing ids.
                      // Always push an update so that document stays in the store after
                      // reset. Use current version of the document for this update, so
                      // that stub-written values are preserved.
                      const currentDoc = self._stores[msg.collection].getDoc(msg.id);

                      if (currentDoc !== undefined) msg.fields = currentDoc;

                      self._pushUpdate(updates, msg.collection, msg);
                    } else if (isExisting) {
                      throw new Error('Server sent add for existing id: ' + msg.id);
                    }
                  } else {
                    self._pushUpdate(updates, msg.collection, msg);
                  }
                }

                _process_changed(msg, updates) {
                  const self = this;

                  const serverDoc = self._getServerDoc(msg.collection, MongoID.idParse(msg.id));

                  if (serverDoc) {
                    if (serverDoc.document === undefined) throw new Error('Server sent changed for nonexisting id: ' + msg.id);
                    DiffSequence.applyChanges(serverDoc.document, msg.fields);
                  } else {
                    self._pushUpdate(updates, msg.collection, msg);
                  }
                }

                _process_removed(msg, updates) {
                  const self = this;

                  const serverDoc = self._getServerDoc(msg.collection, MongoID.idParse(msg.id));

                  if (serverDoc) {
                    // Some outstanding stub wrote here.
                    if (serverDoc.document === undefined) throw new Error('Server sent removed for nonexisting id:' + msg.id);
                    serverDoc.document = undefined;
                  } else {
                    self._pushUpdate(updates, msg.collection, {
                      msg: 'removed',
                      collection: msg.collection,
                      id: msg.id
                    });
                  }
                }

                _process_updated(msg, updates) {
                  const self = this; // Process "method done" messages.

                  msg.methods.forEach(methodId => {
                    const docs = self._documentsWrittenByStub[methodId] || {};
                    Object.values(docs).forEach(written => {
                      const serverDoc = self._getServerDoc(written.collection, written.id);

                      if (!serverDoc) {
                        throw new Error('Lost serverDoc for ' + JSON.stringify(written));
                      }

                      if (!serverDoc.writtenByStubs[methodId]) {
                        throw new Error('Doc ' + JSON.stringify(written) + ' not written by  method ' + methodId);
                      }

                      delete serverDoc.writtenByStubs[methodId];

                      if (isEmpty(serverDoc.writtenByStubs)) {
                        // All methods whose stubs wrote this method have completed! We can
                        // now copy the saved document to the database (reverting the stub's
                        // change if the server did not write to this object, or applying the
                        // server's writes if it did).
                        // This is a fake ddp 'replace' message.  It's just for talking
                        // between livedata connections and minimongo.  (We have to stringify
                        // the ID because it's supposed to look like a wire message.)
                        self._pushUpdate(updates, written.collection, {
                          msg: 'replace',
                          id: MongoID.idStringify(written.id),
                          replace: serverDoc.document
                        }); // Call all flush callbacks.


                        serverDoc.flushCallbacks.forEach(c => {
                          c();
                        }); // Delete this completed serverDocument. Don't bother to GC empty
                        // IdMaps inside self._serverDocuments, since there probably aren't
                        // many collections and they'll be written repeatedly.

                        self._serverDocuments[written.collection].remove(written.id);
                      }
                    });
                    delete self._documentsWrittenByStub[methodId]; // We want to call the data-written callback, but we can't do so until all
                    // currently buffered messages are flushed.

                    const callbackInvoker = self._methodInvokers[methodId];

                    if (!callbackInvoker) {
                      throw new Error('No callback invoker for method ' + methodId);
                    }

                    self._runWhenAllServerDocsAreFlushed(function () {
                      return callbackInvoker.dataVisible(...arguments);
                    });
                  });
                }

                _process_ready(msg, updates) {
                  const self = this; // Process "sub ready" messages. "sub ready" messages don't take effect
                  // until all current server documents have been flushed to the local
                  // database. We can use a write fence to implement this.

                  msg.subs.forEach(subId => {
                    self._runWhenAllServerDocsAreFlushed(() => {
                      const subRecord = self._subscriptions[subId]; // Did we already unsubscribe?

                      if (!subRecord) return; // Did we already receive a ready message? (Oops!)

                      if (subRecord.ready) return;
                      subRecord.ready = true;
                      subRecord.readyCallback && subRecord.readyCallback();
                      subRecord.readyDeps.changed();
                    });
                  });
                } // Ensures that "f" will be called after all documents currently in
                // _serverDocuments have been written to the local cache. f will not be called
                // if the connection is lost before then!


                _runWhenAllServerDocsAreFlushed(f) {
                  const self = this;

                  const runFAfterUpdates = () => {
                    self._afterUpdateCallbacks.push(f);
                  };

                  let unflushedServerDocCount = 0;

                  const onServerDocFlush = () => {
                    --unflushedServerDocCount;

                    if (unflushedServerDocCount === 0) {
                      // This was the last doc to flush! Arrange to run f after the updates
                      // have been applied.
                      runFAfterUpdates();
                    }
                  };

                  Object.values(self._serverDocuments).forEach(serverDocuments => {
                    serverDocuments.forEach(serverDoc => {
                      const writtenByStubForAMethodWithSentMessage = keys(serverDoc.writtenByStubs).some(methodId => {
                        const invoker = self._methodInvokers[methodId];
                        return invoker && invoker.sentMessage;
                      });

                      if (writtenByStubForAMethodWithSentMessage) {
                        ++unflushedServerDocCount;
                        serverDoc.flushCallbacks.push(onServerDocFlush);
                      }
                    });
                  });

                  if (unflushedServerDocCount === 0) {
                    // There aren't any buffered docs --- we can call f as soon as the current
                    // round of updates is applied!
                    runFAfterUpdates();
                  }
                }

                _livedata_nosub(msg) {
                  const self = this; // First pass it through _livedata_data, which only uses it to help get
                  // towards quiescence.

                  self._livedata_data(msg); // Do the rest of our processing immediately, with no
                  // buffering-until-quiescence.
                  // we weren't subbed anyway, or we initiated the unsub.


                  if (!hasOwn.call(self._subscriptions, msg.id)) {
                    return;
                  } // XXX COMPAT WITH 1.0.3.1 #errorCallback


                  const errorCallback = self._subscriptions[msg.id].errorCallback;
                  const stopCallback = self._subscriptions[msg.id].stopCallback;

                  self._subscriptions[msg.id].remove();

                  const meteorErrorFromMsg = msgArg => {
                    return msgArg && msgArg.error && new Meteor.Error(msgArg.error.error, msgArg.error.reason, msgArg.error.details);
                  }; // XXX COMPAT WITH 1.0.3.1 #errorCallback


                  if (errorCallback && msg.error) {
                    errorCallback(meteorErrorFromMsg(msg));
                  }

                  if (stopCallback) {
                    stopCallback(meteorErrorFromMsg(msg));
                  }
                }

                _livedata_result(msg) {
                  // id, result or error. error has error (code), reason, details
                  const self = this; // Lets make sure there are no buffered writes before returning result.

                  if (!isEmpty(self._bufferedWrites)) {
                    self._flushBufferedWrites();
                  } // find the outstanding request
                  // should be O(1) in nearly all realistic use cases


                  if (isEmpty(self._outstandingMethodBlocks)) {
                    Meteor._debug('Received method result but no methods outstanding');

                    return;
                  }

                  const currentMethodBlock = self._outstandingMethodBlocks[0].methods;
                  let i;
                  const m = currentMethodBlock.find((method, idx) => {
                    const found = method.methodId === msg.id;
                    if (found) i = idx;
                    return found;
                  });

                  if (!m) {
                    Meteor._debug("Can't match method response to original method call", msg);

                    return;
                  } // Remove from current method block. This may leave the block empty, but we
                  // don't move on to the next block until the callback has been delivered, in
                  // _outstandingMethodFinished.


                  currentMethodBlock.splice(i, 1);

                  if (hasOwn.call(msg, 'error')) {
                    m.receiveResult(new Meteor.Error(msg.error.error, msg.error.reason, msg.error.details));
                  } else {
                    // msg.result may be undefined if the method didn't return a
                    // value
                    m.receiveResult(undefined, msg.result);
                  }
                } // Called by MethodInvoker after a method's callback is invoked.  If this was
                // the last outstanding method in the current block, runs the next block. If
                // there are no more methods, consider accepting a hot code push.


                _outstandingMethodFinished() {
                  const self = this;
                  if (self._anyMethodsAreOutstanding()) return; // No methods are outstanding. This should mean that the first block of
                  // methods is empty. (Or it might not exist, if this was a method that
                  // half-finished before disconnect/reconnect.)

                  if (!isEmpty(self._outstandingMethodBlocks)) {
                    const firstBlock = self._outstandingMethodBlocks.shift();

                    if (!isEmpty(firstBlock.methods)) throw new Error('No methods outstanding but nonempty block: ' + JSON.stringify(firstBlock)); // Send the outstanding methods now in the first block.

                    if (!isEmpty(self._outstandingMethodBlocks)) self._sendOutstandingMethods();
                  } // Maybe accept a hot code push.


                  self._maybeMigrate();
                } // Sends messages for all the methods in the first block in
                // _outstandingMethodBlocks.


                _sendOutstandingMethods() {
                  const self = this;

                  if (isEmpty(self._outstandingMethodBlocks)) {
                    return;
                  }

                  self._outstandingMethodBlocks[0].methods.forEach(m => {
                    m.sendMessage();
                  });
                }

                _livedata_error(msg) {
                  Meteor._debug('Received error from server: ', msg.reason);

                  if (msg.offendingMessage) Meteor._debug('For: ', msg.offendingMessage);
                }

                _callOnReconnectAndSendAppropriateOutstandingMethods() {
                  const self = this;
                  const oldOutstandingMethodBlocks = self._outstandingMethodBlocks;
                  self._outstandingMethodBlocks = [];
                  self.onReconnect && self.onReconnect();

                  DDP._reconnectHook.each(callback => {
                    callback(self);
                    return true;
                  });

                  if (isEmpty(oldOutstandingMethodBlocks)) return; // We have at least one block worth of old outstanding methods to try
                  // again. First: did onReconnect actually send anything? If not, we just
                  // restore all outstanding methods and run the first block.

                  if (isEmpty(self._outstandingMethodBlocks)) {
                    self._outstandingMethodBlocks = oldOutstandingMethodBlocks;

                    self._sendOutstandingMethods();

                    return;
                  } // OK, there are blocks on both sides. Special case: merge the last block of
                  // the reconnect methods with the first block of the original methods, if
                  // neither of them are "wait" blocks.


                  if (!last(self._outstandingMethodBlocks).wait && !oldOutstandingMethodBlocks[0].wait) {
                    oldOutstandingMethodBlocks[0].methods.forEach(m => {
                      last(self._outstandingMethodBlocks).methods.push(m); // If this "last block" is also the first block, send the message.

                      if (self._outstandingMethodBlocks.length === 1) {
                        m.sendMessage();
                      }
                    });
                    oldOutstandingMethodBlocks.shift();
                  } // Now add the rest of the original blocks on.


                  self._outstandingMethodBlocks.push(...oldOutstandingMethodBlocks);
                } // We can accept a hot code push if there are no methods in flight.


                _readyToMigrate() {
                  return isEmpty(this._methodInvokers);
                } // If we were blocking a migration, see if it's now possible to continue.
                // Call whenever the set of outstanding/blocked methods shrinks.


                _maybeMigrate() {
                  const self = this;

                  if (self._retryMigrate && self._readyToMigrate()) {
                    self._retryMigrate();

                    self._retryMigrate = null;
                  }
                }

                onMessage(raw_msg) {
                  let msg;

                  try {
                    msg = DDPCommon.parseDDP(raw_msg);
                  } catch (e) {
                    Meteor._debug('Exception while parsing DDP', e);

                    return;
                  } // Any message counts as receiving a pong, as it demonstrates that
                  // the server is still alive.


                  if (this._heartbeat) {
                    this._heartbeat.messageReceived();
                  }

                  if (msg === null || !msg.msg) {
                    if (!msg || !msg.testMessageOnConnect) {
                      if (Object.keys(msg).length === 1 && msg.server_id) return;

                      Meteor._debug('discarding invalid livedata message', msg);
                    }

                    return;
                  }

                  if (msg.msg === 'connected') {
                    this._version = this._versionSuggestion;

                    this._livedata_connected(msg);

                    this.options.onConnected();
                  } else if (msg.msg === 'failed') {
                    if (this._supportedDDPVersions.indexOf(msg.version) >= 0) {
                      this._versionSuggestion = msg.version;

                      this._stream.reconnect({
                        _force: true
                      });
                    } else {
                      const description = 'DDP version negotiation failed; server requested version ' + msg.version;

                      this._stream.disconnect({
                        _permanent: true,
                        _error: description
                      });

                      this.options.onDDPVersionNegotiationFailure(description);
                    }
                  } else if (msg.msg === 'ping' && this.options.respondToPings) {
                    this._send({
                      msg: 'pong',
                      id: msg.id
                    });
                  } else if (msg.msg === 'pong') {// noop, as we assume everything's a pong
                  } else if (['added', 'changed', 'removed', 'ready', 'updated'].includes(msg.msg)) {
                    this._livedata_data(msg);
                  } else if (msg.msg === 'nosub') {
                    this._livedata_nosub(msg);
                  } else if (msg.msg === 'result') {
                    this._livedata_result(msg);
                  } else if (msg.msg === 'error') {
                    this._livedata_error(msg);
                  } else {
                    Meteor._debug('discarding unknown livedata message type', msg);
                  }
                }

                onReset() {
                  // Send a connect message at the beginning of the stream.
                  // NOTE: reset is called even on the first connection, so this is
                  // the only place we send this message.
                  const msg = {
                    msg: 'connect'
                  };
                  if (this._lastSessionId) msg.session = this._lastSessionId;
                  msg.version = this._versionSuggestion || this._supportedDDPVersions[0];
                  this._versionSuggestion = msg.version;
                  msg.support = this._supportedDDPVersions;

                  this._send(msg); // Mark non-retry calls as failed. This has to be done early as getting these methods out of the
                  // current block is pretty important to making sure that quiescence is properly calculated, as
                  // well as possibly moving on to another useful block.
                  // Only bother testing if there is an outstandingMethodBlock (there might not be, especially if
                  // we are connecting for the first time.


                  if (this._outstandingMethodBlocks.length > 0) {
                    // If there is an outstanding method block, we only care about the first one as that is the
                    // one that could have already sent messages with no response, that are not allowed to retry.
                    const currentMethodBlock = this._outstandingMethodBlocks[0].methods;
                    this._outstandingMethodBlocks[0].methods = currentMethodBlock.filter(methodInvoker => {
                      // Methods with 'noRetry' option set are not allowed to re-send after
                      // recovering dropped connection.
                      if (methodInvoker.sentMessage && methodInvoker.noRetry) {
                        // Make sure that the method is told that it failed.
                        methodInvoker.receiveResult(new Meteor.Error('invocation-failed', 'Method invocation might have failed due to dropped connection. ' + 'Failing because `noRetry` option was passed to Meteor.apply.'));
                      } // Only keep a method if it wasn't sent or it's allowed to retry.
                      // This may leave the block empty, but we don't move on to the next
                      // block until the callback has been delivered, in _outstandingMethodFinished.


                      return !(methodInvoker.sentMessage && methodInvoker.noRetry);
                    });
                  } // Now, to minimize setup latency, go ahead and blast out all of
                  // our pending methods ands subscriptions before we've even taken
                  // the necessary RTT to know if we successfully reconnected. (1)
                  // They're supposed to be idempotent, and where they are not,
                  // they can block retry in apply; (2) even if we did reconnect,
                  // we're not sure what messages might have gotten lost
                  // (in either direction) since we were disconnected (TCP being
                  // sloppy about that.)
                  // If the current block of methods all got their results (but didn't all get
                  // their data visible), discard the empty block now.


                  if (this._outstandingMethodBlocks.length > 0 && this._outstandingMethodBlocks[0].methods.length === 0) {
                    this._outstandingMethodBlocks.shift();
                  } // Mark all messages as unsent, they have not yet been sent on this
                  // connection.


                  keys(this._methodInvokers).forEach(id => {
                    this._methodInvokers[id].sentMessage = false;
                  }); // If an `onReconnect` handler is set, call it first. Go through
                  // some hoops to ensure that methods that are called from within
                  // `onReconnect` get executed _before_ ones that were originally
                  // outstanding (since `onReconnect` is used to re-establish auth
                  // certificates)

                  this._callOnReconnectAndSendAppropriateOutstandingMethods(); // add new subscriptions at the end. this way they take effect after
                  // the handlers and we don't see flicker.


                  Object.entries(this._subscriptions).forEach(_ref6 => {
                    let [id, sub] = _ref6;

                    this._send({
                      msg: 'sub',
                      id: id,
                      name: sub.name,
                      params: sub.params
                    });
                  });
                }

              }
              ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "namespace.js": function module(_require6, _exports6, _module5) {

              ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                    //
              // packages/ddp-client/common/namespace.js                                                                            //
              //                                                                                                                    //
              ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module5.export({
                DDP: () => DDP
              });
              let DDPCommon;
              _module5.link("meteor/ddp-common", {
                DDPCommon(v) {
                  DDPCommon = v;
                }

              }, 0);
              let Meteor;
              _module5.link("meteor/meteor", {
                Meteor(v) {
                  Meteor = v;
                }

              }, 1);
              let Connection;
              _module5.link("./livedata_connection.js", {
                Connection(v) {
                  Connection = v;
                }

              }, 2);
              // This array allows the `_allSubscriptionsReady` method below, which
              // is used by the `spiderable` package, to keep track of whether all
              // data is ready.
              const allConnections = [];
              /**
               * @namespace DDP
               * @summary Namespace for DDP-related methods/classes.
               */

              const DDP = {};
              // This is private but it's used in a few places. accounts-base uses
              // it to get the current user. Meteor.setTimeout and friends clear
              // it. We can probably find a better way to factor this.
              DDP._CurrentMethodInvocation = new Meteor.EnvironmentVariable();
              DDP._CurrentPublicationInvocation = new Meteor.EnvironmentVariable(); // XXX: Keep DDP._CurrentInvocation for backwards-compatibility.

              DDP._CurrentInvocation = DDP._CurrentMethodInvocation; // This is passed into a weird `makeErrorType` function that expects its thing
              // to be a constructor

              function connectionErrorConstructor(message) {
                this.message = message;
              }

              DDP.ConnectionError = Meteor.makeErrorType('DDP.ConnectionError', connectionErrorConstructor);
              DDP.ForcedReconnectError = Meteor.makeErrorType('DDP.ForcedReconnectError', () => {}); // Returns the named sequence of pseudo-random values.
              // The scope will be DDP._CurrentMethodInvocation.get(), so the stream will produce
              // consistent values for method calls on the client and server.

              DDP.randomStream = name => {
                const scope = DDP._CurrentMethodInvocation.get();

                return DDPCommon.RandomStream.get(scope, name);
              }; // @param url {String} URL to Meteor app,
              //     e.g.:
              //     "subdomain.meteor.com",
              //     "http://subdomain.meteor.com",
              //     "/",
              //     "ddp+sockjs://ddp--****-foo.meteor.com/sockjs"

              /**
               * @summary Connect to the server of a different Meteor application to subscribe to its document sets and invoke its remote methods.
               * @locus Anywhere
               * @param {String} url The URL of another Meteor application.
               */

              DDP.connect = (url, options) => {
                const ret = new Connection(url, options);
                allConnections.push(ret); // hack. see below.

                return ret;
              };

              DDP._reconnectHook = new Hook({
                bindEnvironment: false
              });
              /**
               * @summary Register a function to call as the first step of
               * reconnecting. This function can call methods which will be executed before
               * any other outstanding methods. For example, this can be used to re-establish
               * the appropriate authentication context on the connection.
               * @locus Anywhere
               * @param {Function} callback The function to call. It will be called with a
               * single argument, the [connection object](#ddp_connect) that is reconnecting.
               */

              DDP.onReconnect = callback => DDP._reconnectHook.register(callback); // Hack for `spiderable` package: a way to see if the page is done
              // loading all the data it needs.
              //


              DDP._allSubscriptionsReady = () => allConnections.every(conn => Object.values(conn._subscriptions).every(sub => sub.ready));
              ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            } } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/ddp-client/client/client.js");

  /* Exports */
  Package._define("ddp-client", _exports2, {
    DDP: DDP
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var DDP = Package['ddp-client'].DDP;

  /* Exports */
  Package._define("ddp", {
    DDP: DDP
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("ddp-server");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var LocalCollection = Package.minimongo.LocalCollection;
  var Minimongo = Package.minimongo.Minimongo;
  var check = Package.check.check;
  var Match = Package.check.Match;
  var EJSON = Package.ejson.EJSON;
  var DDP = Package['ddp-client'].DDP;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var AllowDeny;

  var _require = meteorInstall({ "node_modules": { "meteor": { "allow-deny": { "allow-deny.js": function _module() {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/allow-deny/allow-deny.js                                                                                  //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            ///
            /// Remote methods and access control.
            ///
            const hasOwn = Object.prototype.hasOwnProperty; // Restrict default mutators on collection. allow() and deny() take the
            // same options:
            //
            // options.insert {Function(userId, doc)}
            //   return true to allow/deny adding this document
            //
            // options.update {Function(userId, docs, fields, modifier)}
            //   return true to allow/deny updating these documents.
            //   `fields` is passed as an array of fields that are to be modified
            //
            // options.remove {Function(userId, docs)}
            //   return true to allow/deny removing these documents
            //
            // options.fetch {Array}
            //   Fields to fetch for these validators. If any call to allow or deny
            //   does not have this option then all fields are loaded.
            //
            // allow and deny can be called multiple times. The validators are
            // evaluated as follows:
            // - If neither deny() nor allow() has been called on the collection,
            //   then the request is allowed if and only if the "insecure" smart
            //   package is in use.
            // - Otherwise, if any deny() function returns true, the request is denied.
            // - Otherwise, if any allow() function returns true, the request is allowed.
            // - Otherwise, the request is denied.
            //
            // Meteor may call your deny() and allow() functions in any order, and may not
            // call all of them if it is able to make a decision without calling them all
            // (so don't include side effects).

            AllowDeny = {
              CollectionPrototype: {}
            }; // In the `mongo` package, we will extend Mongo.Collection.prototype with these
            // methods

            const CollectionPrototype = AllowDeny.CollectionPrototype;
            /**
             * @summary Allow users to write directly to this collection from client code, subject to limitations you define.
             * @locus Server
             * @method allow
             * @memberOf Mongo.Collection
             * @instance
             * @param {Object} options
             * @param {Function} options.insert,update,remove Functions that look at a proposed modification to the database and return true if it should be allowed.
             * @param {String[]} options.fetch Optional performance enhancement. Limits the fields that will be fetched from the database for inspection by your `update` and `remove` functions.
             * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections).  Pass `null` to disable transformation.
             */

            CollectionPrototype.allow = function (options) {
              addValidator(this, 'allow', options);
            };
            /**
             * @summary Override `allow` rules.
             * @locus Server
             * @method deny
             * @memberOf Mongo.Collection
             * @instance
             * @param {Object} options
             * @param {Function} options.insert,update,remove Functions that look at a proposed modification to the database and return true if it should be denied, even if an [allow](#allow) rule says otherwise.
             * @param {String[]} options.fetch Optional performance enhancement. Limits the fields that will be fetched from the database for inspection by your `update` and `remove` functions.
             * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections).  Pass `null` to disable transformation.
             */

            CollectionPrototype.deny = function (options) {
              addValidator(this, 'deny', options);
            };

            CollectionPrototype._defineMutationMethods = function (options) {
              const self = this;
              options = options || {}; // set to true once we call any allow or deny methods. If true, use
              // allow/deny semantics. If false, use insecure mode semantics.

              self._restricted = false; // Insecure mode (default to allowing writes). Defaults to 'undefined' which
              // means insecure iff the insecure package is loaded. This property can be
              // overriden by tests or packages wishing to change insecure mode behavior of
              // their collections.

              self._insecure = undefined;
              self._validators = {
                insert: {
                  allow: [],
                  deny: []
                },
                update: {
                  allow: [],
                  deny: []
                },
                remove: {
                  allow: [],
                  deny: []
                },
                upsert: {
                  allow: [],
                  deny: []
                },
                // dummy arrays; can't set these!
                fetch: [],
                fetchAllFields: false
              };
              if (!self._name) return; // anonymous collection
              // XXX Think about method namespacing. Maybe methods should be
              // "Meteor:Mongo:insert/NAME"?

              self._prefix = '/' + self._name + '/'; // Mutation Methods
              // Minimongo on the server gets no stubs; instead, by default
              // it wait()s until its result is ready, yielding.
              // This matches the behavior of macromongo on the server better.
              // XXX see #MeteorServerNull

              if (self._connection && (self._connection === Meteor.server || Meteor.isClient)) {
                const m = {};
                ['insert', 'update', 'remove'].forEach(method => {
                  const methodName = self._prefix + method;

                  if (options.useExisting) {
                    const handlerPropName = Meteor.isClient ? '_methodHandlers' : 'method_handlers'; // Do not try to create additional methods if this has already been called.
                    // (Otherwise the .methods() call below will throw an error.)

                    if (self._connection[handlerPropName] && typeof self._connection[handlerPropName][methodName] === 'function') return;
                  }

                  m[methodName] = function () {
                    // All the methods do their own validation, instead of using check().
                    check(arguments, [Match.Any]);
                    const args = Array.from(arguments);

                    try {
                      // For an insert, if the client didn't specify an _id, generate one
                      // now; because this uses DDP.randomStream, it will be consistent with
                      // what the client generated. We generate it now rather than later so
                      // that if (eg) an allow/deny rule does an insert to the same
                      // collection (not that it really should), the generated _id will
                      // still be the first use of the stream and will be consistent.
                      //
                      // However, we don't actually stick the _id onto the document yet,
                      // because we want allow/deny rules to be able to differentiate
                      // between arbitrary client-specified _id fields and merely
                      // client-controlled-via-randomSeed fields.
                      let generatedId = null;

                      if (method === "insert" && !hasOwn.call(args[0], '_id')) {
                        generatedId = self._makeNewID();
                      }

                      if (this.isSimulation) {
                        // In a client simulation, you can do any mutation (even with a
                        // complex selector).
                        if (generatedId !== null) args[0]._id = generatedId;
                        return self._collection[method].apply(self._collection, args);
                      } // This is the server receiving a method call from the client.
                      // We don't allow arbitrary selectors in mutations from the client: only
                      // single-ID selectors.


                      if (method !== 'insert') throwIfSelectorIsNotId(args[0], method);

                      if (self._restricted) {
                        // short circuit if there is no way it will pass.
                        if (self._validators[method].allow.length === 0) {
                          throw new Meteor.Error(403, "Access denied. No allow validators set on restricted " + "collection for method '" + method + "'.");
                        }

                        const validatedMethodName = '_validated' + method.charAt(0).toUpperCase() + method.slice(1);
                        args.unshift(this.userId);
                        method === 'insert' && args.push(generatedId);
                        return self[validatedMethodName].apply(self, args);
                      } else if (self._isInsecure()) {
                        if (generatedId !== null) args[0]._id = generatedId; // In insecure mode, allow any mutation (with a simple selector).
                        // XXX This is kind of bogus.  Instead of blindly passing whatever
                        //     we get from the network to this function, we should actually
                        //     know the correct arguments for the function and pass just
                        //     them.  For example, if you have an extraneous extra null
                        //     argument and this is Mongo on the server, the .wrapAsync'd
                        //     functions like update will get confused and pass the
                        //     "fut.resolver()" in the wrong slot, where _update will never
                        //     invoke it. Bam, broken DDP connection.  Probably should just
                        //     take this whole method and write it three times, invoking
                        //     helpers for the common code.

                        return self._collection[method].apply(self._collection, args);
                      } else {
                        // In secure mode, if we haven't called allow or deny, then nothing
                        // is permitted.
                        throw new Meteor.Error(403, "Access denied");
                      }
                    } catch (e) {
                      if (e.name === 'MongoError' || e.name === 'MinimongoError') {
                        throw new Meteor.Error(409, e.toString());
                      } else {
                        throw e;
                      }
                    }
                  };
                });

                self._connection.methods(m);
              }
            };

            CollectionPrototype._updateFetch = function (fields) {
              const self = this;

              if (!self._validators.fetchAllFields) {
                if (fields) {
                  const union = Object.create(null);

                  const add = names => names && names.forEach(name => union[name] = 1);

                  add(self._validators.fetch);
                  add(fields);
                  self._validators.fetch = Object.keys(union);
                } else {
                  self._validators.fetchAllFields = true; // clear fetch just to make sure we don't accidentally read it

                  self._validators.fetch = null;
                }
              }
            };

            CollectionPrototype._isInsecure = function () {
              const self = this;
              if (self._insecure === undefined) return !!Package.insecure;
              return self._insecure;
            };

            CollectionPrototype._validatedInsert = function (userId, doc, generatedId) {
              const self = this; // call user validators.
              // Any deny returns true means denied.

              if (self._validators.insert.deny.some(validator => {
                return validator(userId, docToValidate(validator, doc, generatedId));
              })) {
                throw new Meteor.Error(403, "Access denied");
              } // Any allow returns true means proceed. Throw error if they all fail.


              if (self._validators.insert.allow.every(validator => {
                return !validator(userId, docToValidate(validator, doc, generatedId));
              })) {
                throw new Meteor.Error(403, "Access denied");
              } // If we generated an ID above, insert it now: after the validation, but
              // before actually inserting.


              if (generatedId !== null) doc._id = generatedId;

              self._collection.insert.call(self._collection, doc);
            }; // Simulate a mongo `update` operation while validating that the access
            // control rules set by calls to `allow/deny` are satisfied. If all
            // pass, rewrite the mongo operation to use $in to set the list of
            // document ids to change ##ValidatedChange


            CollectionPrototype._validatedUpdate = function (userId, selector, mutator, options) {
              const self = this;
              check(mutator, Object);
              options = Object.assign(Object.create(null), options);
              if (!LocalCollection._selectorIsIdPerhapsAsObject(selector)) throw new Error("validated update should be of a single ID"); // We don't support upserts because they don't fit nicely into allow/deny
              // rules.

              if (options.upsert) throw new Meteor.Error(403, "Access denied. Upserts not " + "allowed in a restricted collection.");
              const noReplaceError = "Access denied. In a restricted collection you can only" + " update documents, not replace them. Use a Mongo update operator, such " + "as '$set'.";
              const mutatorKeys = Object.keys(mutator); // compute modified fields

              const modifiedFields = {};

              if (mutatorKeys.length === 0) {
                throw new Meteor.Error(403, noReplaceError);
              }

              mutatorKeys.forEach(op => {
                const params = mutator[op];

                if (op.charAt(0) !== '$') {
                  throw new Meteor.Error(403, noReplaceError);
                } else if (!hasOwn.call(ALLOWED_UPDATE_OPERATIONS, op)) {
                  throw new Meteor.Error(403, "Access denied. Operator " + op + " not allowed in a restricted collection.");
                } else {
                  Object.keys(params).forEach(field => {
                    // treat dotted fields as if they are replacing their
                    // top-level part
                    if (field.indexOf('.') !== -1) field = field.substring(0, field.indexOf('.')); // record the field we are trying to change

                    modifiedFields[field] = true;
                  });
                }
              });
              const fields = Object.keys(modifiedFields);
              const findOptions = {
                transform: null
              };

              if (!self._validators.fetchAllFields) {
                findOptions.fields = {};

                self._validators.fetch.forEach(fieldName => {
                  findOptions.fields[fieldName] = 1;
                });
              }

              const doc = self._collection.findOne(selector, findOptions);

              if (!doc) // none satisfied!
                return 0; // call user validators.
              // Any deny returns true means denied.

              if (self._validators.update.deny.some(validator => {
                const factoriedDoc = transformDoc(validator, doc);
                return validator(userId, factoriedDoc, fields, mutator);
              })) {
                throw new Meteor.Error(403, "Access denied");
              } // Any allow returns true means proceed. Throw error if they all fail.


              if (self._validators.update.allow.every(validator => {
                const factoriedDoc = transformDoc(validator, doc);
                return !validator(userId, factoriedDoc, fields, mutator);
              })) {
                throw new Meteor.Error(403, "Access denied");
              }

              options._forbidReplace = true; // Back when we supported arbitrary client-provided selectors, we actually
              // rewrote the selector to include an _id clause before passing to Mongo to
              // avoid races, but since selector is guaranteed to already just be an ID, we
              // don't have to any more.

              return self._collection.update.call(self._collection, selector, mutator, options);
            }; // Only allow these operations in validated updates. Specifically
            // whitelist operations, rather than blacklist, so new complex
            // operations that are added aren't automatically allowed. A complex
            // operation is one that does more than just modify its target
            // field. For now this contains all update operations except '$rename'.
            // http://docs.mongodb.org/manual/reference/operators/#update


            const ALLOWED_UPDATE_OPERATIONS = {
              $inc: 1,
              $set: 1,
              $unset: 1,
              $addToSet: 1,
              $pop: 1,
              $pullAll: 1,
              $pull: 1,
              $pushAll: 1,
              $push: 1,
              $bit: 1
            }; // Simulate a mongo `remove` operation while validating access control
            // rules. See #ValidatedChange

            CollectionPrototype._validatedRemove = function (userId, selector) {
              const self = this;
              const findOptions = {
                transform: null
              };

              if (!self._validators.fetchAllFields) {
                findOptions.fields = {};

                self._validators.fetch.forEach(fieldName => {
                  findOptions.fields[fieldName] = 1;
                });
              }

              const doc = self._collection.findOne(selector, findOptions);

              if (!doc) return 0; // call user validators.
              // Any deny returns true means denied.

              if (self._validators.remove.deny.some(validator => {
                return validator(userId, transformDoc(validator, doc));
              })) {
                throw new Meteor.Error(403, "Access denied");
              } // Any allow returns true means proceed. Throw error if they all fail.


              if (self._validators.remove.allow.every(validator => {
                return !validator(userId, transformDoc(validator, doc));
              })) {
                throw new Meteor.Error(403, "Access denied");
              } // Back when we supported arbitrary client-provided selectors, we actually
              // rewrote the selector to {_id: {$in: [ids that we found]}} before passing to
              // Mongo to avoid races, but since selector is guaranteed to already just be
              // an ID, we don't have to any more.


              return self._collection.remove.call(self._collection, selector);
            };

            CollectionPrototype._callMutatorMethod = function _callMutatorMethod(name, args, callback) {
              if (Meteor.isClient && !callback && !alreadyInSimulation()) {
                // Client can't block, so it can't report errors by exception,
                // only by callback. If they forget the callback, give them a
                // default one that logs the error, so they aren't totally
                // baffled if their writes don't work because their database is
                // down.
                // Don't give a default callback in simulation, because inside stubs we
                // want to return the results from the local collection immediately and
                // not force a callback.
                callback = function (err) {
                  if (err) Meteor._debug(name + " failed: " + (err.reason || err.stack));
                };
              } // For two out of three mutator methods, the first argument is a selector


              const firstArgIsSelector = name === "update" || name === "remove";

              if (firstArgIsSelector && !alreadyInSimulation()) {
                // If we're about to actually send an RPC, we should throw an error if
                // this is a non-ID selector, because the mutation methods only allow
                // single-ID selectors. (If we don't throw here, we'll see flicker.)
                throwIfSelectorIsNotId(args[0], name);
              }

              const mutatorMethodName = this._prefix + name;
              return this._connection.apply(mutatorMethodName, args, {
                returnStubValue: true
              }, callback);
            };

            function transformDoc(validator, doc) {
              if (validator.transform) return validator.transform(doc);
              return doc;
            }

            function docToValidate(validator, doc, generatedId) {
              let ret = doc;

              if (validator.transform) {
                ret = EJSON.clone(doc); // If you set a server-side transform on your collection, then you don't get
                // to tell the difference between "client specified the ID" and "server
                // generated the ID", because transforms expect to get _id.  If you want to
                // do that check, you can do it with a specific
                // `C.allow({insert: f, transform: null})` validator.

                if (generatedId !== null) {
                  ret._id = generatedId;
                }

                ret = validator.transform(ret);
              }

              return ret;
            }

            function addValidator(collection, allowOrDeny, options) {
              // validate keys
              const validKeysRegEx = /^(?:insert|update|remove|fetch|transform)$/;
              Object.keys(options).forEach(key => {
                if (!validKeysRegEx.test(key)) throw new Error(allowOrDeny + ": Invalid key: " + key);
              });
              collection._restricted = true;
              ['insert', 'update', 'remove'].forEach(name => {
                if (hasOwn.call(options, name)) {
                  if (!(options[name] instanceof Function)) {
                    throw new Error(allowOrDeny + ": Value for `" + name + "` must be a function");
                  } // If the transform is specified at all (including as 'null') in this
                  // call, then take that; otherwise, take the transform from the
                  // collection.


                  if (options.transform === undefined) {
                    options[name].transform = collection._transform; // already wrapped
                  } else {
                    options[name].transform = LocalCollection.wrapTransform(options.transform);
                  }

                  collection._validators[name][allowOrDeny].push(options[name]);
                }
              }); // Only update the fetch fields if we're passed things that affect
              // fetching. This way allow({}) and allow({insert: f}) don't result in
              // setting fetchAllFields

              if (options.update || options.remove || options.fetch) {
                if (options.fetch && !(options.fetch instanceof Array)) {
                  throw new Error(allowOrDeny + ": Value for `fetch` must be an array");
                }

                collection._updateFetch(options.fetch);
              }
            }

            function throwIfSelectorIsNotId(selector, methodName) {
              if (!LocalCollection._selectorIsIdPerhapsAsObject(selector)) {
                throw new Meteor.Error(403, "Not permitted. Untrusted code may only " + methodName + " documents by ID.");
              }
            }

            ; // Determine if we are in a DDP method simulation

            function alreadyInSimulation() {
              var CurrentInvocation = DDP._CurrentMethodInvocation || // For backwards compatibility, as explained in this issue:
              // https://github.com/meteor/meteor/issues/8947
              DDP._CurrentInvocation;
              const enclosing = CurrentInvocation.get();
              return enclosing && enclosing.isSimulation;
            }
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  _require("/node_modules/meteor/allow-deny/allow-deny.js");

  /* Exports */
  Package._define("allow-deny", {
    AllowDeny: AllowDeny
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("mongo-dev-server");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var EJSON = Package.ejson.EJSON;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var Formatter, Log;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "logging": { "logging.js": function module(_require, _exports, _module) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                             //
            // packages/logging/logging.js                                                                                 //
            //                                                                                                             //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            let _objectSpread;

            _module.link("@babel/runtime/helpers/objectSpread2", {
              default(v) {
                _objectSpread = v;
              }

            }, 0);
            _module.export({
              Log: () => Log
            });
            let Meteor;
            _module.link("meteor/meteor", {
              Meteor(v) {
                Meteor = v;
              }

            }, 0);
            const hasOwn = Object.prototype.hasOwnProperty;

            function Log() {
              Log.info(...arguments);
            } /// FOR TESTING


            let intercept = 0;
            let interceptedLines = [];
            let suppress = 0; // Intercept the next 'count' calls to a Log function. The actual
            // lines printed to the console can be cleared and read by calling
            // Log._intercepted().

            Log._intercept = count => {
              intercept += count;
            }; // Suppress the next 'count' calls to a Log function. Use this to stop
            // tests from spamming the console, especially with red errors that
            // might look like a failing test.


            Log._suppress = count => {
              suppress += count;
            }; // Returns intercepted lines and resets the intercept counter.


            Log._intercepted = () => {
              const lines = interceptedLines;
              interceptedLines = [];
              intercept = 0;
              return lines;
            }; // Either 'json' or 'colored-text'.
            //
            // When this is set to 'json', print JSON documents that are parsed by another
            // process ('satellite' or 'meteor run'). This other process should call
            // 'Log.format' for nice output.
            //
            // When this is set to 'colored-text', call 'Log.format' before printing.
            // This should be used for logging from within satellite, since there is no
            // other process that will be reading its standard output.


            Log.outputFormat = 'json';
            const LEVEL_COLORS = {
              debug: 'green',
              // leave info as the default color
              warn: 'magenta',
              error: 'red'
            };
            const META_COLOR = 'blue'; // Default colors cause readability problems on Windows Powershell,
            // switch to bright variants. While still capable of millions of
            // operations per second, the benchmark showed a 25%+ increase in
            // ops per second (on Node 8) by caching "process.platform".

            const isWin32 = typeof process === 'object' && process.platform === 'win32';

            const platformColor = color => {
              if (isWin32 && typeof color === 'string' && !color.endsWith('Bright')) {
                return "".concat(color, "Bright");
              }

              return color;
            }; // XXX package


            const RESTRICTED_KEYS = ['time', 'timeInexact', 'level', 'file', 'line', 'program', 'originApp', 'satellite', 'stderr'];
            const FORMATTED_KEYS = [...RESTRICTED_KEYS, 'app', 'message'];

            const logInBrowser = obj => {
              const str = Log.format(obj); // XXX Some levels should be probably be sent to the server

              const level = obj.level;

              if (typeof console !== 'undefined' && console[level]) {
                console[level](str);
              } else {
                // IE doesn't have console.log.apply, it's not a real Object.
                // http://stackoverflow.com/questions/5538972/console-log-apply-not-working-in-ie9
                // http://patik.com/blog/complete-cross-browser-console-log/
                if (typeof console.log.apply === "function") {
                  // Most browsers
                  console.log.apply(console, [str]);
                } else if (typeof Function.prototype.bind === "function") {
                  // IE9
                  const log = Function.prototype.bind.call(console.log, console);
                  log.apply(console, [str]);
                }
              }
            }; // @returns {Object: { line: Number, file: String }}


            Log._getCallerDetails = () => {
              const getStack = () => {
                // We do NOT use Error.prepareStackTrace here (a V8 extension that gets us a
                // pre-parsed stack) since it's impossible to compose it with the use of
                // Error.prepareStackTrace used on the server for source maps.
                const err = new Error();
                const stack = err.stack;
                return stack;
              };

              const stack = getStack();
              if (!stack) return {}; // looking for the first line outside the logging package (or an
              // eval if we find that first)

              let line;
              const lines = stack.split('\n').slice(1);

              for (line of lines) {
                if (line.match(/^\s*(at eval \(eval)|(eval:)/)) {
                  return {
                    file: "eval"
                  };
                }

                if (!line.match(/packages\/(?:local-test[:_])?logging(?:\/|\.js)/)) {
                  break;
                }
              }

              const details = {}; // The format for FF is 'functionName@filePath:lineNumber'
              // The format for V8 is 'functionName (packages/logging/logging.js:81)' or
              //                      'packages/logging/logging.js:81'

              const match = /(?:[@(]| at )([^(]+?):([0-9:]+)(?:\)|$)/.exec(line);

              if (!match) {
                return details;
              } // in case the matched block here is line:column


              details.line = match[2].split(':')[0]; // Possible format: https://foo.bar.com/scripts/file.js?random=foobar
              // XXX: if you can write the following in better way, please do it
              // XXX: what about evals?

              details.file = match[1].split('/').slice(-1)[0].split('?')[0];
              return details;
            };

            ['debug', 'info', 'warn', 'error'].forEach(level => {
              // @param arg {String|Object}
              Log[level] = arg => {
                if (suppress) {
                  suppress--;
                  return;
                }

                let intercepted = false;

                if (intercept) {
                  intercept--;
                  intercepted = true;
                }

                let obj = arg === Object(arg) && !(arg instanceof RegExp) && !(arg instanceof Date) ? arg : {
                  message: new String(arg).toString()
                };
                RESTRICTED_KEYS.forEach(key => {
                  if (obj[key]) {
                    throw new Error("Can't set '".concat(key, "' in log message"));
                  }
                });

                if (hasOwn.call(obj, 'message') && typeof obj.message !== 'string') {
                  throw new Error("The 'message' field in log objects must be a string");
                }

                if (!obj.omitCallerDetails) {
                  obj = _objectSpread(_objectSpread({}, Log._getCallerDetails()), obj);
                }

                obj.time = new Date();
                obj.level = level; // If we are in production don't write out debug logs.

                if (level === 'debug' && Meteor.isProduction) {
                  return;
                }

                if (intercepted) {
                  interceptedLines.push(EJSON.stringify(obj));
                } else if (Meteor.isServer) {
                  if (Log.outputFormat === 'colored-text') {
                    console.log(Log.format(obj, {
                      color: true
                    }));
                  } else if (Log.outputFormat === 'json') {
                    console.log(EJSON.stringify(obj));
                  } else {
                    throw new Error("Unknown logging output format: ".concat(Log.outputFormat));
                  }
                } else {
                  logInBrowser(obj);
                }
              };
            }); // tries to parse line as EJSON. returns object if parse is successful, or null if not

            Log.parse = line => {
              let obj = null;

              if (line && line.startsWith('{')) {
                // might be json generated from calling 'Log'
                try {
                  obj = EJSON.parse(line);
                } catch (e) {}
              } // XXX should probably check fields other than 'time'


              if (obj && obj.time && obj.time instanceof Date) {
                return obj;
              } else {
                return null;
              }
            }; // formats a log object into colored human and machine-readable text


            Log.format = function (obj) {
              let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
              obj = _objectSpread({}, obj); // don't mutate the argument

              let {
                time,
                timeInexact,
                level = 'info',
                file,
                line: lineNumber,
                app: appName = '',
                originApp,
                message = '',
                program = '',
                satellite = '',
                stderr = ''
              } = obj;

              if (!(time instanceof Date)) {
                throw new Error("'time' must be a Date object");
              }

              FORMATTED_KEYS.forEach(key => {
                delete obj[key];
              });

              if (Object.keys(obj).length > 0) {
                if (message) {
                  message += ' ';
                }

                message += EJSON.stringify(obj);
              }

              const pad2 = n => n.toString().padStart(2, '0');

              const pad3 = n => n.toString().padStart(3, '0');

              const dateStamp = time.getFullYear().toString() + pad2(time.getMonth() + 1
              /*0-based*/
              ) + pad2(time.getDate());
              const timeStamp = pad2(time.getHours()) + ':' + pad2(time.getMinutes()) + ':' + pad2(time.getSeconds()) + '.' + pad3(time.getMilliseconds()); // eg in San Francisco in June this will be '(-7)'

              const utcOffsetStr = "(".concat(-(new Date().getTimezoneOffset() / 60), ")");
              let appInfo = '';

              if (appName) {
                appInfo += appName;
              }

              if (originApp && originApp !== appName) {
                appInfo += " via ".concat(originApp);
              }

              if (appInfo) {
                appInfo = "[".concat(appInfo, "] ");
              }

              const sourceInfoParts = [];

              if (program) {
                sourceInfoParts.push(program);
              }

              if (file) {
                sourceInfoParts.push(file);
              }

              if (lineNumber) {
                sourceInfoParts.push(lineNumber);
              }

              let sourceInfo = !sourceInfoParts.length ? '' : "(".concat(sourceInfoParts.join(':'), ") ");
              if (satellite) sourceInfo += "[".concat(satellite, "]");
              const stderrIndicator = stderr ? '(STDERR) ' : '';
              const metaPrefix = [level.charAt(0).toUpperCase(), dateStamp, '-', timeStamp, utcOffsetStr, timeInexact ? '? ' : ' ', appInfo, sourceInfo, stderrIndicator].join('');
              return Formatter.prettify(metaPrefix, options.color && platformColor(options.metaColor || META_COLOR)) + Formatter.prettify(message, options.color && platformColor(LEVEL_COLORS[level]));
            }; // Turn a line of text into a loggable object.
            // @param line {String}
            // @param override {Object}


            Log.objFromText = (line, override) => {
              return _objectSpread({
                message: line,
                level: 'info',
                time: new Date(),
                timeInexact: true
              }, override);
            };
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "logging_browser.js": function _module2() {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                             //
            // packages/logging/logging_browser.js                                                                         //
            //                                                                                                             //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            Formatter = {};

            Formatter.prettify = function (line, color) {
              return line;
            };
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/logging/logging.js");
  _require2("/node_modules/meteor/logging/logging_browser.js");

  /* Exports */
  Package._define("logging", _exports2, {
    Log: Log
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var AllowDeny = Package['allow-deny'].AllowDeny;
  var Random = Package.random.Random;
  var EJSON = Package.ejson.EJSON;
  var LocalCollection = Package.minimongo.LocalCollection;
  var Minimongo = Package.minimongo.Minimongo;
  var DDP = Package['ddp-client'].DDP;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var DiffSequence = Package['diff-sequence'].DiffSequence;
  var MongoID = Package['mongo-id'].MongoID;
  var check = Package.check.check;
  var Match = Package.check.Match;
  var Log = Package.logging.Log;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var Mongo, _ref, field, value, selector, callback, options;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "mongo": { "local_collection_driver.js": function module(_require, _exports, _module) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/mongo/local_collection_driver.js                                                                           //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              LocalCollectionDriver: () => LocalCollectionDriver
            });
            const LocalCollectionDriver = new class LocalCollectionDriver {
              constructor() {
                this.noConnCollections = Object.create(null);
              }

              open(name, conn) {
                if (!name) {
                  return new LocalCollection();
                }

                if (!conn) {
                  return ensureCollection(name, this.noConnCollections);
                }

                if (!conn._mongo_livedata_collections) {
                  conn._mongo_livedata_collections = Object.create(null);
                } // XXX is there a way to keep track of a connection's collections without
                // dangling it off the connection object?


                return ensureCollection(name, conn._mongo_livedata_collections);
              }

            }();

            function ensureCollection(name, collections) {
              return name in collections ? collections[name] : collections[name] = new LocalCollection(name);
            }
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "collection.js": function module(_require3, _exports2, _module2) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/mongo/collection.js                                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            !function (module1) {
              let _objectSpread;

              module1.link("@babel/runtime/helpers/objectSpread2", {
                default(v) {
                  _objectSpread = v;
                }

              }, 0);
              // options.connection, if given, is a LivedataClient or LivedataServer
              // XXX presently there is no way to destroy/clean up a Collection

              /**
               * @summary Namespace for MongoDB-related items
               * @namespace
               */
              Mongo = {};
              /**
               * @summary Constructor for a Collection
               * @locus Anywhere
               * @instancename collection
               * @class
               * @param {String} name The name of the collection.  If null, creates an unmanaged (unsynchronized) local collection.
               * @param {Object} [options]
               * @param {Object} options.connection The server connection that will manage this collection. Uses the default connection if not specified.  Pass the return value of calling [`DDP.connect`](#ddp_connect) to specify a different server. Pass `null` to specify no connection. Unmanaged (`name` is null) collections cannot specify a connection.
               * @param {String} options.idGeneration The method of generating the `_id` fields of new documents in this collection.  Possible values:
              
               - **`'STRING'`**: random strings
               - **`'MONGO'`**:  random [`Mongo.ObjectID`](#mongo_object_id) values
              
              The default id generation technique is `'STRING'`.
               * @param {Function} options.transform An optional transformation function. Documents will be passed through this function before being returned from `fetch` or `findOne`, and before being passed to callbacks of `observe`, `map`, `forEach`, `allow`, and `deny`. Transforms are *not* applied for the callbacks of `observeChanges` or to cursors returned from publish functions.
               * @param {Boolean} options.defineMutationMethods Set to `false` to skip setting up the mutation methods that enable insert/update/remove from client code. Default `true`.
               */

              Mongo.Collection = function Collection(name, options) {
                if (!name && name !== null) {
                  Meteor._debug("Warning: creating anonymous collection. It will not be " + "saved or synchronized over the network. (Pass null for " + "the collection name to turn off this warning.)");

                  name = null;
                }

                if (name !== null && typeof name !== "string") {
                  throw new Error("First argument to new Mongo.Collection must be a string or null");
                }

                if (options && options.methods) {
                  // Backwards compatibility hack with original signature (which passed
                  // "connection" directly instead of in options. (Connections must have a "methods"
                  // method.)
                  // XXX remove before 1.0
                  options = {
                    connection: options
                  };
                } // Backwards compatibility: "connection" used to be called "manager".


                if (options && options.manager && !options.connection) {
                  options.connection = options.manager;
                }

                options = _objectSpread({
                  connection: undefined,
                  idGeneration: 'STRING',
                  transform: null,
                  _driver: undefined,
                  _preventAutopublish: false
                }, options);

                switch (options.idGeneration) {
                  case 'MONGO':
                    this._makeNewID = function () {
                      var src = name ? DDP.randomStream('/collection/' + name) : Random.insecure;
                      return new Mongo.ObjectID(src.hexString(24));
                    };

                    break;

                  case 'STRING':
                  default:
                    this._makeNewID = function () {
                      var src = name ? DDP.randomStream('/collection/' + name) : Random.insecure;
                      return src.id();
                    };

                    break;
                }

                this._transform = LocalCollection.wrapTransform(options.transform);
                if (!name || options.connection === null) // note: nameless collections never have a connection
                  this._connection = null;else if (options.connection) this._connection = options.connection;else if (Meteor.isClient) this._connection = Meteor.connection;else this._connection = Meteor.server;

                if (!options._driver) {
                  // XXX This check assumes that webapp is loaded so that Meteor.server !==
                  // null. We should fully support the case of "want to use a Mongo-backed
                  // collection from Node code without webapp", but we don't yet.
                  // #MeteorServerNull
                  if (name && this._connection === Meteor.server && typeof MongoInternals !== "undefined" && MongoInternals.defaultRemoteCollectionDriver) {
                    options._driver = MongoInternals.defaultRemoteCollectionDriver();
                  } else {
                    const {
                      LocalCollectionDriver
                    } = _require3("./local_collection_driver.js");

                    options._driver = LocalCollectionDriver;
                  }
                }

                this._collection = options._driver.open(name, this._connection);
                this._name = name;
                this._driver = options._driver;

                this._maybeSetUpReplication(name, options); // XXX don't define these until allow or deny is actually used for this
                // collection. Could be hard if the security rules are only defined on the
                // server.


                if (options.defineMutationMethods !== false) {
                  try {
                    this._defineMutationMethods({
                      useExisting: options._suppressSameNameError === true
                    });
                  } catch (error) {
                    // Throw a more understandable error on the server for same collection name
                    if (error.message === "A method named '/".concat(name, "/insert' is already defined")) throw new Error("There is already a collection named \"".concat(name, "\""));
                    throw error;
                  }
                } // autopublish


                if (Package.autopublish && !options._preventAutopublish && this._connection && this._connection.publish) {
                  this._connection.publish(null, () => this.find(), {
                    is_auto: true
                  });
                }
              };

              Object.assign(Mongo.Collection.prototype, {
                _maybeSetUpReplication(name, _ref2) {
                  let {
                    _suppressSameNameError = false
                  } = _ref2;
                  const self = this;

                  if (!(self._connection && self._connection.registerStore)) {
                    return;
                  } // OK, we're going to be a slave, replicating some remote
                  // database, except possibly with some temporary divergence while
                  // we have unacknowledged RPC's.


                  const ok = self._connection.registerStore(name, {
                    // Called at the beginning of a batch of updates. batchSize is the number
                    // of update calls to expect.
                    //
                    // XXX This interface is pretty janky. reset probably ought to go back to
                    // being its own function, and callers shouldn't have to calculate
                    // batchSize. The optimization of not calling pause/remove should be
                    // delayed until later: the first call to update() should buffer its
                    // message, and then we can either directly apply it at endUpdate time if
                    // it was the only update, or do pauseObservers/apply/apply at the next
                    // update() if there's another one.
                    beginUpdate(batchSize, reset) {
                      // pause observers so users don't see flicker when updating several
                      // objects at once (including the post-reconnect reset-and-reapply
                      // stage), and so that a re-sorting of a query can take advantage of the
                      // full _diffQuery moved calculation instead of applying change one at a
                      // time.
                      if (batchSize > 1 || reset) self._collection.pauseObservers();
                      if (reset) self._collection.remove({});
                    },

                    // Apply an update.
                    // XXX better specify this interface (not in terms of a wire message)?
                    update(msg) {
                      var mongoId = MongoID.idParse(msg.id);

                      var doc = self._collection._docs.get(mongoId); //When the server's mergebox is disabled for a collection, the client must gracefully handle it when:
                      // *We receive an added message for a document that is already there. Instead, it will be changed
                      // *We reeive a change message for a document that is not there. Instead, it will be added
                      // *We receive a removed messsage for a document that is not there. Instead, noting wil happen.
                      //Code is derived from client-side code originally in peerlibrary:control-mergebox
                      //https://github.com/peerlibrary/meteor-control-mergebox/blob/master/client.coffee
                      //For more information, refer to discussion "Initial support for publication strategies in livedata server":
                      //https://github.com/meteor/meteor/pull/11151


                      if (Meteor.isClient) {
                        if (msg.msg === 'added' && doc) {
                          msg.msg = 'changed';
                        } else if (msg.msg === 'removed' && !doc) {
                          return;
                        } else if (msg.msg === 'changed' && !doc) {
                          msg.msg = 'added';
                          _ref = msg.fields;

                          for (field in _ref) {
                            value = _ref[field];

                            if (value === void 0) {
                              delete msg.fields[field];
                            }
                          }
                        }
                      } // Is this a "replace the whole doc" message coming from the quiescence
                      // of method writes to an object? (Note that 'undefined' is a valid
                      // value meaning "remove it".)


                      if (msg.msg === 'replace') {
                        var replace = msg.replace;

                        if (!replace) {
                          if (doc) self._collection.remove(mongoId);
                        } else if (!doc) {
                          self._collection.insert(replace);
                        } else {
                          // XXX check that replace has no $ ops
                          self._collection.update(mongoId, replace);
                        }

                        return;
                      } else if (msg.msg === 'added') {
                        if (doc) {
                          throw new Error("Expected not to find a document already present for an add");
                        }

                        self._collection.insert(_objectSpread({
                          _id: mongoId
                        }, msg.fields));
                      } else if (msg.msg === 'removed') {
                        if (!doc) throw new Error("Expected to find a document already present for removed");

                        self._collection.remove(mongoId);
                      } else if (msg.msg === 'changed') {
                        if (!doc) throw new Error("Expected to find a document to change");
                        const keys = Object.keys(msg.fields);

                        if (keys.length > 0) {
                          var modifier = {};
                          keys.forEach(key => {
                            const value = msg.fields[key];

                            if (EJSON.equals(doc[key], value)) {
                              return;
                            }

                            if (typeof value === "undefined") {
                              if (!modifier.$unset) {
                                modifier.$unset = {};
                              }

                              modifier.$unset[key] = 1;
                            } else {
                              if (!modifier.$set) {
                                modifier.$set = {};
                              }

                              modifier.$set[key] = value;
                            }
                          });

                          if (Object.keys(modifier).length > 0) {
                            self._collection.update(mongoId, modifier);
                          }
                        }
                      } else {
                        throw new Error("I don't know how to deal with this message");
                      }
                    },

                    // Called at the end of a batch of updates.
                    endUpdate() {
                      self._collection.resumeObservers();
                    },

                    // Called around method stub invocations to capture the original versions
                    // of modified documents.
                    saveOriginals() {
                      self._collection.saveOriginals();
                    },

                    retrieveOriginals() {
                      return self._collection.retrieveOriginals();
                    },

                    // Used to preserve current versions of documents across a store reset.
                    getDoc(id) {
                      return self.findOne(id);
                    },

                    // To be able to get back to the collection from the store.
                    _getCollection() {
                      return self;
                    }

                  });

                  if (!ok) {
                    const message = "There is already a collection named \"".concat(name, "\"");

                    if (_suppressSameNameError === true) {
                      // XXX In theory we do not have to throw when `ok` is falsy. The
                      // store is already defined for this collection name, but this
                      // will simply be another reference to it and everything should
                      // work. However, we have historically thrown an error here, so
                      // for now we will skip the error only when _suppressSameNameError
                      // is `true`, allowing people to opt in and give this some real
                      // world testing.
                      console.warn ? console.warn(message) : console.log(message);
                    } else {
                      throw new Error(message);
                    }
                  }
                },

                ///
                /// Main collection API
                ///
                _getFindSelector(args) {
                  if (args.length == 0) return {};else return args[0];
                },

                _getFindOptions(args) {
                  var self = this;

                  if (args.length < 2) {
                    return {
                      transform: self._transform
                    };
                  } else {
                    check(args[1], Match.Optional(Match.ObjectIncluding({
                      fields: Match.Optional(Match.OneOf(Object, undefined)),
                      sort: Match.Optional(Match.OneOf(Object, Array, Function, undefined)),
                      limit: Match.Optional(Match.OneOf(Number, undefined)),
                      skip: Match.Optional(Match.OneOf(Number, undefined))
                    })));
                    return _objectSpread({
                      transform: self._transform
                    }, args[1]);
                  }
                },

                /**
                 * @summary Find the documents in a collection that match the selector.
                 * @locus Anywhere
                 * @method find
                 * @memberof Mongo.Collection
                 * @instance
                 * @param {MongoSelector} [selector] A query describing the documents to find
                 * @param {Object} [options]
                 * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)
                 * @param {Number} options.skip Number of results to skip at the beginning
                 * @param {Number} options.limit Maximum number of results to return
                 * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.
                 * @param {Boolean} options.reactive (Client only) Default `true`; pass `false` to disable reactivity
                 * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.
                 * @param {Boolean} options.disableOplog (Server only) Pass true to disable oplog-tailing on this query. This affects the way server processes calls to `observe` on this query. Disabling the oplog can be useful when working with data that updates in large batches.
                 * @param {Number} options.pollingIntervalMs (Server only) When oplog is disabled (through the use of `disableOplog` or when otherwise not available), the frequency (in milliseconds) of how often to poll this query when observing on the server. Defaults to 10000ms (10 seconds).
                 * @param {Number} options.pollingThrottleMs (Server only) When oplog is disabled (through the use of `disableOplog` or when otherwise not available), the minimum time (in milliseconds) to allow between re-polling when observing on the server. Increasing this will save CPU and mongo load at the expense of slower updates to users. Decreasing this is not recommended. Defaults to 50ms.
                 * @param {Number} options.maxTimeMs (Server only) If set, instructs MongoDB to set a time limit for this cursor's operations. If the operation reaches the specified time limit (in milliseconds) without the having been completed, an exception will be thrown. Useful to prevent an (accidental or malicious) unoptimized query from causing a full collection scan that would disrupt other database users, at the expense of needing to handle the resulting error.
                 * @param {String|Object} options.hint (Server only) Overrides MongoDB's default index selection and query optimization process. Specify an index to force its use, either by its name or index specification. You can also specify `{ $natural : 1 }` to force a forwards collection scan, or `{ $natural : -1 }` for a reverse collection scan. Setting this is only recommended for advanced users.
                 * @param {String} options.readPreference (Server only) Specifies a custom MongoDB [`readPreference`](https://docs.mongodb.com/manual/core/read-preference) for this particular cursor. Possible values are `primary`, `primaryPreferred`, `secondary`, `secondaryPreferred` and `nearest`.
                 * @returns {Mongo.Cursor}
                 */
                find() {
                  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                  }

                  // Collection.find() (return all docs) behaves differently
                  // from Collection.find(undefined) (return 0 docs).  so be
                  // careful about the length of arguments.
                  return this._collection.find(this._getFindSelector(args), this._getFindOptions(args));
                },

                /**
                 * @summary Finds the first document that matches the selector, as ordered by sort and skip options. Returns `undefined` if no matching document is found.
                 * @locus Anywhere
                 * @method findOne
                 * @memberof Mongo.Collection
                 * @instance
                 * @param {MongoSelector} [selector] A query describing the documents to find
                 * @param {Object} [options]
                 * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)
                 * @param {Number} options.skip Number of results to skip at the beginning
                 * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.
                 * @param {Boolean} options.reactive (Client only) Default true; pass false to disable reactivity
                 * @param {Function} options.transform Overrides `transform` on the [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.
                 * @param {String} options.readPreference (Server only) Specifies a custom MongoDB [`readPreference`](https://docs.mongodb.com/manual/core/read-preference) for fetching the document. Possible values are `primary`, `primaryPreferred`, `secondary`, `secondaryPreferred` and `nearest`.
                 * @returns {Object}
                 */
                findOne() {
                  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                    args[_key2] = arguments[_key2];
                  }

                  return this._collection.findOne(this._getFindSelector(args), this._getFindOptions(args));
                }

              });
              Object.assign(Mongo.Collection, {
                _publishCursor(cursor, sub, collection) {
                  var observeHandle = cursor.observeChanges({
                    added: function (id, fields) {
                      sub.added(collection, id, fields);
                    },
                    changed: function (id, fields) {
                      sub.changed(collection, id, fields);
                    },
                    removed: function (id) {
                      sub.removed(collection, id);
                    }
                  }, // Publications don't mutate the documents
                  // This is tested by the `livedata - publish callbacks clone` test
                  {
                    nonMutatingCallbacks: true
                  }); // We don't call sub.ready() here: it gets called in livedata_server, after
                  // possibly calling _publishCursor on multiple returned cursors.
                  // register stop callback (expects lambda w/ no args).

                  sub.onStop(function () {
                    observeHandle.stop();
                  }); // return the observeHandle in case it needs to be stopped early

                  return observeHandle;
                },

                // protect against dangerous selectors.  falsey and {_id: falsey} are both
                // likely programmer error, and not what you want, particularly for destructive
                // operations. If a falsey _id is sent in, a new string _id will be
                // generated and returned; if a fallbackId is provided, it will be returned
                // instead.
                _rewriteSelector(selector) {
                  let {
                    fallbackId
                  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                  // shorthand -- scalars match _id
                  if (LocalCollection._selectorIsId(selector)) selector = {
                    _id: selector
                  };

                  if (Array.isArray(selector)) {
                    // This is consistent with the Mongo console itself; if we don't do this
                    // check passing an empty array ends up selecting all items
                    throw new Error("Mongo selector can't be an array.");
                  }

                  if (!selector || '_id' in selector && !selector._id) {
                    // can't match anything
                    return {
                      _id: fallbackId || Random.id()
                    };
                  }

                  return selector;
                }

              });
              Object.assign(Mongo.Collection.prototype, {
                // 'insert' immediately returns the inserted document's new _id.
                // The others return values immediately if you are in a stub, an in-memory
                // unmanaged collection, or a mongo-backed collection and you don't pass a
                // callback. 'update' and 'remove' return the number of affected
                // documents. 'upsert' returns an object with keys 'numberAffected' and, if an
                // insert happened, 'insertedId'.
                //
                // Otherwise, the semantics are exactly like other methods: they take
                // a callback as an optional last argument; if no callback is
                // provided, they block until the operation is complete, and throw an
                // exception if it fails; if a callback is provided, then they don't
                // necessarily block, and they call the callback when they finish with error and
                // result arguments.  (The insert method provides the document ID as its result;
                // update and remove provide the number of affected docs as the result; upsert
                // provides an object with numberAffected and maybe insertedId.)
                //
                // On the client, blocking is impossible, so if a callback
                // isn't provided, they just return immediately and any error
                // information is lost.
                //
                // There's one more tweak. On the client, if you don't provide a
                // callback, then if there is an error, a message will be logged with
                // Meteor._debug.
                //
                // The intent (though this is actually determined by the underlying
                // drivers) is that the operations should be done synchronously, not
                // generating their result until the database has acknowledged
                // them. In the future maybe we should provide a flag to turn this
                // off.

                /**
                 * @summary Insert a document in the collection.  Returns its unique _id.
                 * @locus Anywhere
                 * @method  insert
                 * @memberof Mongo.Collection
                 * @instance
                 * @param {Object} doc The document to insert. May not yet have an _id attribute, in which case Meteor will generate one for you.
                 * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the _id as the second.
                 */
                insert(doc, callback) {
                  // Make sure we were passed a document to insert
                  if (!doc) {
                    throw new Error("insert requires an argument");
                  } // Make a shallow clone of the document, preserving its prototype.


                  doc = Object.create(Object.getPrototypeOf(doc), Object.getOwnPropertyDescriptors(doc));

                  if ('_id' in doc) {
                    if (!doc._id || !(typeof doc._id === 'string' || doc._id instanceof Mongo.ObjectID)) {
                      throw new Error("Meteor requires document _id fields to be non-empty strings or ObjectIDs");
                    }
                  } else {
                    let generateId = true; // Don't generate the id if we're the client and the 'outermost' call
                    // This optimization saves us passing both the randomSeed and the id
                    // Passing both is redundant.

                    if (this._isRemoteCollection()) {
                      const enclosing = DDP._CurrentMethodInvocation.get();

                      if (!enclosing) {
                        generateId = false;
                      }
                    }

                    if (generateId) {
                      doc._id = this._makeNewID();
                    }
                  } // On inserts, always return the id that we generated; on all other
                  // operations, just return the result from the collection.


                  var chooseReturnValueFromCollectionResult = function (result) {
                    if (doc._id) {
                      return doc._id;
                    } // XXX what is this for??
                    // It's some iteraction between the callback to _callMutatorMethod and
                    // the return value conversion


                    doc._id = result;
                    return result;
                  };

                  const wrappedCallback = wrapCallback(callback, chooseReturnValueFromCollectionResult);

                  if (this._isRemoteCollection()) {
                    const result = this._callMutatorMethod("insert", [doc], wrappedCallback);

                    return chooseReturnValueFromCollectionResult(result);
                  } // it's my collection.  descend into the collection object
                  // and propagate any exception.


                  try {
                    // If the user provided a callback and the collection implements this
                    // operation asynchronously, then queryRet will be undefined, and the
                    // result will be returned through the callback instead.
                    const result = this._collection.insert(doc, wrappedCallback);

                    return chooseReturnValueFromCollectionResult(result);
                  } catch (e) {
                    if (callback) {
                      callback(e);
                      return null;
                    }

                    throw e;
                  }
                },

                /**
                 * @summary Modify one or more documents in the collection. Returns the number of matched documents.
                 * @locus Anywhere
                 * @method update
                 * @memberof Mongo.Collection
                 * @instance
                 * @param {MongoSelector} selector Specifies which documents to modify
                 * @param {MongoModifier} modifier Specifies how to modify the documents
                 * @param {Object} [options]
                 * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).
                 * @param {Boolean} options.upsert True to insert a document if no matching documents are found.
                 * @param {Array} options.arrayFilters Optional. Used in combination with MongoDB [filtered positional operator](https://docs.mongodb.com/manual/reference/operator/update/positional-filtered/) to specify which elements to modify in an array field.
                 * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.
                 */
                update(selector, modifier) {
                  for (var _len3 = arguments.length, optionsAndCallback = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
                    optionsAndCallback[_key3 - 2] = arguments[_key3];
                  }

                  const callback = popCallbackFromArgs(optionsAndCallback); // We've already popped off the callback, so we are left with an array
                  // of one or zero items

                  const options = _objectSpread({}, optionsAndCallback[0] || null);

                  let insertedId;

                  if (options && options.upsert) {
                    // set `insertedId` if absent.  `insertedId` is a Meteor extension.
                    if (options.insertedId) {
                      if (!(typeof options.insertedId === 'string' || options.insertedId instanceof Mongo.ObjectID)) throw new Error("insertedId must be string or ObjectID");
                      insertedId = options.insertedId;
                    } else if (!selector || !selector._id) {
                      insertedId = this._makeNewID();
                      options.generatedId = true;
                      options.insertedId = insertedId;
                    }
                  }

                  selector = Mongo.Collection._rewriteSelector(selector, {
                    fallbackId: insertedId
                  });
                  const wrappedCallback = wrapCallback(callback);

                  if (this._isRemoteCollection()) {
                    const args = [selector, modifier, options];
                    return this._callMutatorMethod("update", args, wrappedCallback);
                  } // it's my collection.  descend into the collection object
                  // and propagate any exception.


                  try {
                    // If the user provided a callback and the collection implements this
                    // operation asynchronously, then queryRet will be undefined, and the
                    // result will be returned through the callback instead.
                    return this._collection.update(selector, modifier, options, wrappedCallback);
                  } catch (e) {
                    if (callback) {
                      callback(e);
                      return null;
                    }

                    throw e;
                  }
                },

                /**
                 * @summary Remove documents from the collection
                 * @locus Anywhere
                 * @method remove
                 * @memberof Mongo.Collection
                 * @instance
                 * @param {MongoSelector} selector Specifies which documents to remove
                 * @param {Function} [callback] Optional.  If present, called with an error object as its argument.
                 */
                remove(selector, callback) {
                  selector = Mongo.Collection._rewriteSelector(selector);
                  const wrappedCallback = wrapCallback(callback);

                  if (this._isRemoteCollection()) {
                    return this._callMutatorMethod("remove", [selector], wrappedCallback);
                  } // it's my collection.  descend into the collection object
                  // and propagate any exception.


                  try {
                    // If the user provided a callback and the collection implements this
                    // operation asynchronously, then queryRet will be undefined, and the
                    // result will be returned through the callback instead.
                    return this._collection.remove(selector, wrappedCallback);
                  } catch (e) {
                    if (callback) {
                      callback(e);
                      return null;
                    }

                    throw e;
                  }
                },

                // Determine if this collection is simply a minimongo representation of a real
                // database on another server
                _isRemoteCollection() {
                  // XXX see #MeteorServerNull
                  return this._connection && this._connection !== Meteor.server;
                },

                /**
                 * @summary Modify one or more documents in the collection, or insert one if no matching documents were found. Returns an object with keys `numberAffected` (the number of documents modified)  and `insertedId` (the unique _id of the document that was inserted, if any).
                 * @locus Anywhere
                 * @method upsert
                 * @memberof Mongo.Collection
                 * @instance
                 * @param {MongoSelector} selector Specifies which documents to modify
                 * @param {MongoModifier} modifier Specifies how to modify the documents
                 * @param {Object} [options]
                 * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).
                 * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.
                 */
                upsert(selector, modifier, options, callback) {
                  if (!callback && typeof options === "function") {
                    callback = options;
                    options = {};
                  }

                  return this.update(selector, modifier, _objectSpread(_objectSpread({}, options), {}, {
                    _returnObject: true,
                    upsert: true
                  }), callback);
                },

                // We'll actually design an index API later. For now, we just pass through to
                // Mongo's, but make it synchronous.
                _ensureIndex(index, options) {
                  var self = this;
                  if (!self._collection._ensureIndex || !self._collection.createIndex) throw new Error("Can only call createIndex on server collections"); // TODO enable this message a release before we will remove this function
                  // import { Log } from 'meteor/logging';
                  // Log.debug(`_ensureIndex has been deprecated, please use the new 'createIndex' instead${options?.name ? `, index name: ${options.name}` : `, index: ${JSON.stringify(index)}`}`)

                  if (self._collection.createIndex) {
                    self._collection.createIndex(index, options);
                  } else {
                    self._collection._ensureIndex(index, options);
                  }
                },

                /**
                 * @summary Creates the specified index on the collection.
                 * @locus server
                 * @method createIndex
                 * @memberof Mongo.Collection
                 * @instance
                 * @param {Object} index A document that contains the field and value pairs where the field is the index key and the value describes the type of index for that field. For an ascending index on a field, specify a value of `1`; for descending index, specify a value of `-1`. Use `text` for text indexes.
                 * @param {Object} [options] All options are listed in [MongoDB documentation](https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/#std-label-ensureIndex-options)
                 * @param {String} options.name Name of the index
                 * @param {Boolean} options.unique Define that the index values must be unique, more at [MongoDB documentation](https://docs.mongodb.com/manual/core/index-unique/)
                 * @param {Boolean} options.sparse Define that the index is sparse, more at [MongoDB documentation](https://docs.mongodb.com/manual/core/index-sparse/)
                 */
                createIndex(index, options) {
                  var self = this;
                  if (!self._collection.createIndex) throw new Error("Can only call createIndex on server collections");

                  self._collection.createIndex(index, options);
                },

                _dropIndex(index) {
                  var self = this;
                  if (!self._collection._dropIndex) throw new Error("Can only call _dropIndex on server collections");

                  self._collection._dropIndex(index);
                },

                _dropCollection() {
                  var self = this;
                  if (!self._collection.dropCollection) throw new Error("Can only call _dropCollection on server collections");

                  self._collection.dropCollection();
                },

                _createCappedCollection(byteSize, maxDocuments) {
                  var self = this;
                  if (!self._collection._createCappedCollection) throw new Error("Can only call _createCappedCollection on server collections");

                  self._collection._createCappedCollection(byteSize, maxDocuments);
                },

                /**
                 * @summary Returns the [`Collection`](http://mongodb.github.io/node-mongodb-native/3.0/api/Collection.html) object corresponding to this collection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.
                 * @locus Server
                 * @memberof Mongo.Collection
                 * @instance
                 */
                rawCollection() {
                  var self = this;

                  if (!self._collection.rawCollection) {
                    throw new Error("Can only call rawCollection on server collections");
                  }

                  return self._collection.rawCollection();
                },

                /**
                 * @summary Returns the [`Db`](http://mongodb.github.io/node-mongodb-native/3.0/api/Db.html) object corresponding to this collection's database connection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.
                 * @locus Server
                 * @memberof Mongo.Collection
                 * @instance
                 */
                rawDatabase() {
                  var self = this;

                  if (!(self._driver.mongo && self._driver.mongo.db)) {
                    throw new Error("Can only call rawDatabase on server collections");
                  }

                  return self._driver.mongo.db;
                }

              }); // Convert the callback to not return a result if there is an error

              function wrapCallback(callback, convertResult) {
                return callback && function (error, result) {
                  if (error) {
                    callback(error);
                  } else if (typeof convertResult === "function") {
                    callback(error, convertResult(result));
                  } else {
                    callback(error, result);
                  }
                };
              }
              /**
               * @summary Create a Mongo-style `ObjectID`.  If you don't specify a `hexString`, the `ObjectID` will generated randomly (not using MongoDB's ID construction rules).
               * @locus Anywhere
               * @class
               * @param {String} [hexString] Optional.  The 24-character hexadecimal contents of the ObjectID to create
               */

              Mongo.ObjectID = MongoID.ObjectID;
              /**
               * @summary To create a cursor, use find. To access the documents in a cursor, use forEach, map, or fetch.
               * @class
               * @instanceName cursor
               */

              Mongo.Cursor = LocalCollection.Cursor;
              /**
               * @deprecated in 0.9.1
               */

              Mongo.Collection.Cursor = Mongo.Cursor;
              /**
               * @deprecated in 0.9.1
               */

              Mongo.Collection.ObjectID = Mongo.ObjectID;
              /**
               * @deprecated in 0.9.1
               */

              Meteor.Collection = Mongo.Collection; // Allow deny stuff is now in the allow-deny package

              Object.assign(Meteor.Collection.prototype, AllowDeny.CollectionPrototype);

              function popCallbackFromArgs(args) {
                // Pull off any callback (or perhaps a 'callback' variable that was passed
                // in undefined, like how 'upsert' does it).
                if (args.length && (args[args.length - 1] === undefined || args[args.length - 1] instanceof Function)) {
                  return args.pop();
                }
              }
            }.call(this, _module2);
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  _require2("/node_modules/meteor/mongo/local_collection_driver.js");
  _require2("/node_modules/meteor/mongo/collection.js");

  /* Exports */
  Package._define("mongo", {
    Mongo: Mongo
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;

  /* Package-scope variables */
  var ReactiveVar;

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                              //
    // packages/reactive-var/reactive-var.js                                                                        //
    //                                                                                                              //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    /*
     * ## [new] ReactiveVar(initialValue, [equalsFunc])
     *
     * A ReactiveVar holds a single value that can be get and set,
     * such that calling `set` will invalidate any Computations that
     * called `get`, according to the usual contract for reactive
     * data sources.
     *
     * A ReactiveVar is much like a Session variable -- compare `foo.get()`
     * to `Session.get("foo")` -- but it doesn't have a global name and isn't
     * automatically migrated across hot code pushes.  Also, while Session
     * variables can only hold JSON or EJSON, ReactiveVars can hold any value.
     *
     * An important property of ReactiveVars, which is sometimes the reason
     * to use one, is that setting the value to the same value as before has
     * no effect, meaning ReactiveVars can be used to absorb extra
     * invalidations that wouldn't serve a purpose.  However, by default,
     * ReactiveVars are extremely conservative about what changes they
     * absorb.  Calling `set` with an object argument will *always* trigger
     * invalidations, because even if the new value is `===` the old value,
     * the object may have been mutated.  You can change the default behavior
     * by passing a function of two arguments, `oldValue` and `newValue`,
     * to the constructor as `equalsFunc`.
     *
     * This class is extremely basic right now, but the idea is to evolve
     * it into the ReactiveVar of Geoff's Lickable Forms proposal.
     */

    /**
     * @class 
     * @instanceName reactiveVar
     * @summary Constructor for a ReactiveVar, which represents a single reactive variable.
     * @locus Client
     * @param {Any} initialValue The initial value to set.  `equalsFunc` is ignored when setting the initial value.
     * @param {Function} [equalsFunc] Optional.  A function of two arguments, called on the old value and the new value whenever the ReactiveVar is set.  If it returns true, no set is performed.  If omitted, the default `equalsFunc` returns true if its arguments are `===` and are of type number, boolean, string, undefined, or null.
     */
    ReactiveVar = function (initialValue, equalsFunc) {
      if (!(this instanceof ReactiveVar))
        // called without `new`
        return new ReactiveVar(initialValue, equalsFunc);

      this.curValue = initialValue;
      this.equalsFunc = equalsFunc;
      this.dep = new Tracker.Dependency();
    };

    ReactiveVar._isEqual = function (oldValue, newValue) {
      var a = oldValue,
          b = newValue;
      // Two values are "equal" here if they are `===` and are
      // number, boolean, string, undefined, or null.
      if (a !== b) return false;else return !a || typeof a === 'number' || typeof a === 'boolean' || typeof a === 'string';
    };

    /**
     * @summary Returns the current value of the ReactiveVar, establishing a reactive dependency.
     * @locus Client
     */
    ReactiveVar.prototype.get = function () {
      if (Tracker.active) this.dep.depend();

      return this.curValue;
    };

    /**
     * @summary Sets the current value of the ReactiveVar, invalidating the Computations that called `get` if `newValue` is different from the old value.
     * @locus Client
     * @param {Any} newValue
     */
    ReactiveVar.prototype.set = function (newValue) {
      var oldValue = this.curValue;

      if ((this.equalsFunc || ReactiveVar._isEqual)(oldValue, newValue))
        // value is same as last time
        return;

      this.curValue = newValue;
      this.dep.changed();
    };

    ReactiveVar.prototype.toString = function () {
      return 'ReactiveVar{' + this.get() + '}';
    };

    ReactiveVar.prototype._numListeners = function () {
      // Tests want to know.
      // Accesses a private field of Tracker.Dependency.
      var count = 0;
      for (var id in this.dep._dependentsById) count++;
      return count;
    };

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("reactive-var", {
    ReactiveVar: ReactiveVar
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("reywood:publish-composite");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Package-scope variables */
  var _exports, _;

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                       //
    // packages/underscore/pre.js                                                                            //
    //                                                                                                       //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Define an object named exports. This will cause underscore.js to put `_` as a
    // field on it, instead of in the global namespace.  See also post.js.
    _exports = {};

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                       //
    // packages/underscore/underscore.js                                                                     //
    //                                                                                                       //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    //     Underscore.js 1.5.2
    //     http://underscorejs.org
    //     (c) 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
    //     Underscore may be freely distributed under the MIT license.

    (function () {

      // Baseline setup
      // --------------

      // Establish the root object, `window` in the browser, or `exports` on the server.
      var root = this;

      // Save the previous value of the `_` variable.
      var previousUnderscore = root._;

      // Establish the object that gets returned to break out of a loop iteration.
      var breaker = {};

      // Save bytes in the minified (but not gzipped) version:
      var ArrayProto = Array.prototype,
          ObjProto = Object.prototype,
          FuncProto = Function.prototype;

      // Create quick reference variables for speed access to core prototypes.
      var push = ArrayProto.push,
          slice = ArrayProto.slice,
          concat = ArrayProto.concat,
          toString = ObjProto.toString,
          hasOwnProperty = ObjProto.hasOwnProperty;

      // All **ECMAScript 5** native function implementations that we hope to use
      // are declared here.
      var nativeForEach = ArrayProto.forEach,
          nativeMap = ArrayProto.map,
          nativeReduce = ArrayProto.reduce,
          nativeReduceRight = ArrayProto.reduceRight,
          nativeFilter = ArrayProto.filter,
          nativeEvery = ArrayProto.every,
          nativeSome = ArrayProto.some,
          nativeIndexOf = ArrayProto.indexOf,
          nativeLastIndexOf = ArrayProto.lastIndexOf,
          nativeIsArray = Array.isArray,
          nativeKeys = Object.keys,
          nativeBind = FuncProto.bind;

      // Create a safe reference to the Underscore object for use below.
      var _ = function (obj) {
        if (obj instanceof _) return obj;
        if (!(this instanceof _)) return new _(obj);
        this._wrapped = obj;
      };

      // Export the Underscore object for **Node.js**, with
      // backwards-compatibility for the old `require()` API. If we're in
      // the browser, add `_` as a global object via a string identifier,
      // for Closure Compiler "advanced" mode.
      if (typeof _exports !== 'undefined') {
        if (typeof module !== 'undefined' && module.exports) {
          _exports = module.exports = _;
        }
        _exports._ = _;
      } else {
        root._ = _;
      }

      // Current version.
      _.VERSION = '1.5.2';

      // Collection Functions
      // --------------------

      // METEOR CHANGE: Define _isArguments instead of depending on
      // _.isArguments which is defined using each. In looksLikeArray
      // (which each depends on), we then use _isArguments instead of
      // _.isArguments.
      var _isArguments = function (obj) {
        return toString.call(obj) === '[object Arguments]';
      };
      // Define a fallback version of the method in browsers (ahem, IE), where
      // there isn't any inspectable "Arguments" type.
      if (!_isArguments(arguments)) {
        _isArguments = function (obj) {
          return !!(obj && hasOwnProperty.call(obj, 'callee') && typeof obj.callee === 'function');
        };
      }

      // METEOR CHANGE: _.each({length: 5}) should be treated like an object, not an
      // array. This looksLikeArray function is introduced by Meteor, and replaces
      // all instances of `obj.length === +obj.length`.
      // https://github.com/meteor/meteor/issues/594
      // https://github.com/jashkenas/underscore/issues/770
      var looksLikeArray = function (obj) {
        return obj.length === +obj.length
        // _.isArguments not yet necessarily defined here
        && (_isArguments(obj) || obj.constructor !== Object);
      };

      // The cornerstone, an `each` implementation, aka `forEach`.
      // Handles objects with the built-in `forEach`, arrays, and raw objects.
      // Delegates to **ECMAScript 5**'s native `forEach` if available.
      var each = _.each = _.forEach = function (obj, iterator, context) {
        if (obj == null) return;
        if (nativeForEach && obj.forEach === nativeForEach) {
          obj.forEach(iterator, context);
        } else if (looksLikeArray(obj)) {
          for (var i = 0, length = obj.length; i < length; i++) {
            if (iterator.call(context, obj[i], i, obj) === breaker) return;
          }
        } else {
          var keys = _.keys(obj);
          for (var i = 0, length = keys.length; i < length; i++) {
            if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;
          }
        }
      };

      // Return the results of applying the iterator to each element.
      // Delegates to **ECMAScript 5**'s native `map` if available.
      _.map = _.collect = function (obj, iterator, context) {
        var results = [];
        if (obj == null) return results;
        if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
        each(obj, function (value, index, list) {
          results.push(iterator.call(context, value, index, list));
        });
        return results;
      };

      var reduceError = 'Reduce of empty array with no initial value';

      // **Reduce** builds up a single result from a list of values, aka `inject`,
      // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.
      _.reduce = _.foldl = _.inject = function (obj, iterator, memo, context) {
        var initial = arguments.length > 2;
        if (obj == null) obj = [];
        if (nativeReduce && obj.reduce === nativeReduce) {
          if (context) iterator = _.bind(iterator, context);
          return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
        }
        each(obj, function (value, index, list) {
          if (!initial) {
            memo = value;
            initial = true;
          } else {
            memo = iterator.call(context, memo, value, index, list);
          }
        });
        if (!initial) throw new TypeError(reduceError);
        return memo;
      };

      // The right-associative version of reduce, also known as `foldr`.
      // Delegates to **ECMAScript 5**'s native `reduceRight` if available.
      _.reduceRight = _.foldr = function (obj, iterator, memo, context) {
        var initial = arguments.length > 2;
        if (obj == null) obj = [];
        if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
          if (context) iterator = _.bind(iterator, context);
          return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
        }
        var length = obj.length;
        if (!looksLikeArray(obj)) {
          var keys = _.keys(obj);
          length = keys.length;
        }
        each(obj, function (value, index, list) {
          index = keys ? keys[--length] : --length;
          if (!initial) {
            memo = obj[index];
            initial = true;
          } else {
            memo = iterator.call(context, memo, obj[index], index, list);
          }
        });
        if (!initial) throw new TypeError(reduceError);
        return memo;
      };

      // Return the first value which passes a truth test. Aliased as `detect`.
      _.find = _.detect = function (obj, iterator, context) {
        var result;
        any(obj, function (value, index, list) {
          if (iterator.call(context, value, index, list)) {
            result = value;
            return true;
          }
        });
        return result;
      };

      // Return all the elements that pass a truth test.
      // Delegates to **ECMAScript 5**'s native `filter` if available.
      // Aliased as `select`.
      _.filter = _.select = function (obj, iterator, context) {
        var results = [];
        if (obj == null) return results;
        if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);
        each(obj, function (value, index, list) {
          if (iterator.call(context, value, index, list)) results.push(value);
        });
        return results;
      };

      // Return all the elements for which a truth test fails.
      _.reject = function (obj, iterator, context) {
        return _.filter(obj, function (value, index, list) {
          return !iterator.call(context, value, index, list);
        }, context);
      };

      // Determine whether all of the elements match a truth test.
      // Delegates to **ECMAScript 5**'s native `every` if available.
      // Aliased as `all`.
      _.every = _.all = function (obj, iterator, context) {
        iterator || (iterator = _.identity);
        var result = true;
        if (obj == null) return result;
        if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);
        each(obj, function (value, index, list) {
          if (!(result = result && iterator.call(context, value, index, list))) return breaker;
        });
        return !!result;
      };

      // Determine if at least one element in the object matches a truth test.
      // Delegates to **ECMAScript 5**'s native `some` if available.
      // Aliased as `any`.
      var any = _.some = _.any = function (obj, iterator, context) {
        iterator || (iterator = _.identity);
        var result = false;
        if (obj == null) return result;
        if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);
        each(obj, function (value, index, list) {
          if (result || (result = iterator.call(context, value, index, list))) return breaker;
        });
        return !!result;
      };

      // Determine if the array or object contains a given value (using `===`).
      // Aliased as `include`.
      _.contains = _.include = function (obj, target) {
        if (obj == null) return false;
        if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
        return any(obj, function (value) {
          return value === target;
        });
      };

      // Invoke a method (with arguments) on every item in a collection.
      _.invoke = function (obj, method) {
        var args = slice.call(arguments, 2);
        var isFunc = _.isFunction(method);
        return _.map(obj, function (value) {
          return (isFunc ? method : value[method]).apply(value, args);
        });
      };

      // Convenience version of a common use case of `map`: fetching a property.
      _.pluck = function (obj, key) {
        return _.map(obj, function (value) {
          return value[key];
        });
      };

      // Convenience version of a common use case of `filter`: selecting only objects
      // containing specific `key:value` pairs.
      _.where = function (obj, attrs, first) {
        if (_.isEmpty(attrs)) return first ? void 0 : [];
        return _[first ? 'find' : 'filter'](obj, function (value) {
          for (var key in attrs) {
            if (attrs[key] !== value[key]) return false;
          }
          return true;
        });
      };

      // Convenience version of a common use case of `find`: getting the first object
      // containing specific `key:value` pairs.
      _.findWhere = function (obj, attrs) {
        return _.where(obj, attrs, true);
      };

      // Return the maximum element or (element-based computation).
      // Can't optimize arrays of integers longer than 65,535 elements.
      // See [WebKit Bug 80797](https://bugs.webkit.org/show_bug.cgi?id=80797)
      _.max = function (obj, iterator, context) {
        if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
          return Math.max.apply(Math, obj);
        }
        if (!iterator && _.isEmpty(obj)) return -Infinity;
        var result = { computed: -Infinity, value: -Infinity };
        each(obj, function (value, index, list) {
          var computed = iterator ? iterator.call(context, value, index, list) : value;
          computed > result.computed && (result = { value: value, computed: computed });
        });
        return result.value;
      };

      // Return the minimum element (or element-based computation).
      _.min = function (obj, iterator, context) {
        if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
          return Math.min.apply(Math, obj);
        }
        if (!iterator && _.isEmpty(obj)) return Infinity;
        var result = { computed: Infinity, value: Infinity };
        each(obj, function (value, index, list) {
          var computed = iterator ? iterator.call(context, value, index, list) : value;
          computed < result.computed && (result = { value: value, computed: computed });
        });
        return result.value;
      };

      // Shuffle an array, using the modern version of the 
      // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
      _.shuffle = function (obj) {
        var rand;
        var index = 0;
        var shuffled = [];
        each(obj, function (value) {
          rand = _.random(index++);
          shuffled[index - 1] = shuffled[rand];
          shuffled[rand] = value;
        });
        return shuffled;
      };

      // Sample **n** random values from an array.
      // If **n** is not specified, returns a single random element from the array.
      // The internal `guard` argument allows it to work with `map`.
      _.sample = function (obj, n, guard) {
        if (arguments.length < 2 || guard) {
          return obj[_.random(obj.length - 1)];
        }
        return _.shuffle(obj).slice(0, Math.max(0, n));
      };

      // An internal function to generate lookup iterators.
      var lookupIterator = function (value) {
        return _.isFunction(value) ? value : function (obj) {
          return obj[value];
        };
      };

      // Sort the object's values by a criterion produced by an iterator.
      _.sortBy = function (obj, value, context) {
        var iterator = lookupIterator(value);
        return _.pluck(_.map(obj, function (value, index, list) {
          return {
            value: value,
            index: index,
            criteria: iterator.call(context, value, index, list)
          };
        }).sort(function (left, right) {
          var a = left.criteria;
          var b = right.criteria;
          if (a !== b) {
            if (a > b || a === void 0) return 1;
            if (a < b || b === void 0) return -1;
          }
          return left.index - right.index;
        }), 'value');
      };

      // An internal function used for aggregate "group by" operations.
      var group = function (behavior) {
        return function (obj, value, context) {
          var result = {};
          var iterator = value == null ? _.identity : lookupIterator(value);
          each(obj, function (value, index) {
            var key = iterator.call(context, value, index, obj);
            behavior(result, key, value);
          });
          return result;
        };
      };

      // Groups the object's values by a criterion. Pass either a string attribute
      // to group by, or a function that returns the criterion.
      _.groupBy = group(function (result, key, value) {
        (_.has(result, key) ? result[key] : result[key] = []).push(value);
      });

      // Indexes the object's values by a criterion, similar to `groupBy`, but for
      // when you know that your index values will be unique.
      _.indexBy = group(function (result, key, value) {
        result[key] = value;
      });

      // Counts instances of an object that group by a certain criterion. Pass
      // either a string attribute to count by, or a function that returns the
      // criterion.
      _.countBy = group(function (result, key) {
        _.has(result, key) ? result[key]++ : result[key] = 1;
      });

      // Use a comparator function to figure out the smallest index at which
      // an object should be inserted so as to maintain order. Uses binary search.
      _.sortedIndex = function (array, obj, iterator, context) {
        iterator = iterator == null ? _.identity : lookupIterator(iterator);
        var value = iterator.call(context, obj);
        var low = 0,
            high = array.length;
        while (low < high) {
          var mid = low + high >>> 1;
          iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
        }
        return low;
      };

      // Safely create a real, live array from anything iterable.
      _.toArray = function (obj) {
        if (!obj) return [];
        if (_.isArray(obj)) return slice.call(obj);
        if (looksLikeArray(obj)) return _.map(obj, _.identity);
        return _.values(obj);
      };

      // Return the number of elements in an object.
      _.size = function (obj) {
        if (obj == null) return 0;
        return looksLikeArray(obj) ? obj.length : _.keys(obj).length;
      };

      // Array Functions
      // ---------------

      // Get the first element of an array. Passing **n** will return the first N
      // values in the array. Aliased as `head` and `take`. The **guard** check
      // allows it to work with `_.map`.
      _.first = _.head = _.take = function (array, n, guard) {
        if (array == null) return void 0;
        return n == null || guard ? array[0] : slice.call(array, 0, n);
      };

      // Returns everything but the last entry of the array. Especially useful on
      // the arguments object. Passing **n** will return all the values in
      // the array, excluding the last N. The **guard** check allows it to work with
      // `_.map`.
      _.initial = function (array, n, guard) {
        return slice.call(array, 0, array.length - (n == null || guard ? 1 : n));
      };

      // Get the last element of an array. Passing **n** will return the last N
      // values in the array. The **guard** check allows it to work with `_.map`.
      _.last = function (array, n, guard) {
        if (array == null) return void 0;
        if (n == null || guard) {
          return array[array.length - 1];
        } else {
          return slice.call(array, Math.max(array.length - n, 0));
        }
      };

      // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
      // Especially useful on the arguments object. Passing an **n** will return
      // the rest N values in the array. The **guard**
      // check allows it to work with `_.map`.
      _.rest = _.tail = _.drop = function (array, n, guard) {
        return slice.call(array, n == null || guard ? 1 : n);
      };

      // Trim out all falsy values from an array.
      _.compact = function (array) {
        return _.filter(array, _.identity);
      };

      // Internal implementation of a recursive `flatten` function.
      var flatten = function (input, shallow, output) {
        if (shallow && _.every(input, _.isArray)) {
          return concat.apply(output, input);
        }
        each(input, function (value) {
          if (_.isArray(value) || _.isArguments(value)) {
            shallow ? push.apply(output, value) : flatten(value, shallow, output);
          } else {
            output.push(value);
          }
        });
        return output;
      };

      // Flatten out an array, either recursively (by default), or just one level.
      _.flatten = function (array, shallow) {
        return flatten(array, shallow, []);
      };

      // Return a version of the array that does not contain the specified value(s).
      _.without = function (array) {
        return _.difference(array, slice.call(arguments, 1));
      };

      // Produce a duplicate-free version of the array. If the array has already
      // been sorted, you have the option of using a faster algorithm.
      // Aliased as `unique`.
      _.uniq = _.unique = function (array, isSorted, iterator, context) {
        if (_.isFunction(isSorted)) {
          context = iterator;
          iterator = isSorted;
          isSorted = false;
        }
        var initial = iterator ? _.map(array, iterator, context) : array;
        var results = [];
        var seen = [];
        each(initial, function (value, index) {
          if (isSorted ? !index || seen[seen.length - 1] !== value : !_.contains(seen, value)) {
            seen.push(value);
            results.push(array[index]);
          }
        });
        return results;
      };

      // Produce an array that contains the union: each distinct element from all of
      // the passed-in arrays.
      _.union = function () {
        return _.uniq(_.flatten(arguments, true));
      };

      // Produce an array that contains every item shared between all the
      // passed-in arrays.
      _.intersection = function (array) {
        var rest = slice.call(arguments, 1);
        return _.filter(_.uniq(array), function (item) {
          return _.every(rest, function (other) {
            return _.indexOf(other, item) >= 0;
          });
        });
      };

      // Take the difference between one array and a number of other arrays.
      // Only the elements present in just the first array will remain.
      _.difference = function (array) {
        var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
        return _.filter(array, function (value) {
          return !_.contains(rest, value);
        });
      };

      // Zip together multiple lists into a single array -- elements that share
      // an index go together.
      _.zip = function () {
        var length = _.max(_.pluck(arguments, "length").concat(0));
        var results = new Array(length);
        for (var i = 0; i < length; i++) {
          results[i] = _.pluck(arguments, '' + i);
        }
        return results;
      };

      // Converts lists into objects. Pass either a single array of `[key, value]`
      // pairs, or two parallel arrays of the same length -- one of keys, and one of
      // the corresponding values.
      _.object = function (list, values) {
        if (list == null) return {};
        var result = {};
        for (var i = 0, length = list.length; i < length; i++) {
          if (values) {
            result[list[i]] = values[i];
          } else {
            result[list[i][0]] = list[i][1];
          }
        }
        return result;
      };

      // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),
      // we need this function. Return the position of the first occurrence of an
      // item in an array, or -1 if the item is not included in the array.
      // Delegates to **ECMAScript 5**'s native `indexOf` if available.
      // If the array is large and already in sort order, pass `true`
      // for **isSorted** to use binary search.
      _.indexOf = function (array, item, isSorted) {
        if (array == null) return -1;
        var i = 0,
            length = array.length;
        if (isSorted) {
          if (typeof isSorted == 'number') {
            i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;
          } else {
            i = _.sortedIndex(array, item);
            return array[i] === item ? i : -1;
          }
        }
        if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);
        for (; i < length; i++) if (array[i] === item) return i;
        return -1;
      };

      // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.
      _.lastIndexOf = function (array, item, from) {
        if (array == null) return -1;
        var hasIndex = from != null;
        if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
          return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);
        }
        var i = hasIndex ? from : array.length;
        while (i--) if (array[i] === item) return i;
        return -1;
      };

      // Generate an integer Array containing an arithmetic progression. A port of
      // the native Python `range()` function. See
      // [the Python documentation](http://docs.python.org/library/functions.html#range).
      _.range = function (start, stop, step) {
        if (arguments.length <= 1) {
          stop = start || 0;
          start = 0;
        }
        step = arguments[2] || 1;

        var length = Math.max(Math.ceil((stop - start) / step), 0);
        var idx = 0;
        var range = new Array(length);

        while (idx < length) {
          range[idx++] = start;
          start += step;
        }

        return range;
      };

      // Function (ahem) Functions
      // ------------------

      // Reusable constructor function for prototype setting.
      var ctor = function () {};

      // Create a function bound to a given object (assigning `this`, and arguments,
      // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
      // available.
      _.bind = function (func, context) {
        var args, bound;
        if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
        if (!_.isFunction(func)) throw new TypeError();
        args = slice.call(arguments, 2);
        return bound = function () {
          if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
          ctor.prototype = func.prototype;
          var self = new ctor();
          ctor.prototype = null;
          var result = func.apply(self, args.concat(slice.call(arguments)));
          if (Object(result) === result) return result;
          return self;
        };
      };

      // Partially apply a function by creating a version that has had some of its
      // arguments pre-filled, without changing its dynamic `this` context.
      _.partial = function (func) {
        var args = slice.call(arguments, 1);
        return function () {
          return func.apply(this, args.concat(slice.call(arguments)));
        };
      };

      // Bind all of an object's methods to that object. Useful for ensuring that
      // all callbacks defined on an object belong to it.
      _.bindAll = function (obj) {
        var funcs = slice.call(arguments, 1);
        if (funcs.length === 0) throw new Error("bindAll must be passed function names");
        each(funcs, function (f) {
          obj[f] = _.bind(obj[f], obj);
        });
        return obj;
      };

      // Memoize an expensive function by storing its results.
      _.memoize = function (func, hasher) {
        var memo = {};
        hasher || (hasher = _.identity);
        return function () {
          var key = hasher.apply(this, arguments);
          return _.has(memo, key) ? memo[key] : memo[key] = func.apply(this, arguments);
        };
      };

      // Delays a function for the given number of milliseconds, and then calls
      // it with the arguments supplied.
      _.delay = function (func, wait) {
        var args = slice.call(arguments, 2);
        return setTimeout(function () {
          return func.apply(null, args);
        }, wait);
      };

      // Defers a function, scheduling it to run after the current call stack has
      // cleared.
      _.defer = function (func) {
        return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
      };

      // Returns a function, that, when invoked, will only be triggered at most once
      // during a given window of time. Normally, the throttled function will run
      // as much as it can, without ever going more than once per `wait` duration;
      // but if you'd like to disable the execution on the leading edge, pass
      // `{leading: false}`. To disable execution on the trailing edge, ditto.
      _.throttle = function (func, wait, options) {
        var context, args, result;
        var timeout = null;
        var previous = 0;
        options || (options = {});
        var later = function () {
          previous = options.leading === false ? 0 : new Date();
          timeout = null;
          result = func.apply(context, args);
        };
        return function () {
          var now = new Date();
          if (!previous && options.leading === false) previous = now;
          var remaining = wait - (now - previous);
          context = this;
          args = arguments;
          if (remaining <= 0) {
            clearTimeout(timeout);
            timeout = null;
            previous = now;
            result = func.apply(context, args);
          } else if (!timeout && options.trailing !== false) {
            timeout = setTimeout(later, remaining);
          }
          return result;
        };
      };

      // Returns a function, that, as long as it continues to be invoked, will not
      // be triggered. The function will be called after it stops being called for
      // N milliseconds. If `immediate` is passed, trigger the function on the
      // leading edge, instead of the trailing.
      _.debounce = function (func, wait, immediate) {
        var timeout, args, context, timestamp, result;
        return function () {
          context = this;
          args = arguments;
          timestamp = new Date();
          var later = function () {
            var last = new Date() - timestamp;
            if (last < wait) {
              timeout = setTimeout(later, wait - last);
            } else {
              timeout = null;
              if (!immediate) result = func.apply(context, args);
            }
          };
          var callNow = immediate && !timeout;
          if (!timeout) {
            timeout = setTimeout(later, wait);
          }
          if (callNow) result = func.apply(context, args);
          return result;
        };
      };

      // Returns a function that will be executed at most one time, no matter how
      // often you call it. Useful for lazy initialization.
      _.once = function (func) {
        var ran = false,
            memo;
        return function () {
          if (ran) return memo;
          ran = true;
          memo = func.apply(this, arguments);
          func = null;
          return memo;
        };
      };

      // Returns the first function passed as an argument to the second,
      // allowing you to adjust arguments, run code before and after, and
      // conditionally execute the original function.
      _.wrap = function (func, wrapper) {
        return function () {
          var args = [func];
          push.apply(args, arguments);
          return wrapper.apply(this, args);
        };
      };

      // Returns a function that is the composition of a list of functions, each
      // consuming the return value of the function that follows.
      _.compose = function () {
        var funcs = arguments;
        return function () {
          var args = arguments;
          for (var i = funcs.length - 1; i >= 0; i--) {
            args = [funcs[i].apply(this, args)];
          }
          return args[0];
        };
      };

      // Returns a function that will only be executed after being called N times.
      _.after = function (times, func) {
        return function () {
          if (--times < 1) {
            return func.apply(this, arguments);
          }
        };
      };

      // Object Functions
      // ----------------

      // Retrieve the names of an object's properties.
      // Delegates to **ECMAScript 5**'s native `Object.keys`
      _.keys = nativeKeys || function (obj) {
        if (obj !== Object(obj)) throw new TypeError('Invalid object');
        var keys = [];
        for (var key in obj) if (_.has(obj, key)) keys.push(key);
        return keys;
      };

      // Retrieve the values of an object's properties.
      _.values = function (obj) {
        var keys = _.keys(obj);
        var length = keys.length;
        var values = new Array(length);
        for (var i = 0; i < length; i++) {
          values[i] = obj[keys[i]];
        }
        return values;
      };

      // Convert an object into a list of `[key, value]` pairs.
      _.pairs = function (obj) {
        var keys = _.keys(obj);
        var length = keys.length;
        var pairs = new Array(length);
        for (var i = 0; i < length; i++) {
          pairs[i] = [keys[i], obj[keys[i]]];
        }
        return pairs;
      };

      // Invert the keys and values of an object. The values must be serializable.
      _.invert = function (obj) {
        var result = {};
        var keys = _.keys(obj);
        for (var i = 0, length = keys.length; i < length; i++) {
          result[obj[keys[i]]] = keys[i];
        }
        return result;
      };

      // Return a sorted list of the function names available on the object.
      // Aliased as `methods`
      _.functions = _.methods = function (obj) {
        var names = [];
        for (var key in obj) {
          if (_.isFunction(obj[key])) names.push(key);
        }
        return names.sort();
      };

      // Extend a given object with all the properties in passed-in object(s).
      _.extend = function (obj) {
        each(slice.call(arguments, 1), function (source) {
          if (source) {
            for (var prop in source) {
              obj[prop] = source[prop];
            }
          }
        });
        return obj;
      };

      // Return a copy of the object only containing the whitelisted properties.
      _.pick = function (obj) {
        var copy = {};
        var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
        each(keys, function (key) {
          if (key in obj) copy[key] = obj[key];
        });
        return copy;
      };

      // Return a copy of the object without the blacklisted properties.
      _.omit = function (obj) {
        var copy = {};
        var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
        for (var key in obj) {
          if (!_.contains(keys, key)) copy[key] = obj[key];
        }
        return copy;
      };

      // Fill in a given object with default properties.
      _.defaults = function (obj) {
        each(slice.call(arguments, 1), function (source) {
          if (source) {
            for (var prop in source) {
              if (obj[prop] === void 0) obj[prop] = source[prop];
            }
          }
        });
        return obj;
      };

      // Create a (shallow-cloned) duplicate of an object.
      _.clone = function (obj) {
        if (!_.isObject(obj)) return obj;
        return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
      };

      // Invokes interceptor with the obj, and then returns obj.
      // The primary purpose of this method is to "tap into" a method chain, in
      // order to perform operations on intermediate results within the chain.
      _.tap = function (obj, interceptor) {
        interceptor(obj);
        return obj;
      };

      // Internal recursive comparison function for `isEqual`.
      var eq = function (a, b, aStack, bStack) {
        // Identical objects are equal. `0 === -0`, but they aren't identical.
        // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
        if (a === b) return a !== 0 || 1 / a == 1 / b;
        // A strict comparison is necessary because `null == undefined`.
        if (a == null || b == null) return a === b;
        // Unwrap any wrapped objects.
        if (a instanceof _) a = a._wrapped;
        if (b instanceof _) b = b._wrapped;
        // Compare `[[Class]]` names.
        var className = toString.call(a);
        if (className != toString.call(b)) return false;
        switch (className) {
          // Strings, numbers, dates, and booleans are compared by value.
          case '[object String]':
            // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
            // equivalent to `new String("5")`.
            return a == String(b);
          case '[object Number]':
            // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for
            // other numeric values.
            return a != +a ? b != +b : a == 0 ? 1 / a == 1 / b : a == +b;
          case '[object Date]':
          case '[object Boolean]':
            // Coerce dates and booleans to numeric primitive values. Dates are compared by their
            // millisecond representations. Note that invalid dates with millisecond representations
            // of `NaN` are not equivalent.
            return +a == +b;
          // RegExps are compared by their source patterns and flags.
          case '[object RegExp]':
            return a.source == b.source && a.global == b.global && a.multiline == b.multiline && a.ignoreCase == b.ignoreCase;
        }
        if (typeof a != 'object' || typeof b != 'object') return false;
        // Assume equality for cyclic structures. The algorithm for detecting cyclic
        // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
        var length = aStack.length;
        while (length--) {
          // Linear search. Performance is inversely proportional to the number of
          // unique nested structures.
          if (aStack[length] == a) return bStack[length] == b;
        }
        // Objects with different constructors are not equivalent, but `Object`s
        // from different frames are.
        var aCtor = a.constructor,
            bCtor = b.constructor;
        if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor instanceof bCtor)) {
          return false;
        }
        // Add the first object to the stack of traversed objects.
        aStack.push(a);
        bStack.push(b);
        var size = 0,
            result = true;
        // Recursively compare objects and arrays.
        if (className == '[object Array]') {
          // Compare array lengths to determine if a deep comparison is necessary.
          size = a.length;
          result = size == b.length;
          if (result) {
            // Deep compare the contents, ignoring non-numeric properties.
            while (size--) {
              if (!(result = eq(a[size], b[size], aStack, bStack))) break;
            }
          }
        } else {
          // Deep compare objects.
          for (var key in a) {
            if (_.has(a, key)) {
              // Count the expected number of properties.
              size++;
              // Deep compare each member.
              if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
            }
          }
          // Ensure that both objects contain the same number of properties.
          if (result) {
            for (key in b) {
              if (_.has(b, key) && !size--) break;
            }
            result = !size;
          }
        }
        // Remove the first object from the stack of traversed objects.
        aStack.pop();
        bStack.pop();
        return result;
      };

      // Perform a deep comparison to check if two objects are equal.
      _.isEqual = function (a, b) {
        return eq(a, b, [], []);
      };

      // Is a given array, string, or object empty?
      // An "empty" object has no enumerable own-properties.
      _.isEmpty = function (obj) {
        if (obj == null) return true;
        if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
        for (var key in obj) if (_.has(obj, key)) return false;
        return true;
      };

      // Is a given value a DOM element?
      _.isElement = function (obj) {
        return !!(obj && obj.nodeType === 1);
      };

      // Is a given value an array?
      // Delegates to ECMA5's native Array.isArray
      _.isArray = nativeIsArray || function (obj) {
        return toString.call(obj) == '[object Array]';
      };

      // Is a given variable an object?
      _.isObject = function (obj) {
        return obj === Object(obj);
      };

      // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
      each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function (name) {
        _['is' + name] = function (obj) {
          return toString.call(obj) == '[object ' + name + ']';
        };
      });

      // Define a fallback version of the method in browsers (ahem, IE), where
      // there isn't any inspectable "Arguments" type.
      if (!_.isArguments(arguments)) {
        _.isArguments = function (obj) {
          return !!(obj && _.has(obj, 'callee'));
        };
      }

      // Optimize `isFunction` if appropriate.
      if (typeof /./ !== 'function') {
        _.isFunction = function (obj) {
          return typeof obj === 'function';
        };
      }

      // Is a given object a finite number?
      _.isFinite = function (obj) {
        return isFinite(obj) && !isNaN(parseFloat(obj));
      };

      // Is the given value `NaN`? (NaN is the only number which does not equal itself).
      _.isNaN = function (obj) {
        return _.isNumber(obj) && obj != +obj;
      };

      // Is a given value a boolean?
      _.isBoolean = function (obj) {
        return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
      };

      // Is a given value equal to null?
      _.isNull = function (obj) {
        return obj === null;
      };

      // Is a given variable undefined?
      _.isUndefined = function (obj) {
        return obj === void 0;
      };

      // Shortcut function for checking if an object has a given property directly
      // on itself (in other words, not on a prototype).
      _.has = function (obj, key) {
        return hasOwnProperty.call(obj, key);
      };

      // Utility Functions
      // -----------------

      // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
      // previous owner. Returns a reference to the Underscore object.
      _.noConflict = function () {
        root._ = previousUnderscore;
        return this;
      };

      // Keep the identity function around for default iterators.
      _.identity = function (value) {
        return value;
      };

      // Run a function **n** times.
      _.times = function (n, iterator, context) {
        var accum = Array(Math.max(0, n));
        for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);
        return accum;
      };

      // Return a random integer between min and max (inclusive).
      _.random = function (min, max) {
        if (max == null) {
          max = min;
          min = 0;
        }
        return min + Math.floor(Math.random() * (max - min + 1));
      };

      // List of HTML entities for escaping.
      var entityMap = {
        escape: {
          '&': '&amp;',
          '<': '&lt;',
          '>': '&gt;',
          '"': '&quot;',
          "'": '&#x27;'
        }
      };
      entityMap.unescape = _.invert(entityMap.escape);

      // Regexes containing the keys and values listed immediately above.
      var entityRegexes = {
        escape: new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),
        unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')
      };

      // Functions for escaping and unescaping strings to/from HTML interpolation.
      _.each(['escape', 'unescape'], function (method) {
        _[method] = function (string) {
          if (string == null) return '';
          return ('' + string).replace(entityRegexes[method], function (match) {
            return entityMap[method][match];
          });
        };
      });

      // If the value of the named `property` is a function then invoke it with the
      // `object` as context; otherwise, return it.
      _.result = function (object, property) {
        if (object == null) return void 0;
        var value = object[property];
        return _.isFunction(value) ? value.call(object) : value;
      };

      // Add your own custom functions to the Underscore object.
      _.mixin = function (obj) {
        each(_.functions(obj), function (name) {
          var func = _[name] = obj[name];
          _.prototype[name] = function () {
            var args = [this._wrapped];
            push.apply(args, arguments);
            return result.call(this, func.apply(_, args));
          };
        });
      };

      // Generate a unique integer id (unique within the entire client session).
      // Useful for temporary DOM ids.
      var idCounter = 0;
      _.uniqueId = function (prefix) {
        var id = ++idCounter + '';
        return prefix ? prefix + id : id;
      };

      // By default, Underscore uses ERB-style template delimiters, change the
      // following template settings to use alternative delimiters.
      _.templateSettings = {
        evaluate: /<%([\s\S]+?)%>/g,
        interpolate: /<%=([\s\S]+?)%>/g,
        escape: /<%-([\s\S]+?)%>/g
      };

      // When customizing `templateSettings`, if you don't want to define an
      // interpolation, evaluation or escaping regex, we need one that is
      // guaranteed not to match.
      var noMatch = /(.)^/;

      // Certain characters need to be escaped so that they can be put into a
      // string literal.
      var escapes = {
        "'": "'",
        '\\': '\\',
        '\r': 'r',
        '\n': 'n',
        '\t': 't',
        '\u2028': 'u2028',
        '\u2029': 'u2029'
      };

      var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;

      // JavaScript micro-templating, similar to John Resig's implementation.
      // Underscore templating handles arbitrary delimiters, preserves whitespace,
      // and correctly escapes quotes within interpolated code.
      _.template = function (text, data, settings) {
        var render;
        settings = _.defaults({}, settings, _.templateSettings);

        // Combine delimiters into one regular expression via alternation.
        var matcher = new RegExp([(settings.escape || noMatch).source, (settings.interpolate || noMatch).source, (settings.evaluate || noMatch).source].join('|') + '|$', 'g');

        // Compile the template source, escaping string literals appropriately.
        var index = 0;
        var source = "__p+='";
        text.replace(matcher, function (match, escape, interpolate, evaluate, offset) {
          source += text.slice(index, offset).replace(escaper, function (match) {
            return '\\' + escapes[match];
          });

          if (escape) {
            source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
          }
          if (interpolate) {
            source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
          }
          if (evaluate) {
            source += "';\n" + evaluate + "\n__p+='";
          }
          index = offset + match.length;
          return match;
        });
        source += "';\n";

        // If a variable is not specified, place data values in local scope.
        if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

        source = "var __t,__p='',__j=Array.prototype.join," + "print=function(){__p+=__j.call(arguments,'');};\n" + source + "return __p;\n";

        try {
          render = new Function(settings.variable || 'obj', '_', source);
        } catch (e) {
          e.source = source;
          throw e;
        }

        if (data) return render(data, _);
        var template = function (data) {
          return render.call(this, data, _);
        };

        // Provide the compiled function source as a convenience for precompilation.
        template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';

        return template;
      };

      // Add a "chain" function, which will delegate to the wrapper.
      _.chain = function (obj) {
        return _(obj).chain();
      };

      // OOP
      // ---------------
      // If Underscore is called as a function, it returns a wrapped object that
      // can be used OO-style. This wrapper holds altered versions of all the
      // underscore functions. Wrapped objects may be chained.

      // Helper function to continue chaining intermediate results.
      var result = function (obj) {
        return this._chain ? _(obj).chain() : obj;
      };

      // Add all of the Underscore functions to the wrapper object.
      _.mixin(_);

      // Add all mutator Array functions to the wrapper.
      each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function (name) {
        var method = ArrayProto[name];
        _.prototype[name] = function () {
          var obj = this._wrapped;
          method.apply(obj, arguments);
          if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];
          return result.call(this, obj);
        };
      });

      // Add all accessor Array functions to the wrapper.
      each(['concat', 'join', 'slice'], function (name) {
        var method = ArrayProto[name];
        _.prototype[name] = function () {
          return result.call(this, method.apply(this._wrapped, arguments));
        };
      });

      _.extend(_.prototype, {

        // Start chaining a wrapped Underscore object.
        chain: function () {
          this._chain = true;
          return this;
        },

        // Extracts the result from a wrapped and chained object.
        value: function () {
          return this._wrapped;
        }

      });
    }).call(this);

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                       //
    // packages/underscore/post.js                                                                           //
    //                                                                                                       //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // This exports object was created in pre.js.  Now copy the `_` object from it
    // into the package-scope variable `_`, which will get exported.
    _ = _exports._;

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("underscore", {
    _: _
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

    /* Imports */
    var Meteor = Package.meteor.Meteor;
    var global = Package.meteor.global;
    var meteorEnv = Package.meteor.meteorEnv;
    var _ = Package.underscore._;
    var meteorInstall = Package.modules.meteorInstall;
    var Promise = Package.promise.Promise;

    /* Package-scope variables */
    var PersistentMinimongo2;

    var _require2 = meteorInstall({ "node_modules": { "meteor": { "hacknlove:persistent-minimongo2": { "persistent-minimongo.js": function module(_require, _exports, _module) {

                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //                                                                                                                  //
                        // packages/hacknlove_persistent-minimongo2/persistent-minimongo.js                                                 //
                        //                                                                                                                  //
                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //
                        !function (module1) {
                            let localforage;
                            module1.link("localforage", {
                                default(v) {
                                    localforage = v;
                                }

                            }, 0);

                            /**
                            Packages
                            
                            @module Packages
                            */

                            /**
                            The PersistentMinimongo2 package
                            
                            @class PersistentMinimongo2
                            @constructor
                            */

                            /**
                            If the localstorage goes over 4.8 MB, trim the collections.
                            
                            @property capLocalStorageSize
                            */
                            var capLocalStorageSize = 4.8;
                            /**
                            If the localstorage goes over `capLocalStorageSize`, trim the current collection,
                            which wanted to add a new entry, by 50 entries.
                            
                            @property trimCollectionBy
                            */

                            var trimCollectionBy = 50;

                            PersistentMinimongo2 = function (collection, dbname, afterInitialisationCallback) {
                                var self = this;
                                if (!(self instanceof PersistentMinimongo2)) throw new Error('use "new" to construct a PersistentMinimongo2');
                                self.key = 'minimongo__' + collection._name;
                                self.col = collection;
                                self.stats = {
                                    added: 0,
                                    removed: 0,
                                    changed: 0
                                };
                                self.list = [];
                                persisters.push(self); // config

                                self.store = localforage.createInstance({
                                    driver: window.openDatabase ? localforage.WEBSQL : localforage.INDEXEDDB,
                                    name: 'persistent-minimongo2-' + (dbname || 'db'),
                                    version: 1.0,
                                    // size        : 4980736, // Size of database, in bytes. WebSQL-only for now.
                                    storeName: 'minimongo',
                                    description: 'frozeman:persistent-minimongo2 data store'
                                }); // load from storage

                                self.refresh(true, afterInitialisationCallback);
                                self.col.find({}).observe({
                                    added: function (doc) {
                                        // Check if the localstorage is to big and reduce the current collection by 50 items
                                        if (self.store.driver() === 'localStorageWrapper') self.capCollection(); // add document id to tracking list and store

                                        if (!_.contains(self.list, doc._id)) {
                                            self.list.push(doc._id); // store copy of document into db, if not already there

                                            var key = self._makeDataKey(doc._id);

                                            self.store.setItem(key, doc, function (err, value) {
                                                if (!err) {
                                                    ++self.stats.added;
                                                }
                                            }); // update the list

                                            self.store.setItem(self.key, self.list, function (err, value) {});
                                        }
                                    },
                                    removed: function (doc) {
                                        // if not in list, nothing to do
                                        if (!_.contains(self.list, doc._id)) return; // remove document copy from local storage

                                        self.store.removeItem(self._makeDataKey(doc._id), function (err) {
                                            if (!err) {
                                                ++self.stats.removed;
                                            }
                                        }); // remove from list

                                        self.list = _.without(self.list, doc._id); // if tracking list is empty, delete; else store updated copy

                                        if (self.list.length === 0) {
                                            self.store.removeItem(self.key, function () {});
                                        } else {
                                            self.store.setItem(self.key, self.list, function () {});
                                        }
                                    },
                                    changed: function (newDoc, oldDoc) {
                                        // update document in local storage
                                        self.store.setItem(self._makeDataKey(newDoc._id), newDoc, function (err, value) {
                                            if (!err) {
                                                ++self.stats.changed;
                                            }
                                        });
                                    }
                                });
                            };

                            PersistentMinimongo2.prototype = {
                                constructor: PersistentMinimongo2,
                                _getStats: function () {
                                    return this.stats;
                                },
                                _getKey: function () {
                                    return this.key;
                                },
                                _makeDataKey: function (id) {
                                    return this.key + '__' + id;
                                },

                                /**
                                Refresh the local storage
                                 @method refresh
                                @return {String}
                                */
                                refresh: function (init, afterRefreshCallback) {
                                    var self = this;
                                    self.store.getItem(self.key, function (err, list) {
                                        if (!err) {
                                            self.list = list || [];
                                            self.stats.added = 0;

                                            if (!!list) {
                                                var length = list.length;
                                                var count = 0;
                                                var newList = [];

                                                _.each(list, function (id) {
                                                    self.store.getItem(self._makeDataKey(id), function (err, doc) {
                                                        if (!err) {
                                                            if (!!doc) {
                                                                var id = doc._id;
                                                                var foundDoc = self.col.findOne({
                                                                    _id: id
                                                                });

                                                                if (foundDoc) {
                                                                    delete doc._id;
                                                                    self.col.update({
                                                                        _id: id
                                                                    }, {
                                                                        $set: doc
                                                                    });
                                                                } else {
                                                                    id = self.col.insert(doc);
                                                                }

                                                                newList.push(id);
                                                            }
                                                        }

                                                        count++;
                                                    });
                                                }); // do only after all items where checked


                                                var intervalId = setInterval(function () {
                                                    if (count >= length) {
                                                        clearInterval(intervalId);
                                                        self.list = newList; // if not initializing, check for deletes

                                                        if (!init) {
                                                            self.col.find({}).forEach(function (doc) {
                                                                if (!_.contains(self.list, doc._id)) self.col.remove({
                                                                    _id: doc._id
                                                                });
                                                            });
                                                        } // if initializing, save cleaned list (if changed)


                                                        if (init && length !== self.list.length) {
                                                            // if tracking list is empty, delete; else store updated copy
                                                            if (self.list.length === 0) {
                                                                self.store.removeItem(self.key, function () {});
                                                            } else {
                                                                self.store.setItem(self.key, self.list, function () {});
                                                            }
                                                        }

                                                        if (afterRefreshCallback) {
                                                            afterRefreshCallback();
                                                        }
                                                    }
                                                }, 1);
                                            } else {
                                                if (afterRefreshCallback) {
                                                    afterRefreshCallback();
                                                }
                                            }
                                        } else {
                                            if (afterRefreshCallback) {
                                                afterRefreshCallback();
                                            }
                                        }
                                    });
                                },

                                /**
                                Gets the current localstorage size in MB
                                 @method localStorageSize
                                @return {String} total localstorage size in MB
                                */
                                localStorageSize: function () {
                                    // function toSizeMB(info) {
                                    //   info.size = toMB(info.size).toFixed(2) + ' MB';
                                    //   return info;
                                    // }
                                    // var sizes = Object.keys(localStorage).map(toSize).map(toSizeMB);
                                    // console.table(sizes);
                                    var size = 0;

                                    if (localStorage) {
                                        _.each(Object.keys(localStorage), function (key) {
                                            size += localStorage[key].length * 2 / 1024 / 1024;
                                        });
                                    }

                                    return size;
                                },

                                /**
                                Check if the localstorage is to big and reduce the current collection by 50 items
                                 @method localStorageSize
                                @return {String}
                                */
                                capCollection: function () {
                                    var _this = this;

                                    if (_this.localStorageSize() > capLocalStorageSize) {
                                        console.log(_this.localStorageSize(), _this.col.find({}).count()); // find the first 50 entries and remove them

                                        _.each(_this.col.find({}, {
                                            limit: trimCollectionBy
                                        }).fetch(), function (item) {
                                            _this.col.remove(item._id);
                                        });
                                    }
                                }
                            };
                            var persisters = [];
                        }.call(this, _module);
                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    }, "node_modules": { "localforage": { "package.json": function module(_require3, _exports2, _module2) {

                                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                //                                                                                                                  //
                                // node_modules/meteor/hacknlove_persistent-minimongo2/node_modules/localforage/package.json                        //
                                //                                                                                                                  //
                                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                //
                                _module2.exports = {
                                    "name": "localforage",
                                    "version": "1.7.3",
                                    "main": "dist/localforage.js"
                                };

                                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                            }, "dist": { "localforage.js": function module(_require4, _exports3, _module3) {

                                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                    //                                                                                                                  //
                                    // node_modules/meteor/hacknlove_persistent-minimongo2/node_modules/localforage/dist/localforage.js                 //
                                    //                                                                                                                  //
                                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                    //
                                    /*!
                                        localForage -- Offline Storage, Improved
                                        Version 1.7.3
                                        https://localforage.github.io/localForage
                                        (c) 2013-2017 Mozilla, Apache License 2.0
                                    */
                                    (function (f) {
                                        if (typeof _exports3 === "object" && typeof _module3 !== "undefined") {
                                            _module3.exports = f();
                                        } else if (typeof define === "function" && define.amd) {
                                            define([], f);
                                        } else {
                                            var g;if (typeof window !== "undefined") {
                                                g = window;
                                            } else if (typeof global !== "undefined") {
                                                g = global;
                                            } else if (typeof self !== "undefined") {
                                                g = self;
                                            } else {
                                                g = this;
                                            }g.localforage = f();
                                        }
                                    })(function () {
                                        var define, _module4, _exports4;return function e(t, n, r) {
                                            function s(o, u) {
                                                if (!n[o]) {
                                                    if (!t[o]) {
                                                        var a = typeof _require4 == "function" && _require4;if (!u && a) return a(o, !0);if (i) return i(o, !0);var f = new Error("Cannot find module '" + o + "'");throw f.code = "MODULE_NOT_FOUND", f;
                                                    }var l = n[o] = { exports: {} };t[o][0].call(l.exports, function (e) {
                                                        var n = t[o][1][e];return s(n ? n : e);
                                                    }, l, l.exports, e, t, n, r);
                                                }return n[o].exports;
                                            }var i = typeof _require4 == "function" && _require4;for (var o = 0; o < r.length; o++) s(r[o]);return s;
                                        }({ 1: [function (_dereq_, _module5, _exports5) {
                                                (function (global) {
                                                    var Mutation = global.MutationObserver || global.WebKitMutationObserver;

                                                    var scheduleDrain;

                                                    {
                                                        if (Mutation) {
                                                            var called = 0;
                                                            var observer = new Mutation(nextTick);
                                                            var element = global.document.createTextNode('');
                                                            observer.observe(element, {
                                                                characterData: true
                                                            });
                                                            scheduleDrain = function () {
                                                                element.data = called = ++called % 2;
                                                            };
                                                        } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {
                                                            var channel = new global.MessageChannel();
                                                            channel.port1.onmessage = nextTick;
                                                            scheduleDrain = function () {
                                                                channel.port2.postMessage(0);
                                                            };
                                                        } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {
                                                            scheduleDrain = function () {

                                                                // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
                                                                // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
                                                                var scriptEl = global.document.createElement('script');
                                                                scriptEl.onreadystatechange = function () {
                                                                    nextTick();

                                                                    scriptEl.onreadystatechange = null;
                                                                    scriptEl.parentNode.removeChild(scriptEl);
                                                                    scriptEl = null;
                                                                };
                                                                global.document.documentElement.appendChild(scriptEl);
                                                            };
                                                        } else {
                                                            scheduleDrain = function () {
                                                                setTimeout(nextTick, 0);
                                                            };
                                                        }
                                                    }

                                                    var draining;
                                                    var queue = [];
                                                    //named nextTick for less confusing stack traces
                                                    function nextTick() {
                                                        draining = true;
                                                        var i, oldQueue;
                                                        var len = queue.length;
                                                        while (len) {
                                                            oldQueue = queue;
                                                            queue = [];
                                                            i = -1;
                                                            while (++i < len) {
                                                                oldQueue[i]();
                                                            }
                                                            len = queue.length;
                                                        }
                                                        draining = false;
                                                    }

                                                    _module5.exports = immediate;
                                                    function immediate(task) {
                                                        if (queue.push(task) === 1 && !draining) {
                                                            scheduleDrain();
                                                        }
                                                    }
                                                }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
                                            }, {}], 2: [function (_dereq_, _module6, _exports6) {
                                                var immediate = _dereq_(1);

                                                /* istanbul ignore next */
                                                function INTERNAL() {}

                                                var handlers = {};

                                                var REJECTED = ['REJECTED'];
                                                var FULFILLED = ['FULFILLED'];
                                                var PENDING = ['PENDING'];

                                                _module6.exports = Promise;

                                                function Promise(resolver) {
                                                    if (typeof resolver !== 'function') {
                                                        throw new TypeError('resolver must be a function');
                                                    }
                                                    this.state = PENDING;
                                                    this.queue = [];
                                                    this.outcome = void 0;
                                                    if (resolver !== INTERNAL) {
                                                        safelyResolveThenable(this, resolver);
                                                    }
                                                }

                                                Promise.prototype["catch"] = function (onRejected) {
                                                    return this.then(null, onRejected);
                                                };
                                                Promise.prototype.then = function (onFulfilled, onRejected) {
                                                    if (typeof onFulfilled !== 'function' && this.state === FULFILLED || typeof onRejected !== 'function' && this.state === REJECTED) {
                                                        return this;
                                                    }
                                                    var promise = new this.constructor(INTERNAL);
                                                    if (this.state !== PENDING) {
                                                        var resolver = this.state === FULFILLED ? onFulfilled : onRejected;
                                                        unwrap(promise, resolver, this.outcome);
                                                    } else {
                                                        this.queue.push(new QueueItem(promise, onFulfilled, onRejected));
                                                    }

                                                    return promise;
                                                };
                                                function QueueItem(promise, onFulfilled, onRejected) {
                                                    this.promise = promise;
                                                    if (typeof onFulfilled === 'function') {
                                                        this.onFulfilled = onFulfilled;
                                                        this.callFulfilled = this.otherCallFulfilled;
                                                    }
                                                    if (typeof onRejected === 'function') {
                                                        this.onRejected = onRejected;
                                                        this.callRejected = this.otherCallRejected;
                                                    }
                                                }
                                                QueueItem.prototype.callFulfilled = function (value) {
                                                    handlers.resolve(this.promise, value);
                                                };
                                                QueueItem.prototype.otherCallFulfilled = function (value) {
                                                    unwrap(this.promise, this.onFulfilled, value);
                                                };
                                                QueueItem.prototype.callRejected = function (value) {
                                                    handlers.reject(this.promise, value);
                                                };
                                                QueueItem.prototype.otherCallRejected = function (value) {
                                                    unwrap(this.promise, this.onRejected, value);
                                                };

                                                function unwrap(promise, func, value) {
                                                    immediate(function () {
                                                        var returnValue;
                                                        try {
                                                            returnValue = func(value);
                                                        } catch (e) {
                                                            return handlers.reject(promise, e);
                                                        }
                                                        if (returnValue === promise) {
                                                            handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));
                                                        } else {
                                                            handlers.resolve(promise, returnValue);
                                                        }
                                                    });
                                                }

                                                handlers.resolve = function (self, value) {
                                                    var result = tryCatch(getThen, value);
                                                    if (result.status === 'error') {
                                                        return handlers.reject(self, result.value);
                                                    }
                                                    var thenable = result.value;

                                                    if (thenable) {
                                                        safelyResolveThenable(self, thenable);
                                                    } else {
                                                        self.state = FULFILLED;
                                                        self.outcome = value;
                                                        var i = -1;
                                                        var len = self.queue.length;
                                                        while (++i < len) {
                                                            self.queue[i].callFulfilled(value);
                                                        }
                                                    }
                                                    return self;
                                                };
                                                handlers.reject = function (self, error) {
                                                    self.state = REJECTED;
                                                    self.outcome = error;
                                                    var i = -1;
                                                    var len = self.queue.length;
                                                    while (++i < len) {
                                                        self.queue[i].callRejected(error);
                                                    }
                                                    return self;
                                                };

                                                function getThen(obj) {
                                                    // Make sure we only access the accessor once as required by the spec
                                                    var then = obj && obj.then;
                                                    if (obj && (typeof obj === 'object' || typeof obj === 'function') && typeof then === 'function') {
                                                        return function appyThen() {
                                                            then.apply(obj, arguments);
                                                        };
                                                    }
                                                }

                                                function safelyResolveThenable(self, thenable) {
                                                    // Either fulfill, reject or reject with error
                                                    var called = false;
                                                    function onError(value) {
                                                        if (called) {
                                                            return;
                                                        }
                                                        called = true;
                                                        handlers.reject(self, value);
                                                    }

                                                    function onSuccess(value) {
                                                        if (called) {
                                                            return;
                                                        }
                                                        called = true;
                                                        handlers.resolve(self, value);
                                                    }

                                                    function tryToUnwrap() {
                                                        thenable(onSuccess, onError);
                                                    }

                                                    var result = tryCatch(tryToUnwrap);
                                                    if (result.status === 'error') {
                                                        onError(result.value);
                                                    }
                                                }

                                                function tryCatch(func, value) {
                                                    var out = {};
                                                    try {
                                                        out.value = func(value);
                                                        out.status = 'success';
                                                    } catch (e) {
                                                        out.status = 'error';
                                                        out.value = e;
                                                    }
                                                    return out;
                                                }

                                                Promise.resolve = resolve;
                                                function resolve(value) {
                                                    if (value instanceof this) {
                                                        return value;
                                                    }
                                                    return handlers.resolve(new this(INTERNAL), value);
                                                }

                                                Promise.reject = reject;
                                                function reject(reason) {
                                                    var promise = new this(INTERNAL);
                                                    return handlers.reject(promise, reason);
                                                }

                                                Promise.all = all;
                                                function all(iterable) {
                                                    var self = this;
                                                    if (Object.prototype.toString.call(iterable) !== '[object Array]') {
                                                        return this.reject(new TypeError('must be an array'));
                                                    }

                                                    var len = iterable.length;
                                                    var called = false;
                                                    if (!len) {
                                                        return this.resolve([]);
                                                    }

                                                    var values = new Array(len);
                                                    var resolved = 0;
                                                    var i = -1;
                                                    var promise = new this(INTERNAL);

                                                    while (++i < len) {
                                                        allResolver(iterable[i], i);
                                                    }
                                                    return promise;
                                                    function allResolver(value, i) {
                                                        self.resolve(value).then(resolveFromAll, function (error) {
                                                            if (!called) {
                                                                called = true;
                                                                handlers.reject(promise, error);
                                                            }
                                                        });
                                                        function resolveFromAll(outValue) {
                                                            values[i] = outValue;
                                                            if (++resolved === len && !called) {
                                                                called = true;
                                                                handlers.resolve(promise, values);
                                                            }
                                                        }
                                                    }
                                                }

                                                Promise.race = race;
                                                function race(iterable) {
                                                    var self = this;
                                                    if (Object.prototype.toString.call(iterable) !== '[object Array]') {
                                                        return this.reject(new TypeError('must be an array'));
                                                    }

                                                    var len = iterable.length;
                                                    var called = false;
                                                    if (!len) {
                                                        return this.resolve([]);
                                                    }

                                                    var i = -1;
                                                    var promise = new this(INTERNAL);

                                                    while (++i < len) {
                                                        resolver(iterable[i]);
                                                    }
                                                    return promise;
                                                    function resolver(value) {
                                                        self.resolve(value).then(function (response) {
                                                            if (!called) {
                                                                called = true;
                                                                handlers.resolve(promise, response);
                                                            }
                                                        }, function (error) {
                                                            if (!called) {
                                                                called = true;
                                                                handlers.reject(promise, error);
                                                            }
                                                        });
                                                    }
                                                }
                                            }, { "1": 1 }], 3: [function (_dereq_, _module7, _exports7) {
                                                (function (global) {
                                                    if (typeof global.Promise !== 'function') {
                                                        global.Promise = _dereq_(2);
                                                    }
                                                }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
                                            }, { "2": 2 }], 4: [function (_dereq_, _module8, _exports8) {

                                                var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                                                    return typeof obj;
                                                } : function (obj) {
                                                    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                                                };

                                                function _classCallCheck(instance, Constructor) {
                                                    if (!(instance instanceof Constructor)) {
                                                        throw new TypeError("Cannot call a class as a function");
                                                    }
                                                }

                                                function getIDB() {
                                                    /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */
                                                    try {
                                                        if (typeof indexedDB !== 'undefined') {
                                                            return indexedDB;
                                                        }
                                                        if (typeof webkitIndexedDB !== 'undefined') {
                                                            return webkitIndexedDB;
                                                        }
                                                        if (typeof mozIndexedDB !== 'undefined') {
                                                            return mozIndexedDB;
                                                        }
                                                        if (typeof OIndexedDB !== 'undefined') {
                                                            return OIndexedDB;
                                                        }
                                                        if (typeof msIndexedDB !== 'undefined') {
                                                            return msIndexedDB;
                                                        }
                                                    } catch (e) {
                                                        return;
                                                    }
                                                }

                                                var idb = getIDB();

                                                function isIndexedDBValid() {
                                                    try {
                                                        // Initialize IndexedDB; fall back to vendor-prefixed versions
                                                        // if needed.
                                                        if (!idb) {
                                                            return false;
                                                        }
                                                        // We mimic PouchDB here;
                                                        //
                                                        // We test for openDatabase because IE Mobile identifies itself
                                                        // as Safari. Oh the lulz...
                                                        var isSafari = typeof openDatabase !== 'undefined' && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);

                                                        var hasFetch = typeof fetch === 'function' && fetch.toString().indexOf('[native code') !== -1;

                                                        // Safari <10.1 does not meet our requirements for IDB support (#5572)
                                                        // since Safari 10.1 shipped with fetch, we can use that to detect it
                                                        return (!isSafari || hasFetch) && typeof indexedDB !== 'undefined' &&
                                                        // some outdated implementations of IDB that appear on Samsung
                                                        // and HTC Android devices <4.4 are missing IDBKeyRange
                                                        // See: https://github.com/mozilla/localForage/issues/128
                                                        // See: https://github.com/mozilla/localForage/issues/272
                                                        typeof IDBKeyRange !== 'undefined';
                                                    } catch (e) {
                                                        return false;
                                                    }
                                                }

                                                // Abstracts constructing a Blob object, so it also works in older
                                                // browsers that don't support the native Blob constructor. (i.e.
                                                // old QtWebKit versions, at least).
                                                // Abstracts constructing a Blob object, so it also works in older
                                                // browsers that don't support the native Blob constructor. (i.e.
                                                // old QtWebKit versions, at least).
                                                function createBlob(parts, properties) {
                                                    /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */
                                                    parts = parts || [];
                                                    properties = properties || {};
                                                    try {
                                                        return new Blob(parts, properties);
                                                    } catch (e) {
                                                        if (e.name !== 'TypeError') {
                                                            throw e;
                                                        }
                                                        var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : WebKitBlobBuilder;
                                                        var builder = new Builder();
                                                        for (var i = 0; i < parts.length; i += 1) {
                                                            builder.append(parts[i]);
                                                        }
                                                        return builder.getBlob(properties.type);
                                                    }
                                                }

                                                // This is CommonJS because lie is an external dependency, so Rollup
                                                // can just ignore it.
                                                if (typeof Promise === 'undefined') {
                                                    // In the "nopromises" build this will just throw if you don't have
                                                    // a global promise object, but it would throw anyway later.
                                                    _dereq_(3);
                                                }
                                                var Promise$1 = Promise;

                                                function executeCallback(promise, callback) {
                                                    if (callback) {
                                                        promise.then(function (result) {
                                                            callback(null, result);
                                                        }, function (error) {
                                                            callback(error);
                                                        });
                                                    }
                                                }

                                                function executeTwoCallbacks(promise, callback, errorCallback) {
                                                    if (typeof callback === 'function') {
                                                        promise.then(callback);
                                                    }

                                                    if (typeof errorCallback === 'function') {
                                                        promise["catch"](errorCallback);
                                                    }
                                                }

                                                function normalizeKey(key) {
                                                    // Cast the key to a string, as that's all we can set as a key.
                                                    if (typeof key !== 'string') {
                                                        console.warn(key + ' used as a key, but it is not a string.');
                                                        key = String(key);
                                                    }

                                                    return key;
                                                }

                                                function getCallback() {
                                                    if (arguments.length && typeof arguments[arguments.length - 1] === 'function') {
                                                        return arguments[arguments.length - 1];
                                                    }
                                                }

                                                // Some code originally from async_storage.js in
                                                // [Gaia](https://github.com/mozilla-b2g/gaia).

                                                var DETECT_BLOB_SUPPORT_STORE = 'local-forage-detect-blob-support';
                                                var supportsBlobs = void 0;
                                                var dbContexts = {};
                                                var toString = Object.prototype.toString;

                                                // Transaction Modes
                                                var READ_ONLY = 'readonly';
                                                var READ_WRITE = 'readwrite';

                                                // Transform a binary string to an array buffer, because otherwise
                                                // weird stuff happens when you try to work with the binary string directly.
                                                // It is known.
                                                // From http://stackoverflow.com/questions/14967647/ (continues on next line)
                                                // encode-decode-image-with-base64-breaks-image (2013-04-21)
                                                function _binStringToArrayBuffer(bin) {
                                                    var length = bin.length;
                                                    var buf = new ArrayBuffer(length);
                                                    var arr = new Uint8Array(buf);
                                                    for (var i = 0; i < length; i++) {
                                                        arr[i] = bin.charCodeAt(i);
                                                    }
                                                    return buf;
                                                }

                                                //
                                                // Blobs are not supported in all versions of IndexedDB, notably
                                                // Chrome <37 and Android <5. In those versions, storing a blob will throw.
                                                //
                                                // Various other blob bugs exist in Chrome v37-42 (inclusive).
                                                // Detecting them is expensive and confusing to users, and Chrome 37-42
                                                // is at very low usage worldwide, so we do a hacky userAgent check instead.
                                                //
                                                // content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120
                                                // 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916
                                                // FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836
                                                //
                                                // Code borrowed from PouchDB. See:
                                                // https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-adapter-idb/src/blobSupport.js
                                                //
                                                function _checkBlobSupportWithoutCaching(idb) {
                                                    return new Promise$1(function (resolve) {
                                                        var txn = idb.transaction(DETECT_BLOB_SUPPORT_STORE, READ_WRITE);
                                                        var blob = createBlob(['']);
                                                        txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');

                                                        txn.onabort = function (e) {
                                                            // If the transaction aborts now its due to not being able to
                                                            // write to the database, likely due to the disk being full
                                                            e.preventDefault();
                                                            e.stopPropagation();
                                                            resolve(false);
                                                        };

                                                        txn.oncomplete = function () {
                                                            var matchedChrome = navigator.userAgent.match(/Chrome\/(\d+)/);
                                                            var matchedEdge = navigator.userAgent.match(/Edge\//);
                                                            // MS Edge pretends to be Chrome 42:
                                                            // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx
                                                            resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);
                                                        };
                                                    })["catch"](function () {
                                                        return false; // error, so assume unsupported
                                                    });
                                                }

                                                function _checkBlobSupport(idb) {
                                                    if (typeof supportsBlobs === 'boolean') {
                                                        return Promise$1.resolve(supportsBlobs);
                                                    }
                                                    return _checkBlobSupportWithoutCaching(idb).then(function (value) {
                                                        supportsBlobs = value;
                                                        return supportsBlobs;
                                                    });
                                                }

                                                function _deferReadiness(dbInfo) {
                                                    var dbContext = dbContexts[dbInfo.name];

                                                    // Create a deferred object representing the current database operation.
                                                    var deferredOperation = {};

                                                    deferredOperation.promise = new Promise$1(function (resolve, reject) {
                                                        deferredOperation.resolve = resolve;
                                                        deferredOperation.reject = reject;
                                                    });

                                                    // Enqueue the deferred operation.
                                                    dbContext.deferredOperations.push(deferredOperation);

                                                    // Chain its promise to the database readiness.
                                                    if (!dbContext.dbReady) {
                                                        dbContext.dbReady = deferredOperation.promise;
                                                    } else {
                                                        dbContext.dbReady = dbContext.dbReady.then(function () {
                                                            return deferredOperation.promise;
                                                        });
                                                    }
                                                }

                                                function _advanceReadiness(dbInfo) {
                                                    var dbContext = dbContexts[dbInfo.name];

                                                    // Dequeue a deferred operation.
                                                    var deferredOperation = dbContext.deferredOperations.pop();

                                                    // Resolve its promise (which is part of the database readiness
                                                    // chain of promises).
                                                    if (deferredOperation) {
                                                        deferredOperation.resolve();
                                                        return deferredOperation.promise;
                                                    }
                                                }

                                                function _rejectReadiness(dbInfo, err) {
                                                    var dbContext = dbContexts[dbInfo.name];

                                                    // Dequeue a deferred operation.
                                                    var deferredOperation = dbContext.deferredOperations.pop();

                                                    // Reject its promise (which is part of the database readiness
                                                    // chain of promises).
                                                    if (deferredOperation) {
                                                        deferredOperation.reject(err);
                                                        return deferredOperation.promise;
                                                    }
                                                }

                                                function _getConnection(dbInfo, upgradeNeeded) {
                                                    return new Promise$1(function (resolve, reject) {
                                                        dbContexts[dbInfo.name] = dbContexts[dbInfo.name] || createDbContext();

                                                        if (dbInfo.db) {
                                                            if (upgradeNeeded) {
                                                                _deferReadiness(dbInfo);
                                                                dbInfo.db.close();
                                                            } else {
                                                                return resolve(dbInfo.db);
                                                            }
                                                        }

                                                        var dbArgs = [dbInfo.name];

                                                        if (upgradeNeeded) {
                                                            dbArgs.push(dbInfo.version);
                                                        }

                                                        var openreq = idb.open.apply(idb, dbArgs);

                                                        if (upgradeNeeded) {
                                                            openreq.onupgradeneeded = function (e) {
                                                                var db = openreq.result;
                                                                try {
                                                                    db.createObjectStore(dbInfo.storeName);
                                                                    if (e.oldVersion <= 1) {
                                                                        // Added when support for blob shims was added
                                                                        db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);
                                                                    }
                                                                } catch (ex) {
                                                                    if (ex.name === 'ConstraintError') {
                                                                        console.warn('The database "' + dbInfo.name + '"' + ' has been upgraded from version ' + e.oldVersion + ' to version ' + e.newVersion + ', but the storage "' + dbInfo.storeName + '" already exists.');
                                                                    } else {
                                                                        throw ex;
                                                                    }
                                                                }
                                                            };
                                                        }

                                                        openreq.onerror = function (e) {
                                                            e.preventDefault();
                                                            reject(openreq.error);
                                                        };

                                                        openreq.onsuccess = function () {
                                                            resolve(openreq.result);
                                                            _advanceReadiness(dbInfo);
                                                        };
                                                    });
                                                }

                                                function _getOriginalConnection(dbInfo) {
                                                    return _getConnection(dbInfo, false);
                                                }

                                                function _getUpgradedConnection(dbInfo) {
                                                    return _getConnection(dbInfo, true);
                                                }

                                                function _isUpgradeNeeded(dbInfo, defaultVersion) {
                                                    if (!dbInfo.db) {
                                                        return true;
                                                    }

                                                    var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);
                                                    var isDowngrade = dbInfo.version < dbInfo.db.version;
                                                    var isUpgrade = dbInfo.version > dbInfo.db.version;

                                                    if (isDowngrade) {
                                                        // If the version is not the default one
                                                        // then warn for impossible downgrade.
                                                        if (dbInfo.version !== defaultVersion) {
                                                            console.warn('The database "' + dbInfo.name + '"' + " can't be downgraded from version " + dbInfo.db.version + ' to version ' + dbInfo.version + '.');
                                                        }
                                                        // Align the versions to prevent errors.
                                                        dbInfo.version = dbInfo.db.version;
                                                    }

                                                    if (isUpgrade || isNewStore) {
                                                        // If the store is new then increment the version (if needed).
                                                        // This will trigger an "upgradeneeded" event which is required
                                                        // for creating a store.
                                                        if (isNewStore) {
                                                            var incVersion = dbInfo.db.version + 1;
                                                            if (incVersion > dbInfo.version) {
                                                                dbInfo.version = incVersion;
                                                            }
                                                        }

                                                        return true;
                                                    }

                                                    return false;
                                                }

                                                // encode a blob for indexeddb engines that don't support blobs
                                                function _encodeBlob(blob) {
                                                    return new Promise$1(function (resolve, reject) {
                                                        var reader = new FileReader();
                                                        reader.onerror = reject;
                                                        reader.onloadend = function (e) {
                                                            var base64 = btoa(e.target.result || '');
                                                            resolve({
                                                                __local_forage_encoded_blob: true,
                                                                data: base64,
                                                                type: blob.type
                                                            });
                                                        };
                                                        reader.readAsBinaryString(blob);
                                                    });
                                                }

                                                // decode an encoded blob
                                                function _decodeBlob(encodedBlob) {
                                                    var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));
                                                    return createBlob([arrayBuff], { type: encodedBlob.type });
                                                }

                                                // is this one of our fancy encoded blobs?
                                                function _isEncodedBlob(value) {
                                                    return value && value.__local_forage_encoded_blob;
                                                }

                                                // Specialize the default `ready()` function by making it dependent
                                                // on the current database operations. Thus, the driver will be actually
                                                // ready when it's been initialized (default) *and* there are no pending
                                                // operations on the database (initiated by some other instances).
                                                function _fullyReady(callback) {
                                                    var self = this;

                                                    var promise = self._initReady().then(function () {
                                                        var dbContext = dbContexts[self._dbInfo.name];

                                                        if (dbContext && dbContext.dbReady) {
                                                            return dbContext.dbReady;
                                                        }
                                                    });

                                                    executeTwoCallbacks(promise, callback, callback);
                                                    return promise;
                                                }

                                                // Try to establish a new db connection to replace the
                                                // current one which is broken (i.e. experiencing
                                                // InvalidStateError while creating a transaction).
                                                function _tryReconnect(dbInfo) {
                                                    _deferReadiness(dbInfo);

                                                    var dbContext = dbContexts[dbInfo.name];
                                                    var forages = dbContext.forages;

                                                    for (var i = 0; i < forages.length; i++) {
                                                        var forage = forages[i];
                                                        if (forage._dbInfo.db) {
                                                            forage._dbInfo.db.close();
                                                            forage._dbInfo.db = null;
                                                        }
                                                    }
                                                    dbInfo.db = null;

                                                    return _getOriginalConnection(dbInfo).then(function (db) {
                                                        dbInfo.db = db;
                                                        if (_isUpgradeNeeded(dbInfo)) {
                                                            // Reopen the database for upgrading.
                                                            return _getUpgradedConnection(dbInfo);
                                                        }
                                                        return db;
                                                    }).then(function (db) {
                                                        // store the latest db reference
                                                        // in case the db was upgraded
                                                        dbInfo.db = dbContext.db = db;
                                                        for (var i = 0; i < forages.length; i++) {
                                                            forages[i]._dbInfo.db = db;
                                                        }
                                                    })["catch"](function (err) {
                                                        _rejectReadiness(dbInfo, err);
                                                        throw err;
                                                    });
                                                }

                                                // FF doesn't like Promises (micro-tasks) and IDDB store operations,
                                                // so we have to do it with callbacks
                                                function createTransaction(dbInfo, mode, callback, retries) {
                                                    if (retries === undefined) {
                                                        retries = 1;
                                                    }

                                                    try {
                                                        var tx = dbInfo.db.transaction(dbInfo.storeName, mode);
                                                        callback(null, tx);
                                                    } catch (err) {
                                                        if (retries > 0 && (!dbInfo.db || err.name === 'InvalidStateError' || err.name === 'NotFoundError')) {
                                                            return Promise$1.resolve().then(function () {
                                                                if (!dbInfo.db || err.name === 'NotFoundError' && !dbInfo.db.objectStoreNames.contains(dbInfo.storeName) && dbInfo.version <= dbInfo.db.version) {
                                                                    // increase the db version, to create the new ObjectStore
                                                                    if (dbInfo.db) {
                                                                        dbInfo.version = dbInfo.db.version + 1;
                                                                    }
                                                                    // Reopen the database for upgrading.
                                                                    return _getUpgradedConnection(dbInfo);
                                                                }
                                                            }).then(function () {
                                                                return _tryReconnect(dbInfo).then(function () {
                                                                    createTransaction(dbInfo, mode, callback, retries - 1);
                                                                });
                                                            })["catch"](callback);
                                                        }

                                                        callback(err);
                                                    }
                                                }

                                                function createDbContext() {
                                                    return {
                                                        // Running localForages sharing a database.
                                                        forages: [],
                                                        // Shared database.
                                                        db: null,
                                                        // Database readiness (promise).
                                                        dbReady: null,
                                                        // Deferred operations on the database.
                                                        deferredOperations: []
                                                    };
                                                }

                                                // Open the IndexedDB database (automatically creates one if one didn't
                                                // previously exist), using any options set in the config.
                                                function _initStorage(options) {
                                                    var self = this;
                                                    var dbInfo = {
                                                        db: null
                                                    };

                                                    if (options) {
                                                        for (var i in options) {
                                                            dbInfo[i] = options[i];
                                                        }
                                                    }

                                                    // Get the current context of the database;
                                                    var dbContext = dbContexts[dbInfo.name];

                                                    // ...or create a new context.
                                                    if (!dbContext) {
                                                        dbContext = createDbContext();
                                                        // Register the new context in the global container.
                                                        dbContexts[dbInfo.name] = dbContext;
                                                    }

                                                    // Register itself as a running localForage in the current context.
                                                    dbContext.forages.push(self);

                                                    // Replace the default `ready()` function with the specialized one.
                                                    if (!self._initReady) {
                                                        self._initReady = self.ready;
                                                        self.ready = _fullyReady;
                                                    }

                                                    // Create an array of initialization states of the related localForages.
                                                    var initPromises = [];

                                                    function ignoreErrors() {
                                                        // Don't handle errors here,
                                                        // just makes sure related localForages aren't pending.
                                                        return Promise$1.resolve();
                                                    }

                                                    for (var j = 0; j < dbContext.forages.length; j++) {
                                                        var forage = dbContext.forages[j];
                                                        if (forage !== self) {
                                                            // Don't wait for itself...
                                                            initPromises.push(forage._initReady()["catch"](ignoreErrors));
                                                        }
                                                    }

                                                    // Take a snapshot of the related localForages.
                                                    var forages = dbContext.forages.slice(0);

                                                    // Initialize the connection process only when
                                                    // all the related localForages aren't pending.
                                                    return Promise$1.all(initPromises).then(function () {
                                                        dbInfo.db = dbContext.db;
                                                        // Get the connection or open a new one without upgrade.
                                                        return _getOriginalConnection(dbInfo);
                                                    }).then(function (db) {
                                                        dbInfo.db = db;
                                                        if (_isUpgradeNeeded(dbInfo, self._defaultConfig.version)) {
                                                            // Reopen the database for upgrading.
                                                            return _getUpgradedConnection(dbInfo);
                                                        }
                                                        return db;
                                                    }).then(function (db) {
                                                        dbInfo.db = dbContext.db = db;
                                                        self._dbInfo = dbInfo;
                                                        // Share the final connection amongst related localForages.
                                                        for (var k = 0; k < forages.length; k++) {
                                                            var forage = forages[k];
                                                            if (forage !== self) {
                                                                // Self is already up-to-date.
                                                                forage._dbInfo.db = dbInfo.db;
                                                                forage._dbInfo.version = dbInfo.version;
                                                            }
                                                        }
                                                    });
                                                }

                                                function getItem(key, callback) {
                                                    var self = this;

                                                    key = normalizeKey(key);

                                                    var promise = new Promise$1(function (resolve, reject) {
                                                        self.ready().then(function () {
                                                            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
                                                                if (err) {
                                                                    return reject(err);
                                                                }

                                                                try {
                                                                    var store = transaction.objectStore(self._dbInfo.storeName);
                                                                    var req = store.get(key);

                                                                    req.onsuccess = function () {
                                                                        var value = req.result;
                                                                        if (value === undefined) {
                                                                            value = null;
                                                                        }
                                                                        if (_isEncodedBlob(value)) {
                                                                            value = _decodeBlob(value);
                                                                        }
                                                                        resolve(value);
                                                                    };

                                                                    req.onerror = function () {
                                                                        reject(req.error);
                                                                    };
                                                                } catch (e) {
                                                                    reject(e);
                                                                }
                                                            });
                                                        })["catch"](reject);
                                                    });

                                                    executeCallback(promise, callback);
                                                    return promise;
                                                }

                                                // Iterate over all items stored in database.
                                                function iterate(iterator, callback) {
                                                    var self = this;

                                                    var promise = new Promise$1(function (resolve, reject) {
                                                        self.ready().then(function () {
                                                            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
                                                                if (err) {
                                                                    return reject(err);
                                                                }

                                                                try {
                                                                    var store = transaction.objectStore(self._dbInfo.storeName);
                                                                    var req = store.openCursor();
                                                                    var iterationNumber = 1;

                                                                    req.onsuccess = function () {
                                                                        var cursor = req.result;

                                                                        if (cursor) {
                                                                            var value = cursor.value;
                                                                            if (_isEncodedBlob(value)) {
                                                                                value = _decodeBlob(value);
                                                                            }
                                                                            var result = iterator(value, cursor.key, iterationNumber++);

                                                                            // when the iterator callback retuns any
                                                                            // (non-`undefined`) value, then we stop
                                                                            // the iteration immediately
                                                                            if (result !== void 0) {
                                                                                resolve(result);
                                                                            } else {
                                                                                cursor["continue"]();
                                                                            }
                                                                        } else {
                                                                            resolve();
                                                                        }
                                                                    };

                                                                    req.onerror = function () {
                                                                        reject(req.error);
                                                                    };
                                                                } catch (e) {
                                                                    reject(e);
                                                                }
                                                            });
                                                        })["catch"](reject);
                                                    });

                                                    executeCallback(promise, callback);

                                                    return promise;
                                                }

                                                function setItem(key, value, callback) {
                                                    var self = this;

                                                    key = normalizeKey(key);

                                                    var promise = new Promise$1(function (resolve, reject) {
                                                        var dbInfo;
                                                        self.ready().then(function () {
                                                            dbInfo = self._dbInfo;
                                                            if (toString.call(value) === '[object Blob]') {
                                                                return _checkBlobSupport(dbInfo.db).then(function (blobSupport) {
                                                                    if (blobSupport) {
                                                                        return value;
                                                                    }
                                                                    return _encodeBlob(value);
                                                                });
                                                            }
                                                            return value;
                                                        }).then(function (value) {
                                                            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {
                                                                if (err) {
                                                                    return reject(err);
                                                                }

                                                                try {
                                                                    var store = transaction.objectStore(self._dbInfo.storeName);

                                                                    // The reason we don't _save_ null is because IE 10 does
                                                                    // not support saving the `null` type in IndexedDB. How
                                                                    // ironic, given the bug below!
                                                                    // See: https://github.com/mozilla/localForage/issues/161
                                                                    if (value === null) {
                                                                        value = undefined;
                                                                    }

                                                                    var req = store.put(value, key);

                                                                    transaction.oncomplete = function () {
                                                                        // Cast to undefined so the value passed to
                                                                        // callback/promise is the same as what one would get out
                                                                        // of `getItem()` later. This leads to some weirdness
                                                                        // (setItem('foo', undefined) will return `null`), but
                                                                        // it's not my fault localStorage is our baseline and that
                                                                        // it's weird.
                                                                        if (value === undefined) {
                                                                            value = null;
                                                                        }

                                                                        resolve(value);
                                                                    };
                                                                    transaction.onabort = transaction.onerror = function () {
                                                                        var err = req.error ? req.error : req.transaction.error;
                                                                        reject(err);
                                                                    };
                                                                } catch (e) {
                                                                    reject(e);
                                                                }
                                                            });
                                                        })["catch"](reject);
                                                    });

                                                    executeCallback(promise, callback);
                                                    return promise;
                                                }

                                                function removeItem(key, callback) {
                                                    var self = this;

                                                    key = normalizeKey(key);

                                                    var promise = new Promise$1(function (resolve, reject) {
                                                        self.ready().then(function () {
                                                            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {
                                                                if (err) {
                                                                    return reject(err);
                                                                }

                                                                try {
                                                                    var store = transaction.objectStore(self._dbInfo.storeName);
                                                                    // We use a Grunt task to make this safe for IE and some
                                                                    // versions of Android (including those used by Cordova).
                                                                    // Normally IE won't like `.delete()` and will insist on
                                                                    // using `['delete']()`, but we have a build step that
                                                                    // fixes this for us now.
                                                                    var req = store["delete"](key);
                                                                    transaction.oncomplete = function () {
                                                                        resolve();
                                                                    };

                                                                    transaction.onerror = function () {
                                                                        reject(req.error);
                                                                    };

                                                                    // The request will be also be aborted if we've exceeded our storage
                                                                    // space.
                                                                    transaction.onabort = function () {
                                                                        var err = req.error ? req.error : req.transaction.error;
                                                                        reject(err);
                                                                    };
                                                                } catch (e) {
                                                                    reject(e);
                                                                }
                                                            });
                                                        })["catch"](reject);
                                                    });

                                                    executeCallback(promise, callback);
                                                    return promise;
                                                }

                                                function clear(callback) {
                                                    var self = this;

                                                    var promise = new Promise$1(function (resolve, reject) {
                                                        self.ready().then(function () {
                                                            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {
                                                                if (err) {
                                                                    return reject(err);
                                                                }

                                                                try {
                                                                    var store = transaction.objectStore(self._dbInfo.storeName);
                                                                    var req = store.clear();

                                                                    transaction.oncomplete = function () {
                                                                        resolve();
                                                                    };

                                                                    transaction.onabort = transaction.onerror = function () {
                                                                        var err = req.error ? req.error : req.transaction.error;
                                                                        reject(err);
                                                                    };
                                                                } catch (e) {
                                                                    reject(e);
                                                                }
                                                            });
                                                        })["catch"](reject);
                                                    });

                                                    executeCallback(promise, callback);
                                                    return promise;
                                                }

                                                function length(callback) {
                                                    var self = this;

                                                    var promise = new Promise$1(function (resolve, reject) {
                                                        self.ready().then(function () {
                                                            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
                                                                if (err) {
                                                                    return reject(err);
                                                                }

                                                                try {
                                                                    var store = transaction.objectStore(self._dbInfo.storeName);
                                                                    var req = store.count();

                                                                    req.onsuccess = function () {
                                                                        resolve(req.result);
                                                                    };

                                                                    req.onerror = function () {
                                                                        reject(req.error);
                                                                    };
                                                                } catch (e) {
                                                                    reject(e);
                                                                }
                                                            });
                                                        })["catch"](reject);
                                                    });

                                                    executeCallback(promise, callback);
                                                    return promise;
                                                }

                                                function key(n, callback) {
                                                    var self = this;

                                                    var promise = new Promise$1(function (resolve, reject) {
                                                        if (n < 0) {
                                                            resolve(null);

                                                            return;
                                                        }

                                                        self.ready().then(function () {
                                                            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
                                                                if (err) {
                                                                    return reject(err);
                                                                }

                                                                try {
                                                                    var store = transaction.objectStore(self._dbInfo.storeName);
                                                                    var advanced = false;
                                                                    var req = store.openCursor();

                                                                    req.onsuccess = function () {
                                                                        var cursor = req.result;
                                                                        if (!cursor) {
                                                                            // this means there weren't enough keys
                                                                            resolve(null);

                                                                            return;
                                                                        }

                                                                        if (n === 0) {
                                                                            // We have the first key, return it if that's what they
                                                                            // wanted.
                                                                            resolve(cursor.key);
                                                                        } else {
                                                                            if (!advanced) {
                                                                                // Otherwise, ask the cursor to skip ahead n
                                                                                // records.
                                                                                advanced = true;
                                                                                cursor.advance(n);
                                                                            } else {
                                                                                // When we get here, we've got the nth key.
                                                                                resolve(cursor.key);
                                                                            }
                                                                        }
                                                                    };

                                                                    req.onerror = function () {
                                                                        reject(req.error);
                                                                    };
                                                                } catch (e) {
                                                                    reject(e);
                                                                }
                                                            });
                                                        })["catch"](reject);
                                                    });

                                                    executeCallback(promise, callback);
                                                    return promise;
                                                }

                                                function keys(callback) {
                                                    var self = this;

                                                    var promise = new Promise$1(function (resolve, reject) {
                                                        self.ready().then(function () {
                                                            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
                                                                if (err) {
                                                                    return reject(err);
                                                                }

                                                                try {
                                                                    var store = transaction.objectStore(self._dbInfo.storeName);
                                                                    var req = store.openCursor();
                                                                    var keys = [];

                                                                    req.onsuccess = function () {
                                                                        var cursor = req.result;

                                                                        if (!cursor) {
                                                                            resolve(keys);
                                                                            return;
                                                                        }

                                                                        keys.push(cursor.key);
                                                                        cursor["continue"]();
                                                                    };

                                                                    req.onerror = function () {
                                                                        reject(req.error);
                                                                    };
                                                                } catch (e) {
                                                                    reject(e);
                                                                }
                                                            });
                                                        })["catch"](reject);
                                                    });

                                                    executeCallback(promise, callback);
                                                    return promise;
                                                }

                                                function dropInstance(options, callback) {
                                                    callback = getCallback.apply(this, arguments);

                                                    var currentConfig = this.config();
                                                    options = typeof options !== 'function' && options || {};
                                                    if (!options.name) {
                                                        options.name = options.name || currentConfig.name;
                                                        options.storeName = options.storeName || currentConfig.storeName;
                                                    }

                                                    var self = this;
                                                    var promise;
                                                    if (!options.name) {
                                                        promise = Promise$1.reject('Invalid arguments');
                                                    } else {
                                                        var isCurrentDb = options.name === currentConfig.name && self._dbInfo.db;

                                                        var dbPromise = isCurrentDb ? Promise$1.resolve(self._dbInfo.db) : _getOriginalConnection(options).then(function (db) {
                                                            var dbContext = dbContexts[options.name];
                                                            var forages = dbContext.forages;
                                                            dbContext.db = db;
                                                            for (var i = 0; i < forages.length; i++) {
                                                                forages[i]._dbInfo.db = db;
                                                            }
                                                            return db;
                                                        });

                                                        if (!options.storeName) {
                                                            promise = dbPromise.then(function (db) {
                                                                _deferReadiness(options);

                                                                var dbContext = dbContexts[options.name];
                                                                var forages = dbContext.forages;

                                                                db.close();
                                                                for (var i = 0; i < forages.length; i++) {
                                                                    var forage = forages[i];
                                                                    forage._dbInfo.db = null;
                                                                }

                                                                var dropDBPromise = new Promise$1(function (resolve, reject) {
                                                                    var req = idb.deleteDatabase(options.name);

                                                                    req.onerror = req.onblocked = function (err) {
                                                                        var db = req.result;
                                                                        if (db) {
                                                                            db.close();
                                                                        }
                                                                        reject(err);
                                                                    };

                                                                    req.onsuccess = function () {
                                                                        var db = req.result;
                                                                        if (db) {
                                                                            db.close();
                                                                        }
                                                                        resolve(db);
                                                                    };
                                                                });

                                                                return dropDBPromise.then(function (db) {
                                                                    dbContext.db = db;
                                                                    for (var i = 0; i < forages.length; i++) {
                                                                        var _forage = forages[i];
                                                                        _advanceReadiness(_forage._dbInfo);
                                                                    }
                                                                })["catch"](function (err) {
                                                                    (_rejectReadiness(options, err) || Promise$1.resolve())["catch"](function () {});
                                                                    throw err;
                                                                });
                                                            });
                                                        } else {
                                                            promise = dbPromise.then(function (db) {
                                                                if (!db.objectStoreNames.contains(options.storeName)) {
                                                                    return;
                                                                }

                                                                var newVersion = db.version + 1;

                                                                _deferReadiness(options);

                                                                var dbContext = dbContexts[options.name];
                                                                var forages = dbContext.forages;

                                                                db.close();
                                                                for (var i = 0; i < forages.length; i++) {
                                                                    var forage = forages[i];
                                                                    forage._dbInfo.db = null;
                                                                    forage._dbInfo.version = newVersion;
                                                                }

                                                                var dropObjectPromise = new Promise$1(function (resolve, reject) {
                                                                    var req = idb.open(options.name, newVersion);

                                                                    req.onerror = function (err) {
                                                                        var db = req.result;
                                                                        db.close();
                                                                        reject(err);
                                                                    };

                                                                    req.onupgradeneeded = function () {
                                                                        var db = req.result;
                                                                        db.deleteObjectStore(options.storeName);
                                                                    };

                                                                    req.onsuccess = function () {
                                                                        var db = req.result;
                                                                        db.close();
                                                                        resolve(db);
                                                                    };
                                                                });

                                                                return dropObjectPromise.then(function (db) {
                                                                    dbContext.db = db;
                                                                    for (var j = 0; j < forages.length; j++) {
                                                                        var _forage2 = forages[j];
                                                                        _forage2._dbInfo.db = db;
                                                                        _advanceReadiness(_forage2._dbInfo);
                                                                    }
                                                                })["catch"](function (err) {
                                                                    (_rejectReadiness(options, err) || Promise$1.resolve())["catch"](function () {});
                                                                    throw err;
                                                                });
                                                            });
                                                        }
                                                    }

                                                    executeCallback(promise, callback);
                                                    return promise;
                                                }

                                                var asyncStorage = {
                                                    _driver: 'asyncStorage',
                                                    _initStorage: _initStorage,
                                                    _support: isIndexedDBValid(),
                                                    iterate: iterate,
                                                    getItem: getItem,
                                                    setItem: setItem,
                                                    removeItem: removeItem,
                                                    clear: clear,
                                                    length: length,
                                                    key: key,
                                                    keys: keys,
                                                    dropInstance: dropInstance
                                                };

                                                function isWebSQLValid() {
                                                    return typeof openDatabase === 'function';
                                                }

                                                // Sadly, the best way to save binary data in WebSQL/localStorage is serializing
                                                // it to Base64, so this is how we store it to prevent very strange errors with less
                                                // verbose ways of binary <-> string data storage.
                                                var BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

                                                var BLOB_TYPE_PREFIX = '~~local_forage_type~';
                                                var BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;

                                                var SERIALIZED_MARKER = '__lfsc__:';
                                                var SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;

                                                // OMG the serializations!
                                                var TYPE_ARRAYBUFFER = 'arbf';
                                                var TYPE_BLOB = 'blob';
                                                var TYPE_INT8ARRAY = 'si08';
                                                var TYPE_UINT8ARRAY = 'ui08';
                                                var TYPE_UINT8CLAMPEDARRAY = 'uic8';
                                                var TYPE_INT16ARRAY = 'si16';
                                                var TYPE_INT32ARRAY = 'si32';
                                                var TYPE_UINT16ARRAY = 'ur16';
                                                var TYPE_UINT32ARRAY = 'ui32';
                                                var TYPE_FLOAT32ARRAY = 'fl32';
                                                var TYPE_FLOAT64ARRAY = 'fl64';
                                                var TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;

                                                var toString$1 = Object.prototype.toString;

                                                function stringToBuffer(serializedString) {
                                                    // Fill the string into a ArrayBuffer.
                                                    var bufferLength = serializedString.length * 0.75;
                                                    var len = serializedString.length;
                                                    var i;
                                                    var p = 0;
                                                    var encoded1, encoded2, encoded3, encoded4;

                                                    if (serializedString[serializedString.length - 1] === '=') {
                                                        bufferLength--;
                                                        if (serializedString[serializedString.length - 2] === '=') {
                                                            bufferLength--;
                                                        }
                                                    }

                                                    var buffer = new ArrayBuffer(bufferLength);
                                                    var bytes = new Uint8Array(buffer);

                                                    for (i = 0; i < len; i += 4) {
                                                        encoded1 = BASE_CHARS.indexOf(serializedString[i]);
                                                        encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);
                                                        encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);
                                                        encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);

                                                        /*jslint bitwise: true */
                                                        bytes[p++] = encoded1 << 2 | encoded2 >> 4;
                                                        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
                                                        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
                                                    }
                                                    return buffer;
                                                }

                                                // Converts a buffer to a string to store, serialized, in the backend
                                                // storage library.
                                                function bufferToString(buffer) {
                                                    // base64-arraybuffer
                                                    var bytes = new Uint8Array(buffer);
                                                    var base64String = '';
                                                    var i;

                                                    for (i = 0; i < bytes.length; i += 3) {
                                                        /*jslint bitwise: true */
                                                        base64String += BASE_CHARS[bytes[i] >> 2];
                                                        base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
                                                        base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
                                                        base64String += BASE_CHARS[bytes[i + 2] & 63];
                                                    }

                                                    if (bytes.length % 3 === 2) {
                                                        base64String = base64String.substring(0, base64String.length - 1) + '=';
                                                    } else if (bytes.length % 3 === 1) {
                                                        base64String = base64String.substring(0, base64String.length - 2) + '==';
                                                    }

                                                    return base64String;
                                                }

                                                // Serialize a value, afterwards executing a callback (which usually
                                                // instructs the `setItem()` callback/promise to be executed). This is how
                                                // we store binary data with localStorage.
                                                function serialize(value, callback) {
                                                    var valueType = '';
                                                    if (value) {
                                                        valueType = toString$1.call(value);
                                                    }

                                                    // Cannot use `value instanceof ArrayBuffer` or such here, as these
                                                    // checks fail when running the tests using casper.js...
                                                    //
                                                    // TODO: See why those tests fail and use a better solution.
                                                    if (value && (valueType === '[object ArrayBuffer]' || value.buffer && toString$1.call(value.buffer) === '[object ArrayBuffer]')) {
                                                        // Convert binary arrays to a string and prefix the string with
                                                        // a special marker.
                                                        var buffer;
                                                        var marker = SERIALIZED_MARKER;

                                                        if (value instanceof ArrayBuffer) {
                                                            buffer = value;
                                                            marker += TYPE_ARRAYBUFFER;
                                                        } else {
                                                            buffer = value.buffer;

                                                            if (valueType === '[object Int8Array]') {
                                                                marker += TYPE_INT8ARRAY;
                                                            } else if (valueType === '[object Uint8Array]') {
                                                                marker += TYPE_UINT8ARRAY;
                                                            } else if (valueType === '[object Uint8ClampedArray]') {
                                                                marker += TYPE_UINT8CLAMPEDARRAY;
                                                            } else if (valueType === '[object Int16Array]') {
                                                                marker += TYPE_INT16ARRAY;
                                                            } else if (valueType === '[object Uint16Array]') {
                                                                marker += TYPE_UINT16ARRAY;
                                                            } else if (valueType === '[object Int32Array]') {
                                                                marker += TYPE_INT32ARRAY;
                                                            } else if (valueType === '[object Uint32Array]') {
                                                                marker += TYPE_UINT32ARRAY;
                                                            } else if (valueType === '[object Float32Array]') {
                                                                marker += TYPE_FLOAT32ARRAY;
                                                            } else if (valueType === '[object Float64Array]') {
                                                                marker += TYPE_FLOAT64ARRAY;
                                                            } else {
                                                                callback(new Error('Failed to get type for BinaryArray'));
                                                            }
                                                        }

                                                        callback(marker + bufferToString(buffer));
                                                    } else if (valueType === '[object Blob]') {
                                                        // Conver the blob to a binaryArray and then to a string.
                                                        var fileReader = new FileReader();

                                                        fileReader.onload = function () {
                                                            // Backwards-compatible prefix for the blob type.
                                                            var str = BLOB_TYPE_PREFIX + value.type + '~' + bufferToString(this.result);

                                                            callback(SERIALIZED_MARKER + TYPE_BLOB + str);
                                                        };

                                                        fileReader.readAsArrayBuffer(value);
                                                    } else {
                                                        try {
                                                            callback(JSON.stringify(value));
                                                        } catch (e) {
                                                            console.error("Couldn't convert value into a JSON string: ", value);

                                                            callback(null, e);
                                                        }
                                                    }
                                                }

                                                // Deserialize data we've inserted into a value column/field. We place
                                                // special markers into our strings to mark them as encoded; this isn't
                                                // as nice as a meta field, but it's the only sane thing we can do whilst
                                                // keeping localStorage support intact.
                                                //
                                                // Oftentimes this will just deserialize JSON content, but if we have a
                                                // special marker (SERIALIZED_MARKER, defined above), we will extract
                                                // some kind of arraybuffer/binary data/typed array out of the string.
                                                function deserialize(value) {
                                                    // If we haven't marked this string as being specially serialized (i.e.
                                                    // something other than serialized JSON), we can just return it and be
                                                    // done with it.
                                                    if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {
                                                        return JSON.parse(value);
                                                    }

                                                    // The following code deals with deserializing some kind of Blob or
                                                    // TypedArray. First we separate out the type of data we're dealing
                                                    // with from the data itself.
                                                    var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);
                                                    var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);

                                                    var blobType;
                                                    // Backwards-compatible blob type serialization strategy.
                                                    // DBs created with older versions of localForage will simply not have the blob type.
                                                    if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {
                                                        var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);
                                                        blobType = matcher[1];
                                                        serializedString = serializedString.substring(matcher[0].length);
                                                    }
                                                    var buffer = stringToBuffer(serializedString);

                                                    // Return the right type based on the code/type set during
                                                    // serialization.
                                                    switch (type) {
                                                        case TYPE_ARRAYBUFFER:
                                                            return buffer;
                                                        case TYPE_BLOB:
                                                            return createBlob([buffer], { type: blobType });
                                                        case TYPE_INT8ARRAY:
                                                            return new Int8Array(buffer);
                                                        case TYPE_UINT8ARRAY:
                                                            return new Uint8Array(buffer);
                                                        case TYPE_UINT8CLAMPEDARRAY:
                                                            return new Uint8ClampedArray(buffer);
                                                        case TYPE_INT16ARRAY:
                                                            return new Int16Array(buffer);
                                                        case TYPE_UINT16ARRAY:
                                                            return new Uint16Array(buffer);
                                                        case TYPE_INT32ARRAY:
                                                            return new Int32Array(buffer);
                                                        case TYPE_UINT32ARRAY:
                                                            return new Uint32Array(buffer);
                                                        case TYPE_FLOAT32ARRAY:
                                                            return new Float32Array(buffer);
                                                        case TYPE_FLOAT64ARRAY:
                                                            return new Float64Array(buffer);
                                                        default:
                                                            throw new Error('Unkown type: ' + type);
                                                    }
                                                }

                                                var localforageSerializer = {
                                                    serialize: serialize,
                                                    deserialize: deserialize,
                                                    stringToBuffer: stringToBuffer,
                                                    bufferToString: bufferToString
                                                };

                                                /*
                                                 * Includes code from:
                                                 *
                                                 * base64-arraybuffer
                                                 * https://github.com/niklasvh/base64-arraybuffer
                                                 *
                                                 * Copyright (c) 2012 Niklas von Hertzen
                                                 * Licensed under the MIT license.
                                                 */

                                                function createDbTable(t, dbInfo, callback, errorCallback) {
                                                    t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' ' + '(id INTEGER PRIMARY KEY, key unique, value)', [], callback, errorCallback);
                                                }

                                                // Open the WebSQL database (automatically creates one if one didn't
                                                // previously exist), using any options set in the config.
                                                function _initStorage$1(options) {
                                                    var self = this;
                                                    var dbInfo = {
                                                        db: null
                                                    };

                                                    if (options) {
                                                        for (var i in options) {
                                                            dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];
                                                        }
                                                    }

                                                    var dbInfoPromise = new Promise$1(function (resolve, reject) {
                                                        // Open the database; the openDatabase API will automatically
                                                        // create it for us if it doesn't exist.
                                                        try {
                                                            dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);
                                                        } catch (e) {
                                                            return reject(e);
                                                        }

                                                        // Create our key/value table if it doesn't exist.
                                                        dbInfo.db.transaction(function (t) {
                                                            createDbTable(t, dbInfo, function () {
                                                                self._dbInfo = dbInfo;
                                                                resolve();
                                                            }, function (t, error) {
                                                                reject(error);
                                                            });
                                                        }, reject);
                                                    });

                                                    dbInfo.serializer = localforageSerializer;
                                                    return dbInfoPromise;
                                                }

                                                function tryExecuteSql(t, dbInfo, sqlStatement, args, callback, errorCallback) {
                                                    t.executeSql(sqlStatement, args, callback, function (t, error) {
                                                        if (error.code === error.SYNTAX_ERR) {
                                                            t.executeSql('SELECT name FROM sqlite_master ' + "WHERE type='table' AND name = ?", [dbInfo.storeName], function (t, results) {
                                                                if (!results.rows.length) {
                                                                    // if the table is missing (was deleted)
                                                                    // re-create it table and retry
                                                                    createDbTable(t, dbInfo, function () {
                                                                        t.executeSql(sqlStatement, args, callback, errorCallback);
                                                                    }, errorCallback);
                                                                } else {
                                                                    errorCallback(t, error);
                                                                }
                                                            }, errorCallback);
                                                        } else {
                                                            errorCallback(t, error);
                                                        }
                                                    }, errorCallback);
                                                }

                                                function getItem$1(key, callback) {
                                                    var self = this;

                                                    key = normalizeKey(key);

                                                    var promise = new Promise$1(function (resolve, reject) {
                                                        self.ready().then(function () {
                                                            var dbInfo = self._dbInfo;
                                                            dbInfo.db.transaction(function (t) {
                                                                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName + ' WHERE key = ? LIMIT 1', [key], function (t, results) {
                                                                    var result = results.rows.length ? results.rows.item(0).value : null;

                                                                    // Check to see if this is serialized content we need to
                                                                    // unpack.
                                                                    if (result) {
                                                                        result = dbInfo.serializer.deserialize(result);
                                                                    }

                                                                    resolve(result);
                                                                }, function (t, error) {
                                                                    reject(error);
                                                                });
                                                            });
                                                        })["catch"](reject);
                                                    });

                                                    executeCallback(promise, callback);
                                                    return promise;
                                                }

                                                function iterate$1(iterator, callback) {
                                                    var self = this;

                                                    var promise = new Promise$1(function (resolve, reject) {
                                                        self.ready().then(function () {
                                                            var dbInfo = self._dbInfo;

                                                            dbInfo.db.transaction(function (t) {
                                                                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName, [], function (t, results) {
                                                                    var rows = results.rows;
                                                                    var length = rows.length;

                                                                    for (var i = 0; i < length; i++) {
                                                                        var item = rows.item(i);
                                                                        var result = item.value;

                                                                        // Check to see if this is serialized content
                                                                        // we need to unpack.
                                                                        if (result) {
                                                                            result = dbInfo.serializer.deserialize(result);
                                                                        }

                                                                        result = iterator(result, item.key, i + 1);

                                                                        // void(0) prevents problems with redefinition
                                                                        // of `undefined`.
                                                                        if (result !== void 0) {
                                                                            resolve(result);
                                                                            return;
                                                                        }
                                                                    }

                                                                    resolve();
                                                                }, function (t, error) {
                                                                    reject(error);
                                                                });
                                                            });
                                                        })["catch"](reject);
                                                    });

                                                    executeCallback(promise, callback);
                                                    return promise;
                                                }

                                                function _setItem(key, value, callback, retriesLeft) {
                                                    var self = this;

                                                    key = normalizeKey(key);

                                                    var promise = new Promise$1(function (resolve, reject) {
                                                        self.ready().then(function () {
                                                            // The localStorage API doesn't return undefined values in an
                                                            // "expected" way, so undefined is always cast to null in all
                                                            // drivers. See: https://github.com/mozilla/localForage/pull/42
                                                            if (value === undefined) {
                                                                value = null;
                                                            }

                                                            // Save the original value to pass to the callback.
                                                            var originalValue = value;

                                                            var dbInfo = self._dbInfo;
                                                            dbInfo.serializer.serialize(value, function (value, error) {
                                                                if (error) {
                                                                    reject(error);
                                                                } else {
                                                                    dbInfo.db.transaction(function (t) {
                                                                        tryExecuteSql(t, dbInfo, 'INSERT OR REPLACE INTO ' + dbInfo.storeName + ' ' + '(key, value) VALUES (?, ?)', [key, value], function () {
                                                                            resolve(originalValue);
                                                                        }, function (t, error) {
                                                                            reject(error);
                                                                        });
                                                                    }, function (sqlError) {
                                                                        // The transaction failed; check
                                                                        // to see if it's a quota error.
                                                                        if (sqlError.code === sqlError.QUOTA_ERR) {
                                                                            // We reject the callback outright for now, but
                                                                            // it's worth trying to re-run the transaction.
                                                                            // Even if the user accepts the prompt to use
                                                                            // more storage on Safari, this error will
                                                                            // be called.
                                                                            //
                                                                            // Try to re-run the transaction.
                                                                            if (retriesLeft > 0) {
                                                                                resolve(_setItem.apply(self, [key, originalValue, callback, retriesLeft - 1]));
                                                                                return;
                                                                            }
                                                                            reject(sqlError);
                                                                        }
                                                                    });
                                                                }
                                                            });
                                                        })["catch"](reject);
                                                    });

                                                    executeCallback(promise, callback);
                                                    return promise;
                                                }

                                                function setItem$1(key, value, callback) {
                                                    return _setItem.apply(this, [key, value, callback, 1]);
                                                }

                                                function removeItem$1(key, callback) {
                                                    var self = this;

                                                    key = normalizeKey(key);

                                                    var promise = new Promise$1(function (resolve, reject) {
                                                        self.ready().then(function () {
                                                            var dbInfo = self._dbInfo;
                                                            dbInfo.db.transaction(function (t) {
                                                                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName + ' WHERE key = ?', [key], function () {
                                                                    resolve();
                                                                }, function (t, error) {
                                                                    reject(error);
                                                                });
                                                            });
                                                        })["catch"](reject);
                                                    });

                                                    executeCallback(promise, callback);
                                                    return promise;
                                                }

                                                // Deletes every item in the table.
                                                // TODO: Find out if this resets the AUTO_INCREMENT number.
                                                function clear$1(callback) {
                                                    var self = this;

                                                    var promise = new Promise$1(function (resolve, reject) {
                                                        self.ready().then(function () {
                                                            var dbInfo = self._dbInfo;
                                                            dbInfo.db.transaction(function (t) {
                                                                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName, [], function () {
                                                                    resolve();
                                                                }, function (t, error) {
                                                                    reject(error);
                                                                });
                                                            });
                                                        })["catch"](reject);
                                                    });

                                                    executeCallback(promise, callback);
                                                    return promise;
                                                }

                                                // Does a simple `COUNT(key)` to get the number of items stored in
                                                // localForage.
                                                function length$1(callback) {
                                                    var self = this;

                                                    var promise = new Promise$1(function (resolve, reject) {
                                                        self.ready().then(function () {
                                                            var dbInfo = self._dbInfo;
                                                            dbInfo.db.transaction(function (t) {
                                                                // Ahhh, SQL makes this one soooooo easy.
                                                                tryExecuteSql(t, dbInfo, 'SELECT COUNT(key) as c FROM ' + dbInfo.storeName, [], function (t, results) {
                                                                    var result = results.rows.item(0).c;
                                                                    resolve(result);
                                                                }, function (t, error) {
                                                                    reject(error);
                                                                });
                                                            });
                                                        })["catch"](reject);
                                                    });

                                                    executeCallback(promise, callback);
                                                    return promise;
                                                }

                                                // Return the key located at key index X; essentially gets the key from a
                                                // `WHERE id = ?`. This is the most efficient way I can think to implement
                                                // this rarely-used (in my experience) part of the API, but it can seem
                                                // inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so
                                                // the ID of each key will change every time it's updated. Perhaps a stored
                                                // procedure for the `setItem()` SQL would solve this problem?
                                                // TODO: Don't change ID on `setItem()`.
                                                function key$1(n, callback) {
                                                    var self = this;

                                                    var promise = new Promise$1(function (resolve, reject) {
                                                        self.ready().then(function () {
                                                            var dbInfo = self._dbInfo;
                                                            dbInfo.db.transaction(function (t) {
                                                                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName + ' WHERE id = ? LIMIT 1', [n + 1], function (t, results) {
                                                                    var result = results.rows.length ? results.rows.item(0).key : null;
                                                                    resolve(result);
                                                                }, function (t, error) {
                                                                    reject(error);
                                                                });
                                                            });
                                                        })["catch"](reject);
                                                    });

                                                    executeCallback(promise, callback);
                                                    return promise;
                                                }

                                                function keys$1(callback) {
                                                    var self = this;

                                                    var promise = new Promise$1(function (resolve, reject) {
                                                        self.ready().then(function () {
                                                            var dbInfo = self._dbInfo;
                                                            dbInfo.db.transaction(function (t) {
                                                                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName, [], function (t, results) {
                                                                    var keys = [];

                                                                    for (var i = 0; i < results.rows.length; i++) {
                                                                        keys.push(results.rows.item(i).key);
                                                                    }

                                                                    resolve(keys);
                                                                }, function (t, error) {
                                                                    reject(error);
                                                                });
                                                            });
                                                        })["catch"](reject);
                                                    });

                                                    executeCallback(promise, callback);
                                                    return promise;
                                                }

                                                // https://www.w3.org/TR/webdatabase/#databases
                                                // > There is no way to enumerate or delete the databases available for an origin from this API.
                                                function getAllStoreNames(db) {
                                                    return new Promise$1(function (resolve, reject) {
                                                        db.transaction(function (t) {
                                                            t.executeSql('SELECT name FROM sqlite_master ' + "WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'", [], function (t, results) {
                                                                var storeNames = [];

                                                                for (var i = 0; i < results.rows.length; i++) {
                                                                    storeNames.push(results.rows.item(i).name);
                                                                }

                                                                resolve({
                                                                    db: db,
                                                                    storeNames: storeNames
                                                                });
                                                            }, function (t, error) {
                                                                reject(error);
                                                            });
                                                        }, function (sqlError) {
                                                            reject(sqlError);
                                                        });
                                                    });
                                                }

                                                function dropInstance$1(options, callback) {
                                                    callback = getCallback.apply(this, arguments);

                                                    var currentConfig = this.config();
                                                    options = typeof options !== 'function' && options || {};
                                                    if (!options.name) {
                                                        options.name = options.name || currentConfig.name;
                                                        options.storeName = options.storeName || currentConfig.storeName;
                                                    }

                                                    var self = this;
                                                    var promise;
                                                    if (!options.name) {
                                                        promise = Promise$1.reject('Invalid arguments');
                                                    } else {
                                                        promise = new Promise$1(function (resolve) {
                                                            var db;
                                                            if (options.name === currentConfig.name) {
                                                                // use the db reference of the current instance
                                                                db = self._dbInfo.db;
                                                            } else {
                                                                db = openDatabase(options.name, '', '', 0);
                                                            }

                                                            if (!options.storeName) {
                                                                // drop all database tables
                                                                resolve(getAllStoreNames(db));
                                                            } else {
                                                                resolve({
                                                                    db: db,
                                                                    storeNames: [options.storeName]
                                                                });
                                                            }
                                                        }).then(function (operationInfo) {
                                                            return new Promise$1(function (resolve, reject) {
                                                                operationInfo.db.transaction(function (t) {
                                                                    function dropTable(storeName) {
                                                                        return new Promise$1(function (resolve, reject) {
                                                                            t.executeSql('DROP TABLE IF EXISTS ' + storeName, [], function () {
                                                                                resolve();
                                                                            }, function (t, error) {
                                                                                reject(error);
                                                                            });
                                                                        });
                                                                    }

                                                                    var operations = [];
                                                                    for (var i = 0, len = operationInfo.storeNames.length; i < len; i++) {
                                                                        operations.push(dropTable(operationInfo.storeNames[i]));
                                                                    }

                                                                    Promise$1.all(operations).then(function () {
                                                                        resolve();
                                                                    })["catch"](function (e) {
                                                                        reject(e);
                                                                    });
                                                                }, function (sqlError) {
                                                                    reject(sqlError);
                                                                });
                                                            });
                                                        });
                                                    }

                                                    executeCallback(promise, callback);
                                                    return promise;
                                                }

                                                var webSQLStorage = {
                                                    _driver: 'webSQLStorage',
                                                    _initStorage: _initStorage$1,
                                                    _support: isWebSQLValid(),
                                                    iterate: iterate$1,
                                                    getItem: getItem$1,
                                                    setItem: setItem$1,
                                                    removeItem: removeItem$1,
                                                    clear: clear$1,
                                                    length: length$1,
                                                    key: key$1,
                                                    keys: keys$1,
                                                    dropInstance: dropInstance$1
                                                };

                                                function isLocalStorageValid() {
                                                    try {
                                                        return typeof localStorage !== 'undefined' && 'setItem' in localStorage &&
                                                        // in IE8 typeof localStorage.setItem === 'object'
                                                        !!localStorage.setItem;
                                                    } catch (e) {
                                                        return false;
                                                    }
                                                }

                                                function _getKeyPrefix(options, defaultConfig) {
                                                    var keyPrefix = options.name + '/';

                                                    if (options.storeName !== defaultConfig.storeName) {
                                                        keyPrefix += options.storeName + '/';
                                                    }
                                                    return keyPrefix;
                                                }

                                                // Check if localStorage throws when saving an item
                                                function checkIfLocalStorageThrows() {
                                                    var localStorageTestKey = '_localforage_support_test';

                                                    try {
                                                        localStorage.setItem(localStorageTestKey, true);
                                                        localStorage.removeItem(localStorageTestKey);

                                                        return false;
                                                    } catch (e) {
                                                        return true;
                                                    }
                                                }

                                                // Check if localStorage is usable and allows to save an item
                                                // This method checks if localStorage is usable in Safari Private Browsing
                                                // mode, or in any other case where the available quota for localStorage
                                                // is 0 and there wasn't any saved items yet.
                                                function _isLocalStorageUsable() {
                                                    return !checkIfLocalStorageThrows() || localStorage.length > 0;
                                                }

                                                // Config the localStorage backend, using options set in the config.
                                                function _initStorage$2(options) {
                                                    var self = this;
                                                    var dbInfo = {};
                                                    if (options) {
                                                        for (var i in options) {
                                                            dbInfo[i] = options[i];
                                                        }
                                                    }

                                                    dbInfo.keyPrefix = _getKeyPrefix(options, self._defaultConfig);

                                                    if (!_isLocalStorageUsable()) {
                                                        return Promise$1.reject();
                                                    }

                                                    self._dbInfo = dbInfo;
                                                    dbInfo.serializer = localforageSerializer;

                                                    return Promise$1.resolve();
                                                }

                                                // Remove all keys from the datastore, effectively destroying all data in
                                                // the app's key/value store!
                                                function clear$2(callback) {
                                                    var self = this;
                                                    var promise = self.ready().then(function () {
                                                        var keyPrefix = self._dbInfo.keyPrefix;

                                                        for (var i = localStorage.length - 1; i >= 0; i--) {
                                                            var key = localStorage.key(i);

                                                            if (key.indexOf(keyPrefix) === 0) {
                                                                localStorage.removeItem(key);
                                                            }
                                                        }
                                                    });

                                                    executeCallback(promise, callback);
                                                    return promise;
                                                }

                                                // Retrieve an item from the store. Unlike the original async_storage
                                                // library in Gaia, we don't modify return values at all. If a key's value
                                                // is `undefined`, we pass that value to the callback function.
                                                function getItem$2(key, callback) {
                                                    var self = this;

                                                    key = normalizeKey(key);

                                                    var promise = self.ready().then(function () {
                                                        var dbInfo = self._dbInfo;
                                                        var result = localStorage.getItem(dbInfo.keyPrefix + key);

                                                        // If a result was found, parse it from the serialized
                                                        // string into a JS object. If result isn't truthy, the key
                                                        // is likely undefined and we'll pass it straight to the
                                                        // callback.
                                                        if (result) {
                                                            result = dbInfo.serializer.deserialize(result);
                                                        }

                                                        return result;
                                                    });

                                                    executeCallback(promise, callback);
                                                    return promise;
                                                }

                                                // Iterate over all items in the store.
                                                function iterate$2(iterator, callback) {
                                                    var self = this;

                                                    var promise = self.ready().then(function () {
                                                        var dbInfo = self._dbInfo;
                                                        var keyPrefix = dbInfo.keyPrefix;
                                                        var keyPrefixLength = keyPrefix.length;
                                                        var length = localStorage.length;

                                                        // We use a dedicated iterator instead of the `i` variable below
                                                        // so other keys we fetch in localStorage aren't counted in
                                                        // the `iterationNumber` argument passed to the `iterate()`
                                                        // callback.
                                                        //
                                                        // See: github.com/mozilla/localForage/pull/435#discussion_r38061530
                                                        var iterationNumber = 1;

                                                        for (var i = 0; i < length; i++) {
                                                            var key = localStorage.key(i);
                                                            if (key.indexOf(keyPrefix) !== 0) {
                                                                continue;
                                                            }
                                                            var value = localStorage.getItem(key);

                                                            // If a result was found, parse it from the serialized
                                                            // string into a JS object. If result isn't truthy, the
                                                            // key is likely undefined and we'll pass it straight
                                                            // to the iterator.
                                                            if (value) {
                                                                value = dbInfo.serializer.deserialize(value);
                                                            }

                                                            value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);

                                                            if (value !== void 0) {
                                                                return value;
                                                            }
                                                        }
                                                    });

                                                    executeCallback(promise, callback);
                                                    return promise;
                                                }

                                                // Same as localStorage's key() method, except takes a callback.
                                                function key$2(n, callback) {
                                                    var self = this;
                                                    var promise = self.ready().then(function () {
                                                        var dbInfo = self._dbInfo;
                                                        var result;
                                                        try {
                                                            result = localStorage.key(n);
                                                        } catch (error) {
                                                            result = null;
                                                        }

                                                        // Remove the prefix from the key, if a key is found.
                                                        if (result) {
                                                            result = result.substring(dbInfo.keyPrefix.length);
                                                        }

                                                        return result;
                                                    });

                                                    executeCallback(promise, callback);
                                                    return promise;
                                                }

                                                function keys$2(callback) {
                                                    var self = this;
                                                    var promise = self.ready().then(function () {
                                                        var dbInfo = self._dbInfo;
                                                        var length = localStorage.length;
                                                        var keys = [];

                                                        for (var i = 0; i < length; i++) {
                                                            var itemKey = localStorage.key(i);
                                                            if (itemKey.indexOf(dbInfo.keyPrefix) === 0) {
                                                                keys.push(itemKey.substring(dbInfo.keyPrefix.length));
                                                            }
                                                        }

                                                        return keys;
                                                    });

                                                    executeCallback(promise, callback);
                                                    return promise;
                                                }

                                                // Supply the number of keys in the datastore to the callback function.
                                                function length$2(callback) {
                                                    var self = this;
                                                    var promise = self.keys().then(function (keys) {
                                                        return keys.length;
                                                    });

                                                    executeCallback(promise, callback);
                                                    return promise;
                                                }

                                                // Remove an item from the store, nice and simple.
                                                function removeItem$2(key, callback) {
                                                    var self = this;

                                                    key = normalizeKey(key);

                                                    var promise = self.ready().then(function () {
                                                        var dbInfo = self._dbInfo;
                                                        localStorage.removeItem(dbInfo.keyPrefix + key);
                                                    });

                                                    executeCallback(promise, callback);
                                                    return promise;
                                                }

                                                // Set a key's value and run an optional callback once the value is set.
                                                // Unlike Gaia's implementation, the callback function is passed the value,
                                                // in case you want to operate on that value only after you're sure it
                                                // saved, or something like that.
                                                function setItem$2(key, value, callback) {
                                                    var self = this;

                                                    key = normalizeKey(key);

                                                    var promise = self.ready().then(function () {
                                                        // Convert undefined values to null.
                                                        // https://github.com/mozilla/localForage/pull/42
                                                        if (value === undefined) {
                                                            value = null;
                                                        }

                                                        // Save the original value to pass to the callback.
                                                        var originalValue = value;

                                                        return new Promise$1(function (resolve, reject) {
                                                            var dbInfo = self._dbInfo;
                                                            dbInfo.serializer.serialize(value, function (value, error) {
                                                                if (error) {
                                                                    reject(error);
                                                                } else {
                                                                    try {
                                                                        localStorage.setItem(dbInfo.keyPrefix + key, value);
                                                                        resolve(originalValue);
                                                                    } catch (e) {
                                                                        // localStorage capacity exceeded.
                                                                        // TODO: Make this a specific error/event.
                                                                        if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {
                                                                            reject(e);
                                                                        }
                                                                        reject(e);
                                                                    }
                                                                }
                                                            });
                                                        });
                                                    });

                                                    executeCallback(promise, callback);
                                                    return promise;
                                                }

                                                function dropInstance$2(options, callback) {
                                                    callback = getCallback.apply(this, arguments);

                                                    options = typeof options !== 'function' && options || {};
                                                    if (!options.name) {
                                                        var currentConfig = this.config();
                                                        options.name = options.name || currentConfig.name;
                                                        options.storeName = options.storeName || currentConfig.storeName;
                                                    }

                                                    var self = this;
                                                    var promise;
                                                    if (!options.name) {
                                                        promise = Promise$1.reject('Invalid arguments');
                                                    } else {
                                                        promise = new Promise$1(function (resolve) {
                                                            if (!options.storeName) {
                                                                resolve(options.name + '/');
                                                            } else {
                                                                resolve(_getKeyPrefix(options, self._defaultConfig));
                                                            }
                                                        }).then(function (keyPrefix) {
                                                            for (var i = localStorage.length - 1; i >= 0; i--) {
                                                                var key = localStorage.key(i);

                                                                if (key.indexOf(keyPrefix) === 0) {
                                                                    localStorage.removeItem(key);
                                                                }
                                                            }
                                                        });
                                                    }

                                                    executeCallback(promise, callback);
                                                    return promise;
                                                }

                                                var localStorageWrapper = {
                                                    _driver: 'localStorageWrapper',
                                                    _initStorage: _initStorage$2,
                                                    _support: isLocalStorageValid(),
                                                    iterate: iterate$2,
                                                    getItem: getItem$2,
                                                    setItem: setItem$2,
                                                    removeItem: removeItem$2,
                                                    clear: clear$2,
                                                    length: length$2,
                                                    key: key$2,
                                                    keys: keys$2,
                                                    dropInstance: dropInstance$2
                                                };

                                                var sameValue = function sameValue(x, y) {
                                                    return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);
                                                };

                                                var includes = function includes(array, searchElement) {
                                                    var len = array.length;
                                                    var i = 0;
                                                    while (i < len) {
                                                        if (sameValue(array[i], searchElement)) {
                                                            return true;
                                                        }
                                                        i++;
                                                    }

                                                    return false;
                                                };

                                                var isArray = Array.isArray || function (arg) {
                                                    return Object.prototype.toString.call(arg) === '[object Array]';
                                                };

                                                // Drivers are stored here when `defineDriver()` is called.
                                                // They are shared across all instances of localForage.
                                                var DefinedDrivers = {};

                                                var DriverSupport = {};

                                                var DefaultDrivers = {
                                                    INDEXEDDB: asyncStorage,
                                                    WEBSQL: webSQLStorage,
                                                    LOCALSTORAGE: localStorageWrapper
                                                };

                                                var DefaultDriverOrder = [DefaultDrivers.INDEXEDDB._driver, DefaultDrivers.WEBSQL._driver, DefaultDrivers.LOCALSTORAGE._driver];

                                                var OptionalDriverMethods = ['dropInstance'];

                                                var LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'].concat(OptionalDriverMethods);

                                                var DefaultConfig = {
                                                    description: '',
                                                    driver: DefaultDriverOrder.slice(),
                                                    name: 'localforage',
                                                    // Default DB size is _JUST UNDER_ 5MB, as it's the highest size
                                                    // we can use without a prompt.
                                                    size: 4980736,
                                                    storeName: 'keyvaluepairs',
                                                    version: 1.0
                                                };

                                                function callWhenReady(localForageInstance, libraryMethod) {
                                                    localForageInstance[libraryMethod] = function () {
                                                        var _args = arguments;
                                                        return localForageInstance.ready().then(function () {
                                                            return localForageInstance[libraryMethod].apply(localForageInstance, _args);
                                                        });
                                                    };
                                                }

                                                function extend() {
                                                    for (var i = 1; i < arguments.length; i++) {
                                                        var arg = arguments[i];

                                                        if (arg) {
                                                            for (var _key in arg) {
                                                                if (arg.hasOwnProperty(_key)) {
                                                                    if (isArray(arg[_key])) {
                                                                        arguments[0][_key] = arg[_key].slice();
                                                                    } else {
                                                                        arguments[0][_key] = arg[_key];
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }

                                                    return arguments[0];
                                                }

                                                var LocalForage = function () {
                                                    function LocalForage(options) {
                                                        _classCallCheck(this, LocalForage);

                                                        for (var driverTypeKey in DefaultDrivers) {
                                                            if (DefaultDrivers.hasOwnProperty(driverTypeKey)) {
                                                                var driver = DefaultDrivers[driverTypeKey];
                                                                var driverName = driver._driver;
                                                                this[driverTypeKey] = driverName;

                                                                if (!DefinedDrivers[driverName]) {
                                                                    // we don't need to wait for the promise,
                                                                    // since the default drivers can be defined
                                                                    // in a blocking manner
                                                                    this.defineDriver(driver);
                                                                }
                                                            }
                                                        }

                                                        this._defaultConfig = extend({}, DefaultConfig);
                                                        this._config = extend({}, this._defaultConfig, options);
                                                        this._driverSet = null;
                                                        this._initDriver = null;
                                                        this._ready = false;
                                                        this._dbInfo = null;

                                                        this._wrapLibraryMethodsWithReady();
                                                        this.setDriver(this._config.driver)["catch"](function () {});
                                                    }

                                                    // Set any config values for localForage; can be called anytime before
                                                    // the first API call (e.g. `getItem`, `setItem`).
                                                    // We loop through options so we don't overwrite existing config
                                                    // values.


                                                    LocalForage.prototype.config = function config(options) {
                                                        // If the options argument is an object, we use it to set values.
                                                        // Otherwise, we return either a specified config value or all
                                                        // config values.
                                                        if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
                                                            // If localforage is ready and fully initialized, we can't set
                                                            // any new configuration values. Instead, we return an error.
                                                            if (this._ready) {
                                                                return new Error("Can't call config() after localforage " + 'has been used.');
                                                            }

                                                            for (var i in options) {
                                                                if (i === 'storeName') {
                                                                    options[i] = options[i].replace(/\W/g, '_');
                                                                }

                                                                if (i === 'version' && typeof options[i] !== 'number') {
                                                                    return new Error('Database version must be a number.');
                                                                }

                                                                this._config[i] = options[i];
                                                            }

                                                            // after all config options are set and
                                                            // the driver option is used, try setting it
                                                            if ('driver' in options && options.driver) {
                                                                return this.setDriver(this._config.driver);
                                                            }

                                                            return true;
                                                        } else if (typeof options === 'string') {
                                                            return this._config[options];
                                                        } else {
                                                            return this._config;
                                                        }
                                                    };

                                                    // Used to define a custom driver, shared across all instances of
                                                    // localForage.


                                                    LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {
                                                        var promise = new Promise$1(function (resolve, reject) {
                                                            try {
                                                                var driverName = driverObject._driver;
                                                                var complianceError = new Error('Custom driver not compliant; see ' + 'https://mozilla.github.io/localForage/#definedriver');

                                                                // A driver name should be defined and not overlap with the
                                                                // library-defined, default drivers.
                                                                if (!driverObject._driver) {
                                                                    reject(complianceError);
                                                                    return;
                                                                }

                                                                var driverMethods = LibraryMethods.concat('_initStorage');
                                                                for (var i = 0, len = driverMethods.length; i < len; i++) {
                                                                    var driverMethodName = driverMethods[i];

                                                                    // when the property is there,
                                                                    // it should be a method even when optional
                                                                    var isRequired = !includes(OptionalDriverMethods, driverMethodName);
                                                                    if ((isRequired || driverObject[driverMethodName]) && typeof driverObject[driverMethodName] !== 'function') {
                                                                        reject(complianceError);
                                                                        return;
                                                                    }
                                                                }

                                                                var configureMissingMethods = function configureMissingMethods() {
                                                                    var methodNotImplementedFactory = function methodNotImplementedFactory(methodName) {
                                                                        return function () {
                                                                            var error = new Error('Method ' + methodName + ' is not implemented by the current driver');
                                                                            var promise = Promise$1.reject(error);
                                                                            executeCallback(promise, arguments[arguments.length - 1]);
                                                                            return promise;
                                                                        };
                                                                    };

                                                                    for (var _i = 0, _len = OptionalDriverMethods.length; _i < _len; _i++) {
                                                                        var optionalDriverMethod = OptionalDriverMethods[_i];
                                                                        if (!driverObject[optionalDriverMethod]) {
                                                                            driverObject[optionalDriverMethod] = methodNotImplementedFactory(optionalDriverMethod);
                                                                        }
                                                                    }
                                                                };

                                                                configureMissingMethods();

                                                                var setDriverSupport = function setDriverSupport(support) {
                                                                    if (DefinedDrivers[driverName]) {
                                                                        console.info('Redefining LocalForage driver: ' + driverName);
                                                                    }
                                                                    DefinedDrivers[driverName] = driverObject;
                                                                    DriverSupport[driverName] = support;
                                                                    // don't use a then, so that we can define
                                                                    // drivers that have simple _support methods
                                                                    // in a blocking manner
                                                                    resolve();
                                                                };

                                                                if ('_support' in driverObject) {
                                                                    if (driverObject._support && typeof driverObject._support === 'function') {
                                                                        driverObject._support().then(setDriverSupport, reject);
                                                                    } else {
                                                                        setDriverSupport(!!driverObject._support);
                                                                    }
                                                                } else {
                                                                    setDriverSupport(true);
                                                                }
                                                            } catch (e) {
                                                                reject(e);
                                                            }
                                                        });

                                                        executeTwoCallbacks(promise, callback, errorCallback);
                                                        return promise;
                                                    };

                                                    LocalForage.prototype.driver = function driver() {
                                                        return this._driver || null;
                                                    };

                                                    LocalForage.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {
                                                        var getDriverPromise = DefinedDrivers[driverName] ? Promise$1.resolve(DefinedDrivers[driverName]) : Promise$1.reject(new Error('Driver not found.'));

                                                        executeTwoCallbacks(getDriverPromise, callback, errorCallback);
                                                        return getDriverPromise;
                                                    };

                                                    LocalForage.prototype.getSerializer = function getSerializer(callback) {
                                                        var serializerPromise = Promise$1.resolve(localforageSerializer);
                                                        executeTwoCallbacks(serializerPromise, callback);
                                                        return serializerPromise;
                                                    };

                                                    LocalForage.prototype.ready = function ready(callback) {
                                                        var self = this;

                                                        var promise = self._driverSet.then(function () {
                                                            if (self._ready === null) {
                                                                self._ready = self._initDriver();
                                                            }

                                                            return self._ready;
                                                        });

                                                        executeTwoCallbacks(promise, callback, callback);
                                                        return promise;
                                                    };

                                                    LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {
                                                        var self = this;

                                                        if (!isArray(drivers)) {
                                                            drivers = [drivers];
                                                        }

                                                        var supportedDrivers = this._getSupportedDrivers(drivers);

                                                        function setDriverToConfig() {
                                                            self._config.driver = self.driver();
                                                        }

                                                        function extendSelfWithDriver(driver) {
                                                            self._extend(driver);
                                                            setDriverToConfig();

                                                            self._ready = self._initStorage(self._config);
                                                            return self._ready;
                                                        }

                                                        function initDriver(supportedDrivers) {
                                                            return function () {
                                                                var currentDriverIndex = 0;

                                                                function driverPromiseLoop() {
                                                                    while (currentDriverIndex < supportedDrivers.length) {
                                                                        var driverName = supportedDrivers[currentDriverIndex];
                                                                        currentDriverIndex++;

                                                                        self._dbInfo = null;
                                                                        self._ready = null;

                                                                        return self.getDriver(driverName).then(extendSelfWithDriver)["catch"](driverPromiseLoop);
                                                                    }

                                                                    setDriverToConfig();
                                                                    var error = new Error('No available storage method found.');
                                                                    self._driverSet = Promise$1.reject(error);
                                                                    return self._driverSet;
                                                                }

                                                                return driverPromiseLoop();
                                                            };
                                                        }

                                                        // There might be a driver initialization in progress
                                                        // so wait for it to finish in order to avoid a possible
                                                        // race condition to set _dbInfo
                                                        var oldDriverSetDone = this._driverSet !== null ? this._driverSet["catch"](function () {
                                                            return Promise$1.resolve();
                                                        }) : Promise$1.resolve();

                                                        this._driverSet = oldDriverSetDone.then(function () {
                                                            var driverName = supportedDrivers[0];
                                                            self._dbInfo = null;
                                                            self._ready = null;

                                                            return self.getDriver(driverName).then(function (driver) {
                                                                self._driver = driver._driver;
                                                                setDriverToConfig();
                                                                self._wrapLibraryMethodsWithReady();
                                                                self._initDriver = initDriver(supportedDrivers);
                                                            });
                                                        })["catch"](function () {
                                                            setDriverToConfig();
                                                            var error = new Error('No available storage method found.');
                                                            self._driverSet = Promise$1.reject(error);
                                                            return self._driverSet;
                                                        });

                                                        executeTwoCallbacks(this._driverSet, callback, errorCallback);
                                                        return this._driverSet;
                                                    };

                                                    LocalForage.prototype.supports = function supports(driverName) {
                                                        return !!DriverSupport[driverName];
                                                    };

                                                    LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {
                                                        extend(this, libraryMethodsAndProperties);
                                                    };

                                                    LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {
                                                        var supportedDrivers = [];
                                                        for (var i = 0, len = drivers.length; i < len; i++) {
                                                            var driverName = drivers[i];
                                                            if (this.supports(driverName)) {
                                                                supportedDrivers.push(driverName);
                                                            }
                                                        }
                                                        return supportedDrivers;
                                                    };

                                                    LocalForage.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {
                                                        // Add a stub for each driver API method that delays the call to the
                                                        // corresponding driver method until localForage is ready. These stubs
                                                        // will be replaced by the driver methods as soon as the driver is
                                                        // loaded, so there is no performance impact.
                                                        for (var i = 0, len = LibraryMethods.length; i < len; i++) {
                                                            callWhenReady(this, LibraryMethods[i]);
                                                        }
                                                    };

                                                    LocalForage.prototype.createInstance = function createInstance(options) {
                                                        return new LocalForage(options);
                                                    };

                                                    return LocalForage;
                                                }();

                                                // The actual localForage object that we expose as a module or via a
                                                // global. It's extended by pulling in one of our other libraries.


                                                var localforage_js = new LocalForage();

                                                _module8.exports = localforage_js;
                                            }, { "3": 3 }] }, {}, [4])(4);
                                    });

                                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                } } } } } } } }, {
        "extensions": [".js", ".json"]
    });

    _require2("/node_modules/meteor/hacknlove:persistent-minimongo2/persistent-minimongo.js");

    /* Exports */
    Package._define("hacknlove:persistent-minimongo2", {
        PersistentMinimongo2: PersistentMinimongo2
    });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("ddp-rate-limiter");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Random = Package.random.Random;

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////
    //                                                                                  //
    // packages/localstorage/localstorage.js                                            //
    //                                                                                  //
    //////////////////////////////////////////////////////////////////////////////////////
    //
    // Meteor._localStorage is not an ideal name, but we can change it later.

    // Let's test to make sure that localStorage actually works. For example, in
    // Safari with private browsing on, window.localStorage exists but actually
    // trying to use it throws.
    // Accessing window.localStorage can also immediately throw an error in IE (#1291).

    var hasOwn = Object.prototype.hasOwnProperty;
    var key = '_localstorage_test_' + Random.id();
    var retrieved;
    var storage;

    try {
      storage = global.localStorage;

      if (storage) {
        storage.setItem(key, key);
        retrieved = storage.getItem(key);
        storage.removeItem(key);
      }
    } catch (ignored) {}

    if (key === retrieved) {
      if (Meteor.isServer) {
        Meteor._localStorage = storage;
      } else {
        // Some browsers (e.g. IE11) don't properly handle attempts to change
        // window.localStorage methods. By using proxy methods to expose
        // window.localStorage functionality, developers can change the
        // behavior of Meteor._localStorage methods without breaking
        // window.localStorage.
        ["getItem", "setItem", "removeItem"].forEach(function (name) {
          this[name] = function () {
            return storage[name].apply(storage, arguments);
          };
        }, Meteor._localStorage = {});
      }
    }

    if (!Meteor._localStorage) {
      if (Meteor.isClient) {
        Meteor._debug("You are running a browser with no localStorage or userData " + "support. Logging in from one tab will not cause another " + "tab to be logged in.");
      }

      Meteor._localStorage = Object.create({
        setItem: function (key, val) {
          this[key] = val;
        },

        removeItem: function (key) {
          delete this[key];
        },

        getItem: function (key) {
          return hasOwn.call(this, key) ? this[key] : null;
        }
      });
    }

    //////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("localstorage");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;

  /* Package-scope variables */
  var URL, URLSearchParams;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "url": { "modern.js": function _module(_require, _exports) {

            /////////////////////////////////////////////////////////////////////////////////
            //                                                                             //
            // packages/url/modern.js                                                      //
            //                                                                             //
            /////////////////////////////////////////////////////////////////////////////////
            //
            URL = global.URL;
            URLSearchParams = global.URLSearchParams;

            _exports.URL = URL;
            _exports.URLSearchParams = URLSearchParams;

            // backwards compatibility
            Object.assign(URL, _require('./bc/url_client'));

            /////////////////////////////////////////////////////////////////////////////////
          }, "bc": { "url_client.js": function _module2(_require3, _exports3) {

              /////////////////////////////////////////////////////////////////////////////////
              //                                                                             //
              // packages/url/bc/url_client.js                                               //
              //                                                                             //
              /////////////////////////////////////////////////////////////////////////////////
              //
              var common = _require3("./url_common.js");

              _exports3._constructUrl = function (url, query, params) {
                var query_match = /^(.*?)(\?.*)?$/.exec(url);
                return common.buildUrl(query_match[1], query_match[2], query, params);
              };

              _exports3._encodeParams = common._encodeParams;
              /////////////////////////////////////////////////////////////////////////////////
            }, "url_common.js": function _module3(_require4, _exports4) {

              /////////////////////////////////////////////////////////////////////////////////
              //                                                                             //
              // packages/url/bc/url_common.js                                               //
              //                                                                             //
              /////////////////////////////////////////////////////////////////////////////////
              //
              function encodeString(str) {
                return encodeURIComponent(str).replace(/\*/g, '%2A');
              }

              // Encode URL parameters into a query string, handling nested objects and
              // arrays properly.
              var _encodeParams = function (params, prefix) {
                var str = [];
                var isParamsArray = Array.isArray(params);
                for (var p in params) {
                  if (Object.prototype.hasOwnProperty.call(params, p)) {
                    var k = prefix ? prefix + '[' + (isParamsArray ? '' : p) + ']' : p;
                    var v = params[p];
                    if (typeof v === 'object') {
                      str.push(_encodeParams(v, k));
                    } else {
                      var encodedKey = encodeString(k).replace('%5B', '[').replace('%5D', ']');
                      str.push(encodedKey + '=' + encodeString(v));
                    }
                  }
                }
                return str.join('&').replace(/%20/g, '+');
              };

              _exports4._encodeParams = _encodeParams;

              _exports4.buildUrl = function (before_qmark, from_qmark, opt_query, opt_params) {
                var url_without_query = before_qmark;
                var query = from_qmark ? from_qmark.slice(1) : null;

                if (typeof opt_query === "string") query = String(opt_query);

                if (opt_params) {
                  query = query || "";
                  var prms = _encodeParams(opt_params);
                  if (query && prms) query += '&';
                  query += prms;
                }

                var url = url_without_query;
                if (query !== null) url += "?" + query;

                return url;
              };

              /////////////////////////////////////////////////////////////////////////////////
            } } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/url/modern.js");

  /* Exports */
  Package._define("url", _exports2, {
    URL: URL,
    URLSearchParams: URLSearchParams
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var Random = Package.random.Random;
  var Hook = Package['callback-hook'].Hook;
  var ReactiveVar = Package['reactive-var'].ReactiveVar;
  var URL = Package.url.URL;
  var URLSearchParams = Package.url.URLSearchParams;
  var DDP = Package['ddp-client'].DDP;
  var Mongo = Package.mongo.Mongo;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var Accounts, options, tokenExpires;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "accounts-base": { "client_main.js": function module(_require, _exports, _module) {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/accounts-base/client_main.js                                                                              //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              Accounts: () => Accounts,
              AccountsClient: () => AccountsClient,
              AccountsTest: () => AccountsTest,
              default: () => _exports
            });
            let AccountsClient, AccountsTest;
            _module.link("./accounts_client.js", {
              AccountsClient(v) {
                AccountsClient = v;
              },

              AccountsTest(v) {
                AccountsTest = v;
              }

            }, 0);

            /**
             * @namespace Accounts
             * @summary The namespace for all client-side accounts-related methods.
             */
            _module.runSetters(Accounts = new AccountsClient());
            /**
             * @summary A [Mongo.Collection](#collections) containing user documents.
             * @locus Anywhere
             * @type {Mongo.Collection}
             * @importFromPackage meteor
             */

            Meteor.users = Accounts.users;
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "accounts_client.js": function module(_require3, _exports3, _module2) {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/accounts-base/accounts_client.js                                                                          //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            let _objectSpread;

            _module2.link("@babel/runtime/helpers/objectSpread2", {
              default(v) {
                _objectSpread = v;
              }

            }, 0);
            _module2.export({
              AccountsClient: () => AccountsClient,
              AccountsTest: () => AccountsTest
            });
            let AccountsCommon;
            _module2.link("./accounts_common.js", {
              AccountsCommon(v) {
                AccountsCommon = v;
              }

            }, 0);

            class AccountsClient extends AccountsCommon {
              constructor(options) {
                super(options);
                this._loggingIn = new ReactiveVar(false);
                this._loggingOut = new ReactiveVar(false);
                this._loginServicesHandle = this.connection.subscribe("meteor.loginServiceConfiguration");
                this._pageLoadLoginCallbacks = [];
                this._pageLoadLoginAttemptInfo = null;
                this.savedHash = window.location.hash;

                this._initUrlMatching(); // Defined in localstorage_token.js.


                this._initLocalStorage(); // This is for .registerClientLoginFunction & .callLoginFunction.


                this._loginFuncs = {};
              } ///
              /// CURRENT USER
              ///
              // @override


              userId() {
                return this.connection.userId();
              } // This is mostly just called within this file, but Meteor.loginWithPassword
              // also uses it to make loggingIn() be true during the beginPasswordExchange
              // method call too.


              _setLoggingIn(x) {
                this._loggingIn.set(x);
              }
              /**
               * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.
               * @locus Client
               */

              loggingIn() {
                return this._loggingIn.get();
              }
              /**
               * @summary True if a logout method (such as `Meteor.logout`) is currently in progress. A reactive data source.
               * @locus Client
               */

              loggingOut() {
                return this._loggingOut.get();
              }
              /**
               * @summary Register a new login function on the client. Intended for OAuth package authors. You can call the login function by using
               `Accounts.callLoginFunction` or `Accounts.callLoginFunction`.
               * @locus Client
               * @param {String} funcName The name of your login function. Used by `Accounts.callLoginFunction` and `Accounts.applyLoginFunction`.
               Should be the OAuth provider name accordingly.
               * @param {Function} func The actual function you want to call. Just write it in the manner of `loginWithFoo`.
               */

              registerClientLoginFunction(funcName, func) {
                if (this._loginFuncs[funcName]) {
                  throw new Error("".concat(funcName, " has been defined already"));
                }

                this._loginFuncs[funcName] = func;
              }
              /**
               * @summary Call a login function defined using `Accounts.registerClientLoginFunction`. Excluding the first argument, all remaining
               arguments are passed to the login function accordingly. Use `applyLoginFunction` if you want to pass in an arguments array that contains
               all arguments for the login function.
               * @locus Client
               * @param {String} funcName The name of the login function you wanted to call.
               */

              callLoginFunction(funcName) {
                if (!this._loginFuncs[funcName]) {
                  throw new Error("".concat(funcName, " was not defined"));
                }

                for (var _len = arguments.length, funcArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  funcArgs[_key - 1] = arguments[_key];
                }

                return this._loginFuncs[funcName].apply(this, funcArgs);
              }
              /**
               * @summary Same as ``callLoginFunction` but accept an `arguments` which contains all arguments for the login
               function.
               * @locus Client
               * @param {String} funcName The name of the login function you wanted to call.
               * @param {Array} funcArgs The `arguments` for the login function.
               */

              applyLoginFunction(funcName, funcArgs) {
                if (!this._loginFuncs[funcName]) {
                  throw new Error("".concat(funcName, " was not defined"));
                }

                return this._loginFuncs[funcName].apply(this, funcArgs);
              }
              /**
               * @summary Log the user out.
               * @locus Client
               * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.
               */

              logout(callback) {
                this._loggingOut.set(true);

                this.connection.apply('logout', [], {
                  wait: true
                }, (error, result) => {
                  this._loggingOut.set(false);

                  if (error) {
                    callback && callback(error);
                  } else {
                    this.makeClientLoggedOut();
                    callback && callback();
                  }
                });
              }
              /**
               * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.
               * @locus Client
               * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.
               */

              logoutOtherClients(callback) {
                // We need to make two method calls: one to replace our current token,
                // and another to remove all tokens except the current one. We want to
                // call these two methods one after the other, without any other
                // methods running between them. For example, we don't want `logout`
                // to be called in between our two method calls (otherwise the second
                // method call would return an error). Another example: we don't want
                // logout to be called before the callback for `getNewToken`;
                // otherwise we would momentarily log the user out and then write a
                // new token to localStorage.
                //
                // To accomplish this, we make both calls as wait methods, and queue
                // them one after the other, without spinning off the event loop in
                // between. Even though we queue `removeOtherTokens` before
                // `getNewToken`, we won't actually send the `removeOtherTokens` call
                // until the `getNewToken` callback has finished running, because they
                // are both wait methods.
                this.connection.apply('getNewToken', [], {
                  wait: true
                }, (err, result) => {
                  if (!err) {
                    this._storeLoginToken(this.userId(), result.token, result.tokenExpires);
                  }
                });
                this.connection.apply('removeOtherTokens', [], {
                  wait: true
                }, err => callback && callback(err));
              } ///
              /// LOGIN METHODS
              ///
              // Call a login method on the server.
              //
              // A login method is a method which on success calls `this.setUserId(id)` and
              // `Accounts._setLoginToken` on the server and returns an object with fields
              // 'id' (containing the user id), 'token' (containing a resume token), and
              // optionally `tokenExpires`.
              //
              // This function takes care of:
              //   - Updating the Meteor.loggingIn() reactive data source
              //   - Calling the method in 'wait' mode
              //   - On success, saving the resume token to localStorage
              //   - On success, calling Accounts.connection.setUserId()
              //   - Setting up an onReconnect handler which logs in with
              //     the resume token
              //
              // Options:
              // - methodName: The method to call (default 'login')
              // - methodArguments: The arguments for the method
              // - validateResult: If provided, will be called with the result of the
              //                 method. If it throws, the client will not be logged in (and
              //                 its error will be passed to the callback).
              // - userCallback: Will be called with no arguments once the user is fully
              //                 logged in, or with the error on error.
              //


              callLoginMethod(options) {
                options = _objectSpread({
                  methodName: 'login',
                  methodArguments: [{}],
                  _suppressLoggingIn: false
                }, options); // Set defaults for callback arguments to no-op functions; make sure we
                // override falsey values too.

                ['validateResult', 'userCallback'].forEach(f => {
                  if (!options[f]) options[f] = () => null;
                }); // Prepare callbacks: user provided and onLogin/onLoginFailure hooks.

                let called;

                const loginCallbacks = _ref => {
                  let {
                    error,
                    loginDetails
                  } = _ref;

                  if (!called) {
                    called = true;

                    if (!error) {
                      this._onLoginHook.each(callback => {
                        callback(loginDetails);
                        return true;
                      });
                    } else {
                      this._onLoginFailureHook.each(callback => {
                        callback({
                          error
                        });
                        return true;
                      });
                    }

                    options.userCallback(error, loginDetails);
                  }
                };

                let reconnected = false; // We want to set up onReconnect as soon as we get a result token back from
                // the server, without having to wait for subscriptions to rerun. This is
                // because if we disconnect and reconnect between getting the result and
                // getting the results of subscription rerun, we WILL NOT re-send this
                // method (because we never re-send methods whose results we've received)
                // but we WILL call loggedInAndDataReadyCallback at "reconnect quiesce"
                // time. This will lead to makeClientLoggedIn(result.id) even though we
                // haven't actually sent a login method!
                //
                // But by making sure that we send this "resume" login in that case (and
                // calling makeClientLoggedOut if it fails), we'll end up with an accurate
                // client-side userId. (It's important that livedata_connection guarantees
                // that the "reconnect quiesce"-time call to loggedInAndDataReadyCallback
                // will occur before the callback from the resume login call.)

                const onResultReceived = (err, result) => {
                  if (err || !result || !result.token) {// Leave onReconnect alone if there was an error, so that if the user was
                    // already logged in they will still get logged in on reconnect.
                    // See issue #4970.
                  } else {
                    // First clear out any previously set Acccounts login onReconnect
                    // callback (to make sure we don't keep piling up duplicate callbacks,
                    // which would then all be triggered when reconnecting).
                    if (this._reconnectStopper) {
                      this._reconnectStopper.stop();
                    }

                    this._reconnectStopper = DDP.onReconnect(conn => {
                      if (conn != this.connection) {
                        return;
                      }

                      reconnected = true; // If our token was updated in storage, use the latest one.

                      const storedToken = this._storedLoginToken();

                      if (storedToken) {
                        result = {
                          token: storedToken,
                          tokenExpires: this._storedLoginTokenExpires()
                        };
                      }

                      if (!result.tokenExpires) result.tokenExpires = this._tokenExpiration(new Date());

                      if (this._tokenExpiresSoon(result.tokenExpires)) {
                        this.makeClientLoggedOut();
                      } else {
                        this.callLoginMethod({
                          methodArguments: [{
                            resume: result.token
                          }],
                          // Reconnect quiescence ensures that the user doesn't see an
                          // intermediate state before the login method finishes. So we don't
                          // need to show a logging-in animation.
                          _suppressLoggingIn: true,
                          userCallback: (error, loginDetails) => {
                            const storedTokenNow = this._storedLoginToken();

                            if (error) {
                              // If we had a login error AND the current stored token is the
                              // one that we tried to log in with, then declare ourselves
                              // logged out. If there's a token in storage but it's not the
                              // token that we tried to log in with, we don't know anything
                              // about whether that token is valid or not, so do nothing. The
                              // periodic localStorage poll will decide if we are logged in or
                              // out with this token, if it hasn't already. Of course, even
                              // with this check, another tab could insert a new valid token
                              // immediately before we clear localStorage here, which would
                              // lead to both tabs being logged out, but by checking the token
                              // in storage right now we hope to make that unlikely to happen.
                              //
                              // If there is no token in storage right now, we don't have to
                              // do anything; whatever code removed the token from storage was
                              // responsible for calling `makeClientLoggedOut()`, or the
                              // periodic localStorage poll will call `makeClientLoggedOut`
                              // eventually if another tab wiped the token from storage.
                              if (storedTokenNow && storedTokenNow === result.token) {
                                this.makeClientLoggedOut();
                              }
                            } // Possibly a weird callback to call, but better than nothing if
                            // there is a reconnect between "login result received" and "data
                            // ready".


                            loginCallbacks({
                              error,
                              loginDetails
                            });
                          }
                        });
                      }
                    });
                  }
                }; // This callback is called once the local cache of the current-user
                // subscription (and all subscriptions, in fact) are guaranteed to be up to
                // date.


                const loggedInAndDataReadyCallback = (error, result) => {
                  // If the login method returns its result but the connection is lost
                  // before the data is in the local cache, it'll set an onReconnect (see
                  // above). The onReconnect will try to log in using the token, and *it*
                  // will call userCallback via its own version of this
                  // loggedInAndDataReadyCallback. So we don't have to do anything here.
                  if (reconnected) return; // Note that we need to call this even if _suppressLoggingIn is true,
                  // because it could be matching a _setLoggingIn(true) from a
                  // half-completed pre-reconnect login method.

                  this._setLoggingIn(false);

                  if (error || !result) {
                    error = error || new Error("No result from call to ".concat(options.methodName));
                    loginCallbacks({
                      error
                    });
                    return;
                  }

                  try {
                    options.validateResult(result);
                  } catch (e) {
                    loginCallbacks({
                      error: e
                    });
                    return;
                  } // Make the client logged in. (The user data should already be loaded!)


                  this.makeClientLoggedIn(result.id, result.token, result.tokenExpires);
                  loginCallbacks({
                    loginDetails: {
                      type: result.type
                    }
                  });
                };

                if (!options._suppressLoggingIn) {
                  this._setLoggingIn(true);
                }

                this.connection.apply(options.methodName, options.methodArguments, {
                  wait: true,
                  onResultReceived: onResultReceived
                }, loggedInAndDataReadyCallback);
              }

              makeClientLoggedOut() {
                // Ensure client was successfully logged in before running logout hooks.
                if (this.connection._userId) {
                  this._onLogoutHook.each(callback => {
                    callback();
                    return true;
                  });
                }

                this._unstoreLoginToken();

                this.connection.setUserId(null);
                this._reconnectStopper && this._reconnectStopper.stop();
              }

              makeClientLoggedIn(userId, token, tokenExpires) {
                this._storeLoginToken(userId, token, tokenExpires);

                this.connection.setUserId(userId);
              } ///
              /// LOGIN SERVICES
              ///
              // A reactive function returning whether the loginServiceConfiguration
              // subscription is ready. Used by accounts-ui to hide the login button
              // until we have all the configuration loaded
              //


              loginServicesConfigured() {
                return this._loginServicesHandle.ready();
              }

              // Some login services such as the redirect login flow or the resume
              // login handler can log the user in at page load time.  The
              // Meteor.loginWithX functions have a callback argument, but the
              // callback function instance won't be in memory any longer if the
              // page was reloaded.  The `onPageLoadLogin` function allows a
              // callback to be registered for the case where the login was
              // initiated in a previous VM, and we now have the result of the login
              // attempt in a new VM.
              // Register a callback to be called if we have information about a
              // login attempt at page load time.  Call the callback immediately if
              // we already have the page load login attempt info, otherwise stash
              // the callback to be called if and when we do get the attempt info.
              //
              onPageLoadLogin(f) {
                if (this._pageLoadLoginAttemptInfo) {
                  f(this._pageLoadLoginAttemptInfo);
                } else {
                  this._pageLoadLoginCallbacks.push(f);
                }
              }

              // Receive the information about the login attempt at page load time.
              // Call registered callbacks, and also record the info in case
              // someone's callback hasn't been registered yet.
              //
              _pageLoadLogin(attemptInfo) {
                if (this._pageLoadLoginAttemptInfo) {
                  Meteor._debug('Ignoring unexpected duplicate page load login attempt info');

                  return;
                }

                this._pageLoadLoginCallbacks.forEach(callback => callback(attemptInfo));

                this._pageLoadLoginCallbacks = [];
                this._pageLoadLoginAttemptInfo = attemptInfo;
              } // _startupCallback executes on onLogin callbacks
              // at registration time if already logged in
              // this can happen when new AccountsClient is created
              // before callbacks are registered see #10157


              _startupCallback(callback) {
                // Are we already logged in?
                if (this.connection._userId) {
                  // If already logged in before handler is registered, it's safe to
                  // assume type is a 'resume', so we execute the callback at the end
                  // of the queue so that Meteor.startup can complete before any
                  // embedded onLogin callbacks would execute.
                  Meteor.setTimeout(() => callback({
                    type: 'resume'
                  }), 0);
                }
              } ///
              /// LOGIN TOKENS
              ///
              // These methods deal with storing a login token and user id in the
              // browser's localStorage facility. It polls local storage every few
              // seconds to synchronize login state between multiple tabs in the same
              // browser.


              loginWithToken(token, callback) {
                this.callLoginMethod({
                  methodArguments: [{
                    resume: token
                  }],
                  userCallback: callback
                });
              }

              // Semi-internal API. Call this function to re-enable auto login after
              // if it was disabled at startup.
              _enableAutoLogin() {
                this._autoLoginEnabled = true;

                this._pollStoredLoginToken();
              }

              ///
              /// STORING
              ///
              // Call this from the top level of the test file for any test that does
              // logging in and out, to protect multiple tabs running the same tests
              // simultaneously from interfering with each others' localStorage.
              _isolateLoginTokenForTest() {
                this.LOGIN_TOKEN_KEY = this.LOGIN_TOKEN_KEY + Random.id();
                this.USER_ID_KEY = this.USER_ID_KEY + Random.id();
              }

              _storeLoginToken(userId, token, tokenExpires) {
                Meteor._localStorage.setItem(this.USER_ID_KEY, userId);

                Meteor._localStorage.setItem(this.LOGIN_TOKEN_KEY, token);

                if (!tokenExpires) tokenExpires = this._tokenExpiration(new Date());

                Meteor._localStorage.setItem(this.LOGIN_TOKEN_EXPIRES_KEY, tokenExpires); // to ensure that the localstorage poller doesn't end up trying to
                // connect a second time


                this._lastLoginTokenWhenPolled = token;
              }

              _unstoreLoginToken() {
                Meteor._localStorage.removeItem(this.USER_ID_KEY);

                Meteor._localStorage.removeItem(this.LOGIN_TOKEN_KEY);

                Meteor._localStorage.removeItem(this.LOGIN_TOKEN_EXPIRES_KEY); // to ensure that the localstorage poller doesn't end up trying to
                // connect a second time


                this._lastLoginTokenWhenPolled = null;
              }

              // This is private, but it is exported for now because it is used by a
              // test in accounts-password.
              _storedLoginToken() {
                return Meteor._localStorage.getItem(this.LOGIN_TOKEN_KEY);
              }

              _storedLoginTokenExpires() {
                return Meteor._localStorage.getItem(this.LOGIN_TOKEN_EXPIRES_KEY);
              }

              _storedUserId() {
                return Meteor._localStorage.getItem(this.USER_ID_KEY);
              }

              _unstoreLoginTokenIfExpiresSoon() {
                const tokenExpires = this._storedLoginTokenExpires();

                if (tokenExpires && this._tokenExpiresSoon(new Date(tokenExpires))) {
                  this._unstoreLoginToken();
                }
              }

              ///
              /// AUTO-LOGIN
              ///
              _initLocalStorage() {
                // Key names to use in localStorage
                this.LOGIN_TOKEN_KEY = "Meteor.loginToken";
                this.LOGIN_TOKEN_EXPIRES_KEY = "Meteor.loginTokenExpires";
                this.USER_ID_KEY = "Meteor.userId";
                const rootUrlPathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;

                if (rootUrlPathPrefix || this.connection !== Meteor.connection) {
                  // We want to keep using the same keys for existing apps that do not
                  // set a custom ROOT_URL_PATH_PREFIX, so that most users will not have
                  // to log in again after an app updates to a version of Meteor that
                  // contains this code, but it's generally preferable to namespace the
                  // keys so that connections from distinct apps to distinct DDP URLs
                  // will be distinct in Meteor._localStorage.
                  let namespace = ":".concat(this.connection._stream.rawUrl);

                  if (rootUrlPathPrefix) {
                    namespace += ":".concat(rootUrlPathPrefix);
                  }

                  this.LOGIN_TOKEN_KEY += namespace;
                  this.LOGIN_TOKEN_EXPIRES_KEY += namespace;
                  this.USER_ID_KEY += namespace;
                }

                let token;

                if (this._autoLoginEnabled) {
                  // Immediately try to log in via local storage, so that any DDP
                  // messages are sent after we have established our user account
                  this._unstoreLoginTokenIfExpiresSoon();

                  token = this._storedLoginToken();

                  if (token) {
                    // On startup, optimistically present us as logged in while the
                    // request is in flight. This reduces page flicker on startup.
                    const userId = this._storedUserId();

                    userId && this.connection.setUserId(userId);
                    this.loginWithToken(token, err => {
                      if (err) {
                        Meteor._debug("Error logging in with token: ".concat(err));

                        this.makeClientLoggedOut();
                      }

                      this._pageLoadLogin({
                        type: "resume",
                        allowed: !err,
                        error: err,
                        methodName: "login",
                        // XXX This is duplicate code with loginWithToken, but
                        // loginWithToken can also be called at other times besides
                        // page load.
                        methodArguments: [{
                          resume: token
                        }]
                      });
                    });
                  }
                } // Poll local storage every 3 seconds to login if someone logged in in
                // another tab


                this._lastLoginTokenWhenPolled = token;

                if (this._pollIntervalTimer) {
                  // Unlikely that _initLocalStorage will be called more than once for
                  // the same AccountsClient instance, but just in case...
                  clearInterval(this._pollIntervalTimer);
                }

                this._pollIntervalTimer = setInterval(() => {
                  this._pollStoredLoginToken();
                }, 3000);
              }

              _pollStoredLoginToken() {
                if (!this._autoLoginEnabled) {
                  return;
                }

                const currentLoginToken = this._storedLoginToken(); // != instead of !== just to make sure undefined and null are treated the same


                if (this._lastLoginTokenWhenPolled != currentLoginToken) {
                  if (currentLoginToken) {
                    this.loginWithToken(currentLoginToken, err => {
                      if (err) {
                        this.makeClientLoggedOut();
                      }
                    });
                  } else {
                    this.logout();
                  }
                }

                this._lastLoginTokenWhenPolled = currentLoginToken;
              }

              ///
              /// URLS
              ///
              _initUrlMatching() {
                // By default, allow the autologin process to happen.
                this._autoLoginEnabled = true; // We only support one callback per URL.

                this._accountsCallbacks = {}; // Try to match the saved value of window.location.hash.

                this._attemptToMatchHash();
              }

              // Separate out this functionality for testing
              _attemptToMatchHash() {
                attemptToMatchHash(this, this.savedHash, defaultSuccessHandler);
              }

              /**
               * @summary Register a function to call when a reset password link is clicked
               * in an email sent by
               * [`Accounts.sendResetPasswordEmail`](#accounts_sendresetpasswordemail).
               * This function should be called in top-level code, not inside
               * `Meteor.startup()`.
               * @memberof! Accounts
               * @name onResetPasswordLink
               * @param  {Function} callback The function to call. It is given two arguments:
               *
               * 1. `token`: A password reset token that can be passed to
               * [`Accounts.resetPassword`](#accounts_resetpassword).
               * 2. `done`: A function to call when the password reset UI flow is complete. The normal
               * login process is suspended until this function is called, so that the
               * password for user A can be reset even if user B was logged in.
               * @locus Client
               */
              onResetPasswordLink(callback) {
                if (this._accountsCallbacks["reset-password"]) {
                  Meteor._debug("Accounts.onResetPasswordLink was called more than once. " + "Only one callback added will be executed.");
                }

                this._accountsCallbacks["reset-password"] = callback;
              }

              /**
               * @summary Register a function to call when an email verification link is
               * clicked in an email sent by
               * [`Accounts.sendVerificationEmail`](#accounts_sendverificationemail).
               * This function should be called in top-level code, not inside
               * `Meteor.startup()`.
               * @memberof! Accounts
               * @name onEmailVerificationLink
               * @param  {Function} callback The function to call. It is given two arguments:
               *
               * 1. `token`: An email verification token that can be passed to
               * [`Accounts.verifyEmail`](#accounts_verifyemail).
               * 2. `done`: A function to call when the email verification UI flow is complete.
               * The normal login process is suspended until this function is called, so
               * that the user can be notified that they are verifying their email before
               * being logged in.
               * @locus Client
               */
              onEmailVerificationLink(callback) {
                if (this._accountsCallbacks["verify-email"]) {
                  Meteor._debug("Accounts.onEmailVerificationLink was called more than once. " + "Only one callback added will be executed.");
                }

                this._accountsCallbacks["verify-email"] = callback;
              }

              /**
               * @summary Register a function to call when an account enrollment link is
               * clicked in an email sent by
               * [`Accounts.sendEnrollmentEmail`](#accounts_sendenrollmentemail).
               * This function should be called in top-level code, not inside
               * `Meteor.startup()`.
               * @memberof! Accounts
               * @name onEnrollmentLink
               * @param  {Function} callback The function to call. It is given two arguments:
               *
               * 1. `token`: A password reset token that can be passed to
               * [`Accounts.resetPassword`](#accounts_resetpassword) to give the newly
               * enrolled account a password.
               * 2. `done`: A function to call when the enrollment UI flow is complete.
               * The normal login process is suspended until this function is called, so that
               * user A can be enrolled even if user B was logged in.
               * @locus Client
               */
              onEnrollmentLink(callback) {
                if (this._accountsCallbacks["enroll-account"]) {
                  Meteor._debug("Accounts.onEnrollmentLink was called more than once. " + "Only one callback added will be executed.");
                }

                this._accountsCallbacks["enroll-account"] = callback;
              }

            }

            ;
            /**
             * @summary True if a login method (such as `Meteor.loginWithPassword`, 
             * `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in 
             * progress. A reactive data source.
             * @locus Client
             * @importFromPackage meteor
             */

            Meteor.loggingIn = () => Accounts.loggingIn();
            /**
             * @summary True if a logout method (such as `Meteor.logout`) is currently in 
             * progress. A reactive data source.
             * @locus Client
             * @importFromPackage meteor
             */

            Meteor.loggingOut = () => Accounts.loggingOut();
            /**
             * @summary Log the user out.
             * @locus Client
             * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.
             * @importFromPackage meteor
             */

            Meteor.logout = callback => Accounts.logout(callback);
            /**
             * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.
             * @locus Client
             * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.
             * @importFromPackage meteor
             */

            Meteor.logoutOtherClients = callback => Accounts.logoutOtherClients(callback);
            /**
             * @summary Login with a Meteor access token.
             * @locus Client
             * @param {Object} [token] Local storage token for use with login across 
             * multiple tabs in the same browser.
             * @param {Function} [callback] Optional callback. Called with no arguments on
             * success.
             * @importFromPackage meteor
             */

            Meteor.loginWithToken = (token, callback) => Accounts.loginWithToken(token, callback); ///
            /// HANDLEBARS HELPERS
            ///
            // If our app has a Blaze, register the {{currentUser}} and {{loggingIn}}
            // global helpers.


            if (Package.blaze) {
              const {
                Template
              } = Package.blaze.Blaze;
              /**
               * @global
               * @name  currentUser
               * @isHelper true
               * @summary Calls [Meteor.user()](#meteor_user). Use `{{#if currentUser}}` to check whether the user is logged in.
               */

              Template.registerHelper('currentUser', () => Meteor.user());
              /**
               * @global
               * @name  loggingIn
               * @isHelper true
               * @summary Calls [Meteor.loggingIn()](#meteor_loggingin).
               */

              Template.registerHelper('loggingIn', () => Meteor.loggingIn());
              /**
               * @global
               * @name  loggingOut
               * @isHelper true
               * @summary Calls [Meteor.loggingOut()](#meteor_loggingout).
               */

              Template.registerHelper('loggingOut', () => Meteor.loggingOut());
              /**
               * @global
               * @name  loggingInOrOut
               * @isHelper true
               * @summary Calls [Meteor.loggingIn()](#meteor_loggingin) or [Meteor.loggingOut()](#meteor_loggingout).
               */

              Template.registerHelper('loggingInOrOut', () => Meteor.loggingIn() || Meteor.loggingOut());
            }

            const defaultSuccessHandler = function (token, urlPart) {
              // put login in a suspended state to wait for the interaction to finish
              this._autoLoginEnabled = false; // wait for other packages to register callbacks

              Meteor.startup(() => {
                // if a callback has been registered for this kind of token, call it
                if (this._accountsCallbacks[urlPart]) {
                  this._accountsCallbacks[urlPart](token, () => this._enableAutoLogin());
                }
              });
            }; // Note that both arguments are optional and are currently only passed by
            // accounts_url_tests.js.


            const attemptToMatchHash = (accounts, hash, success) => {
              // All of the special hash URLs we support for accounts interactions
              ["reset-password", "verify-email", "enroll-account"].forEach(urlPart => {
                let token;
                const tokenRegex = new RegExp("^\\#\\/".concat(urlPart, "\\/(.*)$"));
                const match = hash.match(tokenRegex);

                if (match) {
                  token = match[1]; // XXX COMPAT WITH 0.9.3

                  if (urlPart === "reset-password") {
                    accounts._resetPasswordToken = token;
                  } else if (urlPart === "verify-email") {
                    accounts._verifyEmailToken = token;
                  } else if (urlPart === "enroll-account") {
                    accounts._enrollAccountToken = token;
                  }
                } else {
                  return;
                } // If no handlers match the hash, then maybe it's meant to be consumed
                // by some entirely different code, so we only clear it the first time
                // a handler successfully matches. Note that later handlers reuse the
                // savedHash, so clearing window.location.hash here will not interfere
                // with their needs.


                window.location.hash = ""; // Do some stuff with the token we matched

                success.call(accounts, token, urlPart);
              });
            }; // Export for testing


            const AccountsTest = {
              attemptToMatchHash: (hash, success) => attemptToMatchHash(Accounts, hash, success)
            };
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "accounts_common.js": function module(_require4, _exports4, _module3) {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/accounts-base/accounts_common.js                                                                          //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            let _objectSpread;

            _module3.link("@babel/runtime/helpers/objectSpread2", {
              default(v) {
                _objectSpread = v;
              }

            }, 0);
            _module3.export({
              AccountsCommon: () => AccountsCommon,
              EXPIRE_TOKENS_INTERVAL_MS: () => EXPIRE_TOKENS_INTERVAL_MS,
              CONNECTION_CLOSE_DELAY_MS: () => CONNECTION_CLOSE_DELAY_MS
            });

            class AccountsCommon {
              constructor(options) {
                // Currently this is read directly by packages like accounts-password
                // and accounts-ui-unstyled.
                this._options = {}; // Note that setting this.connection = null causes this.users to be a
                // LocalCollection, which is not what we want.

                this.connection = undefined;

                this._initConnection(options || {}); // There is an allow call in accounts_server.js that restricts writes to
                // this collection.


                this.users = new Mongo.Collection("users", {
                  _preventAutopublish: true,
                  connection: this.connection
                }); // Callback exceptions are printed with Meteor._debug and ignored.

                this._onLoginHook = new Hook({
                  bindEnvironment: false,
                  debugPrintExceptions: "onLogin callback"
                });
                this._onLoginFailureHook = new Hook({
                  bindEnvironment: false,
                  debugPrintExceptions: "onLoginFailure callback"
                });
                this._onLogoutHook = new Hook({
                  bindEnvironment: false,
                  debugPrintExceptions: "onLogout callback"
                }); // Expose for testing.

                this.DEFAULT_LOGIN_EXPIRATION_DAYS = DEFAULT_LOGIN_EXPIRATION_DAYS;
                this.LOGIN_UNEXPIRING_TOKEN_DAYS = LOGIN_UNEXPIRING_TOKEN_DAYS; // Thrown when the user cancels the login process (eg, closes an oauth
                // popup, declines retina scan, etc)

                const lceName = 'Accounts.LoginCancelledError';
                this.LoginCancelledError = Meteor.makeErrorType(lceName, function (description) {
                  this.message = description;
                });
                this.LoginCancelledError.prototype.name = lceName; // This is used to transmit specific subclass errors over the wire. We
                // should come up with a more generic way to do this (eg, with some sort of
                // symbolic error code rather than a number).

                this.LoginCancelledError.numericError = 0x8acdc2f; // loginServiceConfiguration and ConfigError are maintained for backwards compatibility

                Meteor.startup(() => {
                  const {
                    ServiceConfiguration
                  } = Package['service-configuration'];
                  this.loginServiceConfiguration = ServiceConfiguration.configurations;
                  this.ConfigError = ServiceConfiguration.ConfigError;
                });
              }
              /**
               * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.
               * @locus Anywhere
               */

              userId() {
                throw new Error("userId method not implemented");
              } // merge the defaultFieldSelector with an existing options object


              _addDefaultFieldSelector() {
                let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                // this will be the most common case for most people, so make it quick
                if (!this._options.defaultFieldSelector) return options; // if no field selector then just use defaultFieldSelector

                if (!options.fields) return _objectSpread(_objectSpread({}, options), {}, {
                  fields: this._options.defaultFieldSelector
                }); // if empty field selector then the full user object is explicitly requested, so obey

                const keys = Object.keys(options.fields);
                if (!keys.length) return options; // if the requested fields are +ve then ignore defaultFieldSelector
                // assume they are all either +ve or -ve because Mongo doesn't like mixed

                if (!!options.fields[keys[0]]) return options; // The requested fields are -ve.
                // If the defaultFieldSelector is +ve then use requested fields, otherwise merge them

                const keys2 = Object.keys(this._options.defaultFieldSelector);
                return this._options.defaultFieldSelector[keys2[0]] ? options : _objectSpread(_objectSpread({}, options), {}, {
                  fields: _objectSpread(_objectSpread({}, options.fields), this._options.defaultFieldSelector)
                });
              }
              /**
               * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.
               * @locus Anywhere
               * @param {Object} [options]
               * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.
               */

              user(options) {
                const userId = this.userId();
                return userId ? this.users.findOne(userId, this._addDefaultFieldSelector(options)) : null;
              } // Set up config for the accounts system. Call this on both the client
              // and the server.
              //
              // Note that this method gets overridden on AccountsServer.prototype, but
              // the overriding method calls the overridden method.
              //
              // XXX we should add some enforcement that this is called on both the
              // client and the server. Otherwise, a user can
              // 'forbidClientAccountCreation' only on the client and while it looks
              // like their app is secure, the server will still accept createUser
              // calls. https://github.com/meteor/meteor/issues/828
              //
              // @param options {Object} an object with fields:
              // - sendVerificationEmail {Boolean}
              //     Send email address verification emails to new users created from
              //     client signups.
              // - forbidClientAccountCreation {Boolean}
              //     Do not allow clients to create accounts directly.
              // - restrictCreationByEmailDomain {Function or String}
              //     Require created users to have an email matching the function or
              //     having the string as domain.
              // - loginExpirationInDays {Number}
              //     Number of days since login until a user is logged out (login token
              //     expires).
              // - passwordResetTokenExpirationInDays {Number}
              //     Number of days since password reset token creation until the
              //     token cannt be used any longer (password reset token expires).
              // - ambiguousErrorMessages {Boolean}
              //     Return ambiguous error messages from login failures to prevent
              //     user enumeration.
              // - bcryptRounds {Number}
              //     Allows override of number of bcrypt rounds (aka work factor) used
              //     to store passwords.

              /**
               * @summary Set global accounts options.
               * @locus Anywhere
               * @param {Object} options
               * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.
               * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the "Create account" link will not be available.
               * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.
               * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.
               * @param {Number} options.loginExpiration The number of milliseconds from when a user logs in until their token expires and they are logged out, for a more granular control. If `loginExpirationInDays` is set, it takes precedent.
               * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specified on the server.  See packages/oauth-encryption/README.md for details.
               * @param {Number} options.passwordResetTokenExpirationInDays The number of days from when a link to reset password is sent until token expires and user can't reset password with the link anymore. Defaults to 3.
               * @param {Number} options.passwordResetTokenExpiration The number of milliseconds from when a link to reset password is sent until token expires and user can't reset password with the link anymore. If `passwordResetTokenExpirationInDays` is set, it takes precedent.
               * @param {Number} options.passwordEnrollTokenExpirationInDays The number of days from when a link to set initial password is sent until token expires and user can't set password with the link anymore. Defaults to 30.
               * @param {Number} options.passwordEnrollTokenExpiration The number of milliseconds from when a link to set initial password is sent until token expires and user can't set password with the link anymore. If `passwordEnrollTokenExpirationInDays` is set, it takes precedent.
               * @param {Boolean} options.ambiguousErrorMessages Return ambiguous error messages from login failures to prevent user enumeration. Defaults to false.
               * @param {MongoFieldSpecifier} options.defaultFieldSelector To exclude by default large custom fields from `Meteor.user()` and `Meteor.findUserBy...()` functions when called without a field selector, and all `onLogin`, `onLoginFailure` and `onLogout` callbacks.  Example: `Accounts.config({ defaultFieldSelector: { myBigArray: 0 }})`. Beware when using this. If, for instance, you do not include `email` when excluding the fields, you can have problems with functions like `forgotPassword` that will break because they won't have the required data available. It's recommend that you always keep the fields `_id`, `username`, and `email`.
               */

              config(options) {
                // We don't want users to accidentally only call Accounts.config on the
                // client, where some of the options will have partial effects (eg removing
                // the "create account" button from accounts-ui if forbidClientAccountCreation
                // is set, or redirecting Google login to a specific-domain page) without
                // having their full effects.
                if (Meteor.isServer) {
                  __meteor_runtime_config__.accountsConfigCalled = true;
                } else if (!__meteor_runtime_config__.accountsConfigCalled) {
                  // XXX would be nice to "crash" the client and replace the UI with an error
                  // message, but there's no trivial way to do this.
                  Meteor._debug("Accounts.config was called on the client but not on the " + "server; some configuration options may not take effect.");
                } // We need to validate the oauthSecretKey option at the time
                // Accounts.config is called. We also deliberately don't store the
                // oauthSecretKey in Accounts._options.


                if (Object.prototype.hasOwnProperty.call(options, 'oauthSecretKey')) {
                  if (Meteor.isClient) {
                    throw new Error("The oauthSecretKey option may only be specified on the server");
                  }

                  if (!Package["oauth-encryption"]) {
                    throw new Error("The oauth-encryption package must be loaded to set oauthSecretKey");
                  }

                  Package["oauth-encryption"].OAuthEncryption.loadKey(options.oauthSecretKey);
                  options = _objectSpread({}, options);
                  delete options.oauthSecretKey;
                } // validate option keys


                const VALID_KEYS = ["sendVerificationEmail", "forbidClientAccountCreation", "passwordEnrollTokenExpiration", "passwordEnrollTokenExpirationInDays", "restrictCreationByEmailDomain", "loginExpirationInDays", "loginExpiration", "passwordResetTokenExpirationInDays", "passwordResetTokenExpiration", "ambiguousErrorMessages", "bcryptRounds", "defaultFieldSelector"];
                Object.keys(options).forEach(key => {
                  if (!VALID_KEYS.includes(key)) {
                    throw new Error("Accounts.config: Invalid key: ".concat(key));
                  }
                }); // set values in Accounts._options

                VALID_KEYS.forEach(key => {
                  if (key in options) {
                    if (key in this._options) {
                      throw new Error("Can't set `".concat(key, "` more than once"));
                    }

                    this._options[key] = options[key];
                  }
                });
              }
              /**
               * @summary Register a callback to be called after a login attempt succeeds.
               * @locus Anywhere
               * @param {Function} func The callback to be called when login is successful.
               *                        The callback receives a single object that
               *                        holds login details. This object contains the login
               *                        result type (password, resume, etc.) on both the
               *                        client and server. `onLogin` callbacks registered
               *                        on the server also receive extra data, such
               *                        as user details, connection information, etc.
               */

              onLogin(func) {
                let ret = this._onLoginHook.register(func); // call the just registered callback if already logged in


                this._startupCallback(ret.callback);

                return ret;
              }
              /**
               * @summary Register a callback to be called after a login attempt fails.
               * @locus Anywhere
               * @param {Function} func The callback to be called after the login has failed.
               */

              onLoginFailure(func) {
                return this._onLoginFailureHook.register(func);
              }
              /**
               * @summary Register a callback to be called after a logout attempt succeeds.
               * @locus Anywhere
               * @param {Function} func The callback to be called when logout is successful.
               */

              onLogout(func) {
                return this._onLogoutHook.register(func);
              }

              _initConnection(options) {
                if (!Meteor.isClient) {
                  return;
                } // The connection used by the Accounts system. This is the connection
                // that will get logged in by Meteor.login(), and this is the
                // connection whose login state will be reflected by Meteor.userId().
                //
                // It would be much preferable for this to be in accounts_client.js,
                // but it has to be here because it's needed to create the
                // Meteor.users collection.


                if (options.connection) {
                  this.connection = options.connection;
                } else if (options.ddpUrl) {
                  this.connection = DDP.connect(options.ddpUrl);
                } else if (typeof __meteor_runtime_config__ !== "undefined" && __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL) {
                  // Temporary, internal hook to allow the server to point the client
                  // to a different authentication server. This is for a very
                  // particular use case that comes up when implementing a oauth
                  // server. Unsupported and may go away at any point in time.
                  //
                  // We will eventually provide a general way to use account-base
                  // against any DDP connection, not just one special one.
                  this.connection = DDP.connect(__meteor_runtime_config__.ACCOUNTS_CONNECTION_URL);
                } else {
                  this.connection = Meteor.connection;
                }
              }

              _getTokenLifetimeMs() {
                // When loginExpirationInDays is set to null, we'll use a really high
                // number of days (LOGIN_UNEXPIRABLE_TOKEN_DAYS) to simulate an
                // unexpiring token.
                const loginExpirationInDays = this._options.loginExpirationInDays === null ? LOGIN_UNEXPIRING_TOKEN_DAYS : this._options.loginExpirationInDays;
                return this._options.loginExpiration || (loginExpirationInDays || DEFAULT_LOGIN_EXPIRATION_DAYS) * 86400000;
              }

              _getPasswordResetTokenLifetimeMs() {
                return this._options.passwordResetTokenExpiration || (this._options.passwordResetTokenExpirationInDays || DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS) * 86400000;
              }

              _getPasswordEnrollTokenLifetimeMs() {
                return this._options.passwordEnrollTokenExpiration || (this._options.passwordEnrollTokenExpirationInDays || DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS) * 86400000;
              }

              _tokenExpiration(when) {
                // We pass when through the Date constructor for backwards compatibility;
                // `when` used to be a number.
                return new Date(new Date(when).getTime() + this._getTokenLifetimeMs());
              }

              _tokenExpiresSoon(when) {
                let minLifetimeMs = .1 * this._getTokenLifetimeMs();

                const minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;

                if (minLifetimeMs > minLifetimeCapMs) {
                  minLifetimeMs = minLifetimeCapMs;
                }

                return new Date() > new Date(when) - minLifetimeMs;
              } // No-op on the server, overridden on the client.


              _startupCallback(callback) {}

            }

            // Note that Accounts is defined separately in accounts_client.js and
            // accounts_server.js.

            /**
             * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.
             * @locus Anywhere but publish functions
             * @importFromPackage meteor
             */
            Meteor.userId = () => Accounts.userId();
            /**
             * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.
             * @locus Anywhere but publish functions
             * @importFromPackage meteor
             * @param {Object} [options]
             * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.
             */

            Meteor.user = options => Accounts.user(options); // how long (in days) until a login token expires


            const DEFAULT_LOGIN_EXPIRATION_DAYS = 90; // how long (in days) until reset password token expires

            const DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS = 3; // how long (in days) until enrol password token expires

            const DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS = 30; // Clients don't try to auto-login with a token that is going to expire within
            // .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.
            // Tries to avoid abrupt disconnects from expiring tokens.

            const MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour
            // how often (in milliseconds) we check for expired tokens

            const EXPIRE_TOKENS_INTERVAL_MS = 600 * 1000;
            const CONNECTION_CLOSE_DELAY_MS = 10 * 1000;
            // A large number of expiration days (approximately 100 years worth) that is
            // used when creating unexpiring tokens.
            const LOGIN_UNEXPIRING_TOKEN_DAYS = 365 * 100;
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/accounts-base/client_main.js");

  /* Exports */
  Package._define("accounts-base", _exports2, {
    Accounts: Accounts
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

	/* Imports */
	var Meteor = Package.meteor.Meteor;
	var global = Package.meteor.global;
	var meteorEnv = Package.meteor.meteorEnv;

	/* Package-scope variables */
	var SHA256;

	(function () {

		////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//                                                                                                            //
		// packages/sha/sha256.js                                                                                     //
		//                                                                                                            //
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//
		/// METEOR WRAPPER
		//
		SHA256 = function () {

			/**
   *
   *  Secure Hash Algorithm (SHA256)
   *  http://www.webtoolkit.info/javascript-sha256.html
   *  http://anmar.eu.org/projects/jssha2/
   *
   *  Original code by Angel Marin, Paul Johnston.
   *
   **/

			function SHA256(s) {

				var chrsz = 8;
				var hexcase = 0;

				function safe_add(x, y) {
					var lsw = (x & 0xFFFF) + (y & 0xFFFF);
					var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
					return msw << 16 | lsw & 0xFFFF;
				}

				function S(X, n) {
					return X >>> n | X << 32 - n;
				}
				function R(X, n) {
					return X >>> n;
				}
				function Ch(x, y, z) {
					return x & y ^ ~x & z;
				}
				function Maj(x, y, z) {
					return x & y ^ x & z ^ y & z;
				}
				function Sigma0256(x) {
					return S(x, 2) ^ S(x, 13) ^ S(x, 22);
				}
				function Sigma1256(x) {
					return S(x, 6) ^ S(x, 11) ^ S(x, 25);
				}
				function Gamma0256(x) {
					return S(x, 7) ^ S(x, 18) ^ R(x, 3);
				}
				function Gamma1256(x) {
					return S(x, 17) ^ S(x, 19) ^ R(x, 10);
				}

				function core_sha256(m, l) {
					var K = new Array(0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5, 0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174, 0xE49B69C1, 0xEFBE4786, 0xFC19DC6, 0x240CA1CC, 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA, 0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147, 0x6CA6351, 0x14292967, 0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85, 0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070, 0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3, 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208, 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2);
					var HASH = new Array(0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A, 0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19);
					var W = new Array(64);
					var a, b, c, d, e, f, g, h, i, j;
					var T1, T2;

					m[l >> 5] |= 0x80 << 24 - l % 32;
					m[(l + 64 >> 9 << 4) + 15] = l;

					for (var i = 0; i < m.length; i += 16) {
						a = HASH[0];
						b = HASH[1];
						c = HASH[2];
						d = HASH[3];
						e = HASH[4];
						f = HASH[5];
						g = HASH[6];
						h = HASH[7];

						for (var j = 0; j < 64; j++) {
							if (j < 16) W[j] = m[j + i];else W[j] = safe_add(safe_add(safe_add(Gamma1256(W[j - 2]), W[j - 7]), Gamma0256(W[j - 15])), W[j - 16]);

							T1 = safe_add(safe_add(safe_add(safe_add(h, Sigma1256(e)), Ch(e, f, g)), K[j]), W[j]);
							T2 = safe_add(Sigma0256(a), Maj(a, b, c));

							h = g;
							g = f;
							f = e;
							e = safe_add(d, T1);
							d = c;
							c = b;
							b = a;
							a = safe_add(T1, T2);
						}

						HASH[0] = safe_add(a, HASH[0]);
						HASH[1] = safe_add(b, HASH[1]);
						HASH[2] = safe_add(c, HASH[2]);
						HASH[3] = safe_add(d, HASH[3]);
						HASH[4] = safe_add(e, HASH[4]);
						HASH[5] = safe_add(f, HASH[5]);
						HASH[6] = safe_add(g, HASH[6]);
						HASH[7] = safe_add(h, HASH[7]);
					}
					return HASH;
				}

				function str2binb(str) {
					var bin = Array();
					var mask = (1 << chrsz) - 1;
					for (var i = 0; i < str.length * chrsz; i += chrsz) {
						bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << 24 - i % 32;
					}
					return bin;
				}

				function Utf8Encode(string) {
					// METEOR change:
					// The webtoolkit.info version of this code added this
					// Utf8Encode function (which does seem necessary for dealing
					// with arbitrary Unicode), but the following line seems
					// problematic:
					//
					// string = string.replace(/\r\n/g,"\n");
					var utftext = "";

					for (var n = 0; n < string.length; n++) {

						var c = string.charCodeAt(n);

						if (c < 128) {
							utftext += String.fromCharCode(c);
						} else if (c > 127 && c < 2048) {
							utftext += String.fromCharCode(c >> 6 | 192);
							utftext += String.fromCharCode(c & 63 | 128);
						} else {
							utftext += String.fromCharCode(c >> 12 | 224);
							utftext += String.fromCharCode(c >> 6 & 63 | 128);
							utftext += String.fromCharCode(c & 63 | 128);
						}
					}

					return utftext;
				}

				function binb2hex(binarray) {
					var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
					var str = "";
					for (var i = 0; i < binarray.length * 4; i++) {
						str += hex_tab.charAt(binarray[i >> 2] >> (3 - i % 4) * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> (3 - i % 4) * 8 & 0xF);
					}
					return str;
				}

				s = Utf8Encode(s);
				return binb2hex(core_sha256(str2binb(s), s.length * chrsz));
			}

			/// METEOR WRAPPER
			return SHA256;
		}();

		////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	}).call(this);

	/* Exports */
	Package._define("sha", {
		SHA256: SHA256
	});
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Accounts = Package['accounts-base'].Accounts;
  var SHA256 = Package.sha.SHA256;
  var EJSON = Package.ejson.EJSON;
  var DDP = Package['ddp-client'].DDP;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "accounts-password": { "password_client.js": function module(_require, _exports, _module) {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                            //
            // packages/accounts-password/password_client.js                                                              //
            //                                                                                                            //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            let _objectSpread;

            _module.link("@babel/runtime/helpers/objectSpread2", {
              default(v) {
                _objectSpread = v;
              }

            }, 0);

            // Used in the various functions below to handle errors consistently
            const reportError = (error, callback) => {
              if (callback) {
                callback(error);
              } else {
                throw error;
              }
            }; // Attempt to log in with a password.
            //
            // @param selector {String|Object} One of the following:
            //   - {username: (username)}
            //   - {email: (email)}
            //   - a string which may be a username or email, depending on whether
            //     it contains "@".
            // @param password {String}
            // @param callback {Function(error|undefined)}

            /**
             * @summary Log the user in with a password.
             * @locus Client
             * @param {Object | String} selector
             *   Either a string interpreted as a username or an email; or an object with a
             *   single key: `email`, `username` or `id`. Username or email match in a case
             *   insensitive manner.
             * @param {String} password The user's password.
             * @param {Function} [callback] Optional callback.
             *   Called with no arguments on success, or with a single `Error` argument
             *   on failure.
             * @importFromPackage meteor
             */

            Meteor.loginWithPassword = (selector, password, callback) => {
              if (typeof selector === 'string') if (!selector.includes('@')) selector = {
                username: selector
              };else selector = {
                email: selector
              };
              Accounts.callLoginMethod({
                methodArguments: [{
                  user: selector,
                  password: Accounts._hashPassword(password)
                }],
                userCallback: (error, result) => {
                  if (error) {
                    reportError(error, callback);
                  } else {
                    callback && callback();
                  }
                }
              });
            };

            Accounts._hashPassword = password => ({
              digest: SHA256(password),
              algorithm: "sha-256"
            }); // Attempt to log in as a new user.

            /**
             * @summary Create a new user.
             * @locus Anywhere
             * @param {Object} options
             * @param {String} options.username A unique name for this user.
             * @param {String} options.email The user's email address.
             * @param {String} options.password The user's password. This is __not__ sent in plain text over the wire.
             * @param {Object} options.profile The user's profile, typically including the `name` field.
             * @param {Function} [callback] Client only, optional callback. Called with no arguments on success, or with a single `Error` argument on failure.
             * @importFromPackage accounts-base
             */

            Accounts.createUser = (options, callback) => {
              options = _objectSpread({}, options); // we'll be modifying options

              if (typeof options.password !== 'string') throw new Error("options.password must be a string");

              if (!options.password) {
                return reportError(new Meteor.Error(400, "Password may not be empty"), callback);
              } // Replace password with the hashed password.


              options.password = Accounts._hashPassword(options.password);
              Accounts.callLoginMethod({
                methodName: 'createUser',
                methodArguments: [options],
                userCallback: callback
              });
            }; // Change password. Must be logged in.
            //
            // @param oldPassword {String|null} By default servers no longer allow
            //   changing password without the old password, but they could so we
            //   support passing no password to the server and letting it decide.
            // @param newPassword {String}
            // @param callback {Function(error|undefined)}

            /**
             * @summary Change the current user's password. Must be logged in.
             * @locus Client
             * @param {String} oldPassword The user's current password. This is __not__ sent in plain text over the wire.
             * @param {String} newPassword A new password for the user. This is __not__ sent in plain text over the wire.
             * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.
             * @importFromPackage accounts-base
             */

            Accounts.changePassword = (oldPassword, newPassword, callback) => {
              if (!Meteor.user()) {
                return reportError(new Error("Must be logged in to change password."), callback);
              }

              if (!newPassword instanceof String) {
                return reportError(new Meteor.Error(400, "Password must be a string"), callback);
              }

              if (!newPassword) {
                return reportError(new Meteor.Error(400, "Password may not be empty"), callback);
              }

              Accounts.connection.apply('changePassword', [oldPassword ? Accounts._hashPassword(oldPassword) : null, Accounts._hashPassword(newPassword)], (error, result) => {
                if (error || !result) {
                  // A normal error, not an error telling us to upgrade to bcrypt
                  reportError(error || new Error("No result from changePassword."), callback);
                } else {
                  callback && callback();
                }
              });
            }; // Sends an email to a user with a link that can be used to reset
            // their password
            //
            // @param options {Object}
            //   - email: (email)
            // @param callback (optional) {Function(error|undefined)}

            /**
             * @summary Request a forgot password email.
             * @locus Client
             * @param {Object} options
             * @param {String} options.email The email address to send a password reset link.
             * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.
             * @importFromPackage accounts-base
             */

            Accounts.forgotPassword = (options, callback) => {
              if (!options.email) {
                return reportError(new Meteor.Error(400, "Must pass options.email"), callback);
              }

              if (callback) {
                Accounts.connection.call("forgotPassword", options, callback);
              } else {
                Accounts.connection.call("forgotPassword", options);
              }
            }; // Resets a password based on a token originally created by
            // Accounts.forgotPassword, and then logs in the matching user.
            //
            // @param token {String}
            // @param newPassword {String}
            // @param callback (optional) {Function(error|undefined)}

            /**
             * @summary Reset the password for a user using a token received in email. Logs the user in afterwards.
             * @locus Client
             * @param {String} token The token retrieved from the reset password URL.
             * @param {String} newPassword A new password for the user. This is __not__ sent in plain text over the wire.
             * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.
             * @importFromPackage accounts-base
             */

            Accounts.resetPassword = (token, newPassword, callback) => {
              if (!token instanceof String) {
                return reportError(new Meteor.Error(400, "Token must be a string"), callback);
              }

              if (!newPassword instanceof String) {
                return reportError(new Meteor.Error(400, "Password must be a string"), callback);
              }

              if (!newPassword) {
                return reportError(new Meteor.Error(400, "Password may not be empty"), callback);
              }

              Accounts.callLoginMethod({
                methodName: 'resetPassword',
                methodArguments: [token, Accounts._hashPassword(newPassword)],
                userCallback: callback
              });
            }; // Verifies a user's email address based on a token originally
            // created by Accounts.sendVerificationEmail
            //
            // @param token {String}
            // @param callback (optional) {Function(error|undefined)}

            /**
             * @summary Marks the user's email address as verified. Logs the user in afterwards.
             * @locus Client
             * @param {String} token The token retrieved from the verification URL.
             * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.
             * @importFromPackage accounts-base
             */

            Accounts.verifyEmail = (token, callback) => {
              if (!token) {
                return reportError(new Meteor.Error(400, "Need to pass token"), callback);
              }

              Accounts.callLoginMethod({
                methodName: 'verifyEmail',
                methodArguments: [token],
                userCallback: callback
              });
            };
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  _require2("/node_modules/meteor/accounts-password/password_client.js");

  /* Exports */
  Package._define("accounts-password");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Mongo = Package.mongo.Mongo;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var EJSON = Package.ejson.EJSON;
  var LocalCollection = Package.minimongo.LocalCollection;
  var Minimongo = Package.minimongo.Minimongo;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var CollectionHooks;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "matb33:collection-hooks": { "client.js": function module(_require, _exports, _module) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                   //
            // packages/matb33_collection-hooks/client.js                                                                        //
            //                                                                                                                   //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              CollectionHooks: () => CollectionHooks
            });
            let Meteor;
            _module.link("meteor/meteor", {
              Meteor(v) {
                Meteor = v;
              }

            }, 0);
            let Tracker;
            _module.link("meteor/tracker", {
              Tracker(v) {
                Tracker = v;
              }

            }, 1);
            let CollectionHooks;
            _module.link("./collection-hooks.js", {
              CollectionHooks(v) {
                CollectionHooks = v;
              }

            }, 2);
            _module.link("./advices");

            CollectionHooks.getUserId = function getUserId() {
              let userId;
              Tracker.nonreactive(() => {
                userId = Meteor.userId && Meteor.userId();
              });

              if (userId == null) {
                userId = CollectionHooks.defaultUserId;
              }

              return userId;
            };
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "advices.js": function module(_require3, _exports3, _module2) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                   //
            // packages/matb33_collection-hooks/advices.js                                                                       //
            //                                                                                                                   //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module2.link("./insert.js");
            _module2.link("./update.js");
            _module2.link("./remove.js");
            _module2.link("./upsert.js");
            _module2.link("./find.js");
            _module2.link("./findone.js");
            _module2.link("./users-compat.js");
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "collection-hooks.js": function module(_require4, _exports4, _module3) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                   //
            // packages/matb33_collection-hooks/collection-hooks.js                                                              //
            //                                                                                                                   //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            const _excluded = ["multi", "upsert"];

            let _objectWithoutProperties;

            _module3.link("@babel/runtime/helpers/objectWithoutProperties", {
              default(v) {
                _objectWithoutProperties = v;
              }

            }, 0);

            let _objectSpread;

            _module3.link("@babel/runtime/helpers/objectSpread2", {
              default(v) {
                _objectSpread = v;
              }

            }, 1);
            _module3.export({
              CollectionHooks: () => CollectionHooks
            });
            let Meteor;
            _module3.link("meteor/meteor", {
              Meteor(v) {
                Meteor = v;
              }

            }, 0);
            let Mongo;
            _module3.link("meteor/mongo", {
              Mongo(v) {
                Mongo = v;
              }

            }, 1);
            let EJSON;
            _module3.link("meteor/ejson", {
              EJSON(v) {
                EJSON = v;
              }

            }, 2);
            let LocalCollection;
            _module3.link("meteor/minimongo", {
              LocalCollection(v) {
                LocalCollection = v;
              }

            }, 3);
            // Relevant AOP terminology:
            // Aspect: User code that runs before/after (hook)
            // Advice: Wrapper code that knows when to call user code (aspects)
            // Pointcut: before/after
            const advices = {};
            const CollectionHooks = {
              defaults: {
                before: {
                  insert: {},
                  update: {},
                  remove: {},
                  upsert: {},
                  find: {},
                  findOne: {},
                  all: {}
                },
                after: {
                  insert: {},
                  update: {},
                  remove: {},
                  find: {},
                  findOne: {},
                  all: {}
                },
                all: {
                  insert: {},
                  update: {},
                  remove: {},
                  find: {},
                  findOne: {},
                  all: {}
                }
              },
              directEnv: new Meteor.EnvironmentVariable(),

              directOp(func) {
                return this.directEnv.withValue(true, func);
              },

              hookedOp(func) {
                return this.directEnv.withValue(false, func);
              }

            };

            CollectionHooks.extendCollectionInstance = function extendCollectionInstance(self, constructor) {
              // Offer a public API to allow the user to define aspects
              // Example: collection.before.insert(func);
              ['before', 'after'].forEach(function (pointcut) {
                Object.entries(advices).forEach(function (_ref) {
                  let [method, advice] = _ref;
                  if (advice === 'upsert' && pointcut === 'after') return;

                  Meteor._ensure(self, pointcut, method);

                  Meteor._ensure(self, '_hookAspects', method);

                  self._hookAspects[method][pointcut] = [];

                  self[pointcut][method] = function (aspect, options) {
                    const len = self._hookAspects[method][pointcut].push({
                      aspect,
                      options: CollectionHooks.initOptions(options, pointcut, method)
                    });

                    return {
                      replace(aspect, options) {
                        self._hookAspects[method][pointcut].splice(len - 1, 1, {
                          aspect,
                          options: CollectionHooks.initOptions(options, pointcut, method)
                        });
                      },

                      remove() {
                        self._hookAspects[method][pointcut].splice(len - 1, 1);
                      }

                    };
                  };
                });
              }); // Offer a publicly accessible object to allow the user to define
              // collection-wide hook options.
              // Example: collection.hookOptions.after.update = {fetchPrevious: false};

              self.hookOptions = EJSON.clone(CollectionHooks.defaults); // Wrap mutator methods, letting the defined advice do the work

              Object.entries(advices).forEach(function (_ref2) {
                let [method, advice] = _ref2;
                const collection = Meteor.isClient || method === 'upsert' ? self : self._collection; // Store a reference to the original mutator method

                const _super = collection[method];

                Meteor._ensure(self, 'direct', method);

                self.direct[method] = function () {
                  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                  }

                  return CollectionHooks.directOp(function () {
                    return constructor.prototype[method].apply(self, args);
                  });
                };

                collection[method] = function () {
                  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                    args[_key2] = arguments[_key2];
                  }

                  if (CollectionHooks.directEnv.get() === true) {
                    return _super.apply(collection, args);
                  } // NOTE: should we decide to force `update` with `{upsert:true}` to use
                  // the `upsert` hooks, this is what will accomplish it. It's important to
                  // realize that Meteor won't distinguish between an `update` and an
                  // `insert` though, so we'll end up with `after.update` getting called
                  // even on an `insert`. That's why we've chosen to disable this for now.
                  // if (method === "update" && Object(args[2]) === args[2] && args[2].upsert) {
                  //   method = "upsert";
                  //   advice = CollectionHooks.getAdvice(method);
                  // }


                  return advice.call(this, CollectionHooks.getUserId(), _super, self, method === 'upsert' ? {
                    insert: self._hookAspects.insert || {},
                    update: self._hookAspects.update || {},
                    upsert: self._hookAspects.upsert || {}
                  } : self._hookAspects[method] || {}, function (doc) {
                    return typeof self._transform === 'function' ? function (d) {
                      return self._transform(d || doc);
                    } : function (d) {
                      return d || doc;
                    };
                  }, args, false);
                };
              });
            };

            CollectionHooks.defineAdvice = (method, advice) => {
              advices[method] = advice;
            };

            CollectionHooks.getAdvice = method => advices[method];

            CollectionHooks.initOptions = (options, pointcut, method) => CollectionHooks.extendOptions(CollectionHooks.defaults, options, pointcut, method);

            CollectionHooks.extendOptions = (source, options, pointcut, method) => _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, options), source.all.all), source[pointcut].all), source.all[method]), source[pointcut][method]);

            CollectionHooks.getDocs = function getDocs(collection, selector, options) {
              const findOptions = {
                transform: null,
                reactive: false
              }; // added reactive: false

              /*
              // No "fetch" support at this time.
              if (!this._validators.fetchAllFields) {
                findOptions.fields = {};
                this._validators.fetch.forEach(function(fieldName) {
                  findOptions.fields[fieldName] = 1;
                });
              }
              */
              // Bit of a magic condition here... only "update" passes options, so this is
              // only relevant to when update calls getDocs:

              if (options) {
                // This was added because in our case, we are potentially iterating over
                // multiple docs. If multi isn't enabled, force a limit (almost like
                // findOne), as the default for update without multi enabled is to affect
                // only the first matched document:
                if (!options.multi) {
                  findOptions.limit = 1;
                }

                const {
                  multi,
                  upsert
                } = options,
                      rest = _objectWithoutProperties(options, _excluded);

                Object.assign(findOptions, rest);
              } // Unlike validators, we iterate over multiple docs, so use
              // find instead of findOne:


              return collection.find(selector, findOptions);
            }; // This function normalizes the selector (converting it to an Object)


            CollectionHooks.normalizeSelector = function (selector) {
              if (typeof selector === 'string' || selector && selector.constructor === Mongo.ObjectID) {
                return {
                  _id: selector
                };
              } else {
                return selector;
              }
            }; // This function contains a snippet of code pulled and modified from:
            // ~/.meteor/packages/mongo-livedata/collection.js
            // It's contained in these utility functions to make updates easier for us in
            // case this code changes.


            CollectionHooks.getFields = function getFields(mutator) {
              // compute modified fields
              const fields = []; // ====ADDED START=======================

              const operators = ['$addToSet', '$bit', '$currentDate', '$inc', '$max', '$min', '$pop', '$pull', '$pullAll', '$push', '$rename', '$set', '$unset']; // ====ADDED END=========================

              Object.entries(mutator).forEach(function (_ref3) {
                let [op, params] = _ref3;

                // ====ADDED START=======================
                if (operators.includes(op)) {
                  // ====ADDED END=========================
                  Object.keys(params).forEach(function (field) {
                    // treat dotted fields as if they are replacing their
                    // top-level part
                    if (field.indexOf('.') !== -1) {
                      field = field.substring(0, field.indexOf('.'));
                    } // record the field we are trying to change


                    if (!fields.includes(field)) {
                      fields.push(field);
                    }
                  }); // ====ADDED START=======================
                } else {
                  fields.push(op);
                } // ====ADDED END=========================
              });
              return fields;
            };

            CollectionHooks.reassignPrototype = function reassignPrototype(instance, constr) {
              const hasSetPrototypeOf = typeof Object.setPrototypeOf === 'function';
              constr = constr || Mongo.Collection; // __proto__ is not available in < IE11
              // Note: Assigning a prototype dynamically has performance implications

              if (hasSetPrototypeOf) {
                Object.setPrototypeOf(instance, constr.prototype);
              } else if (instance.__proto__) {
                // eslint-disable-line no-proto
                instance.__proto__ = constr.prototype; // eslint-disable-line no-proto
              }
            };

            CollectionHooks.wrapCollection = function wrapCollection(ns, as) {
              if (!as._CollectionConstructor) as._CollectionConstructor = as.Collection;
              if (!as._CollectionPrototype) as._CollectionPrototype = new as.Collection(null);
              const constructor = ns._NewCollectionContructor || as._CollectionConstructor;
              const proto = as._CollectionPrototype;

              ns.Collection = function () {
                for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                  args[_key3] = arguments[_key3];
                }

                const ret = constructor.apply(this, args);
                CollectionHooks.extendCollectionInstance(this, constructor);
                return ret;
              }; // Retain a reference to the new constructor to allow further wrapping.


              ns._NewCollectionContructor = ns.Collection;
              ns.Collection.prototype = proto;
              ns.Collection.prototype.constructor = ns.Collection;

              for (const prop of Object.keys(constructor)) {
                ns.Collection[prop] = constructor[prop];
              } // Meteor overrides the apply method which is copied from the constructor in the loop above. Replace it with the
              // default method which we need if we were to further wrap ns.Collection.


              ns.Collection.apply = Function.prototype.apply;
            };

            CollectionHooks.modify = LocalCollection._modify;

            if (typeof Mongo !== 'undefined') {
              CollectionHooks.wrapCollection(Meteor, Mongo);
              CollectionHooks.wrapCollection(Mongo, Mongo);
            } else {
              CollectionHooks.wrapCollection(Meteor, Meteor);
            }
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "find.js": function module(_require5, _exports5, _module4) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                   //
            // packages/matb33_collection-hooks/find.js                                                                          //
            //                                                                                                                   //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            let CollectionHooks;
            _module4.link("./collection-hooks", {
              CollectionHooks(v) {
                CollectionHooks = v;
              }

            }, 0);
            CollectionHooks.defineAdvice('find', function (userId, _super, instance, aspects, getTransform, args, suppressAspects) {
              const ctx = {
                context: this,
                _super,
                args
              };
              const selector = CollectionHooks.normalizeSelector(instance._getFindSelector(args));

              const options = instance._getFindOptions(args);

              let abort; // before

              if (!suppressAspects) {
                aspects.before.forEach(o => {
                  const r = o.aspect.call(ctx, userId, selector, options);
                  if (r === false) abort = true;
                });
                if (abort) return instance.find(undefined);
              }

              const after = cursor => {
                if (!suppressAspects) {
                  aspects.after.forEach(o => {
                    o.aspect.call(ctx, userId, selector, options, cursor);
                  });
                }
              };

              const ret = _super.call(this, selector, options);

              after(ret);
              return ret;
            });
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "findone.js": function module(_require6, _exports6, _module5) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                   //
            // packages/matb33_collection-hooks/findone.js                                                                       //
            //                                                                                                                   //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            let CollectionHooks;
            _module5.link("./collection-hooks", {
              CollectionHooks(v) {
                CollectionHooks = v;
              }

            }, 0);
            CollectionHooks.defineAdvice('findOne', function (userId, _super, instance, aspects, getTransform, args, suppressAspects) {
              const ctx = {
                context: this,
                _super,
                args
              };
              const selector = CollectionHooks.normalizeSelector(instance._getFindSelector(args));

              const options = instance._getFindOptions(args);

              let abort; // before

              if (!suppressAspects) {
                aspects.before.forEach(o => {
                  const r = o.aspect.call(ctx, userId, selector, options);
                  if (r === false) abort = true;
                });
                if (abort) return;
              }

              function after(doc) {
                if (!suppressAspects) {
                  aspects.after.forEach(o => {
                    o.aspect.call(ctx, userId, selector, options, doc);
                  });
                }
              }

              const ret = _super.call(this, selector, options);

              after(ret);
              return ret;
            });
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "insert.js": function module(_require7, _exports7, _module6) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                   //
            // packages/matb33_collection-hooks/insert.js                                                                        //
            //                                                                                                                   //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            let _objectSpread;

            _module6.link("@babel/runtime/helpers/objectSpread2", {
              default(v) {
                _objectSpread = v;
              }

            }, 0);
            let EJSON;
            _module6.link("meteor/ejson", {
              EJSON(v) {
                EJSON = v;
              }

            }, 0);
            let Mongo;
            _module6.link("meteor/mongo", {
              Mongo(v) {
                Mongo = v;
              }

            }, 1);
            let CollectionHooks;
            _module6.link("./collection-hooks", {
              CollectionHooks(v) {
                CollectionHooks = v;
              }

            }, 2);
            CollectionHooks.defineAdvice('insert', function (userId, _super, instance, aspects, getTransform, args, suppressAspects) {
              const ctx = {
                context: this,
                _super,
                args
              };
              let [doc, callback] = args;
              const async = typeof callback === 'function';
              let abort;
              let ret; // before

              if (!suppressAspects) {
                try {
                  aspects.before.forEach(o => {
                    const r = o.aspect.call(_objectSpread({
                      transform: getTransform(doc)
                    }, ctx), userId, doc);
                    if (r === false) abort = true;
                  });
                  if (abort) return;
                } catch (e) {
                  if (async) return callback.call(this, e);
                  throw e;
                }
              }

              const after = (id, err) => {
                if (id) {
                  // In some cases (namely Meteor.users on Meteor 1.4+), the _id property
                  // is a raw mongo _id object. We need to extract the _id from this object
                  if (typeof id === 'object' && id.ops) {
                    // If _str then collection is using Mongo.ObjectID as ids
                    if (doc._id._str) {
                      id = new Mongo.ObjectID(doc._id._str.toString());
                    } else {
                      id = id.ops && id.ops[0] && id.ops[0]._id;
                    }
                  }

                  doc = EJSON.clone(doc);
                  doc._id = id;
                }

                if (!suppressAspects) {
                  const lctx = _objectSpread({
                    transform: getTransform(doc),
                    _id: id,
                    err
                  }, ctx);

                  aspects.after.forEach(o => {
                    o.aspect.call(lctx, userId, doc);
                  });
                }

                return id;
              };

              if (async) {
                const wrappedCallback = function (err, obj) {
                  after(obj && obj[0] && obj[0]._id || obj, err);

                  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
                    args[_key - 2] = arguments[_key];
                  }

                  return callback.call(this, err, obj, ...args);
                };

                return _super.call(this, doc, wrappedCallback);
              } else {
                ret = _super.call(this, doc, callback);
                return after(ret && ret[0] && ret[0]._id || ret);
              }
            });
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "remove.js": function module(_require8, _exports8, _module7) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                   //
            // packages/matb33_collection-hooks/remove.js                                                                        //
            //                                                                                                                   //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            let _objectSpread;

            _module7.link("@babel/runtime/helpers/objectSpread2", {
              default(v) {
                _objectSpread = v;
              }

            }, 0);
            let EJSON;
            _module7.link("meteor/ejson", {
              EJSON(v) {
                EJSON = v;
              }

            }, 0);
            let CollectionHooks;
            _module7.link("./collection-hooks", {
              CollectionHooks(v) {
                CollectionHooks = v;
              }

            }, 1);

            const isEmpty = a => !Array.isArray(a) || !a.length;

            CollectionHooks.defineAdvice('remove', function (userId, _super, instance, aspects, getTransform, args, suppressAspects) {
              const ctx = {
                context: this,
                _super,
                args
              };
              const [selector, callback] = args;
              const async = typeof callback === 'function';
              let docs;
              let abort;
              const prev = [];

              if (!suppressAspects) {
                try {
                  if (!isEmpty(aspects.before) || !isEmpty(aspects.after)) {
                    docs = CollectionHooks.getDocs.call(this, instance, selector).fetch();
                  } // copy originals for convenience for the 'after' pointcut


                  if (!isEmpty(aspects.after)) {
                    docs.forEach(doc => prev.push(EJSON.clone(doc)));
                  } // before


                  aspects.before.forEach(o => {
                    docs.forEach(doc => {
                      const r = o.aspect.call(_objectSpread({
                        transform: getTransform(doc)
                      }, ctx), userId, doc);
                      if (r === false) abort = true;
                    });
                  });
                  if (abort) return 0;
                } catch (e) {
                  if (async) return callback.call(this, e);
                  throw e;
                }
              }

              function after(err) {
                if (!suppressAspects) {
                  aspects.after.forEach(o => {
                    prev.forEach(doc => {
                      o.aspect.call(_objectSpread({
                        transform: getTransform(doc),
                        err
                      }, ctx), userId, doc);
                    });
                  });
                }
              }

              if (async) {
                const wrappedCallback = function (err) {
                  after(err);

                  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                    args[_key - 1] = arguments[_key];
                  }

                  return callback.call(this, err, ...args);
                };

                return _super.call(this, selector, wrappedCallback);
              } else {
                const result = _super.call(this, selector, callback);

                after();
                return result;
              }
            });
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "update.js": function module(_require9, _exports9, _module8) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                   //
            // packages/matb33_collection-hooks/update.js                                                                        //
            //                                                                                                                   //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            let _objectSpread;

            _module8.link("@babel/runtime/helpers/objectSpread2", {
              default(v) {
                _objectSpread = v;
              }

            }, 0);
            let EJSON;
            _module8.link("meteor/ejson", {
              EJSON(v) {
                EJSON = v;
              }

            }, 0);
            let CollectionHooks;
            _module8.link("./collection-hooks", {
              CollectionHooks(v) {
                CollectionHooks = v;
              }

            }, 1);

            const isEmpty = a => !Array.isArray(a) || !a.length;

            CollectionHooks.defineAdvice('update', function (userId, _super, instance, aspects, getTransform, args, suppressAspects) {
              const ctx = {
                context: this,
                _super,
                args
              };
              let [selector, mutator, options, callback] = args;

              if (typeof options === 'function') {
                callback = options;
                options = {};
              }

              const async = typeof callback === 'function';
              let docs;
              let docIds;
              let fields;
              let abort;
              const prev = {};

              if (!suppressAspects) {
                try {
                  if (!isEmpty(aspects.before) || !isEmpty(aspects.after)) {
                    fields = CollectionHooks.getFields(mutator);
                    docs = CollectionHooks.getDocs.call(this, instance, selector, options).fetch();
                    docIds = docs.map(doc => doc._id);
                  } // copy originals for convenience for the 'after' pointcut


                  if (!isEmpty(aspects.after)) {
                    prev.mutator = EJSON.clone(mutator);
                    prev.options = EJSON.clone(options);

                    if (aspects.after.some(o => o.options.fetchPrevious !== false) && CollectionHooks.extendOptions(instance.hookOptions, {}, 'after', 'update').fetchPrevious !== false) {
                      prev.docs = {};
                      docs.forEach(doc => {
                        prev.docs[doc._id] = EJSON.clone(doc);
                      });
                    }
                  } // before


                  aspects.before.forEach(function (o) {
                    docs.forEach(function (doc) {
                      const r = o.aspect.call(_objectSpread({
                        transform: getTransform(doc)
                      }, ctx), userId, doc, fields, mutator, options);
                      if (r === false) abort = true;
                    });
                  });
                  if (abort) return 0;
                } catch (e) {
                  if (async) return callback.call(this, e);
                  throw e;
                }
              }

              const after = (affected, err) => {
                if (!suppressAspects && !isEmpty(aspects.after)) {
                  const fields = CollectionHooks.getFields(mutator);
                  const docs = CollectionHooks.getDocs.call(this, instance, {
                    _id: {
                      $in: docIds
                    }
                  }, options).fetch();
                  aspects.after.forEach(o => {
                    docs.forEach(doc => {
                      o.aspect.call(_objectSpread({
                        transform: getTransform(doc),
                        previous: prev.docs && prev.docs[doc._id],
                        affected,
                        err
                      }, ctx), userId, doc, fields, prev.mutator, prev.options);
                    });
                  });
                }
              };

              if (async) {
                const wrappedCallback = function (err, affected) {
                  after(affected, err);

                  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
                    args[_key - 2] = arguments[_key];
                  }

                  return callback.call(this, err, affected, ...args);
                };

                return _super.call(this, selector, mutator, options, wrappedCallback);
              } else {
                const affected = _super.call(this, selector, mutator, options, callback);

                after(affected);
                return affected;
              }
            });
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "upsert.js": function module(_require10, _exports10, _module9) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                   //
            // packages/matb33_collection-hooks/upsert.js                                                                        //
            //                                                                                                                   //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            let _objectSpread;

            _module9.link("@babel/runtime/helpers/objectSpread2", {
              default(v) {
                _objectSpread = v;
              }

            }, 0);
            let EJSON;
            _module9.link("meteor/ejson", {
              EJSON(v) {
                EJSON = v;
              }

            }, 0);
            let CollectionHooks;
            _module9.link("./collection-hooks", {
              CollectionHooks(v) {
                CollectionHooks = v;
              }

            }, 1);

            const isEmpty = a => !Array.isArray(a) || !a.length;

            CollectionHooks.defineAdvice('upsert', function (userId, _super, instance, aspectGroup, getTransform, args, suppressAspects) {
              args[0] = CollectionHooks.normalizeSelector(instance._getFindSelector(args));
              const ctx = {
                context: this,
                _super,
                args
              };
              let [selector, mutator, options, callback] = args;

              if (typeof options === 'function') {
                callback = options;
                options = {};
              }

              const async = typeof callback === 'function';
              let docs;
              let docIds;
              let abort;
              const prev = {};

              if (!suppressAspects) {
                if (!isEmpty(aspectGroup.upsert.before) || !isEmpty(aspectGroup.update.after)) {
                  docs = CollectionHooks.getDocs.call(this, instance, selector, options).fetch();
                  docIds = docs.map(doc => doc._id);
                } // copy originals for convenience for the 'after' pointcut


                if (!isEmpty(aspectGroup.update.after)) {
                  if (aspectGroup.update.after.some(o => o.options.fetchPrevious !== false) && CollectionHooks.extendOptions(instance.hookOptions, {}, 'after', 'update').fetchPrevious !== false) {
                    prev.mutator = EJSON.clone(mutator);
                    prev.options = EJSON.clone(options);
                    prev.docs = {};
                    docs.forEach(doc => {
                      prev.docs[doc._id] = EJSON.clone(doc);
                    });
                  }
                } // before


                aspectGroup.upsert.before.forEach(o => {
                  const r = o.aspect.call(ctx, userId, selector, mutator, options);
                  if (r === false) abort = true;
                });
                if (abort) return {
                  numberAffected: 0
                };
              }

              const afterUpdate = (affected, err) => {
                if (!suppressAspects && !isEmpty(aspectGroup.update.after)) {
                  const fields = CollectionHooks.getFields(mutator);
                  const docs = CollectionHooks.getDocs.call(this, instance, {
                    _id: {
                      $in: docIds
                    }
                  }, options).fetch();
                  aspectGroup.update.after.forEach(o => {
                    docs.forEach(doc => {
                      o.aspect.call(_objectSpread({
                        transform: getTransform(doc),
                        previous: prev.docs && prev.docs[doc._id],
                        affected,
                        err
                      }, ctx), userId, doc, fields, prev.mutator, prev.options);
                    });
                  });
                }
              };

              const afterInsert = (_id, err) => {
                if (!suppressAspects && !isEmpty(aspectGroup.insert.after)) {
                  const doc = CollectionHooks.getDocs.call(this, instance, {
                    _id
                  }, selector, {}).fetch()[0]; // 3rd argument passes empty object which causes magic logic to imply limit:1

                  const lctx = _objectSpread({
                    transform: getTransform(doc),
                    _id,
                    err
                  }, ctx);

                  aspectGroup.insert.after.forEach(o => {
                    o.aspect.call(lctx, userId, doc);
                  });
                }
              };

              if (async) {
                const wrappedCallback = function (err, ret) {
                  if (err || ret && ret.insertedId) {
                    // Send any errors to afterInsert
                    afterInsert(ret.insertedId, err);
                  } else {
                    afterUpdate(ret && ret.numberAffected, err); // Note that err can never reach here
                  }

                  return CollectionHooks.hookedOp(function () {
                    return callback.call(this, err, ret);
                  });
                };

                return CollectionHooks.directOp(() => _super.call(this, selector, mutator, options, wrappedCallback));
              } else {
                const ret = CollectionHooks.directOp(() => _super.call(this, selector, mutator, options, callback));

                if (ret && ret.insertedId) {
                  afterInsert(ret.insertedId);
                } else {
                  afterUpdate(ret && ret.numberAffected);
                }

                return ret;
              }
            });
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "users-compat.js": function module(_require11, _exports11, _module10) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                   //
            // packages/matb33_collection-hooks/users-compat.js                                                                  //
            //                                                                                                                   //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            let Meteor;
            _module10.link("meteor/meteor", {
              Meteor(v) {
                Meteor = v;
              }

            }, 0);
            let Mongo;
            _module10.link("meteor/mongo", {
              Mongo(v) {
                Mongo = v;
              }

            }, 1);
            let CollectionHooks;
            _module10.link("./collection-hooks", {
              CollectionHooks(v) {
                CollectionHooks = v;
              }

            }, 2);

            if (Meteor.users) {
              // If Meteor.users has been instantiated, attempt to re-assign its prototype:
              CollectionHooks.reassignPrototype(Meteor.users); // Next, give it the hook aspects:

              CollectionHooks.extendCollectionInstance(Meteor.users, Mongo.Collection);
            }
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/matb33:collection-hooks/client.js");

  /* Exports */
  Package._define("matb33:collection-hooks", _exports2, {
    CollectionHooks: CollectionHooks
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var EJSON = Package.ejson.EJSON;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var value, ReactiveDict;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "reactive-dict": { "migration.js": function module(_require, _exports, _module) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                               //
            // packages/reactive-dict/migration.js                                                                           //
            //                                                                                                               //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              ReactiveDict: () => ReactiveDict
            });
            let ReactiveDict;
            _module.link("./reactive-dict", {
              ReactiveDict(v) {
                ReactiveDict = v;
              }

            }, 0);
            const hasOwn = Object.prototype.hasOwnProperty;
            ReactiveDict._migratedDictData = {}; // name -> data

            ReactiveDict._dictsToMigrate = {}; // name -> ReactiveDict

            ReactiveDict._loadMigratedDict = function (dictName) {
              if (hasOwn.call(ReactiveDict._migratedDictData, dictName)) {
                const data = ReactiveDict._migratedDictData[dictName];
                delete ReactiveDict._migratedDictData[dictName];
                return data;
              }

              return null;
            };

            ReactiveDict._registerDictForMigrate = function (dictName, dict) {
              if (hasOwn.call(ReactiveDict._dictsToMigrate, dictName)) throw new Error("Duplicate ReactiveDict name: " + dictName);
              ReactiveDict._dictsToMigrate[dictName] = dict;
            };

            if (Meteor.isClient && Package.reload) {
              // Put old migrated data into ReactiveDict._migratedDictData,
              // where it can be accessed by ReactiveDict._loadMigratedDict.
              var migrationData = Package.reload.Reload._migrationData('reactive-dict');

              if (migrationData && migrationData.dicts) ReactiveDict._migratedDictData = migrationData.dicts; // On migration, assemble the data from all the dicts that have been
              // registered.

              Package.reload.Reload._onMigrate('reactive-dict', function () {
                var dictsToMigrate = ReactiveDict._dictsToMigrate;
                var dataToMigrate = {};

                for (var dictName in dictsToMigrate) dataToMigrate[dictName] = dictsToMigrate[dictName]._getMigrationData();

                return [true, {
                  dicts: dataToMigrate
                }];
              });
            }
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "reactive-dict.js": function module(_require3, _exports3, _module2) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                               //
            // packages/reactive-dict/reactive-dict.js                                                                       //
            //                                                                                                               //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module2.export({
              ReactiveDict: () => ReactiveDict
            });
            const hasOwn = Object.prototype.hasOwnProperty; // XXX come up with a serialization method which canonicalizes object key
            // order, which would allow us to use objects as values for equals.

            function stringify(value) {
              if (value === undefined) {
                return 'undefined';
              }

              return EJSON.stringify(value);
            }

            function parse(serialized) {
              if (serialized === undefined || serialized === 'undefined') {
                return undefined;
              }

              return EJSON.parse(serialized);
            }

            function changed(v) {
              v && v.changed();
            } // XXX COMPAT WITH 0.9.1 : accept migrationData instead of dictName

            /**
             * @class
             * @instanceName ReactiveDict
             * @summary Constructor for a ReactiveDict, which represents a reactive dictionary of key/value pairs.
             * @locus Client
             * @param {String} [name] Optional.  When a name is passed, preserves contents across Hot Code Pushes
             * @param {Object} [initialValue] Optional.  The default values for the dictionary
             */

            class ReactiveDict {
              constructor(dictName, dictData) {
                // this.keys: key -> value
                this.keys = {};

                if (dictName) {
                  // name given; migration will be performed
                  if (typeof dictName === 'string') {
                    // the normal case, argument is a string name.
                    // Only run migration logic on client, it will cause
                    // duplicate name errors on server during reloads.
                    // _registerDictForMigrate will throw an error on duplicate name.
                    Meteor.isClient && ReactiveDict._registerDictForMigrate(dictName, this);

                    const migratedData = Meteor.isClient && ReactiveDict._loadMigratedDict(dictName);

                    if (migratedData) {
                      // Don't stringify migrated data
                      this.keys = migratedData;
                    } else {
                      // Use _setObject to make sure values are stringified
                      this._setObject(dictData || {});
                    }

                    this.name = dictName;
                  } else if (typeof dictName === 'object') {
                    // back-compat case: dictName is actually migrationData
                    // Use _setObject to make sure values are stringified
                    this._setObject(dictName);
                  } else {
                    throw new Error("Invalid ReactiveDict argument: " + dictName);
                  }
                } else if (typeof dictData === 'object') {
                  this._setObject(dictData);
                }

                this.allDeps = new Tracker.Dependency();
                this.keyDeps = {}; // key -> Dependency

                this.keyValueDeps = {}; // key -> Dependency
              } // set() began as a key/value method, but we are now overloading it
              // to take an object of key/value pairs, similar to backbone
              // http://backbonejs.org/#Model-set

              /**
               * @summary Set a value for a key in the ReactiveDict. Notify any listeners
               * that the value has changed (eg: redraw templates, and rerun any
               * [`Tracker.autorun`](#tracker_autorun) computations, that called
               * [`ReactiveDict.get`](#ReactiveDict_get) on this `key`.)
               * @locus Client
               * @param {String} key The key to set, eg, `selectedItem`
               * @param {EJSONable | undefined} value The new value for `key`
               */

              set(keyOrObject, value) {
                if (typeof keyOrObject === 'object' && value === undefined) {
                  // Called as `dict.set({...})`
                  this._setObject(keyOrObject);

                  return;
                } // the input isn't an object, so it must be a key
                // and we resume with the rest of the function


                const key = keyOrObject;
                value = stringify(value);
                const keyExisted = hasOwn.call(this.keys, key);
                const oldSerializedValue = keyExisted ? this.keys[key] : 'undefined';
                const isNewValue = value !== oldSerializedValue;
                this.keys[key] = value;

                if (isNewValue || !keyExisted) {
                  // Using the changed utility function here because this.allDeps might not exist yet,
                  // when setting initial data from constructor
                  changed(this.allDeps);
                } // Don't trigger changes when setting initial data from constructor,
                // this.KeyDeps is undefined in this case


                if (isNewValue && this.keyDeps) {
                  changed(this.keyDeps[key]);

                  if (this.keyValueDeps[key]) {
                    changed(this.keyValueDeps[key][oldSerializedValue]);
                    changed(this.keyValueDeps[key][value]);
                  }
                }
              }
              /**
               * @summary Set a value for a key if it hasn't been set before.
               * Otherwise works exactly the same as [`ReactiveDict.set`](#ReactiveDict-set).
               * @locus Client
               * @param {String} key The key to set, eg, `selectedItem`
               * @param {EJSONable | undefined} value The new value for `key`
               */

              setDefault(keyOrObject, value) {
                if (typeof keyOrObject === 'object' && value === undefined) {
                  // Called as `dict.setDefault({...})`
                  this._setDefaultObject(keyOrObject);

                  return;
                } // the input isn't an object, so it must be a key
                // and we resume with the rest of the function


                const key = keyOrObject;

                if (!hasOwn.call(this.keys, key)) {
                  this.set(key, value);
                }
              }
              /**
               * @summary Get the value assiciated with a key. If inside a [reactive
               * computation](#reactivity), invalidate the computation the next time the
               * value associated with this key is changed by
               * [`ReactiveDict.set`](#ReactiveDict-set).
               * This returns a clone of the value, so if it's an object or an array,
               * mutating the returned value has no effect on the value stored in the
               * ReactiveDict.
               * @locus Client
               * @param {String} key The key of the element to return
               */

              get(key) {
                this._ensureKey(key);

                this.keyDeps[key].depend();
                return parse(this.keys[key]);
              }
              /**
               * @summary Test if the stored entry for a key is equal to a value. If inside a
               * [reactive computation](#reactivity), invalidate the computation the next
               * time the variable changes to or from the value.
               * @locus Client
               * @param {String} key The name of the session variable to test
               * @param {String | Number | Boolean | null | undefined} value The value to
               * test against
               */

              equals(key, value) {
                // Mongo.ObjectID is in the 'mongo' package
                let ObjectID = null;

                if (Package.mongo) {
                  ObjectID = Package.mongo.Mongo.ObjectID;
                } // We don't allow objects (or arrays that might include objects) for
                // .equals, because JSON.stringify doesn't canonicalize object key
                // order. (We can make equals have the right return value by parsing the
                // current value and using EJSON.equals, but we won't have a canonical
                // element of keyValueDeps[key] to store the dependency.) You can still use
                // "EJSON.equals(reactiveDict.get(key), value)".
                //
                // XXX we could allow arrays as long as we recursively check that there
                // are no objects


                if (typeof value !== 'string' && typeof value !== 'number' && typeof value !== 'boolean' && typeof value !== 'undefined' && !(value instanceof Date) && !(ObjectID && value instanceof ObjectID) && value !== null) {
                  throw new Error("ReactiveDict.equals: value must be scalar");
                }

                const serializedValue = stringify(value);

                if (Tracker.active) {
                  this._ensureKey(key);

                  if (!hasOwn.call(this.keyValueDeps[key], serializedValue)) {
                    this.keyValueDeps[key][serializedValue] = new Tracker.Dependency();
                  }

                  var isNew = this.keyValueDeps[key][serializedValue].depend();

                  if (isNew) {
                    Tracker.onInvalidate(() => {
                      // clean up [key][serializedValue] if it's now empty, so we don't
                      // use O(n) memory for n = values seen ever
                      if (!this.keyValueDeps[key][serializedValue].hasDependents()) {
                        delete this.keyValueDeps[key][serializedValue];
                      }
                    });
                  }
                }

                let oldValue = undefined;

                if (hasOwn.call(this.keys, key)) {
                  oldValue = parse(this.keys[key]);
                }

                return EJSON.equals(oldValue, value);
              }
              /**
               * @summary Get all key-value pairs as a plain object. If inside a [reactive
               * computation](#reactivity), invalidate the computation the next time the
               * value associated with any key is changed by
               * [`ReactiveDict.set`](#ReactiveDict-set).
               * This returns a clone of each value, so if it's an object or an array,
               * mutating the returned value has no effect on the value stored in the
               * ReactiveDict.
               * @locus Client
               */

              all() {
                this.allDeps.depend();
                let ret = {};
                Object.keys(this.keys).forEach(key => {
                  ret[key] = parse(this.keys[key]);
                });
                return ret;
              }
              /**
               * @summary remove all key-value pairs from the ReactiveDict. Notify any
               * listeners that the value has changed (eg: redraw templates, and rerun any
               * [`Tracker.autorun`](#tracker_autorun) computations, that called
               * [`ReactiveDict.get`](#ReactiveDict_get) on this `key`.)
               * @locus Client
               */

              clear() {
                const oldKeys = this.keys;
                this.keys = {};
                this.allDeps.changed();
                Object.keys(oldKeys).forEach(key => {
                  changed(this.keyDeps[key]);

                  if (this.keyValueDeps[key]) {
                    changed(this.keyValueDeps[key][oldKeys[key]]);
                    changed(this.keyValueDeps[key]['undefined']);
                  }
                });
              }
              /**
               * @summary remove a key-value pair from the ReactiveDict. Notify any listeners
               * that the value has changed (eg: redraw templates, and rerun any
               * [`Tracker.autorun`](#tracker_autorun) computations, that called
               * [`ReactiveDict.get`](#ReactiveDict_get) on this `key`.)
               * @locus Client
               * @param {String} key The key to delete, eg, `selectedItem`
               */

              delete(key) {
                let didRemove = false;

                if (hasOwn.call(this.keys, key)) {
                  const oldValue = this.keys[key];
                  delete this.keys[key];
                  changed(this.keyDeps[key]);

                  if (this.keyValueDeps[key]) {
                    changed(this.keyValueDeps[key][oldValue]);
                    changed(this.keyValueDeps[key]['undefined']);
                  }

                  this.allDeps.changed();
                  didRemove = true;
                }

                return didRemove;
              }
              /**
               * @summary Clear all values from the reactiveDict and prevent it from being
               * migrated on a Hot Code Pushes. Notify any listeners
               * that the value has changed (eg: redraw templates, and rerun any
               * [`Tracker.autorun`](#tracker_autorun) computations, that called
               * [`ReactiveDict.get`](#ReactiveDict_get) on this `key`.)
               * @locus Client
               */

              destroy() {
                this.clear();

                if (this.name && hasOwn.call(ReactiveDict._dictsToMigrate, this.name)) {
                  delete ReactiveDict._dictsToMigrate[this.name];
                }
              }

              _setObject(object) {
                Object.keys(object).forEach(key => {
                  this.set(key, object[key]);
                });
              }

              _setDefaultObject(object) {
                Object.keys(object).forEach(key => {
                  this.setDefault(key, object[key]);
                });
              }

              _ensureKey(key) {
                if (!(key in this.keyDeps)) {
                  this.keyDeps[key] = new Tracker.Dependency();
                  this.keyValueDeps[key] = {};
                }
              } // Get a JSON value that can be passed to the constructor to
              // create a new ReactiveDict with the same contents as this one


              _getMigrationData() {
                // XXX sanitize and make sure it's JSONible?
                return this.keys;
              }

            }
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/reactive-dict/migration.js");

  /* Exports */
  Package._define("reactive-dict", _exports2, {
    ReactiveDict: ReactiveDict
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var ReactiveDict = Package['reactive-dict'].ReactiveDict;
  var EJSON = Package.ejson.EJSON;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var Session;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "session": { "session.js": function module(_require, _exports, _module) {

            ///////////////////////////////////////////////////////////////////////
            //                                                                   //
            // packages/session/session.js                                       //
            //                                                                   //
            ///////////////////////////////////////////////////////////////////////
            //
            _module.export({
              Session: () => Session
            });
            let ReactiveDict;
            _module.link("meteor/reactive-dict", {
              ReactiveDict(v) {
                ReactiveDict = v;
              }

            }, 0);
            const Session = new ReactiveDict('session');
            ///////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/session/session.js");

  /* Exports */
  Package._define("session", _exports2, {
    Session: Session
  });
})();/* Imports for global scope */

Meteor = Package.meteor.Meteor;
global = Package.meteor.global;
meteorEnv = Package.meteor.meteorEnv;
WebApp = Package.webapp.WebApp;
Mongo = Package.mongo.Mongo;
ReactiveVar = Package['reactive-var'].ReactiveVar;
PersistentMinimongo2 = Package['hacknlove:persistent-minimongo2'].PersistentMinimongo2;
Accounts = Package['accounts-base'].Accounts;
CollectionHooks = Package['matb33:collection-hooks'].CollectionHooks;
Session = Package.session.Session;
meteorInstall = Package.modules.meteorInstall;
Promise = Package.promise.Promise;//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Accounts = Package['accounts-base'].Accounts;
  var Mongo = Package.mongo.Mongo;

  /* Package-scope variables */
  var ServiceConfiguration;

  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                    //
    // packages/service-configuration/service_configuration_common.js                     //
    //                                                                                    //
    ////////////////////////////////////////////////////////////////////////////////////////
    //
    if (typeof ServiceConfiguration === 'undefined') {
      ServiceConfiguration = {};
    }

    // Table containing documents with configuration options for each
    // login service
    ServiceConfiguration.configurations = new Mongo.Collection("meteor_accounts_loginServiceConfiguration", {
      _preventAutopublish: true,
      connection: Meteor.isClient ? Accounts.connection : Meteor.connection
    });
    // Leave this collection open in insecure mode. In theory, someone could
    // hijack your oauth connect requests to a different endpoint or appId,
    // but you did ask for 'insecure'. The advantage is that it is much
    // easier to write a configuration wizard that works only in insecure
    // mode.


    // Thrown when trying to use a login service which is not configured
    ServiceConfiguration.ConfigError = function (serviceName) {
      if (Meteor.isClient && !Accounts.loginServicesConfigured()) {
        this.message = "Login service configuration not yet loaded";
      } else if (serviceName) {
        this.message = "Service " + serviceName + " not configured";
      } else {
        this.message = "Service not configured";
      }
    };
    ServiceConfiguration.ConfigError.prototype = new Error();
    ServiceConfiguration.ConfigError.prototype.name = 'ServiceConfiguration.ConfigError';

    ////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("service-configuration", {
    ServiceConfiguration: ServiceConfiguration
  });
})();// Disable hot-code-push
if (Package.reload) {
  Package.reload.Reload._onMigrate(function () {
    return [false];
  });
}